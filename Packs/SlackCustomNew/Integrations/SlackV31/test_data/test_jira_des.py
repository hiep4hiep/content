import re

def gen_content_block(text, block_type):
    if block_type == "text":
        return {
                "type": "text",
                "text": text
            }
    elif block_type == "url":
        return {
                "type": "inlineCard",
                "attrs": {
                    "url": text
                }
            }
    else:
        return {}


text = """
XSIAM ID 1298961
https://reslifeaus.xdr.au.paloaltonetworks.com/incidents/alerts_and_insights?caseId=26793&action:openAlertDetails=1298961-caseinfoid
h4. Incident type
SEC010 - Windows - Brute Force Login Attempt - DESKTOP-E231BBT
h4. External ID (Splunk/XSIAM/etc)
1298961
h4. Link to incident at source
https://reslifeaus.xdr.au.paloaltonetworks.com/incidents/alerts_and_insights?caseId=26793&action:openAlertDetails=1298961-caseinfoid

h4. SEC010 - Windows - Brute Force Login Attempt - DESKTOP-E231BBT
'SEC010 - Windows - Brute Force Login Attempt' generated by Correlation detected on host desktop-e231bbt involving user -
Event count: 1
Original XSIAM timestamp: 2023-09-04T08:56:25Z
h4. Source Host Qualys Vulns
Host: DESKTOP-E231BBT
||QID||Severity||Title||CVEs||
|---|---|---|---|
|92053 | 4 | Microsoft Windows Defender Elevation of Privilege Vulnerability for August 2023 | CVE-2023-38175|

Additional Data:


h4. Indicators
||Type||No. Incidents with this||DBot Score||Indicator||
||Type|
|No. Incidents with this|
|DBot Score|
|Indicator|
||
|
| Account | 33 | Unknown | - |
|
|
| Host | 1 | Unknown | DESKTOP-E231BBT |
|
|
| IP | 10000 | Unknown | 10.249.12.140 |
|
|
| Host | 26 | Unknown | WLFCSSAZ1PADC02 |
"""

urls = re.findall("https://reslifeaus.xdr.au.paloaltonetworks.com/.*", text)
prep_text = re.sub("https://reslifeaus.xdr.au.paloaltonetworks.com/.*", "##################", text)
text_graphs = prep_text.split("##################")

content = []
for i, graph in enumerate(text_graphs):
    content.append(gen_content_block(graph, "text"))
    if i <= len(urls) - 1:
        content.append(gen_content_block(urls[i], "url"))

description = {
          "type": "doc",
          "version": 1,
          "content": [
            {
              "type": "paragraph",
              "content": content
            }
          ]
        }

print(description)


content = []

try:
    text = demisto.args().get('text')
    urls = re.findall("https://reslifeaus.xdr.au.paloaltonetworks.com/.*", text)
    prep_text = re.sub("https://reslifeaus.xdr.au.paloaltonetworks.com/.*", "##################", text)
    text_graphs = prep_text.split("##################")
    
    content = []
    
    if text_graphs and urls:
        for i, graph in enumerate(text_graphs):
            content.append(gen_content_block(graph, "text"))
            if i <= len(urls) - 1:
                content.append(gen_content_block(urls[i], "url"))
    else:
        content.append(gen_content_block(text, "text"))
except Exception as e:
    content.append(gen_content_block(text, "text"))