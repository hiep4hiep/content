/* -------------------------------------
   ---------- System mappings ----------
   ------------------------------------- */

/* --------------------------------- */

[MODEL: dataset=panw_ngfw_globalprotect_raw]
alter
    _empty_ip = "00000000000000000000ffff00000000"
| alter
    xdm.auth.auth_method = auth_method,
    xdm.event.description = event_id,
    xdm.event.duration = to_number(multiply(login_duration, 1000)),
    xdm.event.id = to_string(sequence_no),
    xdm.event.outcome = if(status="success", XDM_CONST.OUTCOME_SUCCESS, status="failure", XDM_CONST.OUTCOME_FAILED, XDM_CONST.OUTCOME_UNKNOWN),
    xdm.event.outcome_reason = connection_error,
    xdm.event.tags = arraycreate("VPN"),
    xdm.event.operation = stage,
    xdm.event.original_event_type = "globalprotect",
    xdm.network.vpn.allocated_ipv4 = if(private_ip != _empty_ip, private_ip),
    xdm.network.vpn.allocated_ipv6 = if (private_ipv6 != _empty_ip, private_ipv6),
    xdm.observer.name = log_source_name,
    xdm.observer.type = log_source,
    xdm.observer.unique_identifier = log_source_id,
    xdm.source.application.version = to_string(endpoint_gp_version),
    xdm.source.host.device_id = host_id,
    xdm.source.host.hardware_uuid = host_id,
    xdm.source.host.mac_addresses = if(host_id contains ":", arraycreate(host_id)),
    xdm.source.host.hostname = endpoint_device_name,
    xdm.source.host.os = endpoint_os_version,
    xdm.source.host.os_family = if(endpoint_os_type="Windows", XDM_CONST.OS_FAMILY_WINDOWS , endpoint_os_type in ("macOS", "Mac"), XDM_CONST.OS_FAMILY_MACOS, endpoint_os_type="Linux", XDM_CONST.OS_FAMILY_LINUX, uppercase(endpoint_os_version)),
    xdm.source.ipv4 = if(public_ip != _empty_ip, public_ip),
    xdm.source.ipv6 = if(public_ipv6 != _empty_ip, public_ipv6),
    xdm.source.location.country = if(len(source_region)=2, source_region),
    xdm.source.user.domain = source_user_info_domain,
    xdm.source.user.username = source_user,
    xdm.target.application.name = "GlobalProtect",
    xdm.target.host.hostname = gateway;
/* --------------------------------- */

[MODEL: dataset=panw_ngfw_hipmatch_raw]
alter
    _os_family = arrayindex(split(endpoint_os_type), 0),
    _host_mac_address = if(host_id = null, source_device_mac, if(host_id contains ":", host_id))
| alter
    xdm.event.id = to_string(sequence_no),
    xdm.event.original_event_type = "hipmatch",
    xdm.target.application.name = sub_type,
    xdm.event.type = hip_match_name,
    xdm.observer.name = log_source_name,
    xdm.observer.type = log_source,
    xdm.observer.unique_identifier = log_source_id,
    xdm.source.application.version = config_version,
    xdm.source.host.device_id = coalesce(host_id, source_device_mac),
    xdm.source.host.hostname = endpoint_device_name,
    xdm.source.host.mac_addresses = if(_host_mac_address != null, arraycreate(_host_mac_address)),
    xdm.source.host.os = endpoint_os_type,
    xdm.source.host.os_family = if(_os_family="windows", XDM_CONST.OS_FAMILY_WINDOWS , _os_family in ("macos", "mac"), XDM_CONST.OS_FAMILY_MACOS, _os_family in ("ios", "iOS"), XDM_CONST.OS_FAMILY_IOS, _os_family="chromeos", XDM_CONST.OS_FAMILY_CHROMEOS, _os_family="linux", XDM_CONST.OS_FAMILY_LINUX, _os_family="android", XDM_CONST.OS_FAMILY_ANDROID, _os_family),
    xdm.source.host.hardware_uuid = endpoint_serial_number,
    xdm.source.ipv4 = source_ip,
    xdm.source.ipv6 = if(source_ip_v6 contains ":", source_ip_v6),
    xdm.source.user.domain = source_user_info_domain,
    xdm.source.user.username = source_user_info_name;
/* --------------------------------- */

[RULE: ngfw_standalone]
alter
    _empty_ip = "00000000000000000000ffff00000000",
    _is_nat = to_boolean(is_nat),
    _is_proxy = to_boolean(is_proxy),
    _source_port = to_integer(source_port),
    _dest_port = to_integer(dest_port),
    _is_dest_ipv6 = if(dest_ip contains ":"),
    _is_source_ipv6 = if(source_ip contains ":"),
    _session_id = to_string(session_id)
| alter
    xdm.event.id = _session_id,
    xdm.event.operation_sub_type = sub_type,
    xdm.event.type = log_type,
    xdm.intermediate.ipv4 = if(_is_proxy = True and _is_dest_ipv6 = False and dest_ip != _empty_ip, dest_ip),
    xdm.intermediate.ipv6 = if(_is_proxy = True and _is_dest_ipv6 = True, dest_ip),
    xdm.intermediate.is_nat = _is_nat,
    xdm.intermediate.is_proxy = _is_proxy,
    xdm.intermediate.port = if(_is_proxy = True, _dest_port),
    xdm.network.application_protocol = app,
    xdm.network.application_protocol_category = app_category,
    xdm.network.application_protocol_subcategory = app_sub_category,
    xdm.network.ip_protocol = if(protocol="icmp", XDM_CONST.IP_PROTOCOL_ICMP, protocol="tcp", XDM_CONST.IP_PROTOCOL_TCP, protocol="udp", XDM_CONST.IP_PROTOCOL_UDP, protocol),
    xdm.network.rule = rule_matched,
    xdm.observer.action = action,
    xdm.observer.name = log_source_name,
    xdm.observer.type = log_source,
    xdm.observer.unique_identifier = log_source_id,
    xdm.session_context_id = _session_id,
    xdm.source.host.hostname = if(source_device_host not contains ":", source_device_host),
    xdm.source.host.device_category = source_device_category,
    xdm.source.host.device_id = source_device_mac,
    xdm.source.host.device_model = source_device_model,
    xdm.source.host.mac_addresses = if(source_device_mac != null, arraycreate(source_device_mac)),
    xdm.source.host.manufacturer = source_device_vendor,
    xdm.source.host.os_family = if(source_device_osfamily="Windows", XDM_CONST.OS_FAMILY_WINDOWS , source_device_osfamily in ("MacOS", "Mac"), XDM_CONST.OS_FAMILY_MACOS, source_device_osfamily in ("ios", "iOS"), XDM_CONST.OS_FAMILY_IOS, source_device_osfamily="Chromeos", XDM_CONST.OS_FAMILY_CHROMEOS, source_device_osfamily="Linux", XDM_CONST.OS_FAMILY_LINUX, source_device_osfamily="Android", XDM_CONST.OS_FAMILY_ANDROID, source_device_osfamily),
    xdm.source.ipv4 = if(_is_source_ipv6 = False and source_ip != _empty_ip, source_ip),
    xdm.source.ipv6 = if(_is_source_ipv6 = True, source_ip),
    xdm.source.port = _source_port,
    xdm.source.user.username = source_user,
    xdm.source.zone = from_zone,
    xdm.target.host.hostname = if(dest_device_host not contains ":", dest_device_host),
    xdm.target.host.device_category = dest_device_category,
    xdm.target.host.device_id = dest_device_mac,
    xdm.target.host.device_model = dest_device_model,
    xdm.target.host.mac_addresses = if(dest_device_mac != null, arraycreate(dest_device_mac)),
    xdm.target.host.manufacturer = dest_device_vendor,
    xdm.target.host.os_family = if(dest_device_osfamily="Windows", XDM_CONST.OS_FAMILY_WINDOWS , dest_device_osfamily in ("MacOS", "Mac"), XDM_CONST.OS_FAMILY_MACOS, dest_device_osfamily in ("ios", "iOS"), XDM_CONST.OS_FAMILY_IOS, dest_device_osfamily="Chromeos", XDM_CONST.OS_FAMILY_CHROMEOS, dest_device_osfamily="Linux", XDM_CONST.OS_FAMILY_LINUX, dest_device_osfamily="Android", XDM_CONST.OS_FAMILY_ANDROID, dest_device_osfamily),
    xdm.target.ipv4 = if(_is_dest_ipv6 = False and dest_ip != _empty_ip, dest_ip),
    xdm.target.ipv6 = if(_is_dest_ipv6 = True, dest_ip),
    xdm.target.port = _dest_port,
    xdm.target.user.username = dest_user,
    xdm.target.zone = to_zone;
[RULE: url_threat_common_fields]
alter
    xdm.network.http.method = if(http_method = "get", XDM_CONST.HTTP_METHOD_GET, http_method = "post", XDM_CONST.HTTP_METHOD_POST, http_method = "connect", XDM_CONST.HTTP_METHOD_CONNECT, http_method = "head", XDM_CONST.HTTP_METHOD_HEAD, http_method = "put", XDM_CONST.HTTP_METHOD_PUT, http_method = "delete", XDM_CONST.HTTP_METHOD_DELETE, http_method = "options", XDM_CONST.HTTP_METHOD_OPTIONS, http_method);
[MODEL:dataset="panw_ngfw_traffic_raw"]
call ngfw_standalone
| alter
    _bytes_sent = to_integer(bytes_sent),
    _packets_sent = to_integer(packets_sent),
    _bytes_received = to_integer(bytes_received),
    _packets_received = to_integer(packets_received),
    _total_time_elapsed = to_integer(multiply(total_time_elapsed, 1000))
| alter
    xdm.source.sent_bytes = _bytes_sent,
    xdm.source.sent_packets = _packets_sent,
    xdm.target.sent_bytes = _bytes_received,
    xdm.target.sent_packets = _packets_received,
    xdm.event.original_event_type = "traffic",
    xdm.event.outcome = if(sub_type in ("drop", "deny"), XDM_CONST.OUTCOME_FAILED),
    xdm.event.duration = _total_time_elapsed;
[MODEL:dataset="panw_ngfw_filedata_raw"]
call ngfw_standalone
| alter
    xdm.alert.severity = vendor_severity,
    xdm.event.original_event_type = "file_data",
    xdm.network.http.url_category = url_category,
    xdm.observer.content_version = content_version,
    xdm.source.host.hardware_uuid = source_uuid,
    xdm.source.host.os = source_device_os,
    xdm.source.process.container_id = container_id,
    xdm.target.file.file_type = file_type,
    xdm.target.file.filename = file_name,
    xdm.target.file.extension = if(file_name contains ".", arrayindex(split(file_name, "."), -1)),
    xdm.target.file.path = file_url,
    xdm.target.file.sha256 = file_sha_256,
    xdm.target.host.hardware_uuid = dest_uuid,
    xdm.target.host.os = dest_device_os;
[MODEL:dataset="panw_ngfw_threat_raw"]
call ngfw_standalone
| call url_threat_common_fields
| alter
    xdm.event.original_event_type = "threat",
    //xdm.network.http.url_category = url_category,
    xdm.network.http.url = if(file_sha_256 = null, file_name),
    xdm.source.host.fqdn = url_domain,
    xdm.target.file.filename = if(file_sha_256 != null, file_name),
    xdm.target.file.file_type = file_type,
    xdm.target.file.sha256 = file_sha_256;
[MODEL:dataset="panw_ngfw_url_raw"]
call ngfw_standalone
| call url_threat_common_fields
| alter
    xdm.event.original_event_type = "url",
    xdm.network.http.url = uri,
    xdm.network.http.url_category = url_category,
    xdm.network.http.content_type = content_type,
    xdm.source.user_agent = user_agent,
    xdm.network.http.referrer = referer,
    xdm.network.http.domain = url_domain;
/* --------------------------------- */

[MODEL: dataset=xdr_data]
// Story mappings
filter
    event_type in (ENUM.STORY, ENUM.VPN_EVENT)
| alter
    is_auth_story = if(event_type=ENUM.STORY and dfe_labels contains "authentication"),
    is_network_story = if(event_type=ENUM.STORY),
    is_vpn_story = if(event_type=ENUM.VPN_EVENT),
    dns_resolutions = arrayindex(dns_resolutions, 0)
| alter
    action_rpc_items = arrayindex(action_rpc_items, 0),
    agent_interface_map = to_json_string(agent_interface_map)->[],
    backtrace_identities = arrayindex(backtrace_identities, 0),
    dst_action_external_hostname_as_ip = if(ip_to_int(dst_action_external_hostname) != null, dst_action_external_hostname),
    dst_agent_interface_map = to_json_string(dst_agent_interface_map)->[],
    file_data = arrayindex(file_data, 0),
    is_kerberos_story = if(krb_tgt_data != null or krb_tgs_data != null),
    is_ntlm_story = if(ntlm_auth_data != null),
    krb_error_code = coalesce(krb_tgs_data->error_code, krb_tgt_data->error_code),
    krb_req_kdc_options = coalesce(krb_tgs_data->req_kdc_options, krb_tgt_data->req_kdc_options),
    krb_req_msg_type =coalesce(krb_tgs_data->req_msg_type, krb_tgt_data->req_msg_type),
    krb_rsp_ticket_enc_type = coalesce(krb_tgs_data->rsp_ticket_enc_type, krb_tgt_data->rsp_ticket_enc_type, to_integer(action_evtlog_data_fields->TicketEncryptionType)),
    krb_spn_type = coalesce(krb_tgs_data->spn_type, krb_tgt_data->spn_type),
    krb_tgt_preauth_type = krb_tgt_data->preauth_type,
    krb_user_type = coalesce(krb_tgs_data->user_type, krb_tgt_data->user_type),
    ldap_operation = ldap_data->operation,
    ldap_scope = ldap_data->scope,
    resource_record_type = dns_resolutions->type,
    ssl_data = arrayindex(ssl_data, 0)
| alter
    _insert_time = to_timestamp(story_publish_timestamp, "MILLIS"),
    xdm.alert.original_alert_id = if(is_network_story=True, arrayindex(action_threat_ids, 0)),
    xdm.alert.severity = if(is_network_story=True, file_data->severity),
    xdm.auth.auth_method = if(is_vpn_story=True or is_auth_story= True, auth_method),
    xdm.auth.is_mfa_needed = if(is_auth_story=True, auth_mfa_needed),
    xdm.auth.kerberos_tgt.cname_type = if(is_auth_story=True, if(krb_user_type=0, XDM_CONST.KERBEROS_PRINCIPAL_TYPE_UNKNOWN, krb_user_type=1, XDM_CONST.KERBEROS_PRINCIPAL_TYPE_PRINCIPAL, krb_user_type=2, XDM_CONST.KERBEROS_PRINCIPAL_TYPE_SRV_INST, krb_user_type=3, XDM_CONST.KERBEROS_PRINCIPAL_TYPE_SRV_HST, krb_user_type=4, XDM_CONST.KERBEROS_PRINCIPAL_TYPE_SRV_XHST, krb_user_type=5, XDM_CONST.KERBEROS_PRINCIPAL_TYPE_UID, krb_user_type=6, XDM_CONST.KERBEROS_PRINCIPAL_TYPE_X500_PRINCIPAL, krb_user_type=7, XDM_CONST.KERBEROS_PRINCIPAL_TYPE_SMTP_NAME, krb_user_type=10, XDM_CONST.KERBEROS_PRINCIPAL_TYPE_ENTERPRISE, to_string(krb_user_type))),
    xdm.auth.kerberos_tgt.cname_values = if(is_auth_story=True, coalesce(krb_tgs_data->cname_values[], krb_tgt_data->cname_values[])),
    xdm.auth.kerberos_tgt.encryption_type = if(krb_rsp_ticket_enc_type=1, XDM_CONST.KERBEROS_ENCRYPTION_TYPE_DES_CBC_CRC, krb_rsp_ticket_enc_type=2, XDM_CONST.KERBEROS_ENCRYPTION_TYPE_DES_CBC_MD4, krb_rsp_ticket_enc_type=3, XDM_CONST.KERBEROS_ENCRYPTION_TYPE_DES_CBC_MD5, krb_rsp_ticket_enc_type=4, XDM_CONST.KERBEROS_ENCRYPTION_TYPE_DES_CBC_RAW, krb_rsp_ticket_enc_type=5, XDM_CONST.KERBEROS_ENCRYPTION_TYPE_DES3_CBC_MD5, krb_rsp_ticket_enc_type=6, XDM_CONST.KERBEROS_ENCRYPTION_TYPE_DES3_CBC_RAW, krb_rsp_ticket_enc_type=7, XDM_CONST.KERBEROS_ENCRYPTION_TYPE_DES3_CBC_SHA1, krb_rsp_ticket_enc_type=8, XDM_CONST.KERBEROS_ENCRYPTION_TYPE_DES_HMAC_SHA1, krb_rsp_ticket_enc_type=9, XDM_CONST.KERBEROS_ENCRYPTION_TYPE_DSAWITHSHA1_CMSOID, krb_rsp_ticket_enc_type=10, XDM_CONST.KERBEROS_ENCRYPTION_TYPE_MD5WITHRSAENCRYPTION_CMSOID, krb_rsp_ticket_enc_type=11, XDM_CONST.KERBEROS_ENCRYPTION_TYPE_SHA1WITHRSAENCRYPTION_CMSOID, krb_rsp_ticket_enc_type=12, XDM_CONST.KERBEROS_ENCRYPTION_TYPE_RC2CBC_ENVOID, krb_rsp_ticket_enc_type=13, XDM_CONST.KERBEROS_ENCRYPTION_TYPE_RSAENCRYPTION_ENVOID, krb_rsp_ticket_enc_type=14, XDM_CONST.KERBEROS_ENCRYPTION_TYPE_RSAES_OAEP_ENV_OID, krb_rsp_ticket_enc_type=15, XDM_CONST.KERBEROS_ENCRYPTION_TYPE_DES_EDE3_CBC_ENV_OID, krb_rsp_ticket_enc_type=16, XDM_CONST.KERBEROS_ENCRYPTION_TYPE_DES3_CBC_SHA1_KD, krb_rsp_ticket_enc_type=17, XDM_CONST.KERBEROS_ENCRYPTION_TYPE_AES128_CTS_HMAC_SHA1_96, krb_rsp_ticket_enc_type=18, XDM_CONST.KERBEROS_ENCRYPTION_TYPE_AES256_CTS_HMAC_SHA1_96, krb_rsp_ticket_enc_type=19, XDM_CONST.KERBEROS_ENCRYPTION_TYPE_AES128_CTS_HMAC_SHA256_128, krb_rsp_ticket_enc_type=20, XDM_CONST.KERBEROS_ENCRYPTION_TYPE_AES256_CTS_HMAC_SHA384_192, krb_rsp_ticket_enc_type=23, XDM_CONST.KERBEROS_ENCRYPTION_TYPE_RC4_HMAC, krb_rsp_ticket_enc_type=24, XDM_CONST.KERBEROS_ENCRYPTION_TYPE_RC4_HMAC_EXP, krb_rsp_ticket_enc_type=25, XDM_CONST.KERBEROS_ENCRYPTION_TYPE_CAMELLIA128_CTS_CMAC, krb_rsp_ticket_enc_type=26, XDM_CONST.KERBEROS_ENCRYPTION_TYPE_CAMELLIA256_CTS_CMAC, krb_rsp_ticket_enc_type=65, XDM_CONST.KERBEROS_ENCRYPTION_TYPE_SUBKEY_KEYMATERIAL, to_string(krb_rsp_ticket_enc_type)),
    xdm.auth.kerberos_tgt.error_code = if(krb_error_code=0, XDM_CONST.KERBEROS_ERROR_CODE_ERR_KDC_NONE, krb_error_code=1, XDM_CONST.KERBEROS_ERROR_CODE_ERR_KDC_NAME_EXP, krb_error_code=2, XDM_CONST.KERBEROS_ERROR_CODE_ERR_KDC_SERVICE_EXP, krb_error_code=3, XDM_CONST.KERBEROS_ERROR_CODE_ERR_KDC_BAD_PVNO, krb_error_code=4, XDM_CONST.KERBEROS_ERROR_CODE_ERR_KDC_C_OLD_MAST_KVNO, krb_error_code=5, XDM_CONST.KERBEROS_ERROR_CODE_ERR_KDC_S_OLD_MAST_KVNO, krb_error_code=6, XDM_CONST.KERBEROS_ERROR_CODE_ERR_KDC_C_PRINCIPAL_UNKNOWN, krb_error_code=7, XDM_CONST.KERBEROS_ERROR_CODE_ERR_KDC_S_PRINCIPAL_UNKNOWN, krb_error_code=8, XDM_CONST.KERBEROS_ERROR_CODE_ERR_KDC_PRINCIPAL_NOT_UNIQUE, krb_error_code=9, XDM_CONST.KERBEROS_ERROR_CODE_ERR_KDC_NULL_KEY, krb_error_code=10, XDM_CONST.KERBEROS_ERROR_CODE_ERR_KDC_CANNOT_POSTDATE, krb_error_code=11, XDM_CONST.KERBEROS_ERROR_CODE_ERR_KDC_NEVER_VALID, krb_error_code=12, XDM_CONST.KERBEROS_ERROR_CODE_ERR_KDC_POLICY, krb_error_code=13, XDM_CONST.KERBEROS_ERROR_CODE_ERR_KDC_BADOPTION, krb_error_code=14, XDM_CONST.KERBEROS_ERROR_CODE_ERR_KDC_ETYPE_NOSUPP, krb_error_code=15, XDM_CONST.KERBEROS_ERROR_CODE_ERR_KDC_SUMTYPE_NOSUPP, krb_error_code=16, XDM_CONST.KERBEROS_ERROR_CODE_ERR_KDC_PADATA_TYPE_NOSUPP, krb_error_code=17, XDM_CONST.KERBEROS_ERROR_CODE_ERR_KDC_TRTYPE_NOSUPP, krb_error_code=18, XDM_CONST.KERBEROS_ERROR_CODE_ERR_KDC_CLIENT_REVOKED, krb_error_code=19, XDM_CONST.KERBEROS_ERROR_CODE_ERR_KDC_SERVICE_REVOKED, krb_error_code=20, XDM_CONST.KERBEROS_ERROR_CODE_ERR_KDC_TGT_REVOKED, krb_error_code=21, XDM_CONST.KERBEROS_ERROR_CODE_ERR_KDC_CLIENT_NOTYET, krb_error_code=22, XDM_CONST.KERBEROS_ERROR_CODE_ERR_KDC_SERVICE_NOTYET, krb_error_code=23, XDM_CONST.KERBEROS_ERROR_CODE_ERR_KDC_KEY_EXPIRED, krb_error_code=24, XDM_CONST.KERBEROS_ERROR_CODE_ERR_KDC_PREAUTH_FAILED, krb_error_code=25, XDM_CONST.KERBEROS_ERROR_CODE_ERR_KDC_PREAUTH_REQUIRED, krb_error_code=26, XDM_CONST.KERBEROS_ERROR_CODE_ERR_KDC_SERVER_NOMATCH, krb_error_code=27, XDM_CONST.KERBEROS_ERROR_CODE_ERR_KDC_MUST_USE_USER2USER, krb_error_code=28, XDM_CONST.KERBEROS_ERROR_CODE_ERR_KDC_PATH_NOT_ACCEPTED, krb_error_code=29, XDM_CONST.KERBEROS_ERROR_CODE_ERR_KDC_SVC_UNAVAILABLE, krb_error_code=31, XDM_CONST.KERBEROS_ERROR_CODE_ERR_AP_BAD_INTEGRITY, krb_error_code=32, XDM_CONST.KERBEROS_ERROR_CODE_ERR_AP_TKT_EXPIRED, krb_error_code=33, XDM_CONST.KERBEROS_ERROR_CODE_ERR_AP_TKT_NYV, krb_error_code=34, XDM_CONST.KERBEROS_ERROR_CODE_ERR_AP_REPEAT, krb_error_code=35, XDM_CONST.KERBEROS_ERROR_CODE_ERR_AP_NOT_US, krb_error_code=36, XDM_CONST.KERBEROS_ERROR_CODE_ERR_AP_BADMATCH, krb_error_code=37, XDM_CONST.KERBEROS_ERROR_CODE_ERR_AP_SKEW, krb_error_code=38, XDM_CONST.KERBEROS_ERROR_CODE_ERR_AP_BADADDR, krb_error_code=39, XDM_CONST.KERBEROS_ERROR_CODE_ERR_AP_BADVERSION, krb_error_code=40, XDM_CONST.KERBEROS_ERROR_CODE_ERR_AP_MSG_TYPE, krb_error_code=41, XDM_CONST.KERBEROS_ERROR_CODE_ERR_AP_MODIFIED, krb_error_code=42, XDM_CONST.KERBEROS_ERROR_CODE_ERR_AP_BADORDER, krb_error_code=44, XDM_CONST.KERBEROS_ERROR_CODE_ERR_AP_BADKEYVER, krb_error_code=45, XDM_CONST.KERBEROS_ERROR_CODE_ERR_AP_NOKEY, krb_error_code=46, XDM_CONST.KERBEROS_ERROR_CODE_ERR_AP_MUT_FAIL, krb_error_code=47, XDM_CONST.KERBEROS_ERROR_CODE_ERR_AP_BADDIRECTION, krb_error_code=48, XDM_CONST.KERBEROS_ERROR_CODE_ERR_AP_METHOD, krb_error_code=49, XDM_CONST.KERBEROS_ERROR_CODE_ERR_AP_BADSEQ, krb_error_code=50, XDM_CONST.KERBEROS_ERROR_CODE_ERR_AP_INAPP_CKSUM, krb_error_code=51, XDM_CONST.KERBEROS_ERROR_CODE_ERR_AP_PATH_NOT_ACCEPTED, krb_error_code=52, XDM_CONST.KERBEROS_ERROR_CODE_ERR_KDC_RESPONSE_TOO_BIG, krb_error_code=60, XDM_CONST.KERBEROS_ERROR_CODE_ERR_GENERIC, krb_error_code=61, XDM_CONST.KERBEROS_ERROR_CODE_ERR_FIELD_TOOLONG, krb_error_code=62, XDM_CONST.KERBEROS_ERROR_CODE_ERR_KDC__CLIENT_NOT_TRUSTED, krb_error_code=63, XDM_CONST.KERBEROS_ERROR_CODE_ERR_KDC__KDC_NOT_TRUSTED, krb_error_code=64, XDM_CONST.KERBEROS_ERROR_CODE_ERR_KDC__INVALID_SIG, krb_error_code=65, XDM_CONST.KERBEROS_ERROR_CODE_ERR_KDC_KEY_TOO_WEAK, krb_error_code=66, XDM_CONST.KERBEROS_ERROR_CODE_ERR_KDC_CERTIFICATE_MISMATCH, krb_error_code=67, XDM_CONST.KERBEROS_ERROR_CODE_ERR_AP_NO_TGT, krb_error_code=68, XDM_CONST.KERBEROS_ERROR_CODE_ERR_KDC_WRONG_REALM, krb_error_code=69, XDM_CONST.KERBEROS_ERROR_CODE_ERR_AP_USER_TO_USER_REQUIRED, krb_error_code=70, XDM_CONST.KERBEROS_ERROR_CODE_ERR_KDC_CANT_VERIFY_CERTIFICATE, krb_error_code=71, XDM_CONST.KERBEROS_ERROR_CODE_ERR_KDC_INVALID_CERTIFICATE, krb_error_code=72, XDM_CONST.KERBEROS_ERROR_CODE_ERR_KDC_REVOKED_CERTIFICATE, krb_error_code=73, XDM_CONST.KERBEROS_ERROR_CODE_ERR_KDC_REVOCATION_STATUS_UNKNOWN, krb_error_code=74, XDM_CONST.KERBEROS_ERROR_CODE_ERR_KDC_REVOCATION_STATUS_UNAVAILABLE, krb_error_code=75, XDM_CONST.KERBEROS_ERROR_CODE_ERR_KDC_CLIENT_NAME_MISMATCH, krb_error_code=76, XDM_CONST.KERBEROS_ERROR_CODE_ERR_KDC_KDC_NAME_MISMATCH, to_string(krb_error_code)),
    xdm.auth.kerberos_tgt.kdc_options = if(is_auth_story=True, if(krb_req_kdc_options=0, XDM_CONST.KERBEROS_KDC_OPTION_RESERVED, krb_req_kdc_options=1, XDM_CONST.KERBEROS_KDC_OPTION_FORWARDABLE, krb_req_kdc_options=2, XDM_CONST.KERBEROS_KDC_OPTION_FORWARDED, krb_req_kdc_options=3, XDM_CONST.KERBEROS_KDC_OPTION_PROXIABLE, krb_req_kdc_options=4, XDM_CONST.KERBEROS_KDC_OPTION_PROXY, krb_req_kdc_options=5, XDM_CONST.KERBEROS_KDC_OPTION_ALLOW_POST_DATE, krb_req_kdc_options=6, XDM_CONST.KERBEROS_KDC_OPTION_POST_DATED, krb_req_kdc_options=7, XDM_CONST.KERBEROS_KDC_OPTION_INVALID, krb_req_kdc_options=8, XDM_CONST.KERBEROS_KDC_OPTION_RENEWABLE, krb_req_kdc_options=9, XDM_CONST.KERBEROS_KDC_OPTION_INITIAL, krb_req_kdc_options=10, XDM_CONST.KERBEROS_KDC_OPTION_PRE_AUTHENT, krb_req_kdc_options=11, XDM_CONST.KERBEROS_KDC_OPTION_HW_AUTHENT, krb_req_kdc_options=12, XDM_CONST.KERBEROS_KDC_OPTION_REQUEST_ANONYMOUS, krb_req_kdc_options=13, XDM_CONST.KERBEROS_KDC_OPTION_OK_AS_DELEGATE, krb_req_kdc_options=15, XDM_CONST.KERBEROS_KDC_OPTION_CANONICALIZE, krb_req_kdc_options=26, XDM_CONST.KERBEROS_KDC_OPTION_DISABLE_TRANSITED_CHECK, krb_req_kdc_options=27, XDM_CONST.KERBEROS_KDC_OPTION_RENEWABLE_OK, krb_req_kdc_options=28, XDM_CONST.KERBEROS_KDC_OPTION_ENC_TKT_IN_SKEY, krb_req_kdc_options=30, XDM_CONST.KERBEROS_KDC_OPTION_RENEW, krb_req_kdc_options=31, XDM_CONST.KERBEROS_KDC_OPTION_VALIDATE, to_string(krb_req_kdc_options))),
    xdm.auth.kerberos_tgt.msg_type = if(is_auth_story=True, if(krb_req_msg_type=10, XDM_CONST.KERBEROS_MSG_TYPE_AS_REQ, krb_req_msg_type=11, XDM_CONST.KERBEROS_MSG_TYPE_AS_REP, krb_req_msg_type=12, XDM_CONST.KERBEROS_MSG_TYPE_TGS_REQ, krb_req_msg_type=13, XDM_CONST.KERBEROS_MSG_TYPE_TGS_REP, krb_req_msg_type=14, XDM_CONST.KERBEROS_MSG_TYPE_AP_REQ, krb_req_msg_type=15, XDM_CONST.KERBEROS_MSG_TYPE_AP_REP, krb_req_msg_type=16, XDM_CONST.KERBEROS_MSG_TYPE_RESERVED16, krb_req_msg_type=17, XDM_CONST.KERBEROS_MSG_TYPE_RESERVED17, krb_req_msg_type=20, XDM_CONST.KERBEROS_MSG_TYPE_SAFE, krb_req_msg_type=21, XDM_CONST.KERBEROS_MSG_TYPE_PRIV, krb_req_msg_type=22, XDM_CONST.KERBEROS_MSG_TYPE_CRED, krb_req_msg_type=30, XDM_CONST.KERBEROS_MSG_TYPE_ERROR, to_string(krb_req_msg_type))),
    xdm.auth.kerberos_tgt.padata_prefix = if(is_auth_story=True, coalesce(krb_tgs_data->req_padata_prefix, krb_tgt_data->req_padata_prefix)),
    xdm.auth.kerberos_tgt.padata_type = if(is_auth_story=True, if(krb_tgt_preauth_type != null, if(krb_tgt_preauth_type=1, XDM_CONST.KERBEROS_PA_TYPE_TGS_REQ, krb_tgt_preauth_type=2, XDM_CONST.KERBEROS_PA_TYPE_ENC_TIMESTAMP, krb_tgt_preauth_type=3, XDM_CONST.KERBEROS_PA_TYPE_PW_SALT, krb_tgt_preauth_type=5, XDM_CONST.KERBEROS_PA_TYPE_ENC_UNIX_TIME, krb_tgt_preauth_type=6, XDM_CONST.KERBEROS_PA_TYPE_SANDIA_SECUREID, krb_tgt_preauth_type=7, XDM_CONST.KERBEROS_PA_TYPE_SESAME, krb_tgt_preauth_type=8, XDM_CONST.KERBEROS_PA_TYPE_OSF_DCE, krb_tgt_preauth_type=9, XDM_CONST.KERBEROS_PA_TYPE_CYBERSAFE_SECUREID, krb_tgt_preauth_type=10, XDM_CONST.KERBEROS_PA_TYPE_AFS3_SALT, krb_tgt_preauth_type=11, XDM_CONST.KERBEROS_PA_TYPE_ETYPE_INFO, krb_tgt_preauth_type=12, XDM_CONST.KERBEROS_PA_TYPE_SAM_CHALLENGE, krb_tgt_preauth_type=13, XDM_CONST.KERBEROS_PA_TYPE_SAM_RESPONSE, krb_tgt_preauth_type=14, XDM_CONST.KERBEROS_PA_TYPE_PK_AS_REQ_OLD, krb_tgt_preauth_type=15, XDM_CONST.KERBEROS_PA_TYPE_PK_AS_REP_OLD, krb_tgt_preauth_type=16, XDM_CONST.KERBEROS_PA_TYPE_PK_AS_REQ, krb_tgt_preauth_type=17, XDM_CONST.KERBEROS_PA_TYPE_PK_AS_REP, krb_tgt_preauth_type=18, XDM_CONST.KERBEROS_PA_TYPE_PK_OCSP_RESPONSE, krb_tgt_preauth_type=19, XDM_CONST.KERBEROS_PA_TYPE_ETYPE_INFO2, krb_tgt_preauth_type=20, XDM_CONST.KERBEROS_PA_TYPE_USE_SPECIFIED_KVNO, krb_tgt_preauth_type=21, XDM_CONST.KERBEROS_PA_TYPE_SAM_REDIRECT, krb_tgt_preauth_type=22, XDM_CONST.KERBEROS_PA_TYPE_GET_FROM_TYPED_DATA, krb_tgt_preauth_type=23, XDM_CONST.KERBEROS_PA_TYPE_SAM_ETYPE_INFO, krb_tgt_preauth_type=24, XDM_CONST.KERBEROS_PA_TYPE_ALT_PRINC, krb_tgt_preauth_type=25, XDM_CONST.KERBEROS_PA_TYPE_SERVER_REFERRAL, krb_tgt_preauth_type=30, XDM_CONST.KERBEROS_PA_TYPE_SAM_CHALLENGE2, krb_tgt_preauth_type=31, XDM_CONST.KERBEROS_PA_TYPE_SAM_RESPONSE2, krb_tgt_preauth_type=41, XDM_CONST.KERBEROS_PA_TYPE_EXTRA_TGT, krb_tgt_preauth_type=101, XDM_CONST.KERBEROS_PA_TYPE_TD_PKINIT_CMS_CERTIFICATES, krb_tgt_preauth_type=102, XDM_CONST.KERBEROS_PA_TYPE_TD_KRB_PRINCIPAL, krb_tgt_preauth_type=103, XDM_CONST.KERBEROS_PA_TYPE_TD_KRB_REALM, krb_tgt_preauth_type=104, XDM_CONST.KERBEROS_PA_TYPE_TD_TRUSTED_CERTIFIERS, krb_tgt_preauth_type=105, XDM_CONST.KERBEROS_PA_TYPE_TD_CERTIFICATE_INDEX, krb_tgt_preauth_type=106, XDM_CONST.KERBEROS_PA_TYPE_TD_APP_DEFINED_ERROR, krb_tgt_preauth_type=107, XDM_CONST.KERBEROS_PA_TYPE_TD_REQ_NONCE, krb_tgt_preauth_type=108, XDM_CONST.KERBEROS_PA_TYPE_TD_REQ_SEQ, krb_tgt_preauth_type=109, XDM_CONST.KERBEROS_PA_TYPE_TD_DH_PARAMETERS, krb_tgt_preauth_type=111, XDM_CONST.KERBEROS_PA_TYPE_TD_CMS_DIGEST_ALGORITHMS, krb_tgt_preauth_type=112, XDM_CONST.KERBEROS_PA_TYPE_TD_CERT_DIGEST_ALGORITHMS, krb_tgt_preauth_type=128, XDM_CONST.KERBEROS_PA_TYPE_PAC_REQUEST, krb_tgt_preauth_type=129, XDM_CONST.KERBEROS_PA_TYPE_FOR_USER, krb_tgt_preauth_type=130, XDM_CONST.KERBEROS_PA_TYPE_FOR_X509_USER, krb_tgt_preauth_type=131, XDM_CONST.KERBEROS_PA_TYPE_FOR_CHECK_DUPS, krb_tgt_preauth_type=132, XDM_CONST.KERBEROS_PA_TYPE_AS_CHECKSUM, krb_tgt_preauth_type=133, XDM_CONST.KERBEROS_PA_TYPE_FX_COOKIE, krb_tgt_preauth_type=134, XDM_CONST.KERBEROS_PA_TYPE_AUTHENTICATION_SET, krb_tgt_preauth_type=135, XDM_CONST.KERBEROS_PA_TYPE_AUTH_SET_SELECTED, krb_tgt_preauth_type=136, XDM_CONST.KERBEROS_PA_TYPE_FX_FAST, krb_tgt_preauth_type=137, XDM_CONST.KERBEROS_PA_TYPE_FX_ERROR, krb_tgt_preauth_type=138, XDM_CONST.KERBEROS_PA_TYPE_ENCRYPTED_CHALLENGE, krb_tgt_preauth_type=141, XDM_CONST.KERBEROS_PA_TYPE_OTP_CHALLENGE, krb_tgt_preauth_type=142, XDM_CONST.KERBEROS_PA_TYPE_OTP_REQUEST, krb_tgt_preauth_type=143, XDM_CONST.KERBEROS_PA_TYPE_OTP_CONFIRM, krb_tgt_preauth_type=144, XDM_CONST.KERBEROS_PA_TYPE_OTP_PIN_CHANGE, krb_tgt_preauth_type=145, XDM_CONST.KERBEROS_PA_TYPE_EPAK_AS_REQ, krb_tgt_preauth_type=146, XDM_CONST.KERBEROS_PA_TYPE_EPAK_AS_REP, krb_tgt_preauth_type=147, XDM_CONST.KERBEROS_PA_TYPE_PKINIT_KX, krb_tgt_preauth_type=148, XDM_CONST.KERBEROS_PA_TYPE_PKU2U_NAME, krb_tgt_preauth_type=149, XDM_CONST.KERBEROS_PA_TYPE_REQ_ENC_PA_REP, krb_tgt_preauth_type=150, XDM_CONST.KERBEROS_PA_TYPE_AS_FRESHNESS, krb_tgt_preauth_type=165, XDM_CONST.KERBEROS_PA_TYPE_SUPPORTED_ETYPES, krb_tgt_preauth_type=166, XDM_CONST.KERBEROS_PA_TYPE_EXTENDED_ERROR, to_string(krb_tgt_preauth_type)))),
    xdm.auth.kerberos_tgt.renew_ticket_expiration = if(is_auth_story=True, coalesce(krb_tgs_data->renew_ticket_expiration_time, krb_tgt_data->renew_ticket_expiration_time)),
    xdm.auth.kerberos_tgt.spn_type = if(is_auth_story=True, if(krb_spn_type=0, XDM_CONST.KERBEROS_PRINCIPAL_TYPE_UNKNOWN, krb_spn_type=1, XDM_CONST.KERBEROS_PRINCIPAL_TYPE_PRINCIPAL, krb_spn_type=2, XDM_CONST.KERBEROS_PRINCIPAL_TYPE_SRV_INST, krb_spn_type=3, XDM_CONST.KERBEROS_PRINCIPAL_TYPE_SRV_HST, krb_spn_type=4, XDM_CONST.KERBEROS_PRINCIPAL_TYPE_SRV_XHST, krb_spn_type=5, XDM_CONST.KERBEROS_PRINCIPAL_TYPE_UID, krb_spn_type=6, XDM_CONST.KERBEROS_PRINCIPAL_TYPE_X500_PRINCIPAL, krb_spn_type=7, XDM_CONST.KERBEROS_PRINCIPAL_TYPE_SMTP_NAME, krb_spn_type=10, XDM_CONST.KERBEROS_PRINCIPAL_TYPE_ENTERPRISE, to_string(krb_spn_type))),
    xdm.auth.kerberos_tgt.spn_values = if(is_auth_story=True, coalesce(krb_tgs_data->sname_values[], krb_tgt_data->sname_values[])),
    xdm.auth.kerberos_tgt.ticket_expiration = if(is_auth_story=True, coalesce(krb_tgs_data->ticket_expiration_time, krb_tgt_data->ticket_expiration_time)),
    xdm.auth.kerberos_tgt.ticket_prefix = if(is_auth_story=True, coalesce(krb_tgs_data->rsp_ticket_prefix, krb_tgt_data->rsp_ticket_prefix)),
    xdm.auth.ntlm.challenge = if(is_auth_story=True, ntlm_auth_data->client_challenge),
    xdm.auth.ntlm.dns_domain = if(is_auth_story=True, ntlm_auth_data->dst_dns_domain_name),
    xdm.auth.ntlm.dns_hostname = if(is_auth_story=True, ntlm_auth_data->dst_dns_host_name),
    xdm.auth.ntlm.dns_three = if(is_auth_story=True, ntlm_auth_data->dst_dns_tree_name),
    xdm.auth.ntlm.domain = if(is_auth_story=True, ntlm_auth_data->domain_name),
    xdm.auth.ntlm.hostname = if(is_auth_story=True, ntlm_auth_data->host_name),
    xdm.auth.ntlm.ntproof = if(is_auth_story=True, ntlm_auth_data->ntproofstr),
    xdm.auth.ntlm.target = if(is_auth_story=True, arrayindex(ntlm_auth_data->dst_target_name, 0)),
    xdm.auth.ntlm.user_name = if(is_auth_story=True, ntlm_auth_data->user_name),
    xdm.auth.ntlm.version = if(is_auth_story=True, to_json_string(ntlm_auth_data)->major_version + "." + to_json_string(ntlm_auth_data)->minor_version),
    xdm.event.description = if(is_vpn_story=True, vpn_event_description),
    xdm.event.duration = if(is_network_story=True, action_session_duration),
    xdm.event.id = if(is_auth_story=True or is_vpn_story=True, backtrace_identities->event_id, story_id_original),
    xdm.event.is_completed = if(is_network_story=True, action_network_stats_is_last),
    xdm.event.operation_sub_type = backtrace_identities->event_sub_type,
    xdm.event.outcome = if(is_auth_story=True or is_vpn_story=True, if(auth_outcome="SUCCESS", XDM_CONST.OUTCOME_SUCCESS, auth_outcome="FAILURE", XDM_CONST.OUTCOME_FAILED, auth_outcome), if(action_network_success=True, XDM_CONST.OUTCOME_SUCCESS, action_network_success=False, XDM_CONST.OUTCOME_FAILED)),
    xdm.event.outcome_reason = auth_outcome_reason,
    xdm.event.type = to_string(event_type),
    xdm.intermediate.host.device_id = if(is_auth_story=True, if(is_kerberos_story=True or is_ntlm_story=True, if(dst_association_strength > 10, dst_agent_id))),
    xdm.intermediate.host.fqdn = if(is_auth_story=True, if(is_kerberos_story=True or is_ntlm_story=True, dst_action_external_hostname)),
    xdm.intermediate.host.hostname = if(is_auth_story=True, auth_server, if(is_vpn_story=True, vpn_server)),
    xdm.intermediate.host.ipv4_addresses = if(is_auth_story=True, if(is_kerberos_story=True or is_ntlm_story=True, regextract(to_json_string(dst_agent_interface_map),"(?:\d{1,3}\.){3}\d{1,3}"))),
    xdm.intermediate.host.ipv6_addresses = if(is_auth_story=True, if(is_kerberos_story=True or is_ntlm_story=True, arraymerge(arraymap(dst_agent_interface_map, to_json_string("@element"->ipv6[]))))),
    xdm.intermediate.host.mac_addresses = if(is_auth_story=True, if(is_kerberos_story=True or is_ntlm_story=True, arraymap(dst_agent_interface_map, "@element"->mac))),
    xdm.intermediate.host.os = if(is_auth_story=True, if(is_kerberos_story=True or is_ntlm_story=True, dst_agent_os_sub_type)),
    xdm.intermediate.host.os_family = if(is_auth_story=True, if(is_kerberos_story=True or is_ntlm_story=True, if(dst_agent_os_type=ENUM.AGENT_OS_WINDOWS, XDM_CONST.OS_FAMILY_WINDOWS, dst_agent_os_type=ENUM.AGENT_OS_MAC, XDM_CONST.OS_FAMILY_MACOS,  dst_agent_os_type=ENUM.AGENT_OS_LINUX, XDM_CONST.OS_FAMILY_LINUX, to_string(dst_agent_os_type)))),
    xdm.intermediate.ipv4 = if(action_network_is_ipv6=False and action_proxy=True, action_remote_ip),
    xdm.intermediate.ipv6 = if(action_network_is_ipv6=True and action_proxy=True, action_remote_ip),
    xdm.intermediate.is_internal_ip = if(action_proxy=True, dst_is_internal_ip),
    xdm.intermediate.is_nat = if(is_network_story=True, action_nat),
    xdm.intermediate.is_proxy = action_proxy,
    xdm.intermediate.port = if(action_proxy=True, action_remote_port),
    xdm.network.application_protocol = if(is_network_story=True, arrayindex(action_app_id_transitions, -1)),
    xdm.network.application_protocol_category = if(is_network_story=True, action_category_of_app_id),
    xdm.network.application_protocol_subcategory = action_sub_category_of_app_id,
    xdm.network.dcerpc.interface_uuid = if(is_network_story=True, action_rpc_items->interface_uuid),
    xdm.network.dcerpc.opnum = if(is_network_story=True, to_integer(action_rpc_items->opnum)),
    xdm.network.dcerpc.svcctl_buffer = if(is_network_story=True, action_rpc_items->req_svcctl_buffer),
    xdm.network.dns.dns_question.name = if(is_network_story=True, dns_query_name),
    xdm.network.dns.dns_question.type = if(is_network_story=True, if(dns_query_type="A", XDM_CONST.DNS_RECORD_TYPE_A,dns_query_type="AAAA", XDM_CONST.DNS_RECORD_TYPE_AAAA,dns_query_type="AFSDB", XDM_CONST.DNS_RECORD_TYPE_AFSDB,dns_query_type="APL", XDM_CONST.DNS_RECORD_TYPE_APL,dns_query_type="CAA", XDM_CONST.DNS_RECORD_TYPE_CAA,dns_query_type="CDNSKEY", XDM_CONST.DNS_RECORD_TYPE_CDNSKEY,dns_query_type="CDS", XDM_CONST.DNS_RECORD_TYPE_CDS,dns_query_type="CERT", XDM_CONST.DNS_RECORD_TYPE_CERT,dns_query_type="CNAME", XDM_CONST.DNS_RECORD_TYPE_CNAME,dns_query_type="CSYNC", XDM_CONST.DNS_RECORD_TYPE_CSYNC,dns_query_type="DHCID", XDM_CONST.DNS_RECORD_TYPE_DHCID,dns_query_type="DLV", XDM_CONST.DNS_RECORD_TYPE_DLV,dns_query_type="DNAME", XDM_CONST.DNS_RECORD_TYPE_DNAME,dns_query_type="DNSKEY", XDM_CONST.DNS_RECORD_TYPE_DNSKEY,dns_query_type="DS", XDM_CONST.DNS_RECORD_TYPE_DS,dns_query_type="EUI48", XDM_CONST.DNS_RECORD_TYPE_EUI48,dns_query_type="EUI64", XDM_CONST.DNS_RECORD_TYPE_EUI64,dns_query_type="HINFO", XDM_CONST.DNS_RECORD_TYPE_HINFO,dns_query_type="HIP", XDM_CONST.DNS_RECORD_TYPE_HIP,dns_query_type="HTTPS", XDM_CONST.DNS_RECORD_TYPE_HTTPS,dns_query_type="IPSECKEY", XDM_CONST.DNS_RECORD_TYPE_IPSECKEY,dns_query_type="KEY", XDM_CONST.DNS_RECORD_TYPE_KEY,dns_query_type="KX", XDM_CONST.DNS_RECORD_TYPE_KX,dns_query_type="LOC", XDM_CONST.DNS_RECORD_TYPE_LOC,dns_query_type="MX", XDM_CONST.DNS_RECORD_TYPE_MX,dns_query_type="NAPTR", XDM_CONST.DNS_RECORD_TYPE_NAPTR,dns_query_type="NS", XDM_CONST.DNS_RECORD_TYPE_NS,dns_query_type="NSEC", XDM_CONST.DNS_RECORD_TYPE_NSEC,dns_query_type="NSEC3", XDM_CONST.DNS_RECORD_TYPE_NSEC3,dns_query_type="NSEC3PARAM", XDM_CONST.DNS_RECORD_TYPE_NSEC3PARAM,dns_query_type="OPENPGPKEY", XDM_CONST.DNS_RECORD_TYPE_OPENPGPKEY,dns_query_type="PTR", XDM_CONST.DNS_RECORD_TYPE_PTR,dns_query_type="RRSIG", XDM_CONST.DNS_RECORD_TYPE_RRSIG,dns_query_type="RP", XDM_CONST.DNS_RECORD_TYPE_RP,dns_query_type="SIG", XDM_CONST.DNS_RECORD_TYPE_SIG,dns_query_type="SMIMEA", XDM_CONST.DNS_RECORD_TYPE_SMIMEA,dns_query_type="SOA", XDM_CONST.DNS_RECORD_TYPE_SOA,dns_query_type="SRV", XDM_CONST.DNS_RECORD_TYPE_SRV,dns_query_type="SSHFP", XDM_CONST.DNS_RECORD_TYPE_SSHFP,dns_query_type="SVCB", XDM_CONST.DNS_RECORD_TYPE_SVCB,dns_query_type="TA", XDM_CONST.DNS_RECORD_TYPE_TA,dns_query_type="TKEY", XDM_CONST.DNS_RECORD_TYPE_TKEY,dns_query_type="TLSA", XDM_CONST.DNS_RECORD_TYPE_TLSA,dns_query_type="TSIG", XDM_CONST.DNS_RECORD_TYPE_TSIG,dns_query_type="TXT", XDM_CONST.DNS_RECORD_TYPE_TXT,dns_query_type="URI", XDM_CONST.DNS_RECORD_TYPE_URI,dns_query_type="ZONEMD", XDM_CONST.DNS_RECORD_TYPE_ZONEMD, dns_query_type)),
    xdm.network.dns.dns_resource_record.name = if(is_network_story=True, dns_resolutions->name),
    xdm.network.dns.dns_resource_record.type = if(is_network_story=True, if(resource_record_type="A", XDM_CONST.DNS_RECORD_TYPE_A,resource_record_type="AAAA", XDM_CONST.DNS_RECORD_TYPE_AAAA,resource_record_type="AFSDB", XDM_CONST.DNS_RECORD_TYPE_AFSDB,resource_record_type="APL", XDM_CONST.DNS_RECORD_TYPE_APL,resource_record_type="CAA", XDM_CONST.DNS_RECORD_TYPE_CAA,resource_record_type="CDNSKEY", XDM_CONST.DNS_RECORD_TYPE_CDNSKEY,resource_record_type="CDS", XDM_CONST.DNS_RECORD_TYPE_CDS,resource_record_type="CERT", XDM_CONST.DNS_RECORD_TYPE_CERT,resource_record_type="CNAME", XDM_CONST.DNS_RECORD_TYPE_CNAME,resource_record_type="CSYNC", XDM_CONST.DNS_RECORD_TYPE_CSYNC,resource_record_type="DHCID", XDM_CONST.DNS_RECORD_TYPE_DHCID,resource_record_type="DLV", XDM_CONST.DNS_RECORD_TYPE_DLV,resource_record_type="DNAME", XDM_CONST.DNS_RECORD_TYPE_DNAME,resource_record_type="DNSKEY", XDM_CONST.DNS_RECORD_TYPE_DNSKEY,resource_record_type="DS", XDM_CONST.DNS_RECORD_TYPE_DS,resource_record_type="EUI48", XDM_CONST.DNS_RECORD_TYPE_EUI48,resource_record_type="EUI64", XDM_CONST.DNS_RECORD_TYPE_EUI64,resource_record_type="HINFO", XDM_CONST.DNS_RECORD_TYPE_HINFO,resource_record_type="HIP", XDM_CONST.DNS_RECORD_TYPE_HIP,resource_record_type="HTTPS", XDM_CONST.DNS_RECORD_TYPE_HTTPS,resource_record_type="IPSECKEY", XDM_CONST.DNS_RECORD_TYPE_IPSECKEY,resource_record_type="KEY", XDM_CONST.DNS_RECORD_TYPE_KEY,resource_record_type="KX", XDM_CONST.DNS_RECORD_TYPE_KX,resource_record_type="LOC", XDM_CONST.DNS_RECORD_TYPE_LOC,resource_record_type="MX", XDM_CONST.DNS_RECORD_TYPE_MX,resource_record_type="NAPTR", XDM_CONST.DNS_RECORD_TYPE_NAPTR,resource_record_type="NS", XDM_CONST.DNS_RECORD_TYPE_NS,resource_record_type="NSEC", XDM_CONST.DNS_RECORD_TYPE_NSEC,resource_record_type="NSEC3", XDM_CONST.DNS_RECORD_TYPE_NSEC3,resource_record_type="NSEC3PARAM", XDM_CONST.DNS_RECORD_TYPE_NSEC3PARAM,resource_record_type="OPENPGPKEY", XDM_CONST.DNS_RECORD_TYPE_OPENPGPKEY,resource_record_type="PTR", XDM_CONST.DNS_RECORD_TYPE_PTR,resource_record_type="RRSIG", XDM_CONST.DNS_RECORD_TYPE_RRSIG,resource_record_type="RP", XDM_CONST.DNS_RECORD_TYPE_RP,resource_record_type="SIG", XDM_CONST.DNS_RECORD_TYPE_SIG,resource_record_type="SMIMEA", XDM_CONST.DNS_RECORD_TYPE_SMIMEA,resource_record_type="SOA", XDM_CONST.DNS_RECORD_TYPE_SOA,resource_record_type="SRV", XDM_CONST.DNS_RECORD_TYPE_SRV,resource_record_type="SSHFP", XDM_CONST.DNS_RECORD_TYPE_SSHFP,resource_record_type="SVCB", XDM_CONST.DNS_RECORD_TYPE_SVCB,resource_record_type="TA", XDM_CONST.DNS_RECORD_TYPE_TA,resource_record_type="TKEY", XDM_CONST.DNS_RECORD_TYPE_TKEY,resource_record_type="TLSA", XDM_CONST.DNS_RECORD_TYPE_TLSA,resource_record_type="TSIG", XDM_CONST.DNS_RECORD_TYPE_TSIG,resource_record_type="TXT", XDM_CONST.DNS_RECORD_TYPE_TXT,resource_record_type="URI", XDM_CONST.DNS_RECORD_TYPE_URI,resource_record_type="ZONEMD", XDM_CONST.DNS_RECORD_TYPE_ZONEMD, resource_record_type)),
    xdm.network.dns.dns_resource_record.value = if(is_network_story=True, dns_resolutions->value),
    xdm.network.dns.is_response = if(is_network_story=True, if(dns_reply_code != null)),
    xdm.network.dns.response_code = if(is_network_story=True, if(dns_reply_code="No error", XDM_CONST.DNS_RESPONSE_CODE_NO_ERROR,dns_reply_code="Format Error", XDM_CONST.DNS_RESPONSE_CODE_FORMAT_ERROR,dns_reply_code="Server Failure", XDM_CONST.DNS_RESPONSE_CODE_SERVER_FAILURE,dns_reply_code="Non-Existent Domain", XDM_CONST.DNS_RESPONSE_CODE_NON_EXISTENT_DOMAIN,dns_reply_code="Not Implemented", XDM_CONST.DNS_RESPONSE_CODE_NOT_IMPLEMENTED,dns_reply_code="Query Refused", XDM_CONST.DNS_RESPONSE_CODE_QUERY_REFUSED,dns_reply_code="Name Exists when it should not", XDM_CONST.DNS_RESPONSE_CODE_NAME_EXISTS_WHEN_IT_SHOULD_NOT,dns_reply_code="RR Set Exists when it should not", XDM_CONST.DNS_RESPONSE_CODE_RR_SET_EXISTS_WHEN_IT_SHOULD_NOT,dns_reply_code="RR Set that should exist does not", XDM_CONST.DNS_RESPONSE_CODE_RR_SET_THAT_SHOULD_EXIST_DOES_NOT,dns_reply_code="Server Not Authoritative for zone", XDM_CONST.DNS_RESPONSE_CODE_SERVER_NOT_AUTHORITATIVE_FOR_ZONE,dns_reply_code="Name not contained in zone", XDM_CONST.DNS_RESPONSE_CODE_NAME_NOT_CONTAINED_IN_ZONE,dns_reply_code="Bad OPT Version", XDM_CONST.DNS_RESPONSE_CODE_BAD_OPT_VERSION,dns_reply_code="TSIG Signature Failure", XDM_CONST.DNS_RESPONSE_CODE_TSIG_SIGNATURE_FAILURE,dns_reply_code="Key not recognized", XDM_CONST.DNS_RESPONSE_CODE_KEY_NOT_RECOGNIZED,dns_reply_code="Signature out of time window", XDM_CONST.DNS_RESPONSE_CODE_SIGNATURE_OUT_OF_TIME_WINDOW,dns_reply_code="Bad TKEY Mode", XDM_CONST.DNS_RESPONSE_CODE_BAD_TKEY_MODE,dns_reply_code="Duplicate key name", XDM_CONST.DNS_RESPONSE_CODE_DUPLICATE_KEY_NAME,dns_reply_code="Algorithm not supported", XDM_CONST.DNS_RESPONSE_CODE_ALGORITHM_NOT_SUPPORTED,dns_reply_code="Bad Truncation", XDM_CONST.DNS_RESPONSE_CODE_BAD_TRUNCATION, dns_reply_code)),
    xdm.network.http.content_type = if(is_network_story=True, http_content_type),
    xdm.network.http.domain = if(is_network_story=True, http_server),
    xdm.network.http.method = if(is_network_story=True, if(http_method="ACL", XDM_CONST.HTTP_METHOD_ACL,http_method="BASELINE_CONTROL", XDM_CONST.HTTP_METHOD_BASELINE_CONTROL,http_method="BIND", XDM_CONST.HTTP_METHOD_BIND,http_method="CHECKIN", XDM_CONST.HTTP_METHOD_CHECKIN,http_method="CHECKOUT", XDM_CONST.HTTP_METHOD_CHECKOUT,http_method="CONNECT", XDM_CONST.HTTP_METHOD_CONNECT,http_method="COPY", XDM_CONST.HTTP_METHOD_COPY,http_method="DELETE", XDM_CONST.HTTP_METHOD_DELETE,http_method="GET", XDM_CONST.HTTP_METHOD_GET,http_method="HEAD", XDM_CONST.HTTP_METHOD_HEAD,http_method="LABEL", XDM_CONST.HTTP_METHOD_LABEL,http_method="LINK", XDM_CONST.HTTP_METHOD_LINK,http_method="LOCK", XDM_CONST.HTTP_METHOD_LOCK,http_method="MERGE", XDM_CONST.HTTP_METHOD_MERGE,http_method="MKACTIVITY", XDM_CONST.HTTP_METHOD_MKACTIVITY,http_method="MKCALENDAR", XDM_CONST.HTTP_METHOD_MKCALENDAR,http_method="MKCOL", XDM_CONST.HTTP_METHOD_MKCOL,http_method="MKREDIRECTREF", XDM_CONST.HTTP_METHOD_MKREDIRECTREF,http_method="MKWORKSPACE", XDM_CONST.HTTP_METHOD_MKWORKSPACE,http_method="MOVE", XDM_CONST.HTTP_METHOD_MOVE,http_method="OPTIONS", XDM_CONST.HTTP_METHOD_OPTIONS,http_method="ORDERPATCH", XDM_CONST.HTTP_METHOD_ORDERPATCH,http_method="PATCH", XDM_CONST.HTTP_METHOD_PATCH,http_method="POST", XDM_CONST.HTTP_METHOD_POST,http_method="PRI", XDM_CONST.HTTP_METHOD_PRI,http_method="PROPFIND", XDM_CONST.HTTP_METHOD_PROPFIND,http_method="PROPPATCH", XDM_CONST.HTTP_METHOD_PROPPATCH,http_method="PUT", XDM_CONST.HTTP_METHOD_PUT,http_method="REBIND", XDM_CONST.HTTP_METHOD_REBIND,http_method="REPORT", XDM_CONST.HTTP_METHOD_REPORT,http_method="SEARCH", XDM_CONST.HTTP_METHOD_SEARCH,http_method="TRACE", XDM_CONST.HTTP_METHOD_TRACE,http_method="UNBIND", XDM_CONST.HTTP_METHOD_UNBIND,http_method="UNCHECKOUT", XDM_CONST.HTTP_METHOD_UNCHECKOUT,http_method="UNLINK", XDM_CONST.HTTP_METHOD_UNLINK,http_method="UNLOCK", XDM_CONST.HTTP_METHOD_UNLOCK,http_method="UPDATE", XDM_CONST.HTTP_METHOD_UPDATE,http_method="UPDATEREDIRECTREF", XDM_CONST.HTTP_METHOD_UPDATEREDIRECTREF,http_method="VERSION_CONTROL", XDM_CONST.HTTP_METHOD_VERSION_CONTROL, http_method)),
    xdm.network.http.referrer = if(is_network_story=True, http_referer),
    xdm.network.http.response_code = if(is_network_story=True, if(http_status_code=100, XDM_CONST.HTTP_RSP_CODE_CONTINUE,http_status_code=101, XDM_CONST.HTTP_RSP_CODE_SWITCHING_PROTOCOLS,http_status_code=102, XDM_CONST.HTTP_RSP_CODE_PROCESSING,http_status_code=103, XDM_CONST.HTTP_RSP_CODE_EARLY_HINTS,http_status_code=200, XDM_CONST.HTTP_RSP_CODE_OK,http_status_code=201, XDM_CONST.HTTP_RSP_CODE_CREATED,http_status_code=202, XDM_CONST.HTTP_RSP_CODE_ACCEPTED,http_status_code=203, XDM_CONST.HTTP_RSP_CODE_NON__AUTHORITATIVE_INFORMATION,http_status_code=204, XDM_CONST.HTTP_RSP_CODE_NO_CONTENT,http_status_code=205, XDM_CONST.HTTP_RSP_CODE_RESET_CONTENT,http_status_code=206, XDM_CONST.HTTP_RSP_CODE_PARTIAL_CONTENT,http_status_code=207, XDM_CONST.HTTP_RSP_CODE_MULTI__STATUS,http_status_code=208, XDM_CONST.HTTP_RSP_CODE_ALREADY_REPORTED,http_status_code=226, XDM_CONST.HTTP_RSP_CODE_IM_USED,http_status_code=300, XDM_CONST.HTTP_RSP_CODE_MULTIPLE_CHOICES,http_status_code=301, XDM_CONST.HTTP_RSP_CODE_MOVED_PERMANENTLY,http_status_code=302, XDM_CONST.HTTP_RSP_CODE_FOUND,http_status_code=303, XDM_CONST.HTTP_RSP_CODE_SEE_OTHER,http_status_code=304, XDM_CONST.HTTP_RSP_CODE_NOT_MODIFIED,http_status_code=305, XDM_CONST.HTTP_RSP_CODE_USE_PROXY,http_status_code=307, XDM_CONST.HTTP_RSP_CODE_TEMPORARY_REDIRECT,http_status_code=308, XDM_CONST.HTTP_RSP_CODE_PERMANENT_REDIRECT,http_status_code=400, XDM_CONST.HTTP_RSP_CODE_BAD_REQUEST,http_status_code=401, XDM_CONST.HTTP_RSP_CODE_UNAUTHORIZED,http_status_code=402, XDM_CONST.HTTP_RSP_CODE_PAYMENT_REQUIRED,http_status_code=403, XDM_CONST.HTTP_RSP_CODE_FORBIDDEN,http_status_code=404, XDM_CONST.HTTP_RSP_CODE_NOT_FOUND,http_status_code=405, XDM_CONST.HTTP_RSP_CODE_METHOD_NOT_ALLOWED,http_status_code=406, XDM_CONST.HTTP_RSP_CODE_NOT_ACCEPTABLE,http_status_code=407, XDM_CONST.HTTP_RSP_CODE_PROXY_AUTHENTICATION_REQUIRED,http_status_code=408, XDM_CONST.HTTP_RSP_CODE_REQUEST_TIMEOUT,http_status_code=409, XDM_CONST.HTTP_RSP_CODE_CONFLICT,http_status_code=410, XDM_CONST.HTTP_RSP_CODE_GONE,http_status_code=411, XDM_CONST.HTTP_RSP_CODE_LENGTH_REQUIRED,http_status_code=412, XDM_CONST.HTTP_RSP_CODE_PRECONDITION_FAILED,http_status_code=413, XDM_CONST.HTTP_RSP_CODE_CONTENT_TOO_LARGE,http_status_code=414, XDM_CONST.HTTP_RSP_CODE_URI_TOO_LONG,http_status_code=415, XDM_CONST.HTTP_RSP_CODE_UNSUPPORTED_MEDIA_TYPE,http_status_code=416, XDM_CONST.HTTP_RSP_CODE_RANGE_NOT_SATISFIABLE,http_status_code=417, XDM_CONST.HTTP_RSP_CODE_EXPECTATION_FAILED,http_status_code=421, XDM_CONST.HTTP_RSP_CODE_MISDIRECTED_REQUEST,http_status_code=422, XDM_CONST.HTTP_RSP_CODE_UNPROCESSABLE_CONTENT,http_status_code=423, XDM_CONST.HTTP_RSP_CODE_LOCKED,http_status_code=424, XDM_CONST.HTTP_RSP_CODE_FAILED_DEPENDENCY,http_status_code=425, XDM_CONST.HTTP_RSP_CODE_TOO_EARLY,http_status_code=426, XDM_CONST.HTTP_RSP_CODE_UPGRADE_REQUIRED,http_status_code=428, XDM_CONST.HTTP_RSP_CODE_PRECONDITION_REQUIRED,http_status_code=429, XDM_CONST.HTTP_RSP_CODE_TOO_MANY_REQUESTS,http_status_code=431, XDM_CONST.HTTP_RSP_CODE_REQUEST_HEADER_FIELDS_TOO_LARGE,http_status_code=451, XDM_CONST.HTTP_RSP_CODE_UNAVAILABLE_FOR_LEGAL_REASONS,http_status_code=500, XDM_CONST.HTTP_RSP_CODE_INTERNAL_SERVER_ERROR,http_status_code=501, XDM_CONST.HTTP_RSP_CODE_NOT_IMPLEMENTED,http_status_code=502, XDM_CONST.HTTP_RSP_CODE_BAD_GATEWAY,http_status_code=503, XDM_CONST.HTTP_RSP_CODE_SERVICE_UNAVAILABLE,http_status_code=504, XDM_CONST.HTTP_RSP_CODE_GATEWAY_TIMEOUT,http_status_code=505, XDM_CONST.HTTP_RSP_CODE_HTTP_VERSION_NOT_SUPPORTED,http_status_code=506, XDM_CONST.HTTP_RSP_CODE_VARIANT_ALSO_NEGOTIATES,http_status_code=507, XDM_CONST.HTTP_RSP_CODE_INSUFFICIENT_STORAGE,http_status_code=508, XDM_CONST.HTTP_RSP_CODE_LOOP_DETECTED,http_status_code=511, XDM_CONST.HTTP_RSP_CODE_NETWORK_AUTHENTICATION_REQUIRED, to_string(http_status_code))),
    xdm.network.http.url = if(is_network_story=True, to_json_string(arrayindex(http_data, 0))->http_req_full_url),
    xdm.network.http.url_category = if(is_network_story=True, dst_action_url_category),
    xdm.network.icmp.code = if(is_network_story=True, icmp_code),
    xdm.network.icmp.type = if(is_network_story=True, icmp_type),
    xdm.network.ip_protocol = if(is_network_story=True, if(action_network_protocol=ENUM.ICMP, XDM_CONST.IP_PROTOCOL_ICMP, action_network_protocol=ENUM.TCP, XDM_CONST.IP_PROTOCOL_TCP, action_network_protocol=ENUM.UDP, XDM_CONST.IP_PROTOCOL_UDP, to_string(action_network_protocol))),
    xdm.network.ldap.attributes = if(is_network_story=True, ldap_data->attributes[]),
    xdm.network.ldap.bind_auth_type = if(is_network_story=True, if(ldap_data != null, if(auth_service="simple", XDM_CONST.LDAP_BIND_AUTH_TYPE_SIMPLE,auth_service="sasl", XDM_CONST.LDAP_BIND_AUTH_TYPE_SASL, auth_service))),
    xdm.network.ldap.filter = if(is_network_story=True, json_extract_scalar(ldap_data, "$.filter")),
    xdm.network.ldap.operation = if(is_network_story=True, if(ldap_operation="BindRequest", XDM_CONST.LDAP_OPERATION_BIND_REQUEST,ldap_operation="BindResponse", XDM_CONST.LDAP_OPERATION_BIND_RESPONSE,ldap_operation="UnbindRequest", XDM_CONST.LDAP_OPERATION_UNBIND_REQUEST,ldap_operation="SearchRequest", XDM_CONST.LDAP_OPERATION_SEARCH_REQUEST,ldap_operation="SearchResultEntry", XDM_CONST.LDAP_OPERATION_SEARCH_RESULT_ENTRY,ldap_operation="SearchResultDone", XDM_CONST.LDAP_OPERATION_SEARCH_RESULT_DONE,ldap_operation="ModifyRequest", XDM_CONST.LDAP_OPERATION_MODIFY_REQUEST,ldap_operation="ModifyResponse", XDM_CONST.LDAP_OPERATION_MODIFY_RESPONSE,ldap_operation="AddRequest", XDM_CONST.LDAP_OPERATION_ADD_REQUEST,ldap_operation="AddResponse", XDM_CONST.LDAP_OPERATION_ADD_RESPONSE,ldap_operation="DelRequest", XDM_CONST.LDAP_OPERATION_DEL_REQUEST,ldap_operation="DelResponse", XDM_CONST.LDAP_OPERATION_DEL_RESPONSE,ldap_operation="ModifyDNRequest", XDM_CONST.LDAP_OPERATION_MODIFY_DN_REQUEST,ldap_operation="ModifyDNResponse", XDM_CONST.LDAP_OPERATION_MODIFY_DN_RESPONSE,ldap_operation="CompareRequest", XDM_CONST.LDAP_OPERATION_COMPARE_REQUEST,ldap_operation="CompareResponse", XDM_CONST.LDAP_OPERATION_COMPARE_RESPONSE,ldap_operation="AbandonRequest", XDM_CONST.LDAP_OPERATION_ABANDON_REQUEST,ldap_operation="SearchResultReference", XDM_CONST.LDAP_OPERATION_SEARCH_RESULT_REFERENCE,ldap_operation="ExtendedRequest", XDM_CONST.LDAP_OPERATION_EXTENDED_REQUEST,ldap_operation="ExtendedResponse", XDM_CONST.LDAP_OPERATION_EXTENDED_RESPONSE,ldap_operation)),
    xdm.network.ldap.returned_entries = if(is_network_story=True, to_integer(ldap_data->returned_entries)),
    xdm.network.ldap.scope = if(is_network_story=True, if(ldap_scope="baseObject", XDM_CONST.LDAP_SCOPE_BASE_OBJECT, ldap_scope="singleLevel", XDM_CONST.LDAP_SCOPE_SINGLE_LEVEL, ldap_scope="wholeSubtree", XDM_CONST.LDAP_SCOPE_WHOLE_SUBTREE, to_string(ldap_scope))),
    xdm.network.protocol_layers = if(is_network_story=True, action_app_id_transitions),
    xdm.network.rule = if(is_network_story=True, backtrace_identities->rule),
    xdm.network.session_id = story_id,
    xdm.network.tls.client_ja3 = if(is_network_story=True, ssl_data->ja3),
    xdm.network.tls.server_ja3 = if(is_network_story=True, ssl_data->ja3s),
    xdm.network.tls.server_name = if(is_network_story=True, to_json_string(ssl_data)->sni),
    xdm.observer.action = if(is_network_story=True, to_string(backtrace_identities->action)),
    xdm.observer.content_version = if(is_network_story=True, backtrace_identities->content_version),
    xdm.observer.name = if(is_vpn_story=True, vpn_server),
    xdm.observer.product = _product,
    xdm.observer.unique_identifier = backtrace_identities->serial,
    xdm.observer.vendor = _vendor,
    xdm.observer.version = to_string(story_version),
    xdm.session_context_id = story_id,
    xdm.source.agent.content_version = if(is_network_story=True, agent_content_version),
    xdm.source.agent.identifier = if(is_network_story=True, agent_id),
    xdm.source.agent.type = if(is_network_story=True, if(agent_install_type=ENUM.STANDARD, XDM_CONST.AGENT_TYPE_REGULAR, agent_install_type in (ENUM.VDI, ENUM.VDI_GOLDEN), XDM_CONST.AGENT_TYPE_VDI, agent_install_type in (ENUM.TEMPORARY_SESSION, ENUM.DATA_COLLECTOR), XDM_CONST.AGENT_TYPE_COLLECTOR, to_string(agent_install_type))),
    xdm.source.agent.version = if(is_network_story=True, agent_version),
    xdm.source.application.version = if(is_vpn_story=True, client_version_str),
    xdm.source.asn.as_name = action_as_data->organization,
    xdm.source.asn.as_number = action_as_data->as_number,
    xdm.source.host.device_category = if(is_auth_story=True or is_vpn_story=True, auth_client_type, device_id->category),
    xdm.source.host.device_id = if(is_auth_story=True or is_vpn_story=True, if(association_strength > 10, agent_id), device_id->mac),
    xdm.source.host.device_model = if(is_network_story=True, device_id->model),
    xdm.source.host.fqdn = if(is_auth_story=True or is_network_story=True, action_external_hostname),
    xdm.source.host.hardware_uuid = if(is_vpn_story=True or is_auth_story= True, hardware_id),
    xdm.source.host.hostname = if(is_auth_story=True, auth_client, is_vpn_story=True, agent_hostname, agent_hostname),
    xdm.source.host.ipv4_addresses = if(is_auth_story=True or is_vpn_story=True, if(auth_client != null, arraycreate(auth_client)), regextract(to_json_string(agent_interface_map),"(?:\d{1,3}\.){3}\d{1,3}")),
    xdm.source.host.ipv6_addresses = if(is_network_story=True, arraymerge(arraymap(agent_interface_map, to_json_string("@element"->ipv6[])))),
    xdm.source.host.mac_addresses = if(is_auth_story=True or is_vpn_story=True, if(associated_mac != null, arraycreate(associated_mac)), arraymap(agent_interface_map, "@element"->mac)),
    xdm.source.host.manufacturer = if(is_network_story=True, device_id->vendor),
    xdm.source.host.os = agent_os_sub_type,
    xdm.source.host.os_family = if(is_auth_story=True or is_vpn_story=True, if(agent_os_sub_type contains "Windows", XDM_CONST.OS_FAMILY_WINDOWS, agent_os_sub_type contains "Linux", XDM_CONST.OS_FAMILY_LINUX, agent_os_sub_type contains "Mac" or agent_os_sub_type contains "OS X", XDM_CONST.OS_FAMILY_MACOS, agent_os_sub_type contains "iOS", XDM_CONST.OS_FAMILY_IOS, agent_os_sub_type contains "Android", XDM_CONST.OS_FAMILY_ANDROID, agent_os_sub_type), if(agent_os_type=ENUM.AGENT_OS_WINDOWS, XDM_CONST.OS_FAMILY_WINDOWS, agent_os_type=ENUM.AGENT_OS_MAC, XDM_CONST.OS_FAMILY_MACOS,  agent_os_type=ENUM.AGENT_OS_LINUX, XDM_CONST.OS_FAMILY_LINUX, to_string(agent_os_type))),
    xdm.source.interface = if(is_network_story=True, associated_mac),
    xdm.source.ipv4 = if(is_auth_story=True, if(action_local_ip != "", action_local_ip), is_vpn_story=True, auth_client, action_network_is_ipv6=False, if(action_local_ip != "", action_local_ip)),
    xdm.source.ipv6 = if(is_network_story=True, if(action_network_is_ipv6=True, if(action_local_ip != "", action_local_ip))),
    xdm.source.is_internal_ip = is_internal_ip,
    xdm.source.location.city = action_location->city,
    xdm.source.location.continent = action_location->continent,
    xdm.source.location.country = if(action_location->country != "-", action_location->country),
    xdm.source.location.latitude = action_location->latitude,
    xdm.source.location.longitude = action_location->longitude,
    xdm.source.location.region = action_location->region,
    xdm.source.location.timezone = json_extract_scalar(to_json_string(action_location), "$.timezone"),
    xdm.source.port = if(is_auth_story=True or is_network_story=True, if(action_local_port != 0, action_local_port)),
    xdm.source.process.causality_id = if(is_network_story=True, os_actor_process_causality_id),
    xdm.source.process.command_line = if(is_network_story=True, actor_process_command_line),
    xdm.source.process.container_id = if(is_network_story=True, actor_container_info->id),
    xdm.source.process.executable.directory = if(is_network_story=True, if(actor_process_image_path contains "/", arrayindex(split(actor_process_image_path, "/"), -2), actor_process_image_path contains """\\""",  arrayindex(split(actor_process_image_path, "\"), -2), actor_process_image_path)),
    xdm.source.process.executable.extension = if(is_network_story=True, actor_process_image_extension),
    xdm.source.process.executable.file_type = if(is_network_story=True, arrayindex(split(actor_process_image_path, "."), -1)),
    xdm.source.process.executable.filename = if(is_network_story=True, actor_process_image_name),
    xdm.source.process.executable.is_signed = if(is_network_story=True, if(actor_process_signature_status in (ENUM.SIGNED, ENUM.SIGNED_INVALID, ENUM.WEAK_HASH, ENUM.INVALID_CVE2020_0601))),
    xdm.source.process.executable.md5 = if(is_network_story=True, actor_process_image_md5),
    xdm.source.process.executable.path = if(is_network_story=True, actor_process_image_path),
    xdm.source.process.executable.sha256 = if(is_network_story=True, actor_process_image_sha256),
    xdm.source.process.executable.signature_status = if(is_network_story=True, if(actor_process_signature_status=ENUM.SIGNED, XDM_CONST.SIGNATURE_STATUS_SIGNED_VERIFIED, actor_process_signature_status in (ENUM.SIGNED_INVALID, ENUM.WEAK_HASH, ENUM.INVALID_CVE2020_0601), XDM_CONST.SIGNATURE_STATUS_SIGNED_INVALID, actor_process_signature_status=ENUM.UNSIGNED, XDM_CONST.SIGNATURE_STATUS_UNSIGNED, XDM_CONST.SIGNATURE_STATUS_STATUS_UNKNOWN)),
    xdm.source.process.executable.signer = if(is_network_story=True, actor_process_signature_vendor),
    xdm.source.process.identifier = if(is_network_story=True, actor_process_instance_id),
    xdm.source.process.integrity_level = if(is_network_story=True, actor_process_integrity_level),
    xdm.source.process.is_injected = if(is_network_story=True, actor_is_injected_thread),
    xdm.source.process.name = if(is_network_story=True, actor_process_image_name),
    xdm.source.process.pid = if(is_network_story=True, actor_process_os_pid),
    xdm.source.process.thread_id = if(is_network_story=True, actor_thread_thread_id),
    xdm.source.sent_bytes = if(is_network_story=True, action_total_upload),
    xdm.source.sent_packets = if(is_network_story=True, action_pkts_sent),
    xdm.source.user.domain = if(is_vpn_story=True or is_network_story=True, auth_domain),
    xdm.source.user.identifier = if(is_network_story=True, actor_primary_user_sid),
    xdm.source.user.identity_type = if(is_vpn_story=True, auth_normalized_user->identity_type),
    xdm.source.user.netbios_domain = if(is_auth_story=True, auth_normalized_user->domain),
    xdm.source.user.sam_account_name = if(is_auth_story=True, auth_normalized_user->username),
    xdm.source.user.scope = if(is_auth_story=True, auth_normalized_user->scope),
    xdm.source.user.upn = if(is_auth_story=True, auth_normalized_user->upn),
    xdm.source.user.user_type = if(is_vpn_story=True, auth_normalized_user->identity_type),
    xdm.source.user.username = if(is_vpn_story=True, auth_identity, is_network_story=True, coalesce(auth_identity, actor_primary_username)),
    xdm.source.user_agent = action_user_agent,
    xdm.source.zone = if(is_network_story=True, backtrace_identities->interface_from),
    xdm.target.agent.content_version = if(is_network_story=True, dst_agent_content_version),
    xdm.target.agent.identifier = if(is_network_story=True, dst_agent_id),
    xdm.target.agent.type = if(is_network_story=True, if(dst_agent_install_type=ENUM.STANDARD, XDM_CONST.AGENT_TYPE_REGULAR, dst_agent_install_type in (ENUM.VDI, ENUM.VDI_GOLDEN), XDM_CONST.AGENT_TYPE_VDI, dst_agent_install_type in (ENUM.TEMPORARY_SESSION, ENUM.DATA_COLLECTOR), XDM_CONST.AGENT_TYPE_COLLECTOR, to_string(dst_agent_install_type))),
    xdm.target.agent.version = if(is_network_story=True, dst_agent_version),
    xdm.target.application.name = if(is_vpn_story=True, coalesce(checkpoint_vpn_data->client_application, vpn_service)),
    xdm.target.asn.as_name = if(is_network_story=True, dst_action_as_data->organization),
    xdm.target.asn.as_number = if(is_network_story=True, dst_action_as_data->as_number),
    xdm.target.domain = if(is_auth_story=True, auth_normalized_user->domain),
    xdm.target.file.extension = if(is_network_story=True, file_data->file_extension),
    xdm.target.file.file_type = if(is_network_story=True, file_data->file_type),
    xdm.target.file.filename = if(is_network_story=True, file_data->file_name),
    xdm.target.file.path = if(is_network_story=True, file_data->file_url),
    xdm.target.file.sha256 = if(is_network_story=True, file_data->file_sha_256),
    xdm.target.host.device_category = if(is_network_story=True, dst_device_id->category),
    xdm.target.host.device_id = if(is_auth_story=True, if(is_ntlm_story=True, if(association_strength > 10, agent_id), is_vpn_story=True, if(dst_association_strength > 10, dst_agent_id)), dst_device_id->mac),
    xdm.target.host.device_model = if(is_network_story=True, dst_device_id->model),
    xdm.target.host.fqdn = if(is_network_story=True, dst_action_external_hostname),
    xdm.target.host.hostname = if(is_auth_story=True, auth_target, is_vpn_story=True, dst_agent_hostname, dst_agent_hostname),
    xdm.target.host.ipv4_addresses = if(is_auth_story=True, if(is_ntlm_story=True, regextract(to_json_string(agent_interface_map),"(?:\d{1,3}\.){3}\d{1,3}")), is_vpn_story=True, if(action_remote_ip != null, arraycreate(action_remote_ip)), is_network_story=True, regextract(to_json_string(dst_agent_interface_map),"(?:\d{1,3}\.){3}\d{1,3}")),
    xdm.target.host.ipv6_addresses = if(is_auth_story=True, if(is_ntlm_story=True, arraymerge(arraymap(agent_interface_map, to_json_string("@element"->ipv6[])))), is_network_story=True, arraymerge(arraymap(dst_agent_interface_map, to_json_string("@element"->ipv6[])))),
    xdm.target.host.mac_addresses = if(is_auth_story=True, if(is_ntlm_story=True, arraymap(agent_interface_map, "@element"->mac)), is_vpn_story=True, if(dst_associated_mac != null, arraycreate(dst_associated_mac)), arraymap(dst_agent_interface_map, "@element"->mac)),
    xdm.target.host.manufacturer = if(is_network_story=True, dst_device_id->vendor),
    xdm.target.host.os = if(is_network_story=True, dst_agent_os_sub_type),
    xdm.target.host.os_family = if(is_network_story=True, if(dst_agent_os_type=ENUM.AGENT_OS_WINDOWS, XDM_CONST.OS_FAMILY_WINDOWS, dst_agent_os_type=ENUM.AGENT_OS_MAC, XDM_CONST.OS_FAMILY_MACOS,  dst_agent_os_type=ENUM.AGENT_OS_LINUX, XDM_CONST.OS_FAMILY_LINUX, to_string(dst_agent_os_type))),
    xdm.target.interface = if(is_network_story=True, dst_associated_mac),
    xdm.target.ipv4 =  if(action_network_is_ipv6=False, if(action_proxy=True, dst_action_external_hostname_as_ip, if(is_kerberos_story!=True, if(action_remote_ip != "", action_remote_ip), is_network_story=True, if(action_remote_ip != "", action_remote_ip)))),
    xdm.target.ipv6 = if(action_network_is_ipv6=True, if(action_proxy=True, dst_action_external_hostname_as_ip, if(is_network_story=True, if(action_remote_ip != "", action_remote_ip)))),
    xdm.target.is_internal_ip =  if(action_proxy=False, dst_is_internal_ip),
    xdm.target.location.city = if(is_network_story=True, dst_action_location->city),
    xdm.target.location.continent = if(is_network_story=True, dst_action_location->continent),
    xdm.target.location.country = if(is_network_story=True, if(dst_action_location->country != "-", dst_action_location->country)),
    xdm.target.location.latitude = if(is_network_story=True, dst_action_location->latitude),
    xdm.target.location.longitude = if(is_network_story=True, dst_action_location->longitude),
    xdm.target.location.region = if(is_network_story=True, dst_action_location->region),
    xdm.target.location.timezone = if(is_network_story=True, json_extract_scalar(to_json_string(dst_action_location), "$.timezone")),
    xdm.target.port = if(action_proxy=True, action_external_port, if(is_kerberos_story!=True, if(action_remote_port != 0, action_remote_port))),
    xdm.target.process.causality_id = if(is_network_story=True, dst_os_actor_process_causality_id),
    xdm.target.process.command_line = if(is_network_story=True, dst_actor_process_command_line),
    xdm.target.process.container_id = if(is_network_story=True, dst_actor_container_info->id),
    xdm.target.process.executable.directory = if(is_network_story=True, if(dst_actor_process_image_path contains "/", arrayindex(split(dst_actor_process_image_path, "/"), -2), dst_actor_process_image_path contains """\\""",  arrayindex(split(dst_actor_process_image_path, "\"), -2), dst_actor_process_image_path)),
    xdm.target.process.executable.extension = if(is_network_story=True, dst_actor_process_image_extension),
    xdm.target.process.executable.file_type = if(is_network_story=True, arrayindex(split(dst_actor_process_image_path, "."), -1)),
    xdm.target.process.executable.filename = if(is_network_story=True, dst_actor_process_image_name),
    xdm.target.process.executable.is_signed = if(is_network_story=True, if(dst_actor_process_signature_status in (ENUM.SIGNED, ENUM.SIGNED_INVALID, ENUM.WEAK_HASH, ENUM.INVALID_CVE2020_0601))),
    xdm.target.process.executable.md5 = if(is_network_story=True, dst_actor_process_image_md5),
    xdm.target.process.executable.path = if(is_network_story=True, dst_actor_process_image_path),
    xdm.target.process.executable.sha256 = if(is_network_story=True, dst_actor_process_image_sha256),
    xdm.target.process.executable.signature_status = if(is_network_story=True, if(dst_actor_process_signature_status=ENUM.SIGNED, XDM_CONST.SIGNATURE_STATUS_SIGNED_VERIFIED, dst_actor_process_signature_status in (ENUM.SIGNED_INVALID, ENUM.WEAK_HASH, ENUM.INVALID_CVE2020_0601), XDM_CONST.SIGNATURE_STATUS_SIGNED_INVALID, dst_actor_process_signature_status=ENUM.UNSIGNED, XDM_CONST.SIGNATURE_STATUS_UNSIGNED, XDM_CONST.SIGNATURE_STATUS_STATUS_UNKNOWN)),
    xdm.target.process.executable.signer = if(is_network_story=True, dst_actor_process_signature_vendor),
    xdm.target.process.identifier = if(is_network_story=True, dst_actor_process_instance_id),
    xdm.target.process.integrity_level = if(is_network_story=True, dst_actor_process_integrity_level),
    xdm.target.process.is_injected = if(is_network_story=True, dst_actor_is_injected_thread),
    xdm.target.process.name = if(is_network_story=True, dst_actor_process_image_name),
    xdm.target.process.pid = if(is_network_story=True, dst_actor_process_os_pid),
    xdm.target.process.thread_id = if(is_network_story=True, dst_actor_thread_thread_id),
    xdm.target.sent_bytes = if(is_network_story=True, action_total_download),
    xdm.target.sent_packets = if(is_network_story=True, action_pkts_received),
    xdm.target.user.domain = if(is_auth_story=True, auth_domain),
    xdm.target.user.identifier = if(is_network_story=True, dst_actor_primary_user_sid),
    xdm.target.user.identity_type = if(is_auth_story=True, auth_normalized_user->identity_type),
    xdm.target.user.netbios_domain = if(is_auth_story=True, auth_normalized_user->domain),
    xdm.target.user.sam_account_name = if(is_auth_story=True, auth_normalized_user->username),
    xdm.target.user.scope = if(is_auth_story=True, auth_normalized_user->scope),
    xdm.target.user.upn = if(is_auth_story=True, auth_normalized_user->upn),
    xdm.target.user.user_type = if(is_auth_story=True, auth_normalized_user->identity_type),
    xdm.target.user.username = if(is_auth_story=True, auth_identity, is_network_story=True, dst_actor_primary_username),
    xdm.target.zone = if(is_network_story=True, backtrace_identities->interface_to);

// Union with Endpoint mapping
filter
    event_type in (ENUM.PROCESS, ENUM.FILE, ENUM.REGISTRY, ENUM.LOAD_IMAGE)
| alter
    action_module_path_parts = if(action_module_path contains "/", split(action_module_path, "/"), action_module_path contains """\\""", split(action_module_path, """\\""")),
    agent_interface_map = to_json_string(agent_interface_map)->[]
| alter
    _insert_time = insert_timestamp,
    xdm.event.id = event_id,
    xdm.event.operation = if(event_type=ENUM.PROCESS, if(event_sub_type=ENUM.PROCESS_START, XDM_CONST.OPERATION_TYPE_PROCESS_CREATE, event_sub_type=ENUM.PROCESS_STOP, XDM_CONST.OPERATION_TYPE_PROCESS_TERMINATE, to_string(event_sub_type)), event_type=ENUM.FILE, if(event_sub_type=ENUM.FILE_CREATE_NEW, XDM_CONST.OPERATION_TYPE_FILE_CREATE, event_sub_type=ENUM.FILE_OPEN, XDM_CONST.OPERATION_TYPE_FILE_OPEN, event_sub_type=ENUM.FILE_RENAME, XDM_CONST.OPERATION_TYPE_FILE_RENAME, event_sub_type=ENUM.FILE_LINK, XDM_CONST.OPERATION_TYPE_FILE_LINK, event_sub_type=ENUM.FILE_REMOVE, XDM_CONST.OPERATION_TYPE_FILE_REMOVE, event_sub_type=ENUM.FILE_WRITE, XDM_CONST.OPERATION_TYPE_FILE_WRITE, event_sub_type=ENUM.FILE_SET_ATTRIBUTE, XDM_CONST.OPERATION_TYPE_FILE_SET_ATTRIBUTES,event_sub_type=ENUM.FILE_DIR_CREATE, XDM_CONST.OPERATION_TYPE_DIR_CREATE, event_sub_type=ENUM.FILE_DIR_OPEN, XDM_CONST.OPERATION_TYPE_DIR_OPEN, event_sub_type=ENUM.FILE_DIR_RENAME, XDM_CONST.OPERATION_TYPE_DIR_RENAME, event_sub_type=ENUM.FILE_DIR_LINK, XDM_CONST.OPERATION_TYPE_DIR_LINK, event_sub_type=ENUM.FILE_DIR_REMOVE, XDM_CONST.OPERATION_TYPE_DIR_REMOVE, event_sub_type=ENUM.FILE_DIR_WRITE, XDM_CONST.OPERATION_TYPE_DIR_WRITE, event_sub_type=ENUM.FILE_DIR_SET_ATTR, XDM_CONST.OPERATION_TYPE_DIR_SET_ATTRIBUTES, event_sub_type=ENUM.FILE_REPARSE, XDM_CONST.OPERATION_TYPE_FILE_REPARSE, event_sub_type=ENUM.FILE_SET_SECURITY_DESCRIPTOR, XDM_CONST.OPERATION_TYPE_FILE_SET_SECURITY, event_sub_type=17, XDM_CONST.OPERATION_TYPE_DIR_SET_SECURITY, event_sub_type=ENUM.FILE_CHANGE_MODE, XDM_CONST.OPERATION_TYPE_FILE_CHANGE_MODE, event_sub_type=ENUM.FILE_DIR_CHANGE_MODE, XDM_CONST.OPERATION_TYPE_DIR_CHANGE_MODE, event_sub_type=ENUM.FILE_CHANGE_OWNER, XDM_CONST.OPERATION_TYPE_FILE_CHANGE_OWNER, event_sub_type=ENUM.FILE_DIR_CHANGE_OWNER, XDM_CONST.OPERATION_TYPE_DIR_CHANGE_OWNER, event_sub_type=ENUM.FILE_DIR_QUERY, XDM_CONST.OPERATION_TYPE_DIR_QUERY, event_sub_type=ENUM.FILE_DELETE_EXT_ATTRIBUTE, XDM_CONST.OPERATION_TYPE_FILE_DELETE_EXT_ATTRIBUTES,  event_sub_type=24, XDM_CONST.OPERATION_TYPE_FILE_STATS,  event_sub_type=25, XDM_CONST.OPERATION_TYPE_DIR_STATS,  to_string(event_sub_type)), event_type=ENUM.REGISTRY, if(event_sub_type=ENUM.REGISTRY_CREATE_KEY, XDM_CONST.OPERATION_TYPE_REGISTRY_CREATE_KEY, event_sub_type=ENUM.REGISTRY_DELETE_KEY, XDM_CONST.OPERATION_TYPE_REGISTRY_DELETE_KEY, event_sub_type=ENUM.REGISTRY_RENAME_KEY, XDM_CONST.OPERATION_TYPE_REGISTRY_RENAME_KEY, event_sub_type=ENUM.REGISTRY_SET_VALUE, XDM_CONST.OPERATION_TYPE_REGISTRY_SET_VALUE, event_sub_type=ENUM.REGISTRY_DELETE_VALUE, XDM_CONST.OPERATION_TYPE_REGISTRY_DELETE_VALUE, event_sub_type=ENUM.REGISTRY_LOAD, XDM_CONST.OPERATION_TYPE_REGISTRY_LOAD, event_sub_type=ENUM.REGISTRY_UNLOAD, XDM_CONST.OPERATION_TYPE_REGISTRY_UNLOAD, event_sub_type=ENUM.REGISTRY_SAVE, XDM_CONST.OPERATION_TYPE_REGISTRY_SAVE, event_sub_type=ENUM.REGISTRY_RESTORE, XDM_CONST.OPERATION_TYPE_REGISTRY_RESTORE, event_sub_type=10, XDM_CONST.OPERATION_TYPE_REGISTRY_OPEN, event_sub_type=11, XDM_CONST.OPERATION_TYPE_REGISTRY_QUERY_VALUE, to_string(event_sub_type)), event_type=ENUM.LOAD_IMAGE, if(event_sub_type=ENUM.LOAD_IMAGE_MODULE, XDM_CONST.OPERATION_TYPE_IMAGE_LOAD, event_sub_type=ENUM.LOAD_IMAGE_MPROTECT, XDM_CONST.OPERATION_TYPE_IMAGE_MPROTECT, event_sub_type=ENUM.LOAD_IMAGE_PRELOAD, XDM_CONST.OPERATION_TYPE_IMAGE_PRE_LOAD, event_sub_type=4, XDM_CONST.OPERATION_TYPE_IMAGE_UNLOAD, event_sub_type=ENUM.LOAD_IMAGE_SO_LOAD, XDM_CONST.OPERATION_TYPE_IMAGE_SO_LOAD, to_string(event_sub_type))),
    xdm.event.operation_sub_type = to_string(event_sub_type),
    xdm.event.outcome = if(event_type=ENUM.PROCESS, if(action_process_termination_code!=0, XDM_CONST.OUTCOME_FAILED, XDM_CONST.OUTCOME_SUCCESS), event_type=ENUM.REGISTRY, if(action_registry_return_val = 0, XDM_CONST.OUTCOME_SUCCESS, action_registry_return_val > 0, XDM_CONST.OUTCOME_FAILED, XDM_CONST.OUTCOME_UNKNOWN)),
    xdm.event.type = to_string(event_type),
    xdm.observer.content_version = agent_content_version,
    xdm.observer.name = agent_hostname,
    xdm.observer.product = _product,
    xdm.observer.type = if(agent_install_type=ENUM.STANDARD, "AGENT_TYPE_REGULAR", agent_install_type in (ENUM.VDI, ENUM.VDI_GOLDEN), "AGENT_TYPE_VDI", agent_install_type in (ENUM.TEMPORARY_SESSION, ENUM.DATA_COLLECTOR), "AGENT_TYPE_COLLECTOR", to_string(agent_install_type)),
    xdm.observer.unique_identifier = agent_id,
    xdm.observer.vendor = _vendor,
    xdm.observer.version = agent_version,
    xdm.session_context_id = action_network_connection_id,
    xdm.source.agent.content_version = agent_content_version,
    xdm.source.agent.identifier = agent_id,
    xdm.source.agent.type = if(agent_install_type=ENUM.STANDARD, XDM_CONST.AGENT_TYPE_REGULAR, agent_install_type in (ENUM.VDI, ENUM.VDI_GOLDEN), XDM_CONST.AGENT_TYPE_VDI, agent_install_type in (ENUM.TEMPORARY_SESSION, ENUM.DATA_COLLECTOR), XDM_CONST.AGENT_TYPE_COLLECTOR, to_string(agent_install_type)),
    xdm.source.agent.version = agent_version,
    xdm.source.host.device_id = agent_id,
    xdm.source.host.hostname = agent_hostname,
    xdm.source.host.ipv4_addresses = regextract(to_json_string(agent_interface_map),"(?:\d{1,3}\.){3}\d{1,3}"),
    xdm.source.host.ipv6_addresses = arraymerge(arraymap(agent_interface_map, to_json_string("@element"->ipv6[]))),
    xdm.source.host.mac_addresses = arraymap(agent_interface_map, "@element"->mac),
    xdm.source.host.os = agent_os_sub_type,
    xdm.source.host.os_family = if(agent_os_type=ENUM.AGENT_OS_WINDOWS, XDM_CONST.OS_FAMILY_WINDOWS, agent_os_type=ENUM.AGENT_OS_MAC, XDM_CONST.OS_FAMILY_MACOS,  agent_os_type=ENUM.AGENT_OS_LINUX, XDM_CONST.OS_FAMILY_LINUX),
    xdm.source.process.causality_id = actor_process_causality_id,
    xdm.source.process.command_line = actor_process_command_line,
    xdm.source.process.container_id = actor_process_container_id,
    xdm.source.process.executable.extension = actor_process_image_extension,
    xdm.source.process.executable.file_type = if(action_file_type=0, "Unknown", action_file_type=1, "MZ(executable)", action_file_type=2, "PK(Zipfile)", action_file_type=3, "OLE(CompoundDocument)", action_file_type=4, "RAR", action_file_type=5, "LNK", action_file_type=6, "PNG", action_file_type=7, "EML", action_file_type=8, "GIF", action_file_type=9, "7ZIP", action_file_type=10, "RTF", action_file_type=11, "PDF", action_file_type=12, "JavaClass", action_file_type=13, "MP3", action_file_type=14, "SWF", action_file_type=15, "GZ", action_file_type=16, "JPG", action_file_type=17, "BMP", action_file_type=18, "NotEvaluated", action_file_type=19, "ELF", action_file_type=20, "Mach032", action_file_type=21, "Mach064", action_file_type=22, "Shabang", action_file_type=23, "Rpm", action_file_type=24, "Deb", action_file_type=25, "Tar", action_file_type=26, "Zip", action_file_type=27, "Bz2", action_file_type=28, "Xz", action_file_type=29, "shell", action_file_type=30, "Python", action_file_type=31, "Perl", action_file_type=32, "ShimDb", action_file_type=33, "WinMemDmp", action_file_type=34, "VBE", to_string(action_file_type)),
    xdm.source.process.executable.filename = actor_process_image_name,
    xdm.source.process.executable.is_signed = if(actor_process_signature_status in (ENUM.SIGNED, ENUM.SIGNED_INVALID, ENUM.WEAK_HASH, ENUM.INVALID_CVE2020_0601)),
    xdm.source.process.executable.md5 = actor_process_image_md5,
    xdm.source.process.executable.path = actor_process_image_path,
    xdm.source.process.executable.sha256 = actor_process_image_sha256,
    xdm.source.process.executable.signature_status = if(actor_process_signature_status=ENUM.SIGNED, XDM_CONST.SIGNATURE_STATUS_SIGNED_VERIFIED, actor_process_signature_status in (ENUM.SIGNED_INVALID, ENUM.WEAK_HASH, ENUM.INVALID_CVE2020_0601), XDM_CONST.SIGNATURE_STATUS_SIGNED_INVALID, actor_process_signature_status=ENUM.UNSIGNED, XDM_CONST.SIGNATURE_STATUS_UNSIGNED, XDM_CONST.SIGNATURE_STATUS_STATUS_UNKNOWN),
    xdm.source.process.executable.signer = actor_process_signature_vendor,
    xdm.source.process.identifier = actor_process_instance_id,
    xdm.source.process.integrity_level = actor_process_integrity_level,
    xdm.source.process.is_injected = actor_is_injected_thread,
    xdm.source.process.name = actor_process_image_name,
    xdm.source.process.pid = actor_process_os_pid,
    xdm.source.process.thread_id = actor_thread_thread_id,
    xdm.source.user.identifier = actor_primary_user_sid,
    xdm.source.user.username = actor_primary_username,
    xdm.target.file.extension = action_file_extension,
    xdm.target.file.file_type = if(action_file_type=0, "Unknown", action_file_type=1, "MZ(executable)", action_file_type=2, "PK(Zipfile)", action_file_type=3, "OLE(CompoundDocument)", action_file_type=4, "RAR", action_file_type=5, "LNK", action_file_type=6, "PNG", action_file_type=7, "EML", action_file_type=8, "GIF", action_file_type=9, "7ZIP", action_file_type=10, "RTF", action_file_type=11, "PDF", action_file_type=12, "JavaClass", action_file_type=13, "MP3", action_file_type=14, "SWF", action_file_type=15, "GZ", action_file_type=16, "JPG", action_file_type=17, "BMP", action_file_type=18, "NotEvaluated", action_file_type=19, "ELF", action_file_type=20, "Mach032", action_file_type=21, "Mach064", action_file_type=22, "Shabang", action_file_type=23, "Rpm", action_file_type=24, "Deb", action_file_type=25, "Tar", action_file_type=26, "Zip", action_file_type=27, "Bz2", action_file_type=28, "Xz", action_file_type=29, "shell", action_file_type=30, "Python", action_file_type=31, "Perl", action_file_type=32, "ShimDb", action_file_type=33, "WinMemDmp", action_file_type=34, "VBE", to_string(action_file_type)),
    xdm.target.file.filename = action_file_name,
    xdm.target.file.md5 = action_file_md5,
    xdm.target.file.path = action_file_path,
    xdm.target.file.sha256 = action_file_sha256,
    xdm.target.file.signature_status = if(action_file_signature_status=ENUM.SIGNED, XDM_CONST.SIGNATURE_STATUS_SIGNED_VERIFIED, action_file_signature_status in (ENUM.SIGNED_INVALID, ENUM.WEAK_HASH, ENUM.INVALID_CVE2020_0601), XDM_CONST.SIGNATURE_STATUS_SIGNED_INVALID, action_file_signature_status=ENUM.UNSIGNED, XDM_CONST.SIGNATURE_STATUS_UNSIGNED, XDM_CONST.SIGNATURE_STATUS_STATUS_UNKNOWN),
    xdm.target.file.signer = action_file_signature_vendor,
    xdm.target.file_before.extension = action_file_previous_file_extension,
    xdm.target.file_before.file_type = if(action_file_type_prev=0, "Unknown", action_file_type_prev=1, "MZ", action_file_type_prev=2, "PK", action_file_type_prev=3, "OLE", action_file_type_prev=4, "RAR", action_file_type_prev=5, "LNK", action_file_type_prev=6, "PNG", action_file_type_prev=7, "EML", action_file_type_prev=8, "GIF", action_file_type_prev=9, "7ZIP", action_file_type_prev=10, "RTF", action_file_type_prev=11, "PDF", action_file_type_prev=12, "JavaClass", action_file_type_prev=13, "MP3", action_file_type_prev=14, "SWF", action_file_type_prev=15, "GZ", action_file_type_prev=16, "JPG", action_file_type_prev=17, "BMP", action_file_type_prev=18, "NotEvaluated", action_file_type_prev=19, "ELF", action_file_type_prev=20, "Mach032", action_file_type_prev=21, "Mach064", action_file_type_prev=22, "Shabang", action_file_type_prev=23, "Rpm", action_file_type_prev=24, "Deb", action_file_type_prev=25, "Tar", action_file_type_prev=26, "Zip", action_file_type_prev=27, "Bz2", action_file_type_prev=28, "Xz", action_file_type_prev=29, "shell", action_file_type_prev=30, "Python", action_file_type_prev=31, "Perl", action_file_type_prev=32, "ShimDb", action_file_type_prev=33, "WinMemDmp", action_file_type_prev=34, "VBE", to_string(action_file_type_prev)),
    xdm.target.file_before.filename = action_file_previous_file_name,
    xdm.target.file_before.path = action_file_previous_file_path,
    xdm.target.module.directory = arrayindex(action_module_path_parts, -2),
    xdm.target.module.extension = arrayindex(split(arrayindex(action_module_path_parts, -1), "."), -1),
    xdm.target.module.filename = arrayindex(action_module_path_parts, -1),
    xdm.target.module.is_signed = if(action_module_signature_status in (ENUM.SIGNED, ENUM.SIGNED_INVALID, ENUM.WEAK_HASH, ENUM.INVALID_CVE2020_0601)),
    xdm.target.module.md5 = action_module_md5,
    xdm.target.module.path = action_module_path,
    xdm.target.module.sha256 = action_module_sha256,
    xdm.target.module.signature_status = if(action_module_signature_status=ENUM.SIGNED, XDM_CONST.SIGNATURE_STATUS_SIGNED_VERIFIED, action_module_signature_status in (ENUM.SIGNED_INVALID, ENUM.WEAK_HASH, ENUM.INVALID_CVE2020_0601), XDM_CONST.SIGNATURE_STATUS_SIGNED_INVALID, action_module_signature_status=ENUM.UNSIGNED, XDM_CONST.SIGNATURE_STATUS_UNSIGNED, XDM_CONST.SIGNATURE_STATUS_STATUS_UNKNOWN),
    xdm.target.module.signer = action_module_signature_vendor,
    xdm.target.process.causality_id = action_process_causality_id,
    xdm.target.process.command_line = action_process_image_command_line,
    xdm.source.process.executable.directory = if(actor_process_image_path contains "/", arrayindex(split(actor_process_image_path, "/"), -2), actor_process_image_path contains """\\""", arrayindex(split(actor_process_image_path, """\\"""), -2)),
    xdm.target.process.executable.extension = action_process_image_extension,
    xdm.target.process.executable.file_type = if(action_file_type=0, "Unknown", action_file_type=1, "MZ(executable)", action_file_type=2, "PK(Zipfile)", action_file_type=3, "OLE(CompoundDocument)", action_file_type=4, "RAR", action_file_type=5, "LNK", action_file_type=6, "PNG", action_file_type=7, "EML", action_file_type=8, "GIF", action_file_type=9, "7ZIP", action_file_type=10, "RTF", action_file_type=11, "PDF", action_file_type=12, "JavaClass", action_file_type=13, "MP3", action_file_type=14, "SWF", action_file_type=15, "GZ", action_file_type=16, "JPG", action_file_type=17, "BMP", action_file_type=18, "NotEvaluated", action_file_type=19, "ELF", action_file_type=20, "Mach032", action_file_type=21, "Mach064", action_file_type=22, "Shabang", action_file_type=23, "Rpm", action_file_type=24, "Deb", action_file_type=25, "Tar", action_file_type=26, "Zip", action_file_type=27, "Bz2", action_file_type=28, "Xz", action_file_type=29, "shell", action_file_type=30, "Python", action_file_type=31, "Perl", action_file_type=32, "ShimDb", action_file_type=33, "WinMemDmp", action_file_type=34, "VBE", to_string(action_file_type)),
    xdm.target.process.executable.filename = action_process_image_name,
    xdm.target.process.executable.md5 = action_process_image_md5,
    xdm.target.process.executable.path = action_process_image_path,
    xdm.target.process.executable.sha256 = action_process_image_sha256,
    xdm.target.process.identifier = action_process_instance_id,
    xdm.target.process.integrity_level = action_process_integrity_level,
    xdm.target.process.name = action_process_image_name,
    xdm.target.process.parent_id = action_process_requested_parent_iid,
    xdm.target.process.pid = action_process_os_pid,
    xdm.target.registry.data = action_registry_data,
    xdm.target.registry.key = action_registry_key_name,
    xdm.target.registry.value = action_registry_value_name,
    xdm.target.registry.value_type = if(action_registry_value_type=ENUM.TYPE_SZ, XDM_CONST.REGISTRY_VALUE_TYPE_REG_SZ,action_registry_value_type=ENUM.TYPE_EXPAND_SZ, XDM_CONST.REGISTRY_VALUE_TYPE_REG_EXPAND_SZ,action_registry_value_type=ENUM.TYPE_BINARY, XDM_CONST.REGISTRY_VALUE_TYPE_REG_BINARY,action_registry_value_type=ENUM.TYPE_DWORD, XDM_CONST.REGISTRY_VALUE_TYPE_REG_DWORD,action_registry_value_type=ENUM.TYPE_DWORD_BIG_ENDIAN, XDM_CONST.REGISTRY_VALUE_TYPE_REG_DWORD_BIG_ENDIAN,action_registry_value_type=ENUM.TYPE_LINK, XDM_CONST.REGISTRY_VALUE_TYPE_REG_LINK,action_registry_value_type=ENUM.TYPE_MULTI_SZ, XDM_CONST.REGISTRY_VALUE_TYPE_REG_MULTI_SZ,action_registry_value_type=ENUM.TYPE_QWORD, XDM_CONST.REGISTRY_VALUE_TYPE_REG_QWORD, to_string(action_registry_value_type)),
    xdm.target.registry_before.data = action_registry_old_data,
    xdm.target.registry_before.key = action_registry_old_key_name;
/* -------------------------------------
   ------- Marketplace mappings --------
   ------------------------------------- */



[MODEL: dataset = akamai_waf_raw, content_id="Akamai_SIEM"]
/* 
    Reference: https://techdocs.akamai.com/siem-integration/reference/get-configid
    Swagger: https://github.com/akamai/akamai-apis/blob/main/apis/siem/v1/openapi.json 
*/ 
alter // pre-modeling extractions 
    client_ip = attackData -> clientIP,
    client_platform = httpMessage -> requestHeaders.sec_ch_ua_platform,
    host = httpMessage -> host,
    http_method = httpMessage -> method,
    path = httpMessage -> path,
    port = to_integer(httpMessage -> port),
    query = httpMessage -> query,
    response_code = httpMessage -> status,
    rule_actions = arraystring(json_extract_scalar_array(attackData, "$.ruleActions"), ";"),
    rule_messages = json_extract_scalar_array(attackData, "$.ruleMessages"),
    rules = arraystring(json_extract_scalar_array(attackData, "$.rules"), ";"),
    as_number = geo -> asn

| alter // initialize the url components 
    // set url scheme according to protocol which is an enum of either 80 or 443 
    scheme = if(port = 80, "http://", port = 443, "https://", ""),

    // trim trailing / from url path 
    path = rtrim(coalesce(path, ""), "/"),

    // add query separator if required
    query = if(query != null and query != "", concat("?", query), "")

// construct url: <scheme>://<host><path>?<query>
| alter url = concat(scheme, host, path, query )

| alter // XDM Mappings
    xdm.alert.description = arraystring(rule_messages, ";"), // The message reported by each triggered rule.
    xdm.alert.name = rules, // A series of identifiers for rules within the configuration that triggered for this request.
    xdm.alert.risks = rule_messages, // The message reported by each triggered rule. 
    xdm.event.id = httpMessage -> requestId, // A unique identifier for each request.
    xdm.network.application_protocol = httpMessage -> protocol,
    xdm.network.http.content_type = httpMessage -> responseHeaders.Content_Type,
    xdm.network.http.domain = host, // The incoming client request's Host header.
    xdm.network.http.method = if(http_method = "GET", XDM_CONST.HTTP_METHOD_GET, http_method = "POST", XDM_CONST.HTTP_METHOD_POST, http_method = "PUT", XDM_CONST.HTTP_METHOD_PUT, http_method = "OPTIONS", XDM_CONST.HTTP_METHOD_OPTIONS, http_method = "CONNECT", XDM_CONST.HTTP_METHOD_CONNECT, http_method = "ACL", XDM_CONST.HTTP_METHOD_ACL, http_method = "BASELINE_CONTROL", XDM_CONST.HTTP_METHOD_BASELINE_CONTROL, http_method = "BIND", XDM_CONST.HTTP_METHOD_BIND, http_method = "CHECKIN", XDM_CONST.HTTP_METHOD_CHECKIN, http_method = "CHECKOUT", XDM_CONST.HTTP_METHOD_CHECKOUT, http_method = "COPY", XDM_CONST.HTTP_METHOD_COPY, http_method = "DELETE", XDM_CONST.HTTP_METHOD_DELETE, http_method = "HEAD", XDM_CONST.HTTP_METHOD_HEAD, http_method = "LABEL", XDM_CONST.HTTP_METHOD_LABEL, http_method = "LINK", XDM_CONST.HTTP_METHOD_LINK, http_method = "LOCK", XDM_CONST.HTTP_METHOD_LOCK, http_method = "MERGE", XDM_CONST.HTTP_METHOD_MERGE, http_method = "MKACTIVITY", XDM_CONST.HTTP_METHOD_MKACTIVITY, http_method = "MKCALENDAR", XDM_CONST.HTTP_METHOD_MKCALENDAR, http_method = "MKCOL", XDM_CONST.HTTP_METHOD_MKCOL, http_method = "MKREDIRECTREF", XDM_CONST.HTTP_METHOD_MKREDIRECTREF, http_method = "MKWORKSPACE", XDM_CONST.HTTP_METHOD_MKWORKSPACE, http_method = "MOVE", XDM_CONST.HTTP_METHOD_MOVE, http_method = "ORDERPATCH", XDM_CONST.HTTP_METHOD_ORDERPATCH, http_method = "PATCH", XDM_CONST.HTTP_METHOD_PATCH, http_method = "PRI", XDM_CONST.HTTP_METHOD_PRI, http_method = "PROPFIND", XDM_CONST.HTTP_METHOD_PROPFIND, http_method = "PROPPATCH", XDM_CONST.HTTP_METHOD_PROPPATCH, http_method = "REBIND", XDM_CONST.HTTP_METHOD_REBIND, http_method = "REPORT", XDM_CONST.HTTP_METHOD_REPORT, http_method = "SEARCH", XDM_CONST.HTTP_METHOD_SEARCH, http_method = "TRACE", XDM_CONST.HTTP_METHOD_TRACE, http_method = "UNBIND", XDM_CONST.HTTP_METHOD_UNBIND, http_method = "UNCHECKOUT", XDM_CONST.HTTP_METHOD_UNCHECKOUT, http_method = "UNLINK", XDM_CONST.HTTP_METHOD_UNLINK, http_method = "UNLOCK", XDM_CONST.HTTP_METHOD_UNLOCK, http_method = "UPDATE", XDM_CONST.HTTP_METHOD_UPDATE, http_method = "UPDATEREDIRECTREF", XDM_CONST.HTTP_METHOD_UPDATEREDIRECTREF, http_method = "VERSION_CONTROL", XDM_CONST.HTTP_METHOD_VERSION_CONTROL, http_method),
    xdm.network.http.referrer = httpMessage -> requestHeaders.Referer,
    xdm.network.http.response_code = if(response_code = "200", XDM_CONST.HTTP_RSP_CODE_OK, response_code = "201", XDM_CONST.HTTP_RSP_CODE_CREATED, response_code = "302", XDM_CONST.HTTP_RSP_CODE_FOUND, response_code = "401", XDM_CONST.HTTP_RSP_CODE_UNAUTHORIZED, response_code = "403", XDM_CONST.HTTP_RSP_CODE_FORBIDDEN, response_code = "404", XDM_CONST.HTTP_RSP_CODE_NOT_FOUND, response_code = "500", XDM_CONST.HTTP_RSP_CODE_INTERNAL_SERVER_ERROR, response_code = "501", XDM_CONST.HTTP_RSP_CODE_NOT_IMPLEMENTED, response_code = "502", XDM_CONST.HTTP_RSP_CODE_BAD_GATEWAY, response_code = "503", XDM_CONST.HTTP_RSP_CODE_SERVICE_UNAVAILABLE, response_code = "504", XDM_CONST.HTTP_RSP_CODE_GATEWAY_TIMEOUT, response_code = "505", XDM_CONST.HTTP_RSP_CODE_HTTP_VERSION_NOT_SUPPORTED, response_code = "506", XDM_CONST.HTTP_RSP_CODE_VARIANT_ALSO_NEGOTIATES, response_code = "507", XDM_CONST.HTTP_RSP_CODE_INSUFFICIENT_STORAGE, response_code = "508", XDM_CONST.HTTP_RSP_CODE_LOOP_DETECTED, response_code = "511", XDM_CONST.HTTP_RSP_CODE_NETWORK_AUTHENTICATION_REQUIRED, response_code = "100", XDM_CONST.HTTP_RSP_CODE_CONTINUE, response_code = "101", XDM_CONST.HTTP_RSP_CODE_SWITCHING_PROTOCOLS, response_code = "102", XDM_CONST.HTTP_RSP_CODE_PROCESSING, response_code = "103", XDM_CONST.HTTP_RSP_CODE_EARLY_HINTS, response_code = "202", XDM_CONST.HTTP_RSP_CODE_ACCEPTED, response_code = "203", XDM_CONST.HTTP_RSP_CODE_NON__AUTHORITATIVE_INFORMATION, response_code = "204", XDM_CONST.HTTP_RSP_CODE_NO_CONTENT, response_code = "205", XDM_CONST.HTTP_RSP_CODE_RESET_CONTENT, response_code = "206", XDM_CONST.HTTP_RSP_CODE_PARTIAL_CONTENT, response_code = "207", XDM_CONST.HTTP_RSP_CODE_MULTI__STATUS, response_code = "208", XDM_CONST.HTTP_RSP_CODE_ALREADY_REPORTED, response_code = "226", XDM_CONST.HTTP_RSP_CODE_IM_USED, response_code = "300", XDM_CONST.HTTP_RSP_CODE_MULTIPLE_CHOICES, response_code = "301", XDM_CONST.HTTP_RSP_CODE_MOVED_PERMANENTLY, response_code = "303", XDM_CONST.HTTP_RSP_CODE_SEE_OTHER, response_code = "304", XDM_CONST.HTTP_RSP_CODE_NOT_MODIFIED, response_code = "305", XDM_CONST.HTTP_RSP_CODE_USE_PROXY, response_code = "307", XDM_CONST.HTTP_RSP_CODE_TEMPORARY_REDIRECT, response_code = "308", XDM_CONST.HTTP_RSP_CODE_PERMANENT_REDIRECT, response_code = "400", XDM_CONST.HTTP_RSP_CODE_BAD_REQUEST, response_code = "402", XDM_CONST.HTTP_RSP_CODE_PAYMENT_REQUIRED, response_code = "405", XDM_CONST.HTTP_RSP_CODE_METHOD_NOT_ALLOWED, response_code = "406", XDM_CONST.HTTP_RSP_CODE_NOT_ACCEPTABLE, response_code = "407", XDM_CONST.HTTP_RSP_CODE_PROXY_AUTHENTICATION_REQUIRED, response_code = "408", XDM_CONST.HTTP_RSP_CODE_REQUEST_TIMEOUT, response_code = "409", XDM_CONST.HTTP_RSP_CODE_CONFLICT, response_code = "410", XDM_CONST.HTTP_RSP_CODE_GONE, response_code = "411", XDM_CONST.HTTP_RSP_CODE_LENGTH_REQUIRED, response_code = "412", XDM_CONST.HTTP_RSP_CODE_PRECONDITION_FAILED, response_code = "413", XDM_CONST.HTTP_RSP_CODE_CONTENT_TOO_LARGE, response_code = "414", XDM_CONST.HTTP_RSP_CODE_URI_TOO_LONG, response_code = "415", XDM_CONST.HTTP_RSP_CODE_UNSUPPORTED_MEDIA_TYPE, response_code = "416", XDM_CONST.HTTP_RSP_CODE_RANGE_NOT_SATISFIABLE, response_code = "417", XDM_CONST.HTTP_RSP_CODE_EXPECTATION_FAILED, response_code = "421", XDM_CONST.HTTP_RSP_CODE_MISDIRECTED_REQUEST, response_code = "422", XDM_CONST.HTTP_RSP_CODE_UNPROCESSABLE_CONTENT, response_code = "423", XDM_CONST.HTTP_RSP_CODE_LOCKED, response_code = "424", XDM_CONST.HTTP_RSP_CODE_FAILED_DEPENDENCY, response_code = "425", XDM_CONST.HTTP_RSP_CODE_TOO_EARLY, response_code = "426", XDM_CONST.HTTP_RSP_CODE_UPGRADE_REQUIRED, response_code = "428", XDM_CONST.HTTP_RSP_CODE_PRECONDITION_REQUIRED, response_code = "429", XDM_CONST.HTTP_RSP_CODE_TOO_MANY_REQUESTS, response_code = "431", XDM_CONST.HTTP_RSP_CODE_REQUEST_HEADER_FIELDS_TOO_LARGE, response_code = "451", XDM_CONST.HTTP_RSP_CODE_UNAVAILABLE_FOR_LEGAL_REASONS, response_code),
    xdm.network.http.url = url,
    xdm.network.rule = attackData -> policyId, // Unique identifier for the firewall policy applied to this request.
    xdm.network.tls.protocol_version = httpMessage -> tls,
    xdm.observer.action = rule_actions, // Identifies whether the request was aborted (deny) or allowed to pass with a warning logged (alert).
    xdm.observer.name = type, // Characterizes the source of this report data. Value is always "akamai_siem".
    xdm.source.application.name = clientData -> appBundleId, 
    xdm.source.application.version = clientData -> appVersion,
    xdm.source.asn.as_number = if(as_number ~= "\D|^\s*$", null, to_integer(as_number)), // The AS number or numbers that the IP belongs to.
    xdm.source.host.os_family = if(client_platform contains "WINDOWS", XDM_CONST.OS_FAMILY_WINDOWS, client_platform contains "MAC", XDM_CONST.OS_FAMILY_MACOS, client_platform contains "LINUX", XDM_CONST.OS_FAMILY_LINUX, client_platform contains "ANDROID", XDM_CONST.OS_FAMILY_ANDROID, client_platform contains "IOS", XDM_CONST.OS_FAMILY_IOS, client_platform contains "UBUNTU", XDM_CONST.OS_FAMILY_UBUNTU, client_platform contains "DEBIAN", XDM_CONST.OS_FAMILY_DEBIAN, client_platform contains "FEDORA", XDM_CONST.OS_FAMILY_FEDORA, client_platform contains "CENTOS", XDM_CONST.OS_FAMILY_CENTOS, client_platform contains "CHROME", XDM_CONST.OS_FAMILY_CHROMEOS, client_platform contains "SOLARIS", XDM_CONST.OS_FAMILY_SOLARIS, client_platform contains "SCADA", XDM_CONST.OS_FAMILY_SCADA, client_platform),
    xdm.source.ipv4 = if(client_ip ~= "(?:\d{1,3}\.){3}\d{1,3}", client_ip), // // The IPv4 address of the client making the request.
    xdm.source.ipv6 = if(client_ip ~= ":", client_ip), // // The IPv6 address of the client making the request.
    xdm.source.location.city = geo -> city,
    xdm.source.location.continent = geo -> continent,
    xdm.source.location.region = geo -> regionCode, 
    xdm.source.user_agent = httpMessage -> requestHeaders.User_Agent,
    xdm.source.user.identifier = userRiskData -> uuid, // Unique identifier for the user whose user risk data is provided here. Available only to Identity Protector customers and only on endpoints configured for identity protection.
    xdm.source.user.username = userRiskData -> username, // The unencrypted username, provided at login by the user. Available only to Identity Protector customers and only on endpoints configured for identity protection.
    xdm.target.port = port,
    xdm.target.resource.id = attackData -> apiId, // For attacks on API services, this is a unique identifier under which the API is protected. It corresponds to the apiEndPointId value in the API Endpoint Definition API.
    xdm.target.sent_bytes = to_integer(httpMessage -> bytes), // The number of bytes served in the response.
    xdm.target.url = url;


[MODEL: dataset = "cisco_secure_endpoint_raw", content_id="AMP"]
alter
        external_ip = computer -> external_ip,
        network_addresses_ips = arraymap(computer -> network_addresses[], "@element" -> ip),
        first_ip_network_addresses = json_extract_scalar(arrayindex(computer -> network_addresses[], 0), "$.ip"),
        file_description = concat(file -> file_name, " - ", file -> disposition),
        cloud_ioc_description = cloud_ioc -> description,
        remote_ip_network_info = network_info -> remote_ip,
        protocol_network_info = network_info -> nfm.protocol
| alter
        xdm.event.id = to_string(id),
        xdm.event.type = event_type,
        xdm.event.description = if(file_description != null and cloud_ioc_description != null, concat(cloud_ioc_description, "; ", file_description), coalesce(cloud_ioc_description, file_description )),
        xdm.event.outcome = if(lowercase(event_type) contains "fail", XDM_CONST.OUTCOME_FAILED, lowercase(event_type) contains "succ", XDM_CONST.OUTCOME_SUCCESS, null),
        xdm.event.outcome_reason = error -> description,
        xdm.alert.original_threat_id = coalesce(detection_id, threat_hunting -> incident_hunt_guid),
        xdm.alert.severity = severity,
        xdm.alert.original_threat_name = detection,
        xdm.alert.name = coalesce(detection, threat_hunting -> incident_title),
        xdm.alert.description = threat_hunting -> incident_summary,
        xdm.alert.mitre_tactics = arraymap(tactics -> [], trim("@element", "\"")),
        xdm.alert.mitre_techniques = arraymap(techniques -> [], trim("@element", "\"")),
        xdm.alert.risks = vulnerabilities -> [],
        xdm.source.host.hostname = computer -> hostname,
        xdm.source.user.username = computer -> user,
        xdm.source.agent.identifier = connector_guid,
        xdm.intermediate.ipv4 = if(external_ip ~= "\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}", external_ip, null),
        xdm.intermediate.ipv6 = if(external_ip ~= "[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}", external_ip, null),
        xdm.source.ipv4 = if(first_ip_network_addresses ~= "\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}", first_ip_network_addresses, null),
        xdm.source.ipv6 = if(first_ip_network_addresses ~= "[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}", first_ip_network_addresses, null),
        xdm.source.host.ipv4_addresses = arrayfilter(network_addresses_ips, "@element" ~= "\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}"),
        xdm.source.host.ipv6_addresses = arrayfilter(network_addresses_ips, "@element" ~= "[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}"),
        xdm.source.host.mac_addresses = arraymap(computer -> network_addresses[], "@element" -> mac),
        xdm.target.file.filename = file -> file_name,
        xdm.target.file.path = file -> file_path,
        xdm.target.file.md5 = file -> identity.md5,
        xdm.target.file.sha256 = file -> identity.sha256,
        xdm.source.process.pid = coalesce(to_integer(file -> parent.process_id), to_integer(network_info -> parent.process_id)),
        xdm.source.process.command_line = command_line -> arguments,
        xdm.source.process.executable.filename = coalesce(file -> parent.file_name, network_info -> parent.file_name),
        xdm.source.process.executable.md5 = coalesce(file -> parent.identity.md5, network_info -> parent.identity.md5),
        xdm.source.process.executable.sha256 = coalesce(file -> parent.identity.sha256, network_info -> parent.identity.sha256),
        xdm.target.ipv4 = if(remote_ip_network_info ~= "\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}", remote_ip_network_info, null),
        xdm.target.ipv6 = if(remote_ip_network_info ~= "[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}", remote_ip_network_info, null),
        xdm.target.port = to_integer(network_info -> remote_port),
        xdm.target.url = network_info -> dirty_url,
        xdm.network.http.url = network_info -> dirty_url,
        xdm.network.ip_protocol = if(protocol_network_info = "HOPOPT", XDM_CONST.IP_PROTOCOL_HOPOPT, protocol_network_info = "ICMP",XDM_CONST.IP_PROTOCOL_ICMP, protocol_network_info = "IGMP",XDM_CONST.IP_PROTOCOL_IGMP, protocol_network_info = "GGP",XDM_CONST.IP_PROTOCOL_GGP, protocol_network_info = "IP",XDM_CONST.IP_PROTOCOL_IP, protocol_network_info = "ST",XDM_CONST.IP_PROTOCOL_ST, protocol_network_info = "TCP",XDM_CONST.IP_PROTOCOL_TCP, protocol_network_info = "CBT",XDM_CONST.IP_PROTOCOL_CBT, protocol_network_info = "EGP",XDM_CONST.IP_PROTOCOL_EGP, protocol_network_info = "IGP",XDM_CONST.IP_PROTOCOL_IGP, protocol_network_info = "BBN_RCC_MON",XDM_CONST.IP_PROTOCOL_BBN_RCC_MON, protocol_network_info = "NVP_II",XDM_CONST.IP_PROTOCOL_NVP_II, protocol_network_info = "PUP",XDM_CONST.IP_PROTOCOL_PUP, protocol_network_info = "ARGUS",XDM_CONST.IP_PROTOCOL_ARGUS, protocol_network_info = "EMCON",XDM_CONST.IP_PROTOCOL_EMCON, protocol_network_info = "XNET",XDM_CONST.IP_PROTOCOL_XNET, protocol_network_info = "CHAOS",XDM_CONST.IP_PROTOCOL_CHAOS, protocol_network_info = "UDP",XDM_CONST.IP_PROTOCOL_UDP, protocol_network_info = "MUX",XDM_CONST.IP_PROTOCOL_MUX, protocol_network_info = "DCN_MEAS",XDM_CONST.IP_PROTOCOL_DCN_MEAS, protocol_network_info = "HMP",XDM_CONST.IP_PROTOCOL_HMP, protocol_network_info = "PRM",XDM_CONST.IP_PROTOCOL_PRM, protocol_network_info = "XNS_IDP",XDM_CONST.IP_PROTOCOL_XNS_IDP, protocol_network_info = "TRUNK_1",XDM_CONST.IP_PROTOCOL_TRUNK_1, protocol_network_info = "TRUNK_2",XDM_CONST.IP_PROTOCOL_TRUNK_2, protocol_network_info = "LEAF_1",XDM_CONST.IP_PROTOCOL_LEAF_1, protocol_network_info = "LEAF_2",XDM_CONST.IP_PROTOCOL_LEAF_2, protocol_network_info = "RDP",XDM_CONST.IP_PROTOCOL_RDP, protocol_network_info = "IRTP",XDM_CONST.IP_PROTOCOL_IRTP, protocol_network_info = "ISO_TP4",XDM_CONST.IP_PROTOCOL_ISO_TP4, protocol_network_info = "NETBLT",XDM_CONST.IP_PROTOCOL_NETBLT, protocol_network_info = "MFE_NSP",XDM_CONST.IP_PROTOCOL_MFE_NSP, protocol_network_info = "MERIT_INP",XDM_CONST.IP_PROTOCOL_MERIT_INP, protocol_network_info = "DCCP",XDM_CONST.IP_PROTOCOL_DCCP, protocol_network_info = "3PC",XDM_CONST.IP_PROTOCOL_3PC, protocol_network_info = "IDPR",XDM_CONST.IP_PROTOCOL_IDPR, protocol_network_info = "XTP",XDM_CONST.IP_PROTOCOL_XTP, protocol_network_info = "DDP",XDM_CONST.IP_PROTOCOL_DDP, protocol_network_info = "IDPR_CMTP",XDM_CONST.IP_PROTOCOL_IDPR_CMTP, protocol_network_info = "TP",XDM_CONST.IP_PROTOCOL_TP, protocol_network_info = "IL",XDM_CONST.IP_PROTOCOL_IL, protocol_network_info = "IPV6",XDM_CONST.IP_PROTOCOL_IPV6, protocol_network_info = "SDRP",XDM_CONST.IP_PROTOCOL_SDRP, protocol_network_info = "IPV6_ROUTE",XDM_CONST.IP_PROTOCOL_IPV6_ROUTE, protocol_network_info = "IPV6_FRAG",XDM_CONST.IP_PROTOCOL_IPV6_FRAG, protocol_network_info = "IDRP",XDM_CONST.IP_PROTOCOL_IDRP, protocol_network_info = "RSVP",XDM_CONST.IP_PROTOCOL_RSVP, protocol_network_info = "GRE",XDM_CONST.IP_PROTOCOL_GRE, protocol_network_info = "DSR",XDM_CONST.IP_PROTOCOL_DSR, protocol_network_info = "BNA",XDM_CONST.IP_PROTOCOL_BNA, protocol_network_info = "ESP",XDM_CONST.IP_PROTOCOL_ESP, protocol_network_info = "AH",XDM_CONST.IP_PROTOCOL_AH, protocol_network_info = "I_NLSP",XDM_CONST.IP_PROTOCOL_I_NLSP, protocol_network_info = "SWIPE",XDM_CONST.IP_PROTOCOL_SWIPE, protocol_network_info = "NARP",XDM_CONST.IP_PROTOCOL_NARP, protocol_network_info = "MOBILE",XDM_CONST.IP_PROTOCOL_MOBILE, protocol_network_info = "TLSP",XDM_CONST.IP_PROTOCOL_TLSP, protocol_network_info = "SKIP",XDM_CONST.IP_PROTOCOL_SKIP, protocol_network_info = "IPV6_ICMP",XDM_CONST.IP_PROTOCOL_IPV6_ICMP, protocol_network_info = "IPV6_NONXT",XDM_CONST.IP_PROTOCOL_IPV6_NONXT, protocol_network_info = "IPV6_OPTS",XDM_CONST.IP_PROTOCOL_IPV6_OPTS, protocol_network_info = "CFTP",XDM_CONST.IP_PROTOCOL_CFTP, protocol_network_info = "SAT_EXPAK",XDM_CONST.IP_PROTOCOL_SAT_EXPAK, protocol_network_info = "KRYPTOLAN",XDM_CONST.IP_PROTOCOL_KRYPTOLAN, protocol_network_info = "RVD",XDM_CONST.IP_PROTOCOL_RVD, protocol_network_info = "IPPC",XDM_CONST.IP_PROTOCOL_IPPC, protocol_network_info = "SAT_MON",XDM_CONST.IP_PROTOCOL_SAT_MON, protocol_network_info = "VISA",XDM_CONST.IP_PROTOCOL_VISA, protocol_network_info = "IPCV",XDM_CONST.IP_PROTOCOL_IPCV, protocol_network_info = "CPNX",XDM_CONST.IP_PROTOCOL_CPNX, protocol_network_info = "CPHB",XDM_CONST.IP_PROTOCOL_CPHB, protocol_network_info = "WSN",XDM_CONST.IP_PROTOCOL_WSN, protocol_network_info = "PVP",XDM_CONST.IP_PROTOCOL_PVP, protocol_network_info = "BR_SAT_MON",XDM_CONST.IP_PROTOCOL_BR_SAT_MON, protocol_network_info = "SUN_ND",XDM_CONST.IP_PROTOCOL_SUN_ND, protocol_network_info = "WB_MON",XDM_CONST.IP_PROTOCOL_WB_MON, protocol_network_info = "WB_EXPAK",XDM_CONST.IP_PROTOCOL_WB_EXPAK, protocol_network_info = "ISO_IP",XDM_CONST.IP_PROTOCOL_ISO_IP, protocol_network_info = "VMTP",XDM_CONST.IP_PROTOCOL_VMTP, protocol_network_info = "SECURE_VMTP",XDM_CONST.IP_PROTOCOL_SECURE_VMTP, protocol_network_info = "VINES",XDM_CONST.IP_PROTOCOL_VINES, protocol_network_info = "TTP",XDM_CONST.IP_PROTOCOL_TTP, protocol_network_info = "NSFNET_IGP",XDM_CONST.IP_PROTOCOL_NSFNET_IGP, protocol_network_info = "DGP",XDM_CONST.IP_PROTOCOL_DGP, protocol_network_info = "TCF",XDM_CONST.IP_PROTOCOL_TCF, protocol_network_info = "EIGRP",XDM_CONST.IP_PROTOCOL_EIGRP, protocol_network_info = "OSPFIGP",XDM_CONST.IP_PROTOCOL_OSPFIGP, protocol_network_info = "SPRITE_RPC",XDM_CONST.IP_PROTOCOL_SPRITE_RPC, protocol_network_info = "LARP",XDM_CONST.IP_PROTOCOL_LARP, protocol_network_info = "MTP",XDM_CONST.IP_PROTOCOL_MTP, protocol_network_info = "AX25",XDM_CONST.IP_PROTOCOL_AX25, protocol_network_info = "IPIP",XDM_CONST.IP_PROTOCOL_IPIP, protocol_network_info = "MICP",XDM_CONST.IP_PROTOCOL_MICP, protocol_network_info = "SCC_SP",XDM_CONST.IP_PROTOCOL_SCC_SP, protocol_network_info = "ETHERIP",XDM_CONST.IP_PROTOCOL_ETHERIP, protocol_network_info = "ENCAP",XDM_CONST.IP_PROTOCOL_ENCAP, protocol_network_info = "GMTP",XDM_CONST.IP_PROTOCOL_GMTP, protocol_network_info = "IFMP",XDM_CONST.IP_PROTOCOL_IFMP, protocol_network_info = "PNNI",XDM_CONST.IP_PROTOCOL_PNNI, protocol_network_info = "PIM",XDM_CONST.IP_PROTOCOL_PIM, protocol_network_info = "ARIS",XDM_CONST.IP_PROTOCOL_ARIS, protocol_network_info = "SCPS",XDM_CONST.IP_PROTOCOL_SCPS, protocol_network_info = "QNX",XDM_CONST.IP_PROTOCOL_QNX, protocol_network_info = "AN",XDM_CONST.IP_PROTOCOL_AN, protocol_network_info = "IPCOMP",XDM_CONST.IP_PROTOCOL_IPCOMP, protocol_network_info = "SNP",XDM_CONST.IP_PROTOCOL_SNP, protocol_network_info = "COMPAQ_PEER",XDM_CONST.IP_PROTOCOL_COMPAQ_PEER, protocol_network_info = "IPX_IN_IP",XDM_CONST.IP_PROTOCOL_IPX_IN_IP, protocol_network_info = "VRRP",XDM_CONST.IP_PROTOCOL_VRRP, protocol_network_info = "PGM",XDM_CONST.IP_PROTOCOL_PGM, protocol_network_info = "L2TP",XDM_CONST.IP_PROTOCOL_L2TP, protocol_network_info = "DDX",XDM_CONST.IP_PROTOCOL_DDX, protocol_network_info = "IATP",XDM_CONST.IP_PROTOCOL_IATP, protocol_network_info = "STP",XDM_CONST.IP_PROTOCOL_STP, protocol_network_info = "SRP",XDM_CONST.IP_PROTOCOL_SRP, protocol_network_info = "UTI",XDM_CONST.IP_PROTOCOL_UTI, protocol_network_info = "SMP",XDM_CONST.IP_PROTOCOL_SMP, protocol_network_info = "SM",XDM_CONST.IP_PROTOCOL_SM, protocol_network_info = "PTP",XDM_CONST.IP_PROTOCOL_PTP, protocol_network_info = "ISIS",XDM_CONST.IP_PROTOCOL_ISIS, protocol_network_info = "FIRE",XDM_CONST.IP_PROTOCOL_FIRE, protocol_network_info = "CRTP",XDM_CONST.IP_PROTOCOL_CRTP, protocol_network_info = "CRUDP",XDM_CONST.IP_PROTOCOL_CRUDP, protocol_network_info = "SSCOPMCE",XDM_CONST.IP_PROTOCOL_SSCOPMCE, protocol_network_info = "IPLT",XDM_CONST.IP_PROTOCOL_IPLT, protocol_network_info = "SPS",XDM_CONST.IP_PROTOCOL_SPS, protocol_network_info = "PIPE",XDM_CONST.IP_PROTOCOL_PIPE, protocol_network_info = "SCTP",XDM_CONST.IP_PROTOCOL_SCTP, protocol_network_info = "FC",XDM_CONST.IP_PROTOCOL_FC, protocol_network_info = "RSVP_E2E_IGNORE",XDM_CONST.IP_PROTOCOL_RSVP_E2E_IGNORE, protocol_network_info = "MOBILITY",XDM_CONST.IP_PROTOCOL_MOBILITY, protocol_network_info = "UDPLITE",XDM_CONST.IP_PROTOCOL_UDPLITE, protocol_network_info = "MPLS_IN_IP",XDM_CONST.IP_PROTOCOL_MPLS_IN_IP, protocol_network_info = "MANET",XDM_CONST.IP_PROTOCOL_MANET, protocol_network_info = "HIP",XDM_CONST.IP_PROTOCOL_HIP, protocol_network_info = "SHIM6",XDM_CONST.IP_PROTOCOL_SHIM6, protocol_network_info = "WESP",XDM_CONST.IP_PROTOCOL_WESP, protocol_network_info = "ROHC",XDM_CONST.IP_PROTOCOL_ROHC, protocol_network_info = "RESERVED",XDM_CONST.IP_PROTOCOL_RESERVED,to_string(protocol_network_info));


[MODEL: dataset="apache_tomcat_raw", content_id="ApacheTomcat"]
filter _raw_log contains "GET" or _raw_log contains "HEAD" or _raw_log contains "POST" or _raw_log contains "DELETE" or _raw_log contains "CONNECT" or _raw_log contains "OPTIONS" or _raw_log contains "TRACE" or _raw_log contains "PATCH"
| alter 
    Request_time = arrayindex(regextract(_raw_log, "\[(\d+\/\w+\/\d+\:\S+)"), 0),
    Username = arrayindex(regextract(_raw_log,"(\S+)\s\[\d+\/"),0),
    url = arrayindex(regextract(_raw_log,"\"[A-Z]+\s(\S+)\sHTTP"), 0),
    response_code = arrayindex(regextract(_raw_log,"\"\s(\d+)\s\d+"),0),
    User_agent = arrayindex(regextract(_raw_log,"\"\s\"([^\"]+)"),0),
    bytes_size = arrayindex(regextract(_raw_log,"\d\s(\d+)"),0),
    method = arrayindex(regextract(_raw_log,"\"([A-Z]+)\s\S+\sHTTP"), 0)
    // extract source_ip
    | alter
            sourceipv4 = arrayindex(regextract(_raw_log, "(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\s)\-"),0),
            sourceipv6 = arrayindex(regextract(_raw_log,"(\w+\:\w+\:\w+\:\w+\:\w+\:\w+\:\w+\:\w+)"),0)
    // end extract source_ip
    | alter
    //    _time = parse_timestamp("%d/%b/%Y:%k:%M:%S", request_time),
    xdm.source.user.username = username,
    xdm.network.http.url = url,
    xdm.target.sent_bytes = to_number(bytes_size),
    xdm.source.ipv4 = sourceipv4,
    xdm.source.ipv6 = sourceipv6,
    xdm.network.http.response_code = response_code,
    xdm.network.http.method = method;


[MODEL: dataset = "aws_elb_raw", content_id="AWS_ELB"]
alter // initialize util constants
    field_separator = "##", // an arbitrary string that would be used as a temporary field separator to construct an ordinal list of all fields. This string must be different from any valid consecutive string that may appear on the original raw log.  
    NIL = "-" // the character that represents a blank field

// extract log fields which are separated by double quotes e.g., "user agent"
| alter quoted_fields = regextract(_raw_log, "\"(\S[^\"]+)") 

// split the raw log into segments, using quotes as a segment delimiter 
| alter log_segments = split(_raw_log, "\"")

 // clean white spaces from the extracted segments
| alter log_segments_cleaned = arrayfilter(arraymap(log_segments, trim("@element")), len("@element") > 0)

// insert a delimiter between the different fields within each segment 
| alter field_delimited_log_segments = arraymap(log_segments_cleaned, 
        // if the segment is originally a quoted string, leave it as is: 
        if(quoted_fields contains trim("@element"), "@element", 
        // edge case where the field is a comma-separated list (e.g. cs-auth-groups) of values and the original comparison fails 
        "@element" ~= ",\s", "@element",
        // else, add the defined separator between each field in the segment (separated originally by a space)
        arraystring(regextract("@element", "\S+"), field_separator)))
// add the field separator between the segments and flatten them to a unified string
| alter flattened_field_list  = arraystring(field_delimited_log_segments, field_separator)

// split the delimited string of fields into an index-based array 
| alter field_list = split(flattened_field_list, field_separator)

| alter
    client_ipv4 = regextract(arrayindex(field_list,3),"\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}"),
    client_ipv6 = regextract(arrayindex(field_list,3),"([a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5})\:"),
    client_port = regextract(arrayindex(field_list,3),"\:(\d+)"),
    target_ipv4 = regextract(arrayindex(field_list,4),"\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}"),
    target_ipv6 = regextract(arrayindex(field_list,4),"([a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5})\:"),
    req_port = regextract(arrayindex(field_list,4),"\:(\d+)"),
    req_method = regextract(arrayindex(field_list,12),"(\w+)\s"),
    req_url = regextract(arrayindex(field_list,12),"\w+\s(.+)\:"),
    target_port = regextract(arrayindex(field_list,12),"\:(\d+)"),
    req_uri = regextract(arrayindex(field_list,12),"\:\d+(.+)\s"),
    req_method_version = regextract(arrayindex(field_list,12),"\:\d+.+\s(.+)"),
    req_process_time = if(arrayindex(field_list,5)="-1","0",arrayindex(field_list,5)),
    target_process_time = if(arrayindex(field_list,6)="-1","0",arrayindex(field_list,6)),
    response_process_time = if(arrayindex(field_list,7)="-1","0",arrayindex(field_list,7)),
    resource_zone = arrayindex(regextract(arrayindex(field_list,16),"\w+\:\w+\:\w+\:(.+?)\:"),0)

//calculation of the duration time, this is separated due to the limitation of ADD function
| alter partial_duration_time = add(to_float(req_process_time), to_float(target_process_time))

| alter
    xdm.event.description = _raw_log,
    xdm.intermediate.cloud.provider = XDM_CONST.CLOUD_PROVIDER_AWS,
    xdm.network.application_protocol = arrayindex(field_list,0),
    xdm.intermediate.host.device_id = arrayindex(field_list,2),
    xdm.source.ipv4 = arrayindex(client_ipv4,0),
    xdm.source.ipv6 = arrayindex(client_ipv6,0),
    xdm.source.port = to_number(arrayindex(client_port,0)),
    xdm.target.ipv4 = arrayindex(target_ipv4,0),
    xdm.target.ipv6 = arrayindex(target_ipv6,0),
    xdm.intermediate.port = to_number(arrayindex(req_port,0)),
    xdm.target.port = to_number(arrayindex(target_port,0)),
    xdm.event.duration =  to_integer(add(to_float(partial_duration_time), to_float(response_process_time))),
    xdm.network.http.response_code = if(arrayindex(field_list,9)=NIL, null, arrayindex(field_list,9)),
    xdm.source.sent_bytes = to_number(arrayindex(field_list,11)),
    xdm.network.http.url = concat(arrayindex(req_url,0),arrayindex(req_uri,0)),
    xdm.network.http.method = arrayindex(req_method,0),
    xdm.network.application_protocol_category = arrayindex(req_method_version,0),
    xdm.source.host.device_model = if(arrayindex(field_list,13)=NIL,null,arrayindex(field_list,13)),
    xdm.network.tls.cipher = if(arrayindex(field_list,14) = NIL, null, arrayindex(field_list,14)),
    xdm.network.tls.protocol_version = if(arrayindex(field_list,15)=NIL, null, arrayindex(field_list,15)),
    xdm.target.resource.name = if(arrayindex(field_list,16) = NIL, null,arrayindex(regextract(arrayindex(field_list,16),"\w+\:\w+\:\w+\:(.+)"),0)),
    xdm.target.resource.type = if(arrayindex(field_list,16) = NIL, null,arrayindex(regextract(arrayindex(field_list,16),"\w+\:\w+\:\w+"),0)),
    xdm.target.cloud.region = if(arrayindex(field_list,16) = NIL, null,resource_zone),
    xdm.network.http.http_header.value = arrayindex(field_list,17),
    xdm.network.http.http_header.header = if(arrayindex(field_list,17) != null,"X-Amzn-Trace_Id"),
    xdm.network.tls.server_name = if(arrayindex(field_list,18)= NIL, null, arrayindex(field_list,18)),
    xdm.network.tls.server_certificate.subject = if(arrayindex(field_list,19)=NIL, null, arrayindex(field_list,19)),
    xdm.network.tls.server_certificate.issuer = if(arrayindex(field_list,19)!= NIL, arrayindex(regextract(arrayindex(field_list,19),"\w+\:\w+\:\w+"),0)),
    xdm.network.rule = arrayindex(field_list,20),
    xdm.observer.action = if(arrayindex(field_list,22) = NIL,null, arrayindex(field_list,22)),
    xdm.target.url = if(arrayindex(field_list,23) = NIL,null,arrayindex(field_list,23)),
    xdm.event.outcome_reason = if(arrayindex(field_list,24) = NIL,null,arrayindex(field_list,24)),
    xdm.event.outcome = if(arrayindex(field_list,24) = NIL,XDM_CONST.OUTCOME_SUCCESS, XDM_CONST.OUTCOME_FAILED),
    xdm.alert.severity = if(arrayindex(field_list,27) = NIL,null, arrayindex(field_list,27)),
    xdm.alert.name = if(arrayindex(field_list,28)=NIL, null,arrayindex(field_list,28));


[MODEL: dataset="aws_waf_raw", content_id="AWS_WAF"]
alter
  headers = json_extract(httpRequest, "$.headers") -> []
| alter parameters = arraymap(headers ,concat("{","\"",json_extract_scalar("@element", "$.name"),"\"", ":", "\"",json_extract_scalar("@element", "$.value"),"\"", "}"))
| alter parameters = replace(arraystring(parameters, ","),"},{", ",") -> {}
| alter http_method=json_extract_scalar(httprequest, "$.httpMethod")

|alter xdm.observer.action=action,
xdm.source.ipv4=json_extract_scalar(httprequest, "$.clientIp"),
xdm.source.location.country=json_extract_scalar(httprequest, "$.country"),
xdm.network.http.method=if(http_method = "ACL", XDM_CONST.HTTP_METHOD_ACL, http_method = "BASELINE_CONTROL", XDM_CONST.HTTP_METHOD_BASELINE_CONTROL, http_method = "BIND", XDM_CONST.HTTP_METHOD_BIND, http_method = "CHECKIN", XDM_CONST.HTTP_METHOD_CHECKIN, http_method = "CHECKOUT", XDM_CONST.HTTP_METHOD_CHECKOUT, http_method = "CONNECT", XDM_CONST.HTTP_METHOD_CONNECT, http_method = "COPY", XDM_CONST.HTTP_METHOD_COPY, http_method = "DELETE", XDM_CONST.HTTP_METHOD_DELETE, http_method = "GET", XDM_CONST.HTTP_METHOD_GET, http_method = "HEAD", XDM_CONST.HTTP_METHOD_HEAD, http_method = "LABEL", XDM_CONST.HTTP_METHOD_LABEL, http_method = "LINK", XDM_CONST.HTTP_METHOD_LINK, http_method = "LOCK", XDM_CONST.HTTP_METHOD_LOCK, http_method = "MERGE", XDM_CONST.HTTP_METHOD_MERGE, http_method = "MKACTIVITY", XDM_CONST.HTTP_METHOD_MKACTIVITY, http_method = "MKCALENDAR", XDM_CONST.HTTP_METHOD_MKCALENDAR, http_method = "MKCOL", XDM_CONST.HTTP_METHOD_MKCOL, http_method = "MKREDIRECTREF", XDM_CONST.HTTP_METHOD_MKREDIRECTREF, http_method = "MKWORKSPACE", XDM_CONST.HTTP_METHOD_MKWORKSPACE, http_method = "MOVE", XDM_CONST.HTTP_METHOD_MOVE, http_method = "OPTIONS", XDM_CONST.HTTP_METHOD_OPTIONS, http_method = "ORDERPATCH", XDM_CONST.HTTP_METHOD_ORDERPATCH, http_method = "PATCH", XDM_CONST.HTTP_METHOD_PATCH, http_method = "POST", XDM_CONST.HTTP_METHOD_POST, http_method = "PRI", XDM_CONST.HTTP_METHOD_PRI, http_method = "PROPFIND", XDM_CONST.HTTP_METHOD_PROPFIND, http_method = "PROPPATCH", XDM_CONST.HTTP_METHOD_PROPPATCH, http_method = "PUT", XDM_CONST.HTTP_METHOD_PUT, http_method = "REBIND", XDM_CONST.HTTP_METHOD_REBIND, http_method = "REPORT", XDM_CONST.HTTP_METHOD_REPORT, http_method = "SEARCH", XDM_CONST.HTTP_METHOD_SEARCH, http_method = "TRACE", XDM_CONST.HTTP_METHOD_TRACE, http_method = "UNBIND", XDM_CONST.HTTP_METHOD_UNBIND, http_method = "UNCHECKOUT", XDM_CONST.HTTP_METHOD_UNCHECKOUT, http_method = "UNLINK", XDM_CONST.HTTP_METHOD_UNLINK, http_method = "UNLOCK", XDM_CONST.HTTP_METHOD_UNLOCK, http_method = "UPDATE", XDM_CONST.HTTP_METHOD_UPDATE, http_method = "UPDATEREDIRECTREF", XDM_CONST.HTTP_METHOD_UPDATEREDIRECTREF, http_method = "VERSION_CONTROL", XDM_CONST.HTTP_METHOD_VERSION_CONTROL, to_string(http_method)),
xdm.session_context_id=json_extract_scalar(httprequest, "$.requestId"),
xdm.target.resource.id=httpsourceid,
xdm.target.resource.name=httpsourcename,
xdm.network.rule=terminatingruleid,
xdm.network.http.url=json_extract_scalar(httprequest, "$.uri"),
xdm.target.host.hostname=json_extract_scalar(parameters, "$.Host"),
xdm.source.user_agent=json_extract_scalar(parameters, "$.User-Agent"),
xdm.network.http.referrer=json_extract_scalar(parameters, "$.Referer");


[MODEL: dataset="aws_guardduty_raw", content_id="AWS-GuardDuty"]
alter 
    targetIP1 = json_extract_scalar(Service, "$.Action.NetworkConnectionAction.RemoteIpDetails.IpAddressV4"),
    targetIP2 = json_extract_scalar(Service, "$.Action.KubernetesApiCallAction.RemoteIpDetails.IpAddressV4"),
    username1 = trim(json_extract_scalar(Resource,"$.AccessKeyDetails.UserName"), "\""),
    username2 = json_extract_scalar(Resource, "$.KubernetesDetails.KubernetesUserDetails.Username"),
    userType = json_extract_scalar(Resource, "$.AccessKeyDetails.UserType"),
    severity = to_float(Severity)
| alter
    xdm.alert.category = json_extract_scalar(Resource, "$.ResourceType"),
    xdm.alert.subcategory = Type,
    xdm.alert.description = Description,
    xdm.event.outcome_reason = Title,
    xdm.alert.severity = if( severity >= 7, "High", severity >= 4 and severity < 6.9 , "Medium", severity >= 1 and severity < 3.9 , "Low", to_string(Severity)),
    xdm.target.resource.id = AccountId,
    xdm.target.host.hostname = json_extract_scalar(Resource, "$.EksClusterDetails.Name"),
    xdm.source.user.user_type = if(userType in("Root","IAMUser","Role","FederatedUser","AWSAccount"),XDM_CONST.USER_TYPE_REGULAR , userType in("Directory","AWSService") ,XDM_CONST.USER_TYPE_SERVICE_ACCOUNT,userType in("AssumedRole") ,XDM_CONST.USER_TYPE_MACHINE_ACCOUNT ,to_string(userType)),
    xdm.target.process.name = json_extract_scalar(Service, "$.ServiceName"),
    xdm.source.host.ipv4_addresses = arraycreate(coalesce(json_extract_scalar(Service,  "$.Action.AwsApiCallAction.RemoteIpDetails.IpAddressV4"), "")),
    xdm.source.ipv4 = json_extract_scalar(Service, "$.Action.NetworkConnectionAction.LocalIpDetails.IpAddressV4"),
    xdm.target.ipv4 = coalesce(targetIP1, targetIP2),
    xdm.source.user.username = coalesce(username1, username2),
    xdm.target.cloud.region = Region;


[MODEL: dataset=microsoft_defender_for_cloud_raw, content_id="AzureSecurityCenter"]
filter  _collector_type != "Azure Event Hub"
| alter

	xdm.observer.unique_identifier = id,

	xdm.observer.name = name,

	xdm.alert.name = json_extract_scalar(properties, "$.alertDisplayName"),

	xdm.alert.category = json_extract_scalar(properties, "$.alertType"),

	xdm.alert.description = json_extract_scalar(properties, "$.description"),

	xdm.source.user.domain = json_extract_scalar(properties, "$.extendedProperties.domain name"),

	xdm.source.user.username = json_extract_scalar(properties, "$.extendedProperties.user name"),

	xdm.source.process.pid = to_number(json_extract_scalar(properties, "$.extendedProperties.suspicious Process Id")),

	xdm.source.process.name = json_extract_scalar(properties, "$.extendedProperties.suspicious Process"),

	xdm.source.process.command_line = json_extract_scalar(properties, "$.extendedProperties.suspicious Command Line"),

	xdm.alert.mitre_tactics = arraycreate(json_extract_scalar(properties, "$.extendedProperties.killChainIntent")),

	xdm.source.host.ipv4_addresses = arraycreate(json_extract_scalar(properties, "$.extendedProperties.attacker IP Address")),

	xdm.target.process.name = json_extract_scalar(properties, "$.extendedProperties.process name"),

	xdm.target.process.pid = to_number(json_extract_scalar(properties, "$.extendedProperties.process id")),

	xdm.target.process.parent_id = json_extract_scalar(properties, "$.extendedProperties.parent process id"),

	xdm.observer.product = json_extract_scalar(properties, "$.productName"),

	xdm.alert.severity = json_extract_scalar(properties, "$.severity"),

	xdm.event.outcome_reason = json_extract_scalar(properties, "$.status"),

	xdm.alert.original_alert_id = json_extract_scalar(properties, "$.systemAlertId"),

	xdm.alert.mitre_techniques = json_extract_array(properties, "$.techniques"),

	xdm.observer.vendor = json_extract_scalar(properties, "$.vendorName"),

	xdm.observer.version = json_extract_scalar(properties, "$.version"),

	xdm.observer.type = type,

	Entities = json_extract_array(properties, "$.entities")

| alter

	xdm.target.resource.id = arraystring(arraymap(Entities, json_extract_scalar("@element", """$['$id']""")), ","),

	xdm.target.host.fqdn = arraystring(arraymap(Entities, json_extract_scalar("@element", "$.dnsDomain")), ","),

	xdm.target.host.os = arraystring(arraymap(Entities, json_extract_scalar("@element", "$.OsVersion")), ","),

	xdm.target.host.os_family = arraystring(arraymap(Entities, json_extract_scalar("@element", "$.osFamily")), ","),

	xdm.target.file.path = arraystring(arraymap(Entities, json_extract_scalar("@element", "$.directory")), ","),

	xdm.target.file.filename = arraystring(arraymap(Entities, json_extract_scalar("@element", "$.name")), ","),

	xdm.target.process.identifier = arraystring(arraymap(Entities, json_extract_scalar("@element", "$.processId")), ","),

	xdm.target.agent.type = arraystring(arraymap(Entities, json_extract_scalar("@element", "$.type")), ","),

	azureId = arraystring(arraymap(Entities, json_extract_scalar("@element", "$.azureID")), ","),

	commandLine = arraystring(arraymap(Entities, json_extract_scalar("@element", "$.commandLine")), ","),

	address = arraymap(Entities, json_extract_scalar("@element", "$.address")),

	clientIPAddress = arraycreate(json_extract_scalar(properties, "$.extendedProperties.client IP Address")),

	hostname = arraystring(arraymap(Entities, json_extract_scalar("@element", "$.hostName")), ",")

| alter

	xdm.target.host.device_id = coalesce(azureId, json_extract_scalar(properties, "$.resourceIdentifiers.id")),

	xdm.target.process.command_line = coalesce(commandLine, json_extract_scalar(properties, "$.extendedProperties.command line")),

	xdm.target.host.ipv4_addresses = coalesce(address, clientIPAddress),

	xdm.target.host.hostname = coalesce(json_extract_scalar(properties, "$.compromisedEntity"), hostname);


filter _collector_type = "Azure Event Hub"
| alter
        Entities = Entities ->[],
        ResourceIdentifiers = ResourceIdentifiers -> []
// Entities values
| alter
        Entities_account_username = arraystring(arraymap(Entities, if(json_extract_scalar("@element", "$.Type") = "account" and json_extract_scalar("@element", "$.Name") not in ("", null), json_extract_scalar("@element", "$.Name"), json_extract_scalar("@element", "$.Type") = "account" and json_extract_scalar("@element", "$.Name") in ("", null), "-", null)), ", "),
        Entities_account_Identifier = arraystring(arraymap(Entities, if(json_extract_scalar("@element", "$.Type") = "account" and json_extract_scalar("@element", "$.Sid") not in ("", null), json_extract_scalar("@element", "$.Sid"), json_extract_scalar("@element", "$.Type") = "account" and json_extract_scalar("@element", "$.AadUserId") not in ("", null), json_extract_scalar("@element", "$.AadUserId"), json_extract_scalar("@element", "$.Type") = "account" and json_extract_scalar("@element", "$.Id") not in ("", null), json_extract_scalar("@element", "$.Id"), json_extract_scalar("@element", "$.Type") = "account" and json_extract_scalar("@element", "$.Sid") in ("", null) and json_extract_scalar("@element", "$.Id") in ("", null) and json_extract_scalar("@element", "$.AadUserId") in ("", null), "-", null)), ", "),
        Entities_account_LogonId = arraystring(arraymap(Entities, if(json_extract_scalar("@element", "$.Type") = "account" and json_extract_scalar("@element", "$.LogonId") not in ("", null), json_extract_scalar("@element", "$.LogonId"), json_extract_scalar("@element", "$.Type") = "account" and json_extract_scalar("@element", "$.LogonId") in ("", null), "-", null)), ", "),
        Entities_host_HostName = arraystring(arraymap(Entities, if(json_extract_scalar("@element", "$.Type") = "host" and json_extract_scalar("@element", "$.HostName") not in ("", null), json_extract_scalar("@element", "$.HostName"), json_extract_scalar("@element", "$.Type") = "host" and json_extract_scalar("@element", "$.HostName") in ("", null), "-", null)), ", "),
        Entities_host_OS = arraystring(arraymap(Entities, if(json_extract_scalar("@element", "$.Type") = "host" and json_extract_scalar("@element", "$.OSFamily") not in ("", null) and json_extract_scalar("@element", "$.OSVersion") not in ("", null), concat(json_extract_scalar("@element", "$.OSFamily"), " ", json_extract_scalar("@element", "$.OSVersion")), json_extract_scalar("@element", "$.Type") = "host" and json_extract_scalar("@element", "$.OSFamily") not in ("", null), json_extract_scalar("@element", "$.OSFamily"), json_extract_scalar("@element", "$.Type") = "host" and json_extract_scalar("@element", "$.OSFamily") in ("", null), "-", null)), ", "),
        Entities_ip_address = arraymap(Entities, if(json_extract_scalar("@element", "$.Type") = "ip" and json_extract_scalar("@element", "$.Address") not in ("", null), json_extract_scalar("@element", "$.Address"), json_extract_scalar("@element", "$.Type") = "ip" and json_extract_scalar("@element", "$.Address") in ("", null), "-", null)),
        Entities_process_id = arraystring(arraymap(Entities, if(json_extract_scalar("@element", "$.Type") = "process" and json_extract_scalar("@element", "$.ProcessId") not in ("", null), json_extract_scalar("@element", "$.ProcessId"), json_extract_scalar("@element", "$.Type") = "process" and json_extract_scalar("@element", "$.ProcessId") in ("", null), "-", null)), ", "),
        Entities_process_commandline = arraystring(arraymap(Entities, if(json_extract_scalar("@element", "$.Type") = "process" and json_extract_scalar("@element", "$.CommandLine") not in ("", null), json_extract_scalar("@element", "$.CommandLine"), json_extract_scalar("@element", "$.Type") = "process" and json_extract_scalar("@element", "$.CommandLine") in ("", null), "-", null)), ", "),
        Entities_process_image_filename = arraystring(arraymap(Entities, if(json_extract_scalar("@element", "$.Type") = "process" and json_extract_scalar("@element", "$.ImageFile.Name") not in ("", null), json_extract_scalar("@element", "$.ImageFile.Name"), json_extract_scalar("@element", "$.Type") = "process" and json_extract_scalar("@element", "$.ImageFile.Name") in ("", null), "-", null)), ", "),
        Entities_process_image_directory = arraystring(arraymap(Entities, if(json_extract_scalar("@element", "$.Type") = "process" and json_extract_scalar("@element", "$.ImageFile.Directory") not in ("", null), json_extract_scalar("@element", "$.ImageFile.Directory"), json_extract_scalar("@element", "$.Type") = "process" and json_extract_scalar("@element", "$.ImageFile.Directory") in ("", null), "-", null)), ", "),
        Entities_file_Name = arraystring(arraymap(Entities, if(json_extract_scalar("@element", "$.Type") = "file" and json_extract_scalar("@element", "$.Name") not in ("", null), json_extract_scalar("@element", "$.Name"), json_extract_scalar("@element", "$.Type") = "file" and json_extract_scalar("@element", "$.Name") in ("", null), "-", null)), ", "),
        Entities_file_Directory = arraystring(arraymap(Entities, if(json_extract_scalar("@element", "$.Type") = "file" and json_extract_scalar("@element", "$.Directory") not in ("", null), json_extract_scalar("@element", "$.Directory"), json_extract_scalar("@element", "$.Type") = "file" and json_extract_scalar("@element", "$.Directory") in ("", null), "-", null)), ", "),
        Entities_filehash_md5 = arraystring(arraymap(Entities, if(json_extract_scalar("@element", "$.Type") = "filehash" and json_extract_scalar("@element", "$.Value") not in ("", null) and json_extract_scalar("@element", "$.Algorithm") = "MD5", json_extract_scalar("@element", "$.Value"), json_extract_scalar("@element", "$.Type") = "filehash" and json_extract_scalar("@element", "$.Value") in ("", null) and json_extract_scalar("@element", "$.Algorithm") = "MD5", "-", null)), ", "),
        Entities_filehash_sha256 = arraystring(arraymap(Entities, if(json_extract_scalar("@element", "$.Type") = "filehash" and json_extract_scalar("@element", "$.Value") not in ("", null) and json_extract_scalar("@element", "$.Algorithm") = "SHA256", json_extract_scalar("@element", "$.Value"), json_extract_scalar("@element", "$.Type") = "filehash" and json_extract_scalar("@element", "$.Value") in ("", null) and json_extract_scalar("@element", "$.Algorithm") = "SHA256", "-", null)), ", ")
// Entities IP fields filtering
| alter
        Entities_ip_address_local_v4 = arraymap(Entities_ip_address, if(incidr("@element","10.0.0.0/8") or incidr("@element","127.0.0.0/8") or incidr("@element","169.254.0.0/16") or incidr("@element","172.16.0.0/12") or incidr("@element","192.168.0.0/16"), "@element", "-")),
        //Entities_ip_address_local_v6 = arraymap(Entities_ip_address, if(incidr6("@element","fc00::/7") or incidr6("@element","fd00::/7") or incidr6("@element","fe80::/64") or incidr6("@element","::/128") or incidr6("@element","::1/128"), "@element", "-")),
        Entities_ip_address_public_v4 = arraymap(Entities_ip_address, if(not incidr("@element","10.0.0.0/8") or not incidr("@element","127.0.0.0/8") or not incidr("@element","169.254.0.0/16") or not incidr("@element","172.16.0.0/12") or not incidr("@element","192.168.0.0/16"), "@element", "-")),
        //Entities_ip_address_public_v6 = arraymap(Entities_ip_address, if(not incidr6("@element","fc00::/7") or not incidr6("@element","fd00::/7") or not incidr6("@element","fe80::/64") or not incidr6("@element","::/128") or not incidr6("@element","::1/128"), "@element", "-")),
        Entities_ip_address_v6 = arraymap(Entities_ip_address, if("@element" ~= "(?:[a-fA-F\d]{0,4}\:){1,7}[a-fA-F\d]{0,4}", "@element", "-"))
// Remove empty entities fields values
| alter
        Entities_account_username = if(Entities_account_username ~= "^[\,\s\-]+$" or Entities_account_username = "", null, Entities_account_username),
        Entities_account_Identifier = if(Entities_account_Identifier ~= "^[\,\s\-]+$" or Entities_account_Identifier = "", null, Entities_account_Identifier),
        Entities_account_LogonId = if(Entities_account_LogonId ~= "^[\,\s\-]+$" or Entities_account_LogonId = "", null, Entities_account_LogonId),
        Entities_host_HostName = if(Entities_host_HostName ~= "^[\,\s\-]+$" or Entities_host_HostName = "", null, Entities_host_HostName),
        Entities_host_OS = if(Entities_host_OS ~= "^[\,\s\-]+$" or Entities_host_OS = "", null, Entities_host_OS),
        Entities_ip_address_local_v4 = if(arraystring(Entities_ip_address_local_v4, ",") ~= "^[\,\s\-]+$" or Entities_ip_address_local_v4 = "", null, Entities_ip_address_local_v4),
        Entities_ip_address_public_v4 = if(arraystring(Entities_ip_address_public_v4, ",") ~= "^[\,\s\-]+$" or Entities_ip_address_public_v4 = "", null, Entities_ip_address_public_v4),
        Entities_ip_address_v6 = if(arraystring(Entities_ip_address_v6, ",") ~= "^[\,\s\-]+$" or Entities_ip_address_v6 = "", null, Entities_ip_address_v6),
        Entities_process_id = if(Entities_process_id ~= "^[\,\s\-]+$" or Entities_process_id = "", null, Entities_process_id),
        Entities_process_commandline = if(Entities_process_commandline ~= "^[\,\s\-]+$" or Entities_process_commandline = "", null, Entities_process_commandline),
        Entities_process_image_filename = if(Entities_process_image_filename ~= "^[\,\s\-]+$" or Entities_process_image_filename = "", null, Entities_process_image_filename),
        Entities_process_image_directory = if(Entities_process_image_directory ~= "^[\,\s\-]+$" or Entities_process_image_directory = "", null, Entities_process_image_directory),
        Entities_file_Name = if(Entities_file_Name ~= "^[\,\s\-]+$" or Entities_file_Name = "", null, Entities_file_Name),
        Entities_file_Directory = if(Entities_file_Directory ~= "^[\,\s\-]+$" or Entities_file_Directory = "", null, Entities_file_Directory),
        Entities_filehash_md5 = if(Entities_filehash_md5 ~= "^[\,\s\-]+$" or Entities_filehash_md5 = "", null, Entities_filehash_md5),
        Entities_filehash_sha256 = if(Entities_filehash_sha256 ~= "^[\,\s\-]+$" or Entities_filehash_sha256 = "", null, Entities_filehash_sha256)
// ExtendedProperties values
| alter
        ExtendedProperties_AAD_user_id = json_extract_scalar(ExtendedProperties, "$.AAD user ID"),
        ExtendedProperties_Account_Session_Id = json_extract_scalar(ExtendedProperties, "$.Account Session Id"),
        ExtendedProperties_Activity_type = json_extract_scalar(ExtendedProperties, "$.Activity type"),
        ExtendedProperties_Application = json_extract_scalar(ExtendedProperties, "$.Application"),
        ExtendedProperties_Application_name = json_extract_scalar(ExtendedProperties, "$.Application name"),
        ExtendedProperties_Attacker_IP_Address_v4 = if(json_extract_scalar(ExtendedProperties, "$.Attacker IP Address") ~= "(?:\d{1,3}\.){3}\d{1,3}", json_extract_scalar(ExtendedProperties, "$.Attacker IP Address"), null),
        ExtendedProperties_Attacker_IP_Address_v6 = if(json_extract_scalar(ExtendedProperties, "$.Attacker IP Address") ~= "(?:[a-fA-F\d]{0,4}\:){1,7}[a-fA-F\d]{0,4}", json_extract_scalar(ExtendedProperties, "$.Attacker IP Address"), null),
        ExtendedProperties_Authentication_type = json_extract_scalar(ExtendedProperties, "$.Authentication type"),
        ExtendedProperties_Client_Application = if(json_extract_scalar(ExtendedProperties, "$.Client Application") != null, json_extract_scalar(ExtendedProperties, "$.Client Application"), json_extract_scalar(ExtendedProperties, "$.Client application") != null, json_extract_scalar(ExtendedProperties, "$.Client application"), null),
        ExtendedProperties_Client_Hostname = json_extract_scalar(ExtendedProperties, "$.Client Hostname"),
        ExtendedProperties_Client_IP_Address_v4 = if(json_extract_scalar(ExtendedProperties, "$.Client IP Address") ~= "(?:\d{1,3}\.){3}\d{1,3}", json_extract_scalar(ExtendedProperties, "$.Client IP Address"), json_extract_scalar(ExtendedProperties, "$.Client IP address") ~= "(?:\d{1,3}\.){3}\d{1,3}", json_extract_scalar(ExtendedProperties, "$.Client IP address"), null),
        ExtendedProperties_Client_IP_Address_v6 = if(json_extract_scalar(ExtendedProperties, "$.Client IP Address") ~= "(?:[a-fA-F\d]{0,4}\:){1,7}[a-fA-F\d]{0,4}", json_extract_scalar(ExtendedProperties, "$.Client IP Address"), json_extract_scalar(ExtendedProperties, "$.Client IP address") ~= "(?:[a-fA-F\d]{0,4}\:){1,7}[a-fA-F\d]{0,4}", json_extract_scalar(ExtendedProperties, "$.Client IP address"), null),
        ExtendedProperties_Client_Principal_Name = if(json_extract_scalar(ExtendedProperties, "$.Client Principal Name") != null, json_extract_scalar(ExtendedProperties, "$.Client Principal Name"), json_extract_scalar(ExtendedProperties, "$.Client principal name") != null, json_extract_scalar(ExtendedProperties, "$.Client principal name"), null),
        ExtendedProperties_Command = json_extract_scalar(ExtendedProperties, "$.Command"),
        ExtendedProperties_Compromised_Host = json_extract_scalar(ExtendedProperties, "$.Compromised Host"),
        ExtendedProperties_CompromisedEntity = json_extract_scalar(ExtendedProperties, "$.CompromisedEntity"),
        ExtendedProperties_Database = json_extract_scalar(ExtendedProperties, "$.Database"),
        ExtendedProperties_Database_name = json_extract_scalar(ExtendedProperties, "$.Database name"),
        ExtendedProperties_file = json_extract_scalar(ExtendedProperties, "$.File"),
        ExtendedProperties_IP_address_v4 = if(json_extract_scalar(ExtendedProperties, "$.IP address") ~= "(?:\d{1,3}\.){3}\d{1,3}", json_extract_scalar(ExtendedProperties, "$.IP address"), null),
        ExtendedProperties_IP_address_v6 = if(json_extract_scalar(ExtendedProperties, "$.IP address") ~= "(?:[a-fA-F\d]{0,4}\:){1,7}[a-fA-F\d]{0,4}", json_extract_scalar(ExtendedProperties, "$.IP address"), null),
        ExtendedProperties_Image_Name = if(json_extract_scalar(ExtendedProperties, "$.Image Name") != null, json_extract_scalar(ExtendedProperties, "$.Image Name"), json_extract_scalar(ExtendedProperties, "$.ImageName") != null, json_extract_scalar(ExtendedProperties, "$.ImageName"), null),
        ExtendedProperties_Payload_size = multiply(to_number(arrayindex(regextract(json_extract_scalar(ExtendedProperties, "$['Payload Size (KB)']"), "(\d+)\.?\d*"),0)), 1024),
        ExtendedProperties_Port = to_number(json_extract_scalar(ExtendedProperties, "$.Port")),
        ExtendedProperties_Process_Id = json_extract_scalar(ExtendedProperties, "$.Process Id"),
        ExtendedProperties_Process_Name = json_extract_scalar(ExtendedProperties, "$.Process Name"),
        ExtendedProperties_Request_status = json_extract_scalar(ExtendedProperties, "$.Request status"),
        ExtendedProperties_Resource_name = json_extract_scalar(ExtendedProperties, "$.Resource name"),
        ExtendedProperties_Resource_Type = if(json_extract_scalar(ExtendedProperties, "$.Resource type") != null, json_extract_scalar(ExtendedProperties, "$.Resource type"), json_extract_scalar(ExtendedProperties, "$.resourceType") != null, json_extract_scalar(ExtendedProperties, "$.resourceType"), json_extract_scalar(ExtendedProperties, "$.ResourceType") != null, json_extract_scalar(ExtendedProperties, "$.ResourceType"), null),
        ExtendedProperties_ResourceId = json_extract_scalar(ExtendedProperties, "$.ResourceId"),
        ExtendedProperties_Result_Signature = json_extract_scalar(ExtendedProperties, "$.Result Signature"),
        ExtendedProperties_SHA_256 = json_extract_scalar(ExtendedProperties, "$.SHA-256"),
        ExtendedProperties_Source_IP_address_v4 = if(json_extract_scalar(ExtendedProperties, "$.Source IP address") ~= "(?:\d{1,3}\.){3}\d{1,3}", json_extract_scalar(ExtendedProperties, "$.Source IP address"), null),
        ExtendedProperties_Source_IP_address_v6 = if(json_extract_scalar(ExtendedProperties, "$.Source IP address") ~= "(?:[a-fA-F\d]{0,4}\:){1,7}[a-fA-F\d]{0,4}", json_extract_scalar(ExtendedProperties, "$.Source IP address"), null),
        ExtendedProperties_Status_Code = json_extract_scalar(ExtendedProperties, "$.Status Code"),
        ExtendedProperties_Suspicious_Command_Line = if(json_extract_scalar(ExtendedProperties, "$.Suspicious Command Line") != null, json_extract_scalar(ExtendedProperties, "$.Suspicious Command Line"), json_extract_scalar(ExtendedProperties, "$.Suspicious command") != null, json_extract_scalar(ExtendedProperties, "$.Suspicious command"), null),
        ExtendedProperties_Suspicious_Process = json_extract_scalar(ExtendedProperties, "$.Suspicious Process"),
        ExtendedProperties_Suspicious_Process_Id = json_extract_scalar(ExtendedProperties, "$.Suspicious Process Id"),
        ExtendedProperties_Top_anomalous_queries = json_extract_scalar(ExtendedProperties, "$.Top anomalous queries"),
        ExtendedProperties_Top_suspicious_queries = json_extract_scalar(ExtendedProperties, "$.Top suspicious queries"),
        ExtendedProperties_URL = json_extract_scalar(ExtendedProperties, "$.URL"),
        ExtendedProperties_User_Name = if(json_extract_scalar(ExtendedProperties, "$.User Name") != null, json_extract_scalar(ExtendedProperties, "$.User Name"), json_extract_scalar(ExtendedProperties, "$.Username") != null, json_extract_scalar(ExtendedProperties, "$.Username"), null),
        ExtendedProperties_User_Agent = json_extract_scalar(ExtendedProperties, "$.User agent")
// XDM fields
| alter
        // Common fields
        xdm.source.agent.identifier = if(AgentId != "", AgentId, null),
        xdm.alert.name = AlertDisplayName,
        xdm.alert.subcategory = AlertType,
        xdm.session_context_id = if(CorrelationKey != "", CorrelationKey, null),
        xdm.alert.description = Description,
        xdm.alert.severity = Severity,
        xdm.alert.original_alert_id = SystemAlertId,
        xdm.source.cloud.project_id = arraystring(arraymap(ResourceIdentifiers, if(json_extract_scalar("@element", "$.AzureResourceTenantId") != null, json_extract_scalar("@element", "$.AzureResourceTenantId"), json_extract_scalar("@element", "$.AadTenantId") != null, json_extract_scalar("@element", "$.AadTenantId"), json_extract_scalar("@element", "$.workspaceId") != null, json_extract_scalar("@element", "$.workspaceId"), "-")), ", "),
        // Entities and Extended Properties fields
        xdm.source.user.identifier = coalesce (ExtendedProperties_AAD_user_id, Entities_account_Identifier),
        xdm.logon.logon_guid = coalesce(ExtendedProperties_Account_Session_Id, Entities_account_LogonId),
        xdm.event.operation_sub_type = ExtendedProperties_Activity_type,
        xdm.source.application.name = coalesce(ExtendedProperties_Application, ExtendedProperties_Application_name, ExtendedProperties_Client_Application),
        xdm.source.ipv4 = coalesce(ExtendedProperties_Attacker_IP_Address_v4, ExtendedProperties_Source_IP_address_v4),
        xdm.source.ipv6 = coalesce(ExtendedProperties_Attacker_IP_Address_v6, ExtendedProperties_Source_IP_address_v6),
        xdm.auth.service = ExtendedProperties_Authentication_type,
        xdm.target.host.hostname = coalesce(ExtendedProperties_Client_Hostname, ExtendedProperties_Compromised_Host, Entities_host_HostName),
        xdm.target.ipv4 = coalesce(ExtendedProperties_Client_IP_Address_v4, ExtendedProperties_IP_address_v4),
        xdm.target.ipv6 = coalesce(ExtendedProperties_Client_IP_Address_v6, ExtendedProperties_IP_address_v6),
        xdm.source.user.username = coalesce(ExtendedProperties_Client_Principal_Name, ExtendedProperties_User_Name, Entities_account_username),
        xdm.source.process.command_line = coalesce(ExtendedProperties_Command, ExtendedProperties_Suspicious_Command_Line, Entities_process_commandline),
        xdm.target.resource.name = coalesce(ExtendedProperties_CompromisedEntity, ExtendedProperties_Resource_name),
        xdm.target.resource.type = ExtendedProperties_Resource_Type,
        xdm.target.resource.id = ExtendedProperties_ResourceId,
        xdm.database.name = coalesce(ExtendedProperties_Database, ExtendedProperties_Database_name),
        xdm.target.file.filename = coalesce(ExtendedProperties_file, Entities_file_Name),
        xdm.target.host.image = ExtendedProperties_Image_Name,
        xdm.target.sent_bytes = to_integer(ExtendedProperties_Payload_size),
        xdm.target.port = ExtendedProperties_Port,
        xdm.source.process.identifier = coalesce(ExtendedProperties_Process_Id, ExtendedProperties_Suspicious_Process_Id, Entities_process_id),
        xdm.source.process.name = coalesce(ExtendedProperties_Process_Name, ExtendedProperties_Suspicious_Process),
        xdm.event.outcome = if(lowercase(ExtendedProperties_Request_status) contains "succ", XDM_CONST.OUTCOME_SUCCESS, lowercase(ExtendedProperties_Request_status) contains "fail", XDM_CONST.OUTCOME_FAILED, lowercase(ExtendedProperties_Result_Signature) contains "ok", XDM_CONST.OUTCOME_SUCCESS, lowercase(ExtendedProperties_Result_Signature) contains "unauth" or lowercase(ExtendedProperties_Result_Signature) contains " not ", XDM_CONST.OUTCOME_FAILED, null),
        xdm.target.file.sha256 = coalesce(ExtendedProperties_SHA_256, Entities_filehash_sha256),
        xdm.network.http.response_code = if(ExtendedProperties_Status_Code = "100", XDM_CONST.HTTP_RSP_CODE_CONTINUE, ExtendedProperties_Status_Code = "101", XDM_CONST.HTTP_RSP_CODE_SWITCHING_PROTOCOLS, ExtendedProperties_Status_Code = "102", XDM_CONST.HTTP_RSP_CODE_PROCESSING, ExtendedProperties_Status_Code = "103", XDM_CONST.HTTP_RSP_CODE_EARLY_HINTS, ExtendedProperties_Status_Code = "200", XDM_CONST.HTTP_RSP_CODE_OK, ExtendedProperties_Status_Code = "201", XDM_CONST.HTTP_RSP_CODE_CREATED, ExtendedProperties_Status_Code = "202", XDM_CONST.HTTP_RSP_CODE_ACCEPTED, ExtendedProperties_Status_Code = "203", XDM_CONST.HTTP_RSP_CODE_NON__AUTHORITATIVE_INFORMATION, ExtendedProperties_Status_Code = "204", XDM_CONST.HTTP_RSP_CODE_NO_CONTENT, ExtendedProperties_Status_Code = "205", XDM_CONST.HTTP_RSP_CODE_RESET_CONTENT, ExtendedProperties_Status_Code = "206", XDM_CONST.HTTP_RSP_CODE_PARTIAL_CONTENT, ExtendedProperties_Status_Code = "207", XDM_CONST.HTTP_RSP_CODE_MULTI__STATUS, ExtendedProperties_Status_Code = "208", XDM_CONST.HTTP_RSP_CODE_ALREADY_REPORTED, ExtendedProperties_Status_Code = "226", XDM_CONST.HTTP_RSP_CODE_IM_USED, ExtendedProperties_Status_Code = "300", XDM_CONST.HTTP_RSP_CODE_MULTIPLE_CHOICES, ExtendedProperties_Status_Code = "301", XDM_CONST.HTTP_RSP_CODE_MOVED_PERMANENTLY, ExtendedProperties_Status_Code = "302", XDM_CONST.HTTP_RSP_CODE_FOUND, ExtendedProperties_Status_Code = "303", XDM_CONST.HTTP_RSP_CODE_SEE_OTHER, ExtendedProperties_Status_Code = "304", XDM_CONST.HTTP_RSP_CODE_NOT_MODIFIED, ExtendedProperties_Status_Code = "305", XDM_CONST.HTTP_RSP_CODE_USE_PROXY, ExtendedProperties_Status_Code = "307", XDM_CONST.HTTP_RSP_CODE_TEMPORARY_REDIRECT, ExtendedProperties_Status_Code = "308", XDM_CONST.HTTP_RSP_CODE_PERMANENT_REDIRECT, ExtendedProperties_Status_Code = "400", XDM_CONST.HTTP_RSP_CODE_BAD_REQUEST, ExtendedProperties_Status_Code = "401", XDM_CONST.HTTP_RSP_CODE_UNAUTHORIZED, ExtendedProperties_Status_Code = "402", XDM_CONST.HTTP_RSP_CODE_PAYMENT_REQUIRED, ExtendedProperties_Status_Code = "403", XDM_CONST.HTTP_RSP_CODE_FORBIDDEN, ExtendedProperties_Status_Code = "404", XDM_CONST.HTTP_RSP_CODE_NOT_FOUND, ExtendedProperties_Status_Code = "405", XDM_CONST.HTTP_RSP_CODE_METHOD_NOT_ALLOWED, ExtendedProperties_Status_Code = "406", XDM_CONST.HTTP_RSP_CODE_NOT_ACCEPTABLE, ExtendedProperties_Status_Code = "407", XDM_CONST.HTTP_RSP_CODE_PROXY_AUTHENTICATION_REQUIRED, ExtendedProperties_Status_Code = "408", XDM_CONST.HTTP_RSP_CODE_REQUEST_TIMEOUT, ExtendedProperties_Status_Code = "409", XDM_CONST.HTTP_RSP_CODE_CONFLICT, ExtendedProperties_Status_Code = "410", XDM_CONST.HTTP_RSP_CODE_GONE, ExtendedProperties_Status_Code = "411", XDM_CONST.HTTP_RSP_CODE_LENGTH_REQUIRED, ExtendedProperties_Status_Code = "412", XDM_CONST.HTTP_RSP_CODE_PRECONDITION_FAILED, ExtendedProperties_Status_Code = "413", XDM_CONST.HTTP_RSP_CODE_CONTENT_TOO_LARGE, ExtendedProperties_Status_Code = "414", XDM_CONST.HTTP_RSP_CODE_URI_TOO_LONG, ExtendedProperties_Status_Code = "415", XDM_CONST.HTTP_RSP_CODE_UNSUPPORTED_MEDIA_TYPE, ExtendedProperties_Status_Code = "416", XDM_CONST.HTTP_RSP_CODE_RANGE_NOT_SATISFIABLE, ExtendedProperties_Status_Code = "417", XDM_CONST.HTTP_RSP_CODE_EXPECTATION_FAILED, ExtendedProperties_Status_Code = "421", XDM_CONST.HTTP_RSP_CODE_MISDIRECTED_REQUEST, ExtendedProperties_Status_Code = "422", XDM_CONST.HTTP_RSP_CODE_UNPROCESSABLE_CONTENT, ExtendedProperties_Status_Code = "423", XDM_CONST.HTTP_RSP_CODE_LOCKED, ExtendedProperties_Status_Code = "424", XDM_CONST.HTTP_RSP_CODE_FAILED_DEPENDENCY, ExtendedProperties_Status_Code = "425", XDM_CONST.HTTP_RSP_CODE_TOO_EARLY, ExtendedProperties_Status_Code = "426", XDM_CONST.HTTP_RSP_CODE_UPGRADE_REQUIRED, ExtendedProperties_Status_Code = "428", XDM_CONST.HTTP_RSP_CODE_PRECONDITION_REQUIRED, ExtendedProperties_Status_Code = "429", XDM_CONST.HTTP_RSP_CODE_TOO_MANY_REQUESTS, ExtendedProperties_Status_Code = "431", XDM_CONST.HTTP_RSP_CODE_REQUEST_HEADER_FIELDS_TOO_LARGE, ExtendedProperties_Status_Code = "451", XDM_CONST.HTTP_RSP_CODE_UNAVAILABLE_FOR_LEGAL_REASONS, ExtendedProperties_Status_Code = "500", XDM_CONST.HTTP_RSP_CODE_INTERNAL_SERVER_ERROR, ExtendedProperties_Status_Code = "501", XDM_CONST.HTTP_RSP_CODE_NOT_IMPLEMENTED, ExtendedProperties_Status_Code = "502", XDM_CONST.HTTP_RSP_CODE_BAD_GATEWAY, ExtendedProperties_Status_Code = "503", XDM_CONST.HTTP_RSP_CODE_SERVICE_UNAVAILABLE, ExtendedProperties_Status_Code = "504", XDM_CONST.HTTP_RSP_CODE_GATEWAY_TIMEOUT, ExtendedProperties_Status_Code = "505", XDM_CONST.HTTP_RSP_CODE_HTTP_VERSION_NOT_SUPPORTED, ExtendedProperties_Status_Code = "506", XDM_CONST.HTTP_RSP_CODE_VARIANT_ALSO_NEGOTIATES, ExtendedProperties_Status_Code = "507", XDM_CONST.HTTP_RSP_CODE_INSUFFICIENT_STORAGE, ExtendedProperties_Status_Code = "508", XDM_CONST.HTTP_RSP_CODE_LOOP_DETECTED, ExtendedProperties_Status_Code = "511", XDM_CONST.HTTP_RSP_CODE_NETWORK_AUTHENTICATION_REQUIRED, ExtendedProperties_Status_Code = null, null, to_string(ExtendedProperties_Status_Code)),
        xdm.database.statement = coalesce(ExtendedProperties_Top_anomalous_queries, ExtendedProperties_Top_suspicious_queries),
        xdm.target.url = ExtendedProperties_URL,
        xdm.source.user_agent = ExtendedProperties_User_Agent,
        xdm.target.file.directory = Entities_file_Directory,
        xdm.target.file.md5 = Entities_filehash_md5,
        xdm.target.host.ipv4_addresses = Entities_ip_address_local_v4,
        //xdm.target.host.ipv6_addresses = Entities_ip_address_local_v6,
        xdm.target.host.ipv4_public_addresses = Entities_ip_address_public_v4,
        //xdm.target.host.ipv6_public_addresses = Entities_ip_address_public_v6,
        xdm.target.host.ipv6_addresses = Entities_ip_address_v6,
        xdm.source.process.executable.directory = Entities_process_image_directory,
        xdm.source.process.executable.filename = Entities_process_image_filename,
        xdm.target.host.os = Entities_host_OS;


[MODEL: dataset = beyondtrust_passwordsafe_raw, content_id="BeyondTrust_Password_Safe"]
/* Supported event formats: Comma delimited and tab delimited Syslog messages. */
alter // Extract raw data (https://www.beyondtrust.com/docs/beyondinsight-password-safe/bi/event-forwarder/pb-ps-events.htm)
    agent_description = arrayindex(regextract(_raw_log, "Agent Desc:\s\"?(\w.*?)\"?(?:,|\s{4}|\t)"), 0),
    agent_id = arrayindex(regextract(_raw_log, "Agent ID:\s\"?(\w.*?)\"?(?:,|\s{4}|\t)"), 0),
    agent_version = arrayindex(regextract(_raw_log, "Agent Ver:\s\"?(\w.*?)\"?(?:,|\s{4}|\t)"), 0),
    app_user_id = arrayindex(regextract(_raw_log, "AppUserID:\s\"?(\w.*?)\"?(?:,|\s{4}|\t)"), 0),
    applications = arrayindex(regextract(_raw_log, "Applications:\s\"?(\w.*?)\"?(?:,|\s{4}|\t)"), 0),
    audit_id = arrayindex(regextract(_raw_log, "AuditID:\s\"?(\w+)"), 0),
    category = arrayindex(regextract(_raw_log, "(?:,|\t|\s{5})Category:\s\"?(\w.*?)\"?(?:,|\s{4}|\t)"), 0),
    client_id = arrayindex(regextract(_raw_log, "Client Id:\s\"?(\w.*?)\"?(?:,|\s{4}|\t)"), 0),
    client_ip = arrayindex(regextract(_raw_log, "Client IP Address:\s\"?(\w.*?)\"?(?:,|\s{4}|\t)"), 0),
    created_by = coalesce(
        arrayindex(regextract(_raw_log, "CreatedBy:\s\"([^\"]+)\""), 0), 
        arrayindex(regextract(_raw_log, "CreatedBy:\s(\S.+?)(?:\s{4}|\t)"), 0)),
    description = arrayindex(regextract(_raw_log, "Description:\s\"?(\w.*?)\"?(?:,|\s{4}|\t)"), 0),
    details = arrayindex(regextract(_raw_log, "Details:\s\"?(\w.*?)\"?(?:,|\s{4}|\t)"), 0),
    dns_name = arrayindex(regextract(_raw_log, "DNS Name:\s\"?(\w.*?)\"?(?:,|\s{4}|\t)"), 0),
    domain_name = arrayindex(regextract(_raw_log, "Domain Name:\s\"?(\w.*?)\"?(?:,|\s{4}|\t)"), 0),
    elevation_command = arrayindex(regextract(_raw_log, "Elevation Command:\s\"?(\w.*?)\"?(?:,|\s{4}|\t)") , 0),
    email = arrayindex(regextract(_raw_log, "Email:\s\"?(\S+\@[\w\-\.]+)"), 0),
    event_desc = arrayindex(regextract(_raw_log, "Event Desc:\s\"?(\w.*?)\"?(?:,|\s{4}|\t)"), 0), 
    event_name = arrayindex(regextract(_raw_log, "Event Name:\s\"?(\w.*?)\"?(?:,|\s{4}|\t)"), 0),
    event_target = arrayindex(regextract(_raw_log, "Target:\s\"?(\w.*?)\"?(?:,|\s{4}|\t)"), 0),
    file_name = arrayindex(regextract(_raw_log, "FileName:\s\"?\w\S+\"?"), 0),
    folder = arrayindex(regextract(_raw_log, "Folder:\s\"?(\w.*?)\"?(?:,|\s{4}|\t)"), 0),
    folder_path = arrayindex(regextract(_raw_log, "FolderPath:\s\"?(\w.*?)\"?(?:,|\s{4}|\t)"), 0),
    group_id = arrayindex(regextract(_raw_log, "GroupId:\s\"?(\w.*?)\"?(?:,|\s{4}|\t)"), 0),
    group_name = arrayindex(regextract(_raw_log, "Group:\s\"?(\w.*?)\"?(?:,|\s{4}|\t)"), 0),
    hostname = arrayindex(regextract(_raw_log, "(?:\t|,)Name:\s\"?(\w.*?)\"?(?:,|\s{4}|\t)"), 0),
    id = arrayindex(regextract(_raw_log, "\"Id:\s\"(\w.*?)\"?(?:,|\s{4}|\t)"), 0),
    is_failed = arrayindex(regextract(_raw_log, "Failed:\s\"?(\w.*?)\"?(?:,|\s{4}|\t)"), 0),
    jump_host = arrayindex(regextract(_raw_log, "Jumphost:\s\"?(\w.*?)\"?(?:,|\s{4}|\t)"), 0),
    log_id = arrayindex(regextract(_raw_log, "LogID:\s\"?(\w.*?)\"?(?:,|\s{4}|\t)"), 0),
    login_account_id = arrayindex(regextract(_raw_log, "Login Account ID:\s\"?(\w.*?)\"?(?:,|\s{4}|\t)"), 0),
    managed_account_id = arrayindex(regextract(_raw_log, "Account ID:\s\"?(\w.*?)\"?(?:,|\s{4}|\t)"), 0),
    managed_entity_type = arrayindex(regextract(_raw_log, "Managed System Type:\s\"?(\w.*?)\"?(?:,|\s{4}|\t)"), 0),
    managed_system_id = arrayindex(regextract(_raw_log, "Managed System ID:\s\"?(\w.*?)\"?(?:,|\s{4}|\t)"), 0),
    managed_system_name = arrayindex(regextract(_raw_log, "Managed System Name:\s\"?(\w.*?)\"?(?:,|\s{4}|\t)"), 0),
    message = arrayindex(regextract(_raw_log, "Message:\s\"([^\"]+)"), 0),
    modified_by = coalesce(
        arrayindex(regextract(_raw_log, "ModifiedBy:\s\"([^\"]+)\""), 0), 
        arrayindex(regextract(_raw_log, "ModifiedBy:\s(\S.+?)(?:\s{4}|\t)"), 0)),
    netbios_name = arrayindex(regextract(_raw_log, "NetBIOS Name:\s\"?(\w.*?)\"?(?:,|\s{4}|\t)"), 0),
    object_id = arrayindex(regextract(_raw_log, "ObjectID:\s\"?(\w.*?)\"?(?:,|\s{4}|\t)"), 0),
    object_type = arrayindex(regextract(_raw_log, "ObjectType:\s\"?(\w.*?)\"?(?:,|\s{4}|\t)"), 0),
    operation = arrayindex(regextract(_raw_log, "Operation:\s\"?(\w.*?)\"?(?:,|\s{4}|\t)"), 0),
    port = arrayindex(regextract(_raw_log, "Port:\s*\"?(\d{1,5})"), 0),
    target_host_os = arrayindex(regextract(_raw_log, "OS:\s\"?(\w.*?)\"?(?:,|\s{4}|\t)"), 0),
    target_host_platform = arrayindex(regextract(_raw_log, "Platform name:\s\"?(\w.*?)\"?(?:,|\s{4}|\t)"), 0),
    owner = coalesce(
        arrayindex(regextract(_raw_log, "Owner:\s\"([^\"]+)\""), 0), 
        arrayindex(regextract(_raw_log, "Owner:\s(\S.+?)(?:\s{4}|\t)"), 0)),
    owner_id = coalesce(
        arrayindex(regextract(_raw_log, "OwnerId:\s\"([^\"]+)\""), 0), 
        arrayindex(regextract(_raw_log, "OwnerId:\s(\S.+?)(?:\s{4}|\t)"), 0)),
    report_name = arrayindex(regextract(_raw_log, "Report Name:\s\"?(\w.*?)\"?(?:,|\s{4}|\t)"), 0),
    response_code = arrayindex(regextract(_raw_log, "Code:\s\"?(\w+)"), 0),
    result = arrayindex(regextract(_raw_log, "Result:\s\"?(\w.*?)\"?(?:,|\s{4}|\t)"), 0),
    role_used = arrayindex(regextract(_raw_log, "RoleUsed:\s\"?(\w.*?)\"?(?:,|\s{4}|\t)"), 0),
    source_host = arrayindex(regextract(_raw_log, "Source Host:\s\"?(\w.*?)\"?(?:,|\s{4}|\t)"), 0), 
    source_ip = arrayindex(regextract(_raw_log, "(?:Source IP|IPAddress):\s\"?([\da-fA-F\:\.]+)"), 0), 
    title = arrayindex(regextract(_raw_log, "Title:\s\"?(\w.*?)\"?(?:,|\s{4}|\t)"), 0),
    user = coalesce(
        arrayindex(regextract(_raw_log, "User:\s\"?(\w.*?)\"?(?:,|\s{4}|\t)"), 0),
        arrayindex(regextract(_raw_log, "UserName:\s\"?(\w.*?)\"?(?:,|\s{4}|\t)"), 0),
        arrayindex(regextract(_raw_log, "SAM Account Name:\s\"?(\w.*?)\"?(?:,|\s{4}|\t)"), 0),
        arrayindex(regextract(_raw_log, "User Principal Name:\s\"?(\w.*?)\"?(?:,|\s{4}|\t)"), 0),
        arrayindex(regextract(_raw_log, "SSO User Name:\s\"?(\w.*?)\"?(?:,|\s{4}|\t)"), 0)),
    user_id = arrayindex(regextract(_raw_log, "UserID:\s\"?(\w.*?)\"?(?:,|\s{4}|\t)"), 0),
    workgroup_description = arrayindex(regextract(_raw_log, "Workgroup Desc:\s?\"?(\w.*?)\"?(?:,|\s{4}|\t)"), 0),
    workgroup_id = arrayindex(regextract(_raw_log, "Workgroup ID:\s?\"?(\w.*?)\"?(?:,|\s{4}|\t)"), 0),
    workgroup_location = arrayindex(regextract(_raw_log, "Workgroup Location:\s\"?(\w.*?)\"?(?:,|\s{4}|\t)"), 0)
| alter // Post extraction processing 
    auth_type = coalesce(arrayindex(regextract(details, "Type=(\w+)"), 0), arrayindex(regextract(_raw_log, "Authentication Type:\s*\"?(\w+)"), 0)),
    is_event_outcome_successful = if(is_failed = "0" or result = "S" or event_desc ~= "Success" or response_code = "NoError", to_boolean("TRUE")),
    is_event_outcome_failure = if(is_failed = "1" or result = "F" or event_desc ~= "(?i)Failed" or category ~= "Failure" or response_code ~= "Failed", to_boolean("TRUE")),
    os_platform = coalesce(target_host_os, target_host_platform),
    owner_details = concat(owner, " (", owner_id, ")"),
    request_id = arrayindex(regextract(details, "(?:Request \#|ReleaseRequestId=)(\w+)"), 0),
    target_application = arrayindex(regextract(details, "Application=(\w+)"), 0),
    target_account = coalesce(
        arrayindex(regextract(event_target, "Account\:(\S+)"), 0),
        arrayindex(regextract(_raw_log, "Username:\s\"?(\w.*?)\"?(?:,|\s{4}|\t)"), 0),
        arrayindex(regextract(_raw_log, "Account\s?Name:\s\"?(\w.*?)\"?(?:,|\s{4}|\t)"), 0)),
    target_asset = arrayindex(regextract(event_target, "Asset(?:\=|\:)(\S+)"), 0),
    target_netbios_name = arrayindex(regextract(message, "NetBiosName=([^,]+)"), 0),
    user_domain = coalesce(arrayindex(regextract(user, "(.+)\\.+"), 0), arrayindex(split(user, "@"), 1), arrayindex(split(email, "@"), 1)),
    user_name = coalesce(arrayindex(regextract(user, "\\(.+)"), 0), arrayindex(regextract(user, "(.+)\@"), 0), user),
    workgroup = concat(workgroup_description, " (", workgroup_id, ")")
| alter 
    os_uppercase = uppercase(os_platform),
    client_ipv4 = if(client_ip ~= "\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}", client_ip),
    client_ipv6 = if(client_ip ~= ":", client_ip),
    src_ipv4 = if(source_ip ~= "\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}", source_ip),
    src_ipv6 = if(source_ip ~= ":", source_ip),
    target_user_domain = arrayindex(regextract(target_account, "(.+)\\.+"), 0),
    target_user_name = coalesce(arrayindex(regextract(target_account, "\\(.+)"), 0), target_account)
| alter // XDM Mapping 
    xdm.auth.auth_method = auth_type,
    xdm.email.recipients = if(email != null, arraycreate(email)),
    xdm.event.description = arraystring(arraycreate(event_desc, description, details, message, title), ". "),
    xdm.event.id = coalesce(log_id, audit_id),
    xdm.event.operation = operation,
    xdm.event.original_event_type = event_name,
    xdm.event.outcome = if(is_event_outcome_successful, XDM_CONST.OUTCOME_SUCCESS, is_event_outcome_failure, XDM_CONST.OUTCOME_FAILED),
    xdm.event.outcome_reason = if(is_event_outcome_failure, arraystring(arraycreate(response_code, message), ". ")),
    xdm.event.type = concat(category, ": ", event_name),
    xdm.intermediate.host.hostname = jump_host,
    xdm.observer.name = agent_description, 
    xdm.observer.type = agent_id, 
    xdm.observer.version = agent_version,
    xdm.session_context_id = request_id, 
    xdm.source.agent.identifier = agent_id,
    xdm.source.agent.version = agent_version,
    xdm.source.host.hostname = if(dns_name != null and dns_name != "UNKNOWN", dns_name, coalesce(source_host, hostname, netbios_name)),
    xdm.source.ipv4 = coalesce(src_ipv4, client_ipv4),
    xdm.source.ipv6 = coalesce(src_ipv6, client_ipv6),
    xdm.source.host.ipv4_addresses = arraydistinct(arraycreate(src_ipv4, client_ipv4)),
    xdm.source.host.ipv6_addresses = arraydistinct(arraycreate(src_ipv6, client_ipv6)),
    xdm.source.location.region = workgroup_location,
    xdm.source.user.domain = coalesce(user_domain, domain_name),
    xdm.source.user.groups = arraycreate(role_used),
    xdm.source.user.identifier = coalesce(login_account_id, client_id),
    xdm.source.user.ou = workgroup,
    xdm.source.user.username = user_name,
    xdm.target.application.name = coalesce(target_application, to_string(applications)),
    xdm.target.process.command_line = elevation_command,
    xdm.target.file.directory = folder,
    xdm.target.file.filename = file_name,
    xdm.target.file.path = folder_path,
    xdm.target.host.hostname = coalesce(target_asset, target_netbios_name),
    xdm.target.host.os = target_host_os,
    xdm.target.host.os_family = if(os_uppercase ~= "WINDOWS|ACTIVE DIRECTORY", XDM_CONST.OS_FAMILY_WINDOWS, os_uppercase ~= "MAC", XDM_CONST.OS_FAMILY_MACOS, os_uppercase ~= "LINUX", XDM_CONST.OS_FAMILY_LINUX, os_uppercase ~= "ANDROID", XDM_CONST.OS_FAMILY_ANDROID, os_uppercase ~= "IOS", XDM_CONST.OS_FAMILY_IOS, os_uppercase ~= "UBUNTU", XDM_CONST.OS_FAMILY_UBUNTU, os_uppercase ~= "DEBIAN", XDM_CONST.OS_FAMILY_DEBIAN, os_uppercase ~= "FEDORA", XDM_CONST.OS_FAMILY_FEDORA, os_uppercase ~= "CENTOS", XDM_CONST.OS_FAMILY_CENTOS, os_uppercase ~= "CHROME", XDM_CONST.OS_FAMILY_CHROMEOS, os_uppercase ~= "SOLARIS", XDM_CONST.OS_FAMILY_SOLARIS, os_uppercase ~= "SCADA", XDM_CONST.OS_FAMILY_SCADA, os_uppercase),
    xdm.target.port = to_integer(port),
    xdm.target.resource.id = coalesce(object_id, id, managed_system_id),
    xdm.target.resource.name = coalesce(report_name, managed_system_name),
    xdm.target.resource.type = coalesce(object_type, managed_entity_type),
    xdm.target.resource.value = event_target,
    xdm.target.resource.parent_id = coalesce(owner_details, modified_by, created_by),
    xdm.target.user.domain = target_user_domain, 
    xdm.target.user.identifier = coalesce(user_id, app_user_id, managed_account_id),
    xdm.target.user.groups = arraycreate(group_name, group_id),
    xdm.target.user.username = target_user_name;


[RULE: beyondtrust_pra_common_fields_modeling content_id="BeyondTrustPrivilegedRemoteAccess"]
/* BeyondTrust PRA (Priviliged Remote Access) Generic Base Modeling. 
    The mappings in this rule apply to all BeyondTrust PRA event types.
    Message format documented at: 
    https://www.beyondtrust.com/docs/privileged-remote-access/how-to/integrations/syslog/message-format.htm 
*/
alter  // extract message header fields 
    syslog_priority = to_integer(arrayindex(regextract(_raw_log, "^\<(\d{1,3})\>\s*\w+"), 0)), 
    syslog_hostname = arrayindex(regextract(_raw_log, "^\<\d{1,3}\>\s*\w+\s+\S+\s+(\S+)"), 0),
    meta_sequence_id = arrayindex(regextract(_raw_log, "sequenceId=\"(\d+)"), 0), 
    site_id = arrayindex(regextract(_raw_log, "(\d+)\:\d+\:\d+\:"), 0),
    msg_payload = arrayindex(regextract(_raw_log, "\d+\:\d+\:\d+\:(.+)"), 0)
| alter // extract message payload fields 
    event_type = arrayindex(regextract(msg_payload, "event\=([^;]+)"), 0), // The name of the event that occurred.
    site = arrayindex(regextract(msg_payload, "site\=(\S[^;]+)"), 0), // The hostname for which the BeyondTrust software was built.
    syslog_facility = floor(divide(syslog_priority, 8)), 
    who = arrayindex(regextract(msg_payload, "who\=(\S[^;]+)"), 0), // The username associated with this event.
    who_ip = arrayindex(regextract(msg_payload, "who_ip\=([^;]+)"), 0) // The IP address of the system that caused the event.
| alter // old/new nomenclature fields extractions: https://www.beyondtrust.com/docs/privileged-remote-access/how-to/integrations/syslog/oldnew-nomenclature.htm
    properties_old_state = arraystring(regextract(msg_payload, "[^\=]*(old_\S[^;]+)"), ";"), // snapshot of current resource state before change
    properties_new_state = arraystring(regextract(msg_payload, "[^\=]*(new_\S[^;]+)"), ";") // current state of modified resource properties 
| alter // additional proccessing 
    authentication_method = arrayindex(regextract(who, "\susing\s+(\S+)"), 0),
    event_description = if(event_type="account_added", "A new account has been added and saved", event_type="account_changed", "An existing account has been modified and saved", event_type="account_removed", "An existing account has been deleted", event_type="account_group_added", "A new account group has been added and saved", event_type="account_group_changed", "An existing account group has been modified and saved", event_type="account_group_removed", "An existing account group has been deleted", event_type="account_jump_item_association_added", "An association with a Jump Item was added for the account", event_type="account_jump_item_association_changed", "An association with a Jump Item was changed for the account", event_type="account_jump_item_direct_association_added", "The account is allowed to be injected for the specific Jump Items", event_type="account_jump_item_direct_association_removed", "The account is removed from the allowed list to be injected for the specific Jump Items", event_type="accounts_changed", "The group of one or more accounts was modified", event_type="admin_password_reset_to_factory_default", "The Reset Admin Account button has been clicked, reverting a site's administrative account to its default credentials", event_type="api_account_added", "A new API account has been added and saved", event_type="api_account_changed", "An existing API account has been modified and saved", event_type="api_account_removed", "An existing API account has been deleted", event_type="backup_created", "A backup of the current software configuration has been saved", event_type="canned_script_added", "A new canned script has been added and saved", event_type="canned_script_category_added", "A canned script has been newly assigned to a category, and the script has been saved", event_type="canned_script_category_removed", "A previously assigned canned message has been unassigned from a category, and the script has been saved", event_type="canned_script_changed", "An existing canned script's name, description, or command sequence has been changed, and the change has been saved", event_type="canned_script_file_added", "A resource file has been newly associated with a canned script, and the script has been saved", event_type="canned_script_file_removed", "A previously associated resource file has been removed from a canned script, and the script has been saved", event_type="canned_script_removed", "An existing canned script has been deleted", event_type="canned_script_team_added", "A team has been newly assigned to a canned script, and the script has been saved", event_type="canned_script_team_removed", "A previously assigned team has been unassigned from a canned script, and the script has been saved", event_type="canned_scripts_category_added", "A new canned scripts category has been created", event_type="canned_scripts_category_removed", "An existing canned scripts category has been deleted", event_type="canned_scripts_file_added", "A new canned script resource file has been uploaded", event_type="canned_scripts_file_removed", "An existing canned script resource file has been deleted", event_type="certificate_export", "An SSL certificate has been exported from the B Series Appliance", event_type="change_display_name", "A user has attempted to change their display name", event_type="change_password", "A user has attempted to change their password", event_type="change_username", "A user has attempted to change their username", event_type="command_shell_filtering_regex_list", "The list of Shell Prompt patterns", event_type="custom_rep_link_added", "A new custom link has been added and saved", event_type="custom_rep_link_changed", "An existing custom link has been edited and saved", event_type="custom_rep_link_removed", "An existing custom link has been deleted", event_type="custom_session_attribute_added", "A new custom field for API integration has been added and saved", event_type="custom_session_attribute_changed", "An existing custom field for API integration has been edited and saved", event_type="custom_session_attribute_removed", "An existing custom field for API integration has been removed", event_type="custom_session_policy_added", "Custom session permissions have been added to a user account, and the user account has been saved", event_type="custom_session_policy_changed", "Existing custom session permissions have been edited, and the user account has been saved", event_type="custom_session_policy_removed", "Existing custom session permissions have been removed from a user account, and the user account has been saved", event_type="custom_special_action_added", "A new custom special action has been added and saved", event_type="custom_special_action_changed", "An existing custom special action has been edited and saved", event_type="custom_special_action_removed", "An existing custom special action has been removed", event_type="customizable_text_changed", "An existing login agreement has been changed", event_type="discovery_error_added", "A new Discovery job error has been added", event_type="discovery_error_changed", "A new Discovery job error has been changed", event_type="discovery_error_removed", "A new Discovery job error has been removed", event_type="domain_added", "A new vault domain has been added and saved", event_type="domain_changed", "An existing account has been modified and saved", event_type="domain_removed", "An existing vault domain has been deleted", event_type="downloaded_rep_client", "A user has clicked the link to download the access console", event_type="ecm_group_added", "An ECM Group has been added", event_type="ecm_group_changed", "An ECM Group has been changed", event_type="ecm_group_removed", "An ECM Group has been removed", event_type="endpoint_changed", "An existing endpoint has been modified and saved", event_type="endpoint_removed", "An existing endpoint has been deleted", event_type="eula_accepted", "The BeyondTrust PRA Cloud end user license agreement (EULA) has been accepted by a user, and the username has been recorded", event_type="fido2_credential_added", "A new FIDO2 Autheticator has been added and saved", event_type="fido2_credential_changed", "An existing FIDO2 Autheticator has been modified and saved", event_type="fido2_credential_removed", "An existing FIDO2 Autheticator has been deleted", event_type="file_removed_from_file_store", "A file has been deleted from the file store", event_type="file_uploaded_to_file_store", "A file has been added to the file store", event_type="group_policy_add_to_jump_group_added", "A Jump Group has been added to a group policy's Add To Jump Groups list", event_type="group_policy_add_to_jump_group_removed", "A Jump Group has been removed from a group policy's Add To Jump Groups list", event_type="group_policy_add_to_jumpoint_added", "A Jumpoint has been added to a group policy's Add To Jumpoints list", event_type="group_policy_add_to_jumpoint_removed", "A Jumpoint has been removed from a group policy's Add To Jumpoints list", event_type="group_policy_add_to_support_teams_added", "A team has been added to a group policy's Add To Teams list", event_type="group_policy_add_to_support_teams_removed", "A team has been removed from a group policy's Add To Teams list", event_type="group_policy_added", "A new group policy has been created and saved", event_type="group_policy_changed", "An existing group policy's priority level has changed, and the change has been saved", event_type="group_policy_member_added", "A new member has been added to a group policy, and the policy has been saved", event_type="group_policy_member_removed", "An existing member has been removed from a group policy, and the policy has been saved", event_type="group_policy_remove_from_jump_group_added", "A Jump Group has been added to a group policy's Remove From Jump Groups list", event_type="group_policy_remove_from_jump_group_removed", "A Jump Group has been removed from a group policy's Remove From Jump Groups list", event_type="group_policy_remove_from_jumpoint_added", "A Jumpoint has been added to a group policy's Remove From Jumpoints list", event_type="group_policy_remove_from_jumpoint_removed", "A Jumpoint has been removed from a group policy's Remove From Jumpoints list", event_type="group_policy_remove_from_support_teams_added", "A team has been added to a group policy's Remove From Teams list", event_type="group_policy_remove_from_support_teams_removed", "A team has been removed from a group policy's Remove From Teams list", event_type="group_policy_removed", "An existing group policy has been deleted", event_type="jump_item_role_added", "A new Jump Item Role has been created and saved", event_type="jump_item_role_changed", "An existing Jump Item Role has been modified and saved", event_type="jump_item_role_removed", "An existing Jump Item Role has been deleted", event_type="jump_policy:schedule_entry_added", "A new schedule entry has been added to a Jump Policy, and the policy has been saved", event_type="jump_policy:schedule_entry_removed", "An existing schedule entry has been removed from a Jump Policy, and the policy has been saved", event_type="jump_policy_added", "A new Jump Policy has been created and saved", event_type="jump_policy_changed", "An existing Jump Policy has been modified and saved", event_type="jump_policy_removed", "An existing Jump Policy has been deleted", event_type="jumpoint_cluster_added", "A new Jumpoint or Jumpoint cluster has been created and saved", event_type="jumpoint_cluster_changed", "An existing Jumpoint or Jumpoint cluster has been changed", event_type="jumpoint_cluster_removed", "An existing Jumpoint or Jumpoint cluster has been deleted", event_type="jumpoint_user_added", "A new member has been added to a Jumpoint, and the Jumpoint has been saved", event_type="jumpoint_user_removed", "An existing member has been removed from a Jumpoint, and the Jumpoint has been saved", event_type="kerberos_keytab_added", "A new Kerberos keytab has been uploaded", event_type="kerberos_keytab_removed", "An existing Kerberos keytab has been deleted", event_type="login", "A login attempt has been made", event_type="login_schedule_entry_added", "A new login schedule entry has been added to a user's group policy's login schedule, and the user account or group policy has been saved", event_type="login_schedule_entry_removed", "An existing login schedule entry has been removed from a user's group policy's login schedule, and the user group policy has been saved", event_type="logout", "A user has logged out of the access console, whether by deliberate action, by an administrator, or as the result of a lost connection to the B Series Appliance", event_type="management_account_added", "A new management account has been added and saved", event_type="management_account_changed", "An existing management account has been modified and saved", event_type="management_account_removed", "An existing management account has been deleted", event_type="msgraph_http_recipient_added", "A new service principal has been added and saved", event_type="msgraph_http_recipient_changed", "An existing service principal has been modified and saved", event_type="msgraph_http_recipient_removed", "An existing service principal has been deleted", event_type="network_address_added", "A new IP address has been added and saved", event_type="network_address_changed", "An existing IP address has been modified and saved", event_type="network_address_removed", "An existing IP address has been deleted. Note that you cannot delete the default route", event_type="network_changed", "The global network configuration has been changed, and the change has been saved", event_type="network_route_changed", "A static route has been added, modified, or removed", event_type="network_tunnel_jump_item_added", "A network tunnel Jump Item has been added", event_type="network_tunnel_jump_item_changed", "A network tunnel Jump Item has been changed and saved", event_type="network_tunnel_jump_item_removed", "A network tunnel Jump Item has been removed", event_type="outbound_event_email_recipient_added", "A new email outbound event has been added and saved", event_type="outbound_event_email_recipient_changed", "An existing email outbound event has been modified and saved", event_type="outbound_event_email_recipient_removed", "An existing email outbound event has been deleted", event_type="outbound_event_email_trigger_added", "A new trigger has been added for an email outbound event, and the event has been saved", event_type="outbound_event_email_trigger_removed", "An existing trigger for an email outbound event has been removed, and the event has been saved", event_type="outbound_event_http_recipient_added", "A new HTTP outbound event has been added and saved", event_type="outbound_event_http_recipient_changed", "An existing HTTP outbound event has been modified and saved", event_type="outbound_event_http_recipient_removed", "An existing HTTP outbound event has been deleted", event_type="outbound_event_http_trigger_added", "A new trigger has been added for an HTTP outbound event, and the event has been saved", event_type="outbound_event_http_trigger_removed", "An existing trigger for an HTTP outbound event has been removed, and the event has been saved", event_type="pending_user_added", "A pending user has been added and saved", event_type="pending_user_changed", "A pending user has been modified and saved", event_type="pending_user_removed", "A pending user was deleted", event_type="pending_vendor_user_added", "A vendor user registration request was made", event_type="pending_vendor_user_deleted", "A pending vendor user was deleted", event_type="perm_remote_shell_Allow list", "A command filtering option has been Allow listed or Deny listed. Or, all commands are allowed", event_type="perm_remote_shell_filter_commands", "The list of Allow listed or Deny listed command patterns", event_type="public_site_portal_logo_uploaded", "A new logo image for the public site has been uploaded", event_type="public_site_session_attribute_added", "A public site session attribute has been added", event_type="public_site_session_attribute_changed", "A public site session attribute has been changed", event_type="public_site_session_attribute_removed", "A public site session attribute has been removed", event_type="reboot", "The B Series Appliance has been rebooted", event_type="remote_rfb_jump_item_added", "A Remote RFB Jump Item has been added", event_type="remote_rfb_jump_item_removed", "A Remote RFB Jump Item has been removed", event_type="rep_client_connection_terminated", "An administrator has terminated a user's connection", event_type="rep_console_setting_added", "A managed access console setting has been defined for the first time, and the settings have been saved", event_type="rep_console_setting_changed", "A managed access console setting has been changed, and the settings have been saved", event_type="rep_console_setting_removed", "A managed access console setting has been marked as undefined, and the settings have been saved", event_type="rep_invite_added", "A session policy has been made available for access invites, and the session policy has been saved", event_type="rep_invite_removed", "A session policy has been made unavailable for access invites and has been saved, or a session policy available for access invites has been deleted", event_type="repinvite_setting_added", "An access invite setting has been added because a session policy has been made available for access invites, and the session policy has been saved", event_type="repinvite_setting_removed", "An access invite setting has been removed either because a session policy has been made unavailable for access invites and has been saved, or because a session policy available for access invites has been deleted", event_type="reporting_erasure", "Session reports have had representative or customer data anonymized", event_type="restored_from_backup", "The software configuration has been successfully restored from its backup file", event_type="restoring_from_backup", "The software configuration is in the process of restoring from its backup file", event_type="scheduled_discovery_job_added", "The domain scheduled discovery has been added", event_type="scheduled_discovery_job_changed", "The domain scheduled discovery has changed", event_type="security_provider_added", "A new security provider configuration has been added and saved", event_type="security_provider_changed", "An existing security provider configuration's priority level has changed, and the change has been saved", event_type="security_provider_removed", "An existing security provider configuration has been deleted", event_type="security_provider_setting_added", "A security provider setting has been added as part of the initial configuration, and the configuration has been saved", event_type="security_provider_setting_changed", "An existing security provider configuration has been modified and saved", event_type="security_provider_setting_removed", "A security provider setting has been removed as part of the deletion of a security provider configuration", event_type="server_software_restarted", "The BeyondTrust software has been restarted", event_type="session_policy_added", "A new session policy has been added and saved", event_type="session_policy_changed", "An existing session policy has been modified and saved", event_type="session_policy_removed", "An existing session policy has been deleted", event_type="setting_added", "A setting has been defined and saved for the first time", event_type="setting_changed", "A setting has been modified and saved", event_type="shared_jump_group_added", "A new Jump Group has been added and saved", event_type="shared_jump_group_changed", "An existing Jump Group has been modified and saved", event_type="shared_jump_group_removed", "An existing Jump Group has been deleted", event_type="SNMP_changed", "The SNMPv2 Server has been changed", event_type="ssh_account_added", "An SSH account has been added", event_type="ssh_account_changed", "An SSH account has been modified and saved", event_type="ssh_account_removed", "An SSH account has been removed", event_type="starting_support_tunnel", "A support tunnel has been initiated from the B Series Appliance", event_type="support_session_detail_generated", "A detailed report has been run for an access session", event_type="support_session_report_generated", "A report of access sessions has been run", event_type="support_session_summary_report_generated", "A summary report of support sessions has been run", event_type="support_team_added", "A team has been added", event_type="support_team_changed", "A team has been changed", event_type="support_team_member_added", "A new member has been added to a team, and the team has been saved", event_type="support_team_member_changed", "An existing member has been assigned a different role in a team, and the team has been saved", event_type="support_team_member_removed", "An existing member has been deleted from a team, and the team has been saved", event_type="support_team_removed", "An existing team has been deleted", event_type="syslog_server_changed", "The remote syslog server setting has been changed and saved", event_type="team_activity_report_generated", "A team activity report has been run", event_type="user_account_report_generated", "A user account report has been generated", event_type="user_added", "A new local user has been created and saved. Event fields differ between /login users and /appliance users", event_type="user_changed", "An existing local user has been modified and saved. Event fields differ between /login users and /appliance users", event_type="user_removed", "An existing local user has been deleted. Event fields differ between /login users and /appliance users", event_type="user_session_policy_added", "A session policy has been applied to a user account, and the user account has been saved", event_type="user_session_policy_removed", "A session policy has been removed from a user account, and the user account has been saved", event_type="vault_account_password_rotation", "Vault account password has been rotated", event_type="vendor_activity_report_generated", "A vendor report was generated", event_type="windows_service_changed", "A Windows service has been changed and saved", event_type="windows_service_removed", "A Windows service was removed", event_type),
    source_ipv4 = if(who_ip ~= "(?:\d{1,3}\.){3}\d{1,3}", who_ip),
    source_ipv6 = if(who_ip ~= "(?:[a-fA-F\d]{0,4}\:){7}[\wa-fA-F]{0,4}", who_ip),
    syslog_severity = to_string(subtract(syslog_priority, multiply(syslog_facility, 8))),
    user_name = arrayindex(regextract(who, "\(([^\)]+)"), 0),
    user_first_name = arrayindex(regextract(who, "((?:\S+\.\s+){0,1}\S+)"), 0),
    user_last_name = trim(arrayindex(regextract(who, "(?:\S+\.\s+){0,1}\S+\s(.+)\("), 0))
| alter // xdm mapping 
    xdm.alert.severity = syslog_severity,
    xdm.auth.auth_method = authentication_method, 
    xdm.auth.privilege_level = if(user_name = "admin", XDM_CONST.PRIVILEGE_LEVEL_ADMIN),
    xdm.source.user.first_name = user_first_name,
    xdm.source.user.last_name = user_last_name, 
    xdm.source.user.username = user_name, 
    xdm.event.id = meta_sequence_id,
    xdm.event.log_level = if(syslog_severity = "0", XDM_CONST.LOG_LEVEL_EMERGENCY, syslog_severity = "1", XDM_CONST.LOG_LEVEL_ALERT, syslog_severity = "2", XDM_CONST.LOG_LEVEL_CRITICAL, syslog_severity = "3", XDM_CONST.LOG_LEVEL_ERROR, syslog_severity = "4", XDM_CONST.LOG_LEVEL_WARNING, syslog_severity = "5", XDM_CONST.LOG_LEVEL_NOTICE, syslog_severity = "6", XDM_CONST.LOG_LEVEL_INFORMATIONAL, syslog_severity = "7", XDM_CONST.LOG_LEVEL_DEBUG, syslog_severity),
    xdm.event.original_event_type = event_type, 
    xdm.event.description = event_description,
    xdm.intermediate.host.hostname = site,
    xdm.observer.name = syslog_hostname, 
    xdm.observer.unique_identifier = site_id,
    xdm.session_context_id = meta_sequence_id,
    xdm.source.ipv4 = source_ipv4,
    xdm.source.ipv6 = source_ipv6,
    xdm.target.resource.value = properties_new_state, 
    xdm.target.resource_before.value = properties_old_state;
[MODEL: dataset = beyondtrust_pra_raw, content_id="BeyondTrustPrivilegedRemoteAccess"]
/* Event Specific Modeling. 
    The following mappings apply to specific event types, according to the conditional filters applied. 
    The various fields for each event are described at: 
    https://www.beyondtrust.com/docs/privileged-remote-access/how-to/integrations/syslog/fields/index.htm */

/* Account Jump Item Association Events: 
    These mappings apply to the following events: account_jump_item_association_added, account_jump_item_association_removed. 
    https://www.beyondtrust.com/docs/privileged-remote-access/how-to/integrations/syslog/fields/account-jump-item-association.htm */
alter  event_type = arrayindex(regextract(_raw_log, "event\=([^;]+)"), 0)
| filter event_type in("account_jump_item", "account_jump_item_association_removed")
| call beyondtrust_pra_common_fields_modeling
| alter msg_payload = arrayindex(regextract(_raw_log, "\d+\:\d+\:\d+\:(.+)"), 0)
| alter // account_jump_item", "account_jump_item_association_removed"
    account_group_id = arrayindex(regextract(msg_payload, "account_group_id\=(\S[^;]+)"), 0), // The unique identifier of the account group.
    account_id = arrayindex(regextract(msg_payload, "account_id\=(\S[^;]+)"), 0), // The unique identifier of the account.
    jump_item_association_id = arrayindex(regextract(msg_payload, "id\=(\w[^;]+)"), 0) // The unique identifier of the association.
| alter 
    xdm.target.user.groups = if(account_group_id != null, arraycreate(account_group_id)),
    xdm.target.user.identifier = account_id,
    xdm.target.resource.id = jump_item_association_id, 
    xdm.target.resource.type = if(jump_item_association_id != null, "jump item association");

/* Account Modification, Group Modification & Group Membership Events Fields:
    These mappings apply to the following event types: "account_added", "account_changed", "accounts_changed", "account_removed", "account_group_added", "account_group_changed", "account_group_removed", "account_user_added", "account_user_removed */
alter  event_type = arrayindex(regextract(_raw_log, "event\=([^;]+)"), 0)
| filter event_type in("account_added", "account_changed", "accounts_changed", "account_removed", "account_group_added", "account_group_changed", "account_group_removed", "account_user_added", "account_user_removed")
| call beyondtrust_pra_common_fields_modeling
| alter msg_payload = arrayindex(regextract(_raw_log, "\d+\:\d+\:\d+\:(.+)"), 0)
| alter // Account Fields: https://www.beyondtrust.com/docs/privileged-remote-access/how-to/integrations/syslog/fields/account.htm
    vault_account_name = arrayindex(regextract(msg_payload, "name\=(\S[^;]+)"), 0), // The name of the vault account.
    vault_account_username = arrayindex(regextract(msg_payload, "username\=(\S[^;]+)"), 0), // The username of the vault account.
    account_group_id1 = arrayindex(regextract(msg_payload, "group\=(\S[^;]+)"), 0) // 	The unique identifier of the account group.
| alter // Account Group Fields: https://www.beyondtrust.com/docs/privileged-remote-access/how-to/integrations/syslog/fields/account-group.htm
    account_group_id2 = arrayindex(regextract(msg_payload, "id\=(\w[^;]+)"), 0), // The unique identifier of the account group.
    account_group_name = arrayindex(regextract(msg_payload, "name\=(\S[^;]+)"), 0) // The name of the account group.
| alter // Account Group Membership Fields: https://www.beyondtrust.com/docs/privileged-remote-access/how-to/integrations/syslog/fields/account-group-membership.htm
    accounts_id = arrayindex(regextract(msg_payload, "accounts_id\=(\S[^;]+)"), 0), // The unique identifier of the vault accounts.
    new_account_group_id = arrayindex(regextract(msg_payload, "new_group\=(\S[^;]+)"), 0) // The unique identifier of the target account group.
| alter // Account User Fields: https://www.beyondtrust.com/docs/privileged-remote-access/how-to/integrations/syslog/fields/account-user.htm
    vault_account_id = arrayindex(regextract(msg_payload, "account\:id\=(\S[^;]+)"), 0), // The unique identifier of the vault account.
    vault_account_associated_role = arrayindex(regextract(msg_payload, "role\=(\S[^;]+)"), 0), // The role associated with the vault account. The two possible options are Inject and Inject and Checkout.
    vault_account_associated_user_id = arrayindex(regextract(msg_payload, "user\:id\=(\S[^;]+)"), 0) // The unique identifier of the user associated with this vault account.
| alter target_group = coalesce(account_group_name, new_account_group_id, account_group_id1, account_group_id2, vault_account_associated_role)
| alter 
    xdm.target.resource.name = vault_account_name, 
    xdm.target.resource.type = if(vault_account_name != null, "vault account name"),
    xdm.target.user.identifier = coalesce(accounts_id, vault_account_id, vault_account_associated_user_id),
    xdm.target.user.username = coalesce(vault_account_username, vault_account_name),
    xdm.target.user.groups = if(target_group != null, arraycreate(target_group));

/* API Account Events: 
    These mappings apply to the following events: api_account_added, api_account_changed & api_account_removed. 
    https://www.beyondtrust.com/docs/privileged-remote-access/how-to/integrations/syslog/fields/api-account-fields.htm */
alter  event_type = arrayindex(regextract(_raw_log, "event\=([^;]+)"), 0)
| filter event_type in("api_account_added", "api_account_changed", "api_account_removed")
| call beyondtrust_pra_common_fields_modeling
| alter msg_payload = arrayindex(regextract(_raw_log, "\d+\:\d+\:\d+\:(.+)"), 0)
| alter 
    api_ip_addresses = arrayindex(regextract(msg_payload, "ip_addresses\=(\S[^;]+)"), 0), // Comma-delimited list of network address prefixes from which this account can authenticate.
    api_account_name = arrayindex(regextract(msg_payload, "name\=(\S[^;]+)"), 0), // The name of the API account.
    api_account_id = arrayindex(regextract(msg_payload, "id\=(\w[^;]+)"), 0), // The unique identifier of the API account.
    api_ecm_group = arrayindex(regextract(msg_payload, "ecm_group\=(\S[^;]+)"), 0), // The ID of the ECM (Endpoint Credentials Manager) Group that the account belongs to.
    is_enabled =  arrayindex(regextract(msg_payload, "enabled\=(0|1)"), 0)  // 1: This API account is enabled, 0: This API account is disable
| alter 
    is_api_account_disabled = if(is_enabled = "0", to_boolean("TRUE"), is_enabled = "1", to_boolean("FALSE")),
    permitted_ip_addresses = arraymap(regextract(api_ip_addresses, "([^,]+)"), trim("@element"))
| alter
    permitted_ipv4_addresses = arrayfilter(permitted_ip_addresses, "@element" ~= "\."),
    permitted_ipv6_addresses = arrayfilter(permitted_ip_addresses, "@element" ~= ":")
| alter
    xdm.target.host.ipv4_addresses = permitted_ipv4_addresses,
    xdm.target.host.ipv6_addresses = permitted_ipv6_addresses,
    xdm.target.subnet = api_ip_addresses,
    xdm.target.user.username = api_account_name, 
    xdm.target.user.identifier = api_account_id, 
    xdm.target.user.user_type = XDM_CONST.USER_TYPE_SERVICE_ACCOUNT, 
    xdm.target.user.is_disabled = is_api_account_disabled,
    xdm.target.user.groups = if(api_ecm_group != null, arraycreate(api_ecm_group));
    
/* Canned Script Events: 
    These mappings apply to the following events: "canned_script_category_added", "canned_script_category_removed", "canned_script_added", "canned_script_changed", "canned_script_removed", "canned_script_file_added", "canned_script_file_removed", "canned_script_team_added", "canned_script_team_removed", "canned_scripts_category_added", "canned_scripts_category_removed", "canned_scripts_file_added", "canned_scripts_file_removed"
    https://www.beyondtrust.com/docs/privileged-remote-access/how-to/integrations/syslog/fields/canned-script-category-fields.htm
    https://www.beyondtrust.com/docs/privileged-remote-access/how-to/integrations/syslog/fields/canned-script-fields.htm
    https://www.beyondtrust.com/docs/privileged-remote-access/how-to/integrations/syslog/fields/canned-script-file-fields.htm
    https://www.beyondtrust.com/docs/privileged-remote-access/how-to/integrations/syslog/fields/canned-script-team-fields.htm
    https://www.beyondtrust.com/docs/privileged-remote-access/how-to/integrations/syslog/fields/canned-scripts-category-fields.htm
    https://www.beyondtrust.com/docs/privileged-remote-access/how-to/integrations/syslog/fields/canned-scripts-file-fields.htm */
alter  event_type = arrayindex(regextract(_raw_log, "event\=([^;]+)"), 0)
| filter event_type in("canned_script_category_added", "canned_script_category_removed", "canned_script_added", "canned_script_changed", "canned_script_removed", "canned_script_file_added", "canned_script_file_removed", "canned_script_team_added", "canned_script_team_removed", "canned_scripts_category_added", "canned_scripts_category_removed", "canned_scripts_file_added", "canned_scripts_file_removed")
| call beyondtrust_pra_common_fields_modeling
| alter msg_payload = arrayindex(regextract(_raw_log, "\d+\:\d+\:\d+\:(.+)"), 0)
| alter 
    canned_script_id1 = arrayindex(regextract(msg_payload, "canned_script\:id\=(\S[^;]+)"), 0),
    canned_script_id2 = arrayindex(regextract(msg_payload, "id\=(\w[^;]*);"), 0),
    canned_script_name1 = arrayindex(regextract(msg_payload, "canned_script\:name\=(\S[^;]+)"), 0),
    canned_script_name2 = arrayindex(regextract(msg_payload, "name\=(\S[^;]+)"), 0),
    canned_script_commands = arrayindex(regextract(msg_payload, "commands\=(\S.+?)\;\s*[\w\:]+\="), 0),
    canned_script_filename = arrayindex(regextract(msg_payload, "filename\=(\S[^;]+)"), 0),
    canned_script_team_id = arrayindex(regextract(msg_payload, "team\:id\=(\S[^;]+)"), 0),
    canned_script_team_name = arrayindex(regextract(msg_payload, "team\:name\=(\S[^;]+)"), 0),
    canned_script_category = arrayindex(regextract(msg_payload, "category\=(\S[^;]+)"), 0)
| alter 
    xdm.target.process.command_line = canned_script_commands,
    xdm.target.file.filename = canned_script_filename, 
    xdm.target.resource.id = coalesce(canned_script_id1, canned_script_id2),
    xdm.target.resource.name = coalesce(canned_script_name1, canned_script_name2),
    xdm.target.resource.type = canned_script_category,
    xdm.target.user.groups = if(canned_script_team_id != null or canned_script_team_name != null, arrayconcat(arraycreate(canned_script_team_id), arraycreate(canned_script_team_name)));

/* Certificate Export Event: 
    These mappings apply to the certificate_export event. 
    https://www.beyondtrust.com/docs/privileged-remote-access/how-to/integrations/syslog/fields/certificate-export-fields.htm */
alter  event_type = arrayindex(regextract(_raw_log, "event\=([^;]+)"), 0)
| filter event_type in("certificate_export")
| call beyondtrust_pra_common_fields_modeling
| alter 
    certificate_friendly_name = arrayindex(regextract(_raw_log, "friendly_name\=(\S[^;]+)"), 0), // The friendly name of the certificate being exported.
    exported_with_private_key = arrayindex(regextract(_raw_log, "exported_with_private_key\=(0|1)"), 0) // 1: The private key is included in this export, 0: The private key is not included in this export.
| alter operation = if(exported_with_private_key = "0", "Certificate exported, private key was not included.", exported_with_private_key="1", "Certificate exported, private key was included.")
| alter 
    xdm.event.operation_sub_type = operation,
    xdm.target.resource.name = certificate_friendly_name, 
    xdm.target.resource.type = "certificate";

/* Custom Rep Link Events : 
    These mappings apply to the following events: custom_rep_link_added, custom_rep_link_changed, custom_rep_link_removed. 
    https://www.beyondtrust.com/docs/privileged-remote-access/how-to/integrations/syslog/fields/custom_rep_link.htm */
alter  event_type = arrayindex(regextract(_raw_log, "event\=([^;]+)"), 0)
| filter event_type in("custom_rep_link_added", "custom_rep_link_changed", "custom_rep_link_removed")
| call beyondtrust_pra_common_fields_modeling
| alter msg_payload = arrayindex(regextract(_raw_log, "\d+\:\d+\:\d+\:(.+)"), 0)
| alter 
    custom_link_id = arrayindex(regextract(msg_payload, "id\=(\w[^;]*)"), 0), // The unique identifier of the custom link.
    custom_link_name = arrayindex(regextract(msg_payload, "name\=(\S[^;]+)"), 0), // The name of the custom link.
    custom_link_url = arrayindex(regextract(msg_payload, "url\=(\S[^;]+)"), 0) // The URL of the custom link.
| alter 
    xdm.target.resource.id = custom_link_id, 
    xdm.target.resource.name = custom_link_name,
    xdm.target.resource.type = if(custom_link_id != null, "custom link URL"),
    xdm.target.url = custom_link_url;

/* Custom Special Action Events:
    These mappings apply to the following events: custom_special_action_added, custom_special_action_changed, custom_special_action_removed. 
    https://www.beyondtrust.com/docs/privileged-remote-access/how-to/integrations/syslog/fields/custom-special-action-fields.htm */
alter  event_type = arrayindex(regextract(_raw_log, "event\=([^;]+)"), 0)
| filter event_type in("custom_special_action_added", "custom_special_action_changed", "custom_special_action_removed")
| call beyondtrust_pra_common_fields_modeling
| alter msg_payload = arrayindex(regextract(_raw_log, "\d+\:\d+\:\d+\:(.+)"), 0)
| alter 
    custom_special_action_id = arrayindex(regextract(msg_payload, "id\=(\w[^;]*)"), 0), // The unique identifier of this custom special action.
    custom_special_action_name = arrayindex(regextract(msg_payload, "name\=(\S[^;]+)"), 0), // The name of this custom special action.
    custom_special_action_command = arrayindex(regextract(msg_payload, "command\=(\S[^;]+)"), 0), // The full path of the application to run.
    custom_special_action_arguments = arrayindex(regextract(msg_payload, "arguments\=([^;]+)"), 0) // Command line arguments to apply the command.	
| alter 
    xdm.target.resource.id = custom_special_action_id, 
    xdm.target.resource.name = custom_special_action_name,
    xdm.target.resource.type = if(custom_special_action_id != null, "custom special action"),
    xdm.target.process.command_line = concat(custom_special_action_command, " ", custom_special_action_arguments);

/*  Custom & User Session Policy Events: 
    These mappings apply to the following events: custom_session_policy_added, custom_session_policy_changed, custom_session_policy_removed, user_session_policy_added, user_session_policy_removed. 
    Custom session policy events also include the Support Permissions Fields. */
alter  event_type = arrayindex(regextract(_raw_log, "event\=([^;]+)"), 0)
| filter event_type in("custom_session_policy_added", "custom_session_policy_changed", "custom_session_policy_removed", "user_session_policy_added", "user_session_policy_removed")
| call beyondtrust_pra_common_fields_modeling
| alter msg_payload = arrayindex(regextract(_raw_log, "\d+\:\d+\:\d+\:(.+)"), 0)
| alter // custom sessions policy: https://www.beyondtrust.com/docs/privileged-remote-access/how-to/integrations/syslog/fields/custom-session-policy-fields.htm
    object_description = arrayindex(regextract(msg_payload, "description\=(\S[^;]+)"), 0), // The description of the object to which this custom session policy is applied in the form of object(type):name. The object may be one of users or policies. A users object is followed by @ and the ID of its security provider. The type is either attended or unattended. The name is the name of the object.
    custom_session_policy_id = arrayindex(regextract(msg_payload, "id\=(\w[^;]+)"), 0),  // The unique identifier of this custom session policy.
    custom_session_policy_name = arrayindex(regextract(msg_payload, "name\=(\S[^;]+)"), 0), // The name of this custom session policy. This name is assigned by the B Series Appliance and cannot be modified.
    custom_session_policy_code_name = arrayindex(regextract(msg_payload, "code_name\=(\S[^;]+)"), 0) // The code name of this custom session policy.
| alter // user sessions policy: https://www.beyondtrust.com/docs/privileged-remote-access/how-to/integrations/syslog/fields/user-session-policy-fields.htm
    user_id = arrayindex(regextract(msg_payload, "user\:id\=([^;]+)"), 0), //The unique identifier of the user with whom the session policy is associated.
    user_name = arrayindex(regextract(msg_payload, "user\:username\=(\S[^;]+)"), 0), // The username of the user with whom the session policy is associated.
    user_session_policy_name = arrayindex(regextract(msg_payload, "session_policy\:name\=(\S[^;]+)"), 0) // The name of the session policy associated with this user.
| alter 
    user_object = arrayindex(regextract(object_description, "([^\@]+)\@"), 0)
| alter 
    xdm.network.rule = coalesce(custom_session_policy_code_name, user_session_policy_name),
    xdm.target.resource.id = custom_session_policy_id, 
    xdm.target.resource.name = custom_session_policy_name,
    xdm.target.resource.type = if(custom_session_policy_id != null, "custom session policy"),
    xdm.target.user.identifier = user_id,
    xdm.target.user.username = coalesce(user_object, user_name);

/* Custom Session Attribute Events: 
    These fields apply to the following events: custom_session_attribute_added, custom_session_attribute_changed, and custom_session_attribute_removed. 
    https://www.beyondtrust.com/docs/privileged-remote-access/how-to/integrations/syslog/fields/custom-session-attribute-fields.htm */
alter  event_type = arrayindex(regextract(_raw_log, "event\=([^;]+)"), 0)
| filter event_type in("custom_session_attribute_added", "custom_session_attribute_changed", "custom_session_attribute_removed")
| call beyondtrust_pra_common_fields_modeling
| alter 
    custom_session_attribute_id = arrayindex(regextract(_raw_log, "id\=(\w[^;]+)"), 0),  // The unique identifier of the custom session attribute.
    custom_session_attribute_name = arrayindex(regextract(_raw_log, "name\=(\S[^;]+)"), 0) // The display name of the custom session attribute.
| alter 
    xdm.target.resource.id = custom_session_attribute_id, 
    xdm.target.resource.name = custom_session_attribute_name,
    xdm.target.resource.type = if(custom_session_attribute_id != null, "custom session attribute");

/* Discovery Error Events : 
    These mappings apply to the following events: discovery_error_added, discovery_error_changed, discovery_error_removed. 
    https://www.beyondtrust.com/docs/privileged-remote-access/how-to/integrations/syslog/fields/discovery-error.htm */
alter  event_type = arrayindex(regextract(_raw_log, "event\=([^;]+)"), 0)
| filter event_type in("discovery_error_added", "discovery_error_changed", "discovery_error_removed")
| call beyondtrust_pra_common_fields_modeling
| alter msg_payload = arrayindex(regextract(_raw_log, "\d+\:\d+\:\d+\:(.+)"), 0)
| alter 
    system_name = arrayindex(regextract(msg_payload, "system_name\=(\w[^;]*)"), 0), // The hostname or computer name which this error belongs.
    discovery_job_id = arrayindex(regextract(msg_payload, "discovery_job_id\=(\S[^;]+)"), 0), // The unique identifier of the Discovery job to which this error belongs.
    error_type = arrayindex(regextract(msg_payload, "type\=(\d+)"), 0), // The type of error.
    user_error_description = arrayindex(regextract(msg_payload, "user_error\=(\S[^;]+)"), 0) // The error description.
| alter 
    xdm.alert.subcategory = to_string(error_type), 
    xdm.alert.description = user_error_description,
    xdm.target.host.hostname = system_name, 
    xdm.target.resource.id = discovery_job_id, 
    xdm.target.resource.type = if(discovery_job_id != null, "discovery job");

/* ECM (Endpoint Credential Manager) Group Events : 
    These mappings apply to the following events: ecm_group_added, ecm_group_changed, ecm_group_removed. 
    https://www.beyondtrust.com/docs/privileged-remote-access/how-to/integrations/syslog/fields/ecm-group-fields.htm */
alter  event_type = arrayindex(regextract(_raw_log, "event\=([^;]+)"), 0)
| filter event_type in("ecm_group_added", "ecm_group_changed", "ecm_group_removed")
| call beyondtrust_pra_common_fields_modeling
| alter 
    ecm_group_id = arrayindex(regextract(_raw_log, "id\=(\w[^;]*)"), 0), // The unique identifier of the ECM Group.
    ecm_group_name = arrayindex(regextract(_raw_log, "name\=([^;]+)"), 0) //The name of the ECM Group.
| alter 
    xdm.target.user.groups = arrayconcat(arraycreate(ecm_group_id), arraycreate(ecm_group_name)),
    xdm.target.resource.id = ecm_group_id,
    xdm.target.resource.name = ecm_group_name, 
    xdm.target.resource.type = if(ecm_group_id != null or ecm_group_name != null, "ecm group");

/* Endpoint Events: 
    These fields apply to the following event types: endpoint_changed, endpoint_removed.
    Full documentation: https://www.beyondtrust.com/docs/privileged-remote-access/how-to/integrations/syslog/fields/endpoint.htm */
alter  event_type = arrayindex(regextract(_raw_log, "event\=([^;]+)"), 0)
| filter event_type in("endpoint_changed", "endpoint_removed")
| call beyondtrust_pra_common_fields_modeling
| alter msg_payload = arrayindex(regextract(_raw_log, "\d+\:\d+\:\d+\:(.+)"), 0)
| alter 
    endpoint_hostname = arrayindex(regextract(msg_payload, "hostname\=([^;]+)"), 0), // The hostname of the endpoint.
    endpoint_fqdn = arrayindex(regextract(msg_payload, "distinguished_name\=([^;]+)"), 0), // The distinguished name of the endpoint.
    endpoint_domain_id = arrayindex(regextract(msg_payload, "domain_id\=([^;]+)"), 0), // The unique identifier of the Domain to which this endpoint belongs.
    endpoint_unique_id = arrayindex(regextract(msg_payload, "unique_id\=([^;]+)"), 0), // The unique identifier of the endpoint.
    endpoint_name = arrayindex(regextract(msg_payload, "name\=([^;]+)"), 0), // The name of the endpoint.
    endpoint_is_domain_controller = arrayindex(regextract(msg_payload, "is_domain_controller\=(0|1)"), 0), //1: The endpoint is a domain controller. 0: The endpoint is not a domain controller.
    endpoint_os = arrayindex(regextract(msg_payload, "operating_system\=([^;]+)"), 0) // The operating system of the endpoint.
| alter os = lowercase(endpoint_os)
| alter 
    xdm.target.domain = endpoint_domain_id,
    xdm.target.host.hostname = endpoint_hostname, 
    xdm.target.host.fqdn = endpoint_fqdn, 
    xdm.target.host.device_id = endpoint_unique_id, 
    xdm.target.host.device_category = if(endpoint_is_domain_controller = "1", "Domain Controller"),
    xdm.target.host.os = endpoint_os,
    xdm.target.host.os_family = if(os contains "windows", XDM_CONST.OS_FAMILY_WINDOWS, os contains "mac", XDM_CONST.OS_FAMILY_MACOS, os contains "linux", XDM_CONST.OS_FAMILY_LINUX, os contains "android", XDM_CONST.OS_FAMILY_ANDROID, os contains "ios", XDM_CONST.OS_FAMILY_IOS, os contains "ubuntu", XDM_CONST.OS_FAMILY_UBUNTU, os contains "debian", XDM_CONST.OS_FAMILY_DEBIAN, os contains "fedora", XDM_CONST.OS_FAMILY_FEDORA, os contains "centos", XDM_CONST.OS_FAMILY_CENTOS, os contains "chrome", XDM_CONST.OS_FAMILY_CHROMEOS, os contains "solaris", XDM_CONST.OS_FAMILY_SOLARIS, os contains "scada", XDM_CONST.OS_FAMILY_SCADA, to_string(endpoint_os)),
    xdm.target.resource.name = endpoint_name,
    xdm.target.resource.id = endpoint_unique_id,
    xdm.target.resource.type = if(endpoint_unique_id != null, "endpoint machine");

/* File Store Events : 
    These mappings apply to the following events: file_removed_from_file_store, file_uploaded_to_file_store. 
    https://www.beyondtrust.com/docs/privileged-remote-access/how-to/integrations/syslog/fields/file-store-fields.htm */
alter  event_type = arrayindex(regextract(_raw_log, "event\=([^;]+)"), 0)
| filter event_type in("file_removed_from_file_store", "file_uploaded_to_file_store")
| call beyondtrust_pra_common_fields_modeling
| alter 
    file_name = arrayindex(regextract(_raw_log, "filename\=([^;]+)"), 0), // The name of the file being uploaded to or removed from the file store.
    file_size = arrayindex(regextract(_raw_log, "size\*?\=(\d+)"), 0) // The size in bytes of the file being uploaded to the file store.
| alter 
    xdm.target.file.filename = file_name, 
    xdm.target.file.size = to_integer(file_size);

/* Group Policy Events: 
    These mappings apply to the following events: 
        group_policy_add_to_jump_group_added, group_policy_add_to_jump_group_removed, group_policy_add_to_jumpoint_added, group_policy_add_to_jumpoint_removed, 
        group_policy_add_to_support_teams_added, group_policy_add_to_support_teams_removed, group_policy_added, group_policy_changed, group_policy_removed,
        group_policy_member_added, group_policy_member_removed, group_policy_remove_from_jump_group_added, group_policy_remove_from_jumpoint_added, 
        group_policy_remove_from_jumpoint_removed, group_policy_remove_from_support_teams_added, group_policy_remove_from_support_teams_removed
            https://www.beyondtrust.com/docs/privileged-remote-access/how-to/integrations/syslog/fields/group-policy-add-to-jump-group-fields.htm 
            https://www.beyondtrust.com/docs/privileged-remote-access/how-to/integrations/syslog/fields/group-policy-remove-from-jump-group-fields.htm
            https://www.beyondtrust.com/docs/privileged-remote-access/how-to/integrations/syslog/fields/group-policy-add-to-jumpoint-fields.htm
            https://www.beyondtrust.com/docs/privileged-remote-access/how-to/integrations/syslog/fields/group-policy-remove-from-jumpoint-fields.htm
            https://www.beyondtrust.com/docs/privileged-remote-access/how-to/integrations/syslog/fields/group-policy-add-to-support-teams-fields.htm
            https://www.beyondtrust.com/docs/privileged-remote-access/how-to/integrations/syslog/fields/group-policy-add-to-support-teams-fields.htm
            https://www.beyondtrust.com/docs/privileged-remote-access/how-to/integrations/syslog/fields/group-policy-member-fields.htm
            https://www.beyondtrust.com/docs/privileged-remote-access/how-to/integrations/syslog/fields/group-policy-remove-from-jumpoint-fields.htm
            https://www.beyondtrust.com/docs/privileged-remote-access/how-to/integrations/syslog/fields/group-policy-remove-from-support-teams-fields.htm
            */
alter  event_type = arrayindex(regextract(_raw_log, "event\=([^;]+)"), 0)
| filter event_type in("group_policy_add_to_jump_group_added", "group_policy_add_to_jump_group_removed", "group_policy_add_to_jumpoint_added", "group_policy_add_to_jumpoint_removed", "group_policy_add_to_support_teams_added", "group_policy_add_to_support_teams_removed", "group_policy_added", "group_policy_changed", "group_policy_removed", "group_policy_member_added", "group_policy_member_removed", "group_policy_remove_from_jump_group_added", "group_policy_remove_from_jump_group_removed", "group_policy_remove_from_jumpoint_added", "group_policy_remove_from_jumpoint_removed", "group_policy_remove_from_support_teams_added", "group_policy_remove_from_support_teams_removed")
| call beyondtrust_pra_common_fields_modeling
| alter msg_payload = arrayindex(regextract(_raw_log, "\d+\:\d+\:\d+\:(.+)"), 0)
| alter // Group Policy Add/Remove to/from Jump Group:
    group_policy_id1 = arrayindex(regextract(msg_payload, "group_policy\:id\=(\w[^;]*)"), 0), // The unique identifier of this group policy.
    group_policy_name1 = arrayindex(regextract(msg_payload, "group_policy\:name\=([^;]+)"), 0), // The name of this group policy.
    jump_group_id = arrayindex(regextract(msg_payload, "jump_group\:id\=(\w[^;]*)"), 0), // The unique identifier of the Jump Group to which members of this group policy should be added.
    jump_group_name = arrayindex(regextract(msg_payload, "jump_group\:name\=([^;]+)"), 0), // The name of the Jump Group to which members of this group policy should be added.
    jump_item_role_id = arrayindex(regextract(msg_payload, "jump_item_role\:id\=(\w[^;]*)"), 0), // The unique identifier of the Jump Item Role to assign to members of this group policy specific to this Jump Group.
    jump_item_role_name = arrayindex(regextract(msg_payload, "jump_item_role\:name\=([^;]+)"), 0), //The name of the Jump Item Role to assign to members of this group policy specific to this Jump Group.
    jump_policy_id = arrayindex(regextract(msg_payload, "jump_policy\:id\=(\w[^;]*)"), 0), // The unique identifier of the Jump Policy to assign to members of this group policy specific to this Jump Group.
    jump_policy_name = arrayindex(regextract(msg_payload, "jump_policy\:name\=([^;]+)"), 0) // The name of the Jump Policy to assign to members of this group policy specific to this Jump Group.
| alter // Group Policy Add/Remove to/from Jumpoint:
    jumpoint_id = arrayindex(regextract(msg_payload, "jumpoint\:id\=(\w[^;]*)"), 0), // The unique identifier of the Jumpoint to which members of this group policy should be added.
    jumpoint_name = arrayindex(regextract(msg_payload, "jumpoint\:name\=([^;]+)"), 0) // The name of the Jumpoint to which members of this group policy should be added.
| alter // Group Policy Add/Remove to/from Support to Teams:
    role = arrayindex(regextract(msg_payload, "role\=([^;]+)"), 0), // The role assigned to members of this group policy specific to the team (member, lead or manager)
    support_team_id = arrayindex(regextract(msg_payload, "support_team\:id\=(\w[^;]*)"), 0), // The unique identifier of the team to which members of this group policy should be added.
    support_team_name = arrayindex(regextract(msg_payload, "support_team\:name\=([^;]+)"), 0) // The name of the team to which members of this group policy should be added.
| alter // Group Policy:
    is_account_disabled = arrayindex(regextract(msg_payload, "account\:disabled\=(0|1)"), 0), // 1: The accounts associated with this group policy are disabled. 0: The accounts associated with this group policy are active.
    is_login_code_enabled = arrayindex(regextract(msg_payload, "login_code\:enabled\=(0|1)"), 0), // 1: Users must enter an emailed login code to log in. 0: Users may log in without an emailed login code.
    group_policy_id2 = arrayindex(regextract(msg_payload, "id\=(\w[^;]*)"), 0), // The unique identifier of this group policy.
    group_policy_name2 = arrayindex(regextract(msg_payload, "name\=([^;]+)"), 0), // The name of this group policy.
    policy_id = arrayindex(regextract(msg_payload, "policy\:id\=([^;]+)"), 0), // The name of this group policy.
    policy_name = arrayindex(regextract(msg_payload, "policy\:name\=([^;]+)"), 0), // The name of the group policy for which this setting is configured.
    jumpoints = arrayindex(regextract(msg_payload, "jumpoints\=([^;]+)"), 0) //The group's Jumpoint access in the form of permission:id:name, where permission is one of added, removed, or unknown; id is the unique identifier of the Jumpoint; and name is the name of the Jumpoint.
| alter // Group Policy Member Fields:
    security_provider_id = arrayindex(regextract(msg_payload, "provider\:id\=([^;]*)"), 0), // The unique identifier of the security provider against which this member authenticates.
    security_provider_name = arrayindex(regextract(msg_payload, "provider\:name\=([^;]*)"), 0), // The name of the security provider against which this member authenticates.
    user_external_id = arrayindex(regextract(msg_payload, "user\:external_id\=(\w[^;]*)"), 0) // The unique identifier of this group policy member.
| alter // additional proccessing 
    group_policy_id = coalesce(group_policy_id1, group_policy_id2),
    group_policy_name = coalesce(group_policy_name1, group_policy_name2),
    groups_and_roles = arrayfilter(arrayconcat(arraycreate(jump_group_id), arraycreate(jump_group_name), arraycreate(jump_item_role_id), arraycreate(jump_item_role_name), arraycreate(role), arraycreate(support_team_id), arraycreate(support_team_name), arraycreate(jumpoints)), len("@element") > 0)
| alter 
    policy = if(policy_id != null, concat(policy_id, "(", policy_name, ")")),
    group_policy = if(group_policy_id != null, concat(group_policy_id, "(", group_policy_name, ")")),
    jump_policy = if(jump_policy_id != null, concat(jump_policy_id, "(", jump_policy_name, ")")),
    security_provider = if(security_provider_id != null, concat(security_provider_id, "(", security_provider_name, ")"))
| alter 
    xdm.auth.mfa.provider = security_provider,
    xdm.auth.is_mfa_needed = if(is_login_code_enabled = "1", to_boolean("TRUE"), is_login_code_enabled = "0",  to_boolean("FALSE")),
    xdm.network.rule = coalesce(policy, group_policy, jump_policy),
    xdm.target.resource.id = coalesce(policy_id, group_policy_id, jump_policy_id, jumpoint_id),
    xdm.target.resource.name = coalesce(policy_name, group_policy_name, jump_policy_name, jumpoint_name),
    xdm.target.resource.type = if(policy_id != null, "group policy", group_policy_id != null, "group policy", jump_policy_id != null, "jump policy", jumpoint_name != null, "jumppoint"),
    xdm.target.user.is_disabled = if(is_account_disabled = "1", to_boolean("TRUE"), is_account_disabled = "0",  to_boolean("FALSE")),
    xdm.target.user.identifier = user_external_id,
    xdm.target.user.groups = groups_and_roles;

/* Jumpoint User & Domain Events : 
    These mappings apply to the following events: jumpoint_user_added, jumpoint_user_removed, domain_added, domain_changed, domain_removed  
    Docs: https://www.beyondtrust.com/docs/privileged-remote-access/how-to/integrations/syslog/fields/jumpoint-user-fields.htm 
          https://www.beyondtrust.com/docs/privileged-remote-access/how-to/integrations/syslog/fields/domain.htm */
alter  event_type = arrayindex(regextract(_raw_log, "event\=([^;]+)"), 0)
| filter event_type in("jumpoint_user_added", "jumpoint_user_removed", "domain_added", "domain_changed", "domain_removed")
| call beyondtrust_pra_common_fields_modeling
| alter msg_payload = arrayindex(regextract(_raw_log, "\d+\:\d+\:\d+\:(.+)"), 0)
| alter 
    jumppoint_id = arrayindex(regextract(msg_payload, "jumpoint\:id\=(\w[^;]*)"), 0), // The unique identifier of the Jumpoint to which this user/domain is being added or removed.
    jumppoint_name = arrayindex(regextract(msg_payload, "jumpoint\:name\=(\S[^;]+)"), 0), // The name of the Jumpoint to which this user is being added or removed.
    jumppoint_associated_user_id = arrayindex(regextract(msg_payload, "user\:id\=(\S[^;]*)"), 0), // The unique identifier of the user being added or removed. 
    jumppoint_associated_username = arrayindex(regextract(msg_payload, "user\:username\=(\S[^;]+)"), 0), // The name of the user being added or removed.
    jumppoint_associated_vault_domain_name = arrayindex(regextract(msg_payload, "name\=(\S[^;]+)"), 0) // The name of the vault account domain added, changed or remoed.
| alter 
    xdm.target.domain = jumppoint_associated_vault_domain_name,
    xdm.target.resource.id = jumppoint_id, 
    xdm.target.resource.name = jumppoint_name,
    xdm.target.resource.type = if(jumppoint_id != null, "jumppoint"),
    xdm.target.user.identifier = jumppoint_associated_user_id,
    xdm.target.user.username = jumppoint_associated_username;

/* Login, Logout, User Properties Modifications, & Vacult Account rotation Events:
    These mappings appliy to the following event types: "login", "logout", "change_display_name", "change_password", "change_username", "vault_account_password_rotation". 
    https://www.beyondtrust.com/docs/privileged-remote-access/how-to/integrations/syslog/fields/login-fields.htm
    https://www.beyondtrust.com/docs/privileged-remote-access/how-to/integrations/syslog/fields/change-display-name.htm
    https://www.beyondtrust.com/docs/privileged-remote-access/how-to/integrations/syslog/fields/change-password-fields.htm
    https://www.beyondtrust.com/docs/privileged-remote-access/how-to/integrations/syslog/fields/change-username-fields.htm  
    https://www.beyondtrust.com/docs/privileged-remote-access/how-to/integrations/syslog/fields/vault-account-password-rotation.htm */
alter  event_type = arrayindex(regextract(_raw_log, "event\=([^;]+)"), 0)
| filter event_type in("login", "logout", "change_display_name", "change_password", "change_username", "vault_account_password_rotation")
| call beyondtrust_pra_common_fields_modeling
| alter msg_payload = arrayindex(regextract(_raw_log, "\d+\:\d+\:\d+\:(.+)"), 0)
| alter 
    reason = arrayindex(regextract(msg_payload, "reason\=(\S[^;]+)"), 0), // Indicates the reason for failure / action
    status = arrayindex(regextract(msg_payload, "status\=(\S[^;]+)"), 0), // Whether the login/change/rotation attempt succeeded or failed.
    target_interface = arrayindex(regextract(msg_payload, "target\=(\S[^;]+)"), 0), // The authentication area from which the activity change attempt was made (web/api, web/appliance, web/login)
    vault_rotated_account = arrayindex(regextract(msg_payload, "account\=(\S[^;]+)"), 0) // The account username rotated.
| alter
    xdm.source.user.is_disabled = if(reason ~= "account disabled|account expired", to_boolean("TRUE")),
    xdm.source.user.is_password_expired = if(reason ~= "change password", to_boolean("TRUE")),
    xdm.event.outcome = if(status = "success", XDM_CONST.OUTCOME_SUCCESS, status ~= "fail", XDM_CONST.OUTCOME_FAILED),
    xdm.event.outcome_reason = reason, 
    xdm.logon.type = target_interface,
    xdm.target.user.username = vault_rotated_account;

/*  Network Address Events:
    These mappings apply to the following events: network_address_added, network_address_changed, network_address_removed, network_changed 
    https://www.beyondtrust.com/docs/privileged-remote-access/how-to/integrations/syslog/fields/network-address-fields.htm 
    https://www.beyondtrust.com/docs/privileged-remote-access/how-to/integrations/syslog/fields/network-fields.htm */
alter  event_type = arrayindex(regextract(_raw_log, "event\=([^;]+)"), 0)
| filter event_type in("network_address_added", "network_address_changed", "network_address_removed", "network_changed")
| call beyondtrust_pra_common_fields_modeling
| alter msg_payload = arrayindex(regextract(_raw_log, "\d+\:\d+\:\d+\:(.+)"), 0)
| alter // Network Address:
    interface = arrayindex(regextract(msg_payload, "interface=(\S[^;]+)"), 0), // The NIC to use as the interface.
    ip = arrayindex(regextract(msg_payload, ";ip\=([^;]+)"), 0), // The IP address of the interface.
    netmask = arrayindex(regextract(msg_payload, "netmask\=([^;]+)"), 0) // The netmask for this IP address.
| alter // Network Fields: 
    dns_server_ip_addresses = regextract(msg_payload, "dns\:\d=([^;]+)"), // The IP addresses of the DNS servers.
    gateway_interface = arrayindex(regextract(msg_payload, "gateway\:interface\=([^;]+)"), 0), // The interface to use as the default gateway.
    gateway_ip = arrayindex(regextract(msg_payload, "gateway\:ip\=([^;]+)"), 0), // The IP address of the default gateway.
    ntp_server_ip = arrayindex(regextract(msg_payload, "ntp_server\=([^;]+)"), 0), // The IP address of the  NTP server.
    hostname =  arrayindex(regextract(msg_payload, "hostname\=([^;]+)"), 0), // The hostname of the B Series Appliance.
    ssl_ciphers = arrayindex(regextract(msg_payload, "ssl\:ciphers\=([^;]+)"), 0) // The set of ciphersuites supported by the B Series Appliance for HTTPS/SSL traffic.
| alter 
    ip_addresses = arrayconcat(dns_server_ip_addresses, arraycreate(ip), arraycreate(gateway_ip), arraycreate(ntp_server_ip)),
    interface = coalesce(interface, gateway_interface),
    ip_address = coalesce(ip, gateway_ip)
| alter 
    ipv4_address = if(ip_address ~= "\.", ip_address),
    ipv6_address = if(ip_address ~= "\:", ip_address),
    ipv4_addresses = arrayfilter(ip_addresses, "@element" ~= "\."),
    ipv6_addresses = arrayfilter(ip_addresses, "@element" ~= "\:")
| alter 
    xdm.network.dhcp.dns_server = dns_server_ip_addresses,
    xdm.network.tls.cipher = ssl_ciphers,
    xdm.target.interface = interface,
    xdm.target.ipv4 = ipv4_address,
    xdm.target.ipv6 = ipv6_address,
    xdm.target.host.ipv4_addresses = ipv4_addresses,
    xdm.target.host.ipv6_addresses = ipv6_addresses,
    xdm.target.host.hostname = hostname,
    xdm.target.subnet = netmask;

/* Management Account Events: 
    These mappings apply to the following events: management_account_added, management_account_changed, management_account_removed. 
    https://www.beyondtrust.com/docs/privileged-remote-access/how-to/integrations/syslog/fields/management-account.htm */
alter  event_type = arrayindex(regextract(_raw_log, "event\=([^;]+)"), 0)
| filter event_type in("management_account_added", "management_account_changed", "management_account_removed")
| call beyondtrust_pra_common_fields_modeling
| alter 
    domain_account_id = arrayindex(regextract(_raw_log, "domain_account\:id\=(\S[^;]+)"), 0), // The unique identifier of the domain account.
    domain_id = arrayindex(regextract(_raw_log, "domain\:id\=(\w[^;]*)"), 0) // The unique identifier of the domain.
| alter 
    xdm.target.domain = domain_id,
    xdm.target.user.identifier = domain_account_id,
    xdm.target.resource.id = domain_id, 
    xdm.target.resource.type = if(domain_id != null, "domain");

/* Pending User Events: 
    These mappings apply to the following events: pending_user_added, pending_user_changed, pending_user_removed. 
    https://www.beyondtrust.com/docs/privileged-remote-access/how-to/integrations/syslog/fields/pending-user-fields.htm */
alter  event_type = arrayindex(regextract(_raw_log, "event\=([^;]+)"), 0)
| filter event_type in("pending_user_added", "pending_user_changed", "pending_user_removed")
| call beyondtrust_pra_common_fields_modeling
| alter 
    user_display_name = split(arrayindex(regextract(msg_payload, "name\=([^;]+)"), 0)), // The name of this user.
    user_username = arrayindex(regextract(_raw_log, "username\=(\S[^;]+)"), 0), // The user username.
    user_id = arrayindex(regextract(_raw_log, ";id\=(\S[^;]+)"), 0) // The user id.
| alter 
    xdm.target.user.identifier = user_id,
    xdm.target.user.username = user_username,
    xdm.target.user.first_name = arrayindex(user_display_name, 0),
    xdm.target.user.last_name = arrayindex(user_display_name, 1);

/* Report Events: 
    These fields apply to the following event types: 
    support_session_report_generated, support_session_detail_generated, support_session_summary_report_generated, and team_activity_report_generated events. 
    Full documentation: https://www.beyondtrust.com/docs/privileged-remote-access/how-to/integrations/syslog/fields/report-fields.htm */
alter  event_type = arrayindex(regextract(_raw_log, "event\=([^;]+)"), 0)
| filter event_type in("support_session_report_generated", "support_session_detail_generated", "support_session_summary_report_generated", "team_activity_report_generated")
| call beyondtrust_pra_common_fields_modeling
| alter msg_payload = arrayindex(regextract(_raw_log, "\d+\:\d+\:\d+\:(.+)"), 0)
| alter 
    computer_name = arrayindex(regextract(msg_payload, "computer_name\=(\S[^;]+)"), 0), // The computer name filter used in the query, if specified.
    lsid = arrayindex(regextract(msg_payload, "lsid\=(\S[^;]+)"), 0), // The unique session identifier used to query for a detailed session report, if specified.
    lsids = arrayindex(regextract(msg_payload, "lsids\=(\S[^;]+)"), 0), // A comma-separated list of unique session identifiers used to query for multiple detailed session reports, if specified.
    start_timestamp = arrayindex(regextract(msg_payload, "start_timestamp\=(\S[^;]+)"), 0), // The exact timestamp of the first date to be included in the report, if any date filters were used.
    end_timestamp = arrayindex(regextract(msg_payload, "end_timestamp\=(\S[^;]+)"), 0), // The exact timestamp of the last date to be included in the report, if date filters were specified.
    private_ip = arrayindex(regextract(msg_payload, "private_ip\=(\S[^;]+)"), 0), // The private IP address filter used in the query, if specified.
    public_ip = arrayindex(regextract(msg_payload, "public_ip\=(\S[^;]+)"), 0), // The public IP address filter used in the query, if specified.
    rep_id = arrayindex(regextract(msg_payload, "rep_id\=([^;]+)"), 0), // The user filter value, if specified. The value is either a unique user identifier, the string any, or the string none.
    rep_name = arrayindex(regextract(msg_payload, "rep_name\=(\S[^;]+)"), 0) // The display name of the representative specified by rep_id, when applicable.
| alter 
    private_ipv4 = if(private_ip ~= "(?:\d{1,3}\.){3}\d{1,3}", private_ip),
    private_ipv6 = if(private_ip ~= "(?:[a-fA-F\d]{0,4}\:){7}[\wa-fA-F]{0,4}", private_ip),
    public_ipv4 = if(public_ip ~= "(?:\d{1,3}\.){3}\d{1,3}", public_ip),
    public_ipv6 = if(public_ip ~= "(?:[a-fA-F\d]{0,4}\:){7}[\wa-fA-F]{0,4}", public_ip),
    start = to_integer(start_timestamp),
    end = to_integer(end_timestamp),
    filtered_user = coalesce(arrayindex(regextract(rep_id, "\(([^\)]+)"), 0), arrayindex(regextract(rep_name, "\(([^\)]+)"), 0))
| alter 
    xdm.event.duration = to_integer(multiply(subtract(end, start), 1000)),
    xdm.network.session_id = coalesce(lsids, lsid),
    xdm.target.host.hostname = computer_name, 
    xdm.target.ipv4 = coalesce(public_ipv4, private_ipv4),
    xdm.target.ipv6 = coalesce(public_ipv6, private_ipv6),
    xdm.target.host.ipv4_addresses = if(private_ipv4 != null and public_ipv4 != null, arrayconcat(arraycreate(private_ipv4), arraycreate(public_ipv4)), private_ipv4 != null, arraycreate(private_ipv4), public_ipv4 !=  null, arraycreate(public_ipv4)),
    xdm.target.host.ipv6_addresses = if(private_ipv6 != null and public_ipv6 != null, arrayconcat(arraycreate(private_ipv6), arraycreate(public_ipv6)), private_ipv6 != null, arraycreate(private_ipv6), public_ipv6 !=  null, arraycreate(public_ipv6)),
    xdm.target.resource.id = rep_id, 
    xdm.target.resource.name = rep_name,
    xdm.target.resource.type = if(rep_id != null, "rep id display name"), 
    xdm.target.user.username = filtered_user; 

/* Shared Jump Group Events: 
    These mappings apply to the following events: shared_jump_group_added, shared_jump_group_changed & shared_jump_group_removed. 
    https://www.beyondtrust.com/docs/privileged-remote-access/how-to/integrations/syslog/fields/shared-jump-group-fields.htm */
alter  event_type = arrayindex(regextract(_raw_log, "event\=([^;]+)"), 0)
| filter event_type in("shared_jump_group_added", "shared_jump_group_changed", "shared_jump_group_removed")
| call beyondtrust_pra_common_fields_modeling
| alter msg_payload = arrayindex(regextract(_raw_log, "\d+\:\d+\:\d+\:(.+)"), 0)
| alter 
    jump_group_code_name = arrayindex(regextract(msg_payload, "code_name\=([^;]+)"), 0), // The code name of this Jump Group.
    jump_group_id = arrayindex(regextract(msg_payload, "id\=(\w[^;]*)"), 0), // The unique identifier of the Jump Group.
    jump_group_name = arrayindex(regextract(msg_payload, "name\=([^;]+)"), 0), // The name of the Jump Group.
    assigned_ecm_group = arrayindex(regextract(msg_payload, "ecm_group\=([^;]+)"), 0) // The ID of the ECM Group assigned to the group.
| alter
    xdm.target.user.groups = arrayconcat(arraycreate(jump_group_code_name), arraycreate(jump_group_id), arraycreate(jump_group_name), arraycreate(assigned_ecm_group));

/* SSH Account Events: 
    These mappings apply to the following events: ssh_account_added, ssh_account_changed, ssh_account_removed. 
    https://www.beyondtrust.com/docs/privileged-remote-access/how-to/integrations/syslog/fields/ssh-account-fields.htm */
alter  event_type = arrayindex(regextract(_raw_log, "event\=([^;]+)"), 0)
| filter event_type in("ssh_account_added", "ssh_account_changed", "ssh_account_removed")
| call beyondtrust_pra_common_fields_modeling
| alter public_cert_signing_ca = arrayindex(regextract(_raw_log, "public_cert_signing_ca\=([^;]+)"), 0) // The public certificate signing ca.
| alter xdm.network.tls.client_certificate.issuer = public_cert_signing_ca;

/* Support Team Events: 
    These mappings apply to the following events: support_team_added, support_team_changed, support_team_removed, support_team_member_added, support_team_member_changed. */
alter  event_type = arrayindex(regextract(_raw_log, "event\=([^;]+)"), 0)
| filter event_type in("support_team_added", "support_team_changed", "support_team_removed", "support_team_member_added", "support_team_member_changed", "support_team_member_changed")
| call beyondtrust_pra_common_fields_modeling
| alter msg_payload = arrayindex(regextract(_raw_log, "\d+\:\d+\:\d+\:(.+)"), 0)
| alter // Support Team: https://www.beyondtrust.com/docs/privileged-remote-access/how-to/integrations/syslog/fields/support-team-fields.htm
    support_team_id1 = arrayindex(regextract(msg_payload, "id\=(\w[^;]*)"), 0), // The unique identifier of the team.
    support_team_name1 = arrayindex(regextract(msg_payload, "name\=(\w[^;]+)"), 0) // The name of the team.
| alter // Support Team Member: https://www.beyondtrust.com/docs/privileged-remote-access/how-to/integrations/syslog/fields/support-team-member-fields.htm
    support_team_id2 = arrayindex(regextract(msg_payload, "team\:id\=(\w[^;]*)"), 0), //The unique identifier of the team to which this user belongs.
    support_team_name2 = arrayindex(regextract(msg_payload, "team\:name\=(\w[^;]+)"), 0), // The name of the team to which this user belongs.
    support_user_id = arrayindex(regextract(msg_payload, "user\:id\=(\w[^;]+)"), 0), // The unique identifier of the user being added to or removed from this team.
    support_user_name = arrayindex(regextract(msg_payload, "user\:name\=(\w[^;]+)"), 0) // The name of the user being added to or removed from this team.
| alter 
    support_team_id = coalesce(support_team_id1, support_team_id2),
    support_team_name = coalesce(support_team_name1, support_team_name2)
| alter
    xdm.target.user.username = support_user_name, 
    xdm.target.user.identifier = support_user_id, 
    xdm.target.user.groups = arrayconcat(arraycreate(support_team_id), arraycreate(support_team_name));

/* Windows Service Events: 
    These mappings apply to the following events: windows_service_removed, windows_service_changed. 
    https://www.beyondtrust.com/docs/privileged-remote-access/how-to/integrations/syslog/fields/windows-service-fields.htm */
alter  event_type = arrayindex(regextract(_raw_log, "event\=([^;]+)"), 0)
| filter event_type in("windows_service_removed", "windows_service_changed")
| call beyondtrust_pra_common_fields_modeling
| alter msg_payload = arrayindex(regextract(_raw_log, "\d+\:\d+\:\d+\:(.+)"), 0)
| alter 
    account_id = arrayindex(regextract(msg_payload, "account_id\=([^;]+)"), 0), // The unique identifier of the account.
    service_name = arrayindex(regextract(msg_payload, "name\=(\S[^;]+)"), 0), // The name of the Windows service.
    service_display_name = arrayindex(regextract(msg_payload, "display_name\=(\S[^;]+)"), 0), // The display name of the Windows service.
    endpoint_id = arrayindex(regextract(msg_payload, "endpoint_id\=([^;]+)"), 0) //	The unique identifier of the endpoint.
| alter 
    xdm.target.host.device_id = endpoint_id,
    xdm.target.process.name = concat(service_name, "(", service_display_name, ")"),
    xdm.target.user.identifier = account_id;

/* /appliance & /login Local Users Events: 
    These mappings apply to the following events: user_added, user_changed, user_removed. 
    https://www.beyondtrust.com/docs/privileged-remote-access/how-to/integrations/syslog/fields/user-fields.htm 
    https://www.beyondtrust.com/docs/privileged-remote-access/how-to/integrations/syslog/fields/user-fields-appliance.htm */
alter  event_type = arrayindex(regextract(_raw_log, "event\=([^;]+)"), 0)
| filter event_type in("user_added", "user_changed", "user_removed")
| call beyondtrust_pra_common_fields_modeling
| alter msg_payload = arrayindex(regextract(_raw_log, "\d+\:\d+\:\d+\:(.+)"), 0)
| alter 
    is_account_disabled = arrayindex(regextract(msg_payload, "account\:disabled\=(0|1)"), 0), // 1: This local user account is disabled, 0: This local user account is active.
    is_mfa_required = arrayindex(regextract(msg_payload, "two_factor_auth\:required\=(0|1)"), 0), // 1: This user is required to use two-factor authentication. 0: This user is not required to use two-factor authentication.
    security_provider = arrayindex(regextract(msg_payload, "provider\:name\=([^;]*)"), 0), // The name of the security provider against which this user last authenticated.
    user_id = arrayindex(regextract(msg_payload, "id\=(\w[^;]*)"), 0), // The unique identifier for this user.
    user_external_id = arrayindex(regextract(msg_payload, "external_id\=(\S[^;]+)"), 0), // An internal representation of a remote user's identifying information, such as an LDAP attribute, RADIUS username, or Kerberos principal name.
    username = arrayindex(regextract(msg_payload, "username\=([^;]+)"), 0), // The username the user last used to authenticate to BeyondTrust. Not necessarily unique.
    user_displayname = split(arrayindex(regextract(msg_payload, "displayname\=([^;]+)"), 0)) // The display name of this user.
| alter 
    xdm.auth.is_mfa_needed = if(is_mfa_required = "1", to_boolean("TRUE"), is_mfa_required = "0", to_boolean("FALSE")),
    xdm.auth.mfa.provider = security_provider,
    xdm.target.user.identifier = user_id,
    xdm.target.user.is_disabled = if(is_account_disabled = "1", to_boolean("TRUE"), is_account_disabled = "0", to_boolean("FALSE")),
    xdm.target.user.upn = user_external_id,
    xdm.target.user.first_name = arrayindex(user_displayname, 0),
    xdm.target.user.last_name = arrayindex(user_displayname, 1),
    xdm.target.user.username = username;

/* General Fallback Mapping: 
    This filter applies to all other events which weren't mapped explicitly by any other filter. */
alter event_type = arrayindex(regextract(_raw_log, "event\=([^;]+)"), 0)
| filter event_type not in("login", "logout", "change_display_name", "change_password", "change_username", "account_added", "account_changed", "accounts_changed", "account_removed", "account_group_added", "account_group_changed", "account_group_removed", "account_user_added", "account_user_removed", "support_session_report_generated", "support_session_detail_generated", "support_session_summary_report_generated", "team_activity_report_generated", "custom_session_policy_added", "custom_session_policy_changed", "custom_session_policy_removed", "account_jump_item", "account_jump_item_association_removed", "api_account_added", "api_account_changed", "api_account_removed", "canned_script_category_added", "canned_script_category_removed", "canned_script_added", "canned_script_changed", "canned_script_removed", "canned_script_file_added", "canned_script_file_removed", "canned_script_team_added", "canned_script_team_removed", "canned_scripts_category_added", "canned_scripts_category_removed", "canned_scripts_file_added", "canned_scripts_file_removed", "certificate_export", "custom_session_attribute_added", "custom_session_attribute_changed", "custom_session_attribute_removed", "custom_special_action_added", "custom_special_action_changed", "custom_special_action_removed", "custom_rep_link_added", "custom_rep_link_changed", "custom_rep_link_removed", "windows_service_removed", "windows_service_changed", "vault_account_password_rotation", "user_session_policy_added", "user_session_policy_removed", "user_added", "user_changed", "user_removed", "support_team_added", "support_team_changed", "support_team_removed", "support_team_member_added", "support_team_member_changed", "support_team_member_changed", "ssh_account_added", "ssh_account_changed", "ssh_account_removed", "shared_jump_group_added", "shared_jump_group_changed", "shared_jump_group_removed", "endpoint_changed", "endpoint_removed", "jumpoint_user_added", "jumpoint_user_removed", "domain_added", "domain_changed", "domain_removed", "discovery_error_added", "discovery_error_changed", "discovery_error_removed", "ecm_group_added", "ecm_group_changed", "ecm_group_removed", "file_removed_from_file_store", "file_uploaded_to_file_store", "group_policy_add_to_jump_group_added", "group_policy_add_to_jump_group_removed", "group_policy_add_to_jumpoint_added", "group_policy_add_to_jumpoint_removed", "group_policy_add_to_support_teams_added", "group_policy_add_to_support_teams_removed", "group_policy_added", "group_policy_changed", "group_policy_removed", "group_policy_member_added", "group_policy_member_removed", "group_policy_remove_from_jump_group_added", "group_policy_remove_from_jump_group_removed", "group_policy_remove_from_jumpoint_added", "group_policy_remove_from_jumpoint_removed", "group_policy_remove_from_support_teams_added", "group_policy_remove_from_support_teams_removed", "management_account_added", "management_account_changed", "management_account_removed", "pending_user_added", "pending_user_changed", "pending_user_removed", "network_address_added", "network_address_changed", "network_address_removed", "network_changed")
| call beyondtrust_pra_common_fields_modeling
| alter 
    policy_id = arrayindex(regextract(_raw_log, "policy_id\=(\w[^;]*)"), 0),
    target_user_id = arrayindex(regextract(_raw_log, "user\:id\=(\w[^;]*)"), 0),
    target_username = arrayindex(regextract(_raw_log, "user[_]*name\=([^;]+)"), 0),
    target_computer_name = arrayindex(regextract(_raw_log, "computer_name\=([^;]+)"), 0),
    target_resource_owner = arrayindex(regextract(_raw_log, "credential_owner_id\=([^;]+)"), 0),
    target_resource_id = arrayindex(regextract(_raw_log, "[\;\:]id\=(\w[^;]*)"), 0),
    target_resource_name = arrayindex(regextract(_raw_log, "[\:\;]name\=([^;]+)"), 0)
| alter 
    xdm.network.rule = policy_id,
    xdm.target.host.hostname = target_computer_name,
    xdm.target.resource.id = target_resource_id,
    xdm.target.resource.name = target_resource_name,
    xdm.target.resource.parent_id = target_resource_owner,
    xdm.target.user.identifier = target_user_id,
    xdm.target.user.username = target_username;


[MODEL: dataset=box_box_raw, content_id="Box"]
filter
    event_type in ("ACCESS_GRANTED","ACCESS_REVOKED","ADD_DEVICE_ASSOCIATION","ADD_DEVICE_ASSOCIATION","ANNOTATIONV2_CREATE","ANNOTATIONV2_DELETE","ANNOTATIONV2_EDIT","APPLICATION_CREATED","APPLICATION_PUBLIC_KEY_ADDED","APPLICATION_PUBLIC_KEY_DELETED","CHANGE_ADMIN_ROLE","CHANGE_FOLDER_PERMISSION","COLLAB_ADD_COLLABORATOR","COLLAB_INVITE_COLLABORATOR","COLLAB_REMOVE_COLLABORATOR","COLLAB_ROLE_CHANGE","COLLABORATION_ACCEPT","COLLABORATION_EXPIRATION","COLLABORATION_INVITE","COLLABORATION_REMOVE","COLLABORATION_ROLE_CHANGE","COLLECTION_CREATE","COLLECTION_DELETE","COLLECTION_ITEM_CREATE","COLLECTION_ITEM_DELETE","COLLECTION_ITEM_UPDATE","COLLECTION_UPDATE","COMMENT_CREATE","COMMENT_DELETE","CONTENT_ACCESS","CONTENT_WORKFLOW_AUTOMATION_ADD","CONTENT_WORKFLOW_AUTOMATION_DELETE","CONTENT_WORKFLOW_POLICY_ADD","COPY","DATA_RETENTION_CREATE_RETENTION","DATA_RETENTION_REMOVE_RETENTION","DELETE","DELETE_USER","DOWNLOAD","EDIT","EDIT_USER","EMAIL_ALIAS_CONFIRM","EMAIL_ALIAS_REMOVE","FILE_MARKED_MALICIOUS","FILE_WATERMARKED_DOWNLOAD","GROUP_ADD_ITEM","GROUP_ADD_USER","GROUP_CREATION","GROUP_DELETION","GROUP_EDITED","GROUP_REMOVE_ITEM","GROUP_REMOVE_USER","ITEM_COPY","ITEM_CREATE","ITEM_DOWNLOAD","ITEM_MAKE_CURRENT_VERSION","ITEM_MODIFY","ITEM_MOVE","ITEM_OPEN","ITEM_PREVIEW","ITEM_RENAME","ITEM_SHARED","ITEM_SHARED_CREATE","ITEM_SHARED_UNSHARE","ITEM_SHARED_UPDATE","ITEM_SYNC","ITEM_TRASH","ITEM_UNDELETE_VIA_TRASH","ITEM_UNSYNC","ITEM_UPLOAD","LEGAL_HOLD_ASSIGNMENT_CREATE","LEGAL_HOLD_ASSIGNMENT_DELETE","LEGAL_HOLD_POLICY_CREATE","LEGAL_HOLD_POLICY_DELETE","LEGAL_HOLD_POLICY_UPDATE","LOCK","LOCK_CREATE","LOCK_DESTROY","METADATA_INSTANCE_CREATE","METADATA_INSTANCE_DELETE","METADATA_INSTANCE_UPDATE","METADATA_TEMPLATE_CREATE","METADATA_TEMPLATE_DELETE","METADATA_TEMPLATE_UPDATE","MOVE","NEW_USER","PREVIEW","REMOVE_DEVICE_ASSOCIATION","RENAME","RETENTION_POLICY_ASSIGNMENT_ADD","SHARE","SHARE_EXPIRATION","SIGN_DOCUMENT_ASSIGNED","SIGN_DOCUMENT_CANCELLED","SIGN_DOCUMENT_COMPLETED","SIGN_DOCUMENT_CONVERTED","SIGN_DOCUMENT_CREATED","SIGN_DOCUMENT_DECLINED","SIGN_DOCUMENT_EXPIRED","SIGN_DOCUMENT_SIGNED","SIGN_DOCUMENT_VIEWED_BY_SIGNER","SIGNER_DOWNLOADED","SIGNER_FORWARDED","STORAGE_EXPIRATION","TAG_ITEM_CREATE","TASK_ASSIGNMENT_CREATE","TASK_ASSIGNMENT_CREATE","TASK_ASSIGNMENT_DELETE","TASK_ASSIGNMENT_UPDATE","TASK_CREATE","TASK_CREATE","TASK_UPDATE","UNDELETE","UNLOCK","UNSHARE","UPDATE_COLLABORATION_EXPIRATION","UPDATE_SHARE_EXPIRATION","UPLOAD","WATERMARK_LABEL_CREATE","WATERMARK_LABEL_DELETE","RETENTION_POLICY_ASSIGNMENT_ADD","SHARE_EXPIRATION","TERMS_OF_SERVICE_ACCEPT","TERMS_OF_SERVICE_REJECT","CHANGE_ADMIN_ROLE","ADD_LOGIN_ACTIVITY_DEVICE","APPLICATION_CREATED","APPLICATION_PUBLIC_KEY_ADDED","APPLICATION_PUBLIC_KEY_DELETED","CONTENT_WORKFLOW_ABNORMAL_DOWNLOAD_ACTIVITY","CONTENT_WORKFLOW_SHARING_POLICY_VIOLATION","CONTENT_WORKFLOW_UPLOAD_POLICY_VIOLATION","DEVICE_TRUST_CHECK_FAILED","MULTI_FACTOR_AUTH_DISBLE","MULTI_FACTOR_AUTH_ENABLE","ENTERPRISE_APP_AUTHORIZATION_UPDATE","EXTERNAL_COLLAB_SECURITY_SETTINGS","MASTER_INVITE_ACCEPT","MASTER_INVITE_REJECT","ACCESS_GRANTED","ACCESS_REVOKED","OAUTH2_ACCESS_TOKEN_REVOKE","REMOVE_DEVICE_ASSOCIATION","REMOVE_LOGIN_ACTIVITY_DEVICE","USER_AUTHENTICATE_OAUTH2_ACCESS_TOKEN_CREATE")
| alter
    xdm.target.resource.type = coalesce(json_extract_scalar(source, "$.type"), json_extract_scalar(source, "$.item_type")),
    xdm.target.resource.id = coalesce(json_extract_scalar(source, "$.id"), json_extract_scalar(source, "$.item_id")),
    xdm.target.resource.name = coalesce(json_extract_scalar(source,"$.name"),
        json_extract_scalar(source,"$.item_name"),
        json_extract_scalar(additional_details,"$.shield_alert.alert_summary.alert_activities.item_name"),
        json_extract_scalar(additional_details,"$.shield_alert.alert_summary.upload_activity.item_name"),
        json_extract_scalar(additional_details,"$.shield_download_enforcment.item.name"),
        json_extract_scalar(additional_details,"$.shield_external_collab_enforcment.item.name")),
    xdm.target.resource.parent_id = json_extract_scalar(source, "$.parent.id"),
    xdm.target.user.groups = arraycreate( coalesce(json_extract_scalar(source, "$.owned_by.type"),"")),
    xdm.target.user.identifier = json_extract_scalar(source, "$.owned_by.id"),
    xdm.target.user.username = json_extract_scalar(source, "$.owned_by.login"),
    xdm.source.user.groups = arraycreate( coalesce(json_extract_scalar(created_by, "$.type"),"")),
    xdm.source.user.identifier = json_extract_scalar(created_by, "$.id"),
    xdm.source.user.username = json_extract_scalar(created_by, "$.login"),
    xdm.event.id = event_id,
    xdm.event.type = event_type,
    xdm.source.ipv4 = ip_address;

filter
    event_type in ("ADMIN_LOGIN","FAILED_LOGIN","LOGIN")
| alter
    xdm.source.user.identifier = json_extract_scalar(source, "$.id"),
    xdm.source.user.first_name = arrayindex(split(json_extract_scalar(source, "$.name")), 0),
    xdm.source.user.last_name = arrayindex(split(json_extract_scalar(source, "$.name")), 1),
    xdm.source.user.username = json_extract_scalar(source, "$.login"),
    xdm.event.id = event_id,
    xdm.event.type = event_type,
    xdm.source.ipv4 = ip_address;


[MODEL: dataset ="check_point_vpn_1_firewall_1_raw", content_id="CheckpointFirewall"]
// Fields Parsing
alter
    application = if(app = null or app="Unknown Protocol", service_id, app),
    ruleName = if(cs2Label = "Rule Name", cs2, null),
    ipv4src = if(src ~= "\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}", src, null),
    ipv4dest = if(dst ~= "\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}", dst, null),
    elapsed_Time_Seconds = to_integer(if(cn1Label = "Elapsed Time in Seconds", cn1, null)),
    duration_format = if(to_integer(duration) != null, multiply(to_integer(duration), 1000), null),
    ICMP_type = to_integer(if(cn2Label = "ICMP Type", cn2, null)),
    ICMP_code = to_integer(if(cn3Label = "ICMP Code", cn3, null)),
    protection_Type = if(cs3Label = "Protection Type", cs3, null)
| alter
    ipv6src = if(src != null and ipv4src = null, src, null),
    ipv6dest = if(dst != null and ipv4dest = null, dst, null),
    elapsed_Time_Seconds = if(elapsed_Time_Seconds != null, multiply(elapsed_Time_Seconds, 10000), null)
// Fields Modeling
| alter
    xdm.event.id = loguid,
    xdm.event.type = cefDeviceEventClassId,
    xdm.event.outcome_reason = if(reason != "" and reason != null, reason, action_reason),
    xdm.network.session_id = session_id_,
    xdm.network.ip_protocol = if(proto="0",XDM_CONST.IP_PROTOCOL_HOPOPT, proto="1",XDM_CONST.IP_PROTOCOL_ICMP, proto="2",XDM_CONST.IP_PROTOCOL_IGMP, proto="3",XDM_CONST.IP_PROTOCOL_GGP, proto="4",XDM_CONST.IP_PROTOCOL_IP, proto="5",XDM_CONST.IP_PROTOCOL_ST, proto="6",XDM_CONST.IP_PROTOCOL_TCP, proto="7",XDM_CONST.IP_PROTOCOL_CBT, proto="8",XDM_CONST.IP_PROTOCOL_EGP, proto="9",XDM_CONST.IP_PROTOCOL_IGP, proto="10",XDM_CONST.IP_PROTOCOL_BBN_RCC_MON, proto="11",XDM_CONST.IP_PROTOCOL_NVP_II, proto="12",XDM_CONST.IP_PROTOCOL_PUP, proto="13",XDM_CONST.IP_PROTOCOL_ARGUS, proto="14",XDM_CONST.IP_PROTOCOL_EMCON, proto="15",XDM_CONST.IP_PROTOCOL_XNET, proto="16",XDM_CONST.IP_PROTOCOL_CHAOS, proto="17",XDM_CONST.IP_PROTOCOL_UDP, proto="18",XDM_CONST.IP_PROTOCOL_MUX, proto="19",XDM_CONST.IP_PROTOCOL_DCN_MEAS, proto="20",XDM_CONST.IP_PROTOCOL_HMP, proto="21",XDM_CONST.IP_PROTOCOL_PRM, proto="22",XDM_CONST.IP_PROTOCOL_XNS_IDP, proto="23",XDM_CONST.IP_PROTOCOL_TRUNK_1, proto="24",XDM_CONST.IP_PROTOCOL_TRUNK_2, proto="25",XDM_CONST.IP_PROTOCOL_LEAF_1, proto="26",XDM_CONST.IP_PROTOCOL_LEAF_2, proto="27",XDM_CONST.IP_PROTOCOL_RDP, proto="28",XDM_CONST.IP_PROTOCOL_IRTP, proto="29",XDM_CONST.IP_PROTOCOL_ISO_TP4, proto="30",XDM_CONST.IP_PROTOCOL_NETBLT, proto="31",XDM_CONST.IP_PROTOCOL_MFE_NSP, proto="32",XDM_CONST.IP_PROTOCOL_MERIT_INP, proto="33",XDM_CONST.IP_PROTOCOL_DCCP, proto="34",XDM_CONST.IP_PROTOCOL_3PC, proto="35",XDM_CONST.IP_PROTOCOL_IDPR, proto="36",XDM_CONST.IP_PROTOCOL_XTP, proto="37",XDM_CONST.IP_PROTOCOL_DDP, proto="38",XDM_CONST.IP_PROTOCOL_IDPR_CMTP, proto="39",XDM_CONST.IP_PROTOCOL_TP, proto="40",XDM_CONST.IP_PROTOCOL_IL, proto="41",XDM_CONST.IP_PROTOCOL_IPV6, proto="42",XDM_CONST.IP_PROTOCOL_SDRP, proto="43",XDM_CONST.IP_PROTOCOL_IPV6_ROUTE, proto="44",XDM_CONST.IP_PROTOCOL_IPV6_FRAG, proto="45",XDM_CONST.IP_PROTOCOL_IDRP, proto="46",XDM_CONST.IP_PROTOCOL_RSVP, proto="47",XDM_CONST.IP_PROTOCOL_GRE, proto="48",XDM_CONST.IP_PROTOCOL_DSR, proto="49",XDM_CONST.IP_PROTOCOL_BNA, proto="50",XDM_CONST.IP_PROTOCOL_ESP, proto="51",XDM_CONST.IP_PROTOCOL_AH, proto="52",XDM_CONST.IP_PROTOCOL_I_NLSP, proto="53",XDM_CONST.IP_PROTOCOL_SWIPE, proto="54",XDM_CONST.IP_PROTOCOL_NARP, proto="55",XDM_CONST.IP_PROTOCOL_MOBILE, proto="56",XDM_CONST.IP_PROTOCOL_TLSP, proto="57",XDM_CONST.IP_PROTOCOL_SKIP, proto="58",XDM_CONST.IP_PROTOCOL_IPV6_ICMP, proto="59",XDM_CONST.IP_PROTOCOL_IPV6_NONXT, proto="60",XDM_CONST.IP_PROTOCOL_IPV6_OPTS, proto="62",XDM_CONST.IP_PROTOCOL_CFTP, proto="64",XDM_CONST.IP_PROTOCOL_SAT_EXPAK, proto="65",XDM_CONST.IP_PROTOCOL_KRYPTOLAN, proto="66",XDM_CONST.IP_PROTOCOL_RVD, proto="67",XDM_CONST.IP_PROTOCOL_IPPC, proto="69",XDM_CONST.IP_PROTOCOL_SAT_MON, proto="70",XDM_CONST.IP_PROTOCOL_VISA, proto="71",XDM_CONST.IP_PROTOCOL_IPCV, proto="72",XDM_CONST.IP_PROTOCOL_CPNX, proto="73",XDM_CONST.IP_PROTOCOL_CPHB, proto="74",XDM_CONST.IP_PROTOCOL_WSN, proto="75",XDM_CONST.IP_PROTOCOL_PVP, proto="76",XDM_CONST.IP_PROTOCOL_BR_SAT_MON, proto="77",XDM_CONST.IP_PROTOCOL_SUN_ND, proto="78",XDM_CONST.IP_PROTOCOL_WB_MON, proto="79",XDM_CONST.IP_PROTOCOL_WB_EXPAK, proto="80",XDM_CONST.IP_PROTOCOL_ISO_IP, proto="81",XDM_CONST.IP_PROTOCOL_VMTP, proto="82",XDM_CONST.IP_PROTOCOL_SECURE_VMTP, proto="83",XDM_CONST.IP_PROTOCOL_VINES, proto="84",XDM_CONST.IP_PROTOCOL_TTP, proto="85",XDM_CONST.IP_PROTOCOL_NSFNET_IGP, proto="86",XDM_CONST.IP_PROTOCOL_DGP, proto="87",XDM_CONST.IP_PROTOCOL_TCF, proto="88",XDM_CONST.IP_PROTOCOL_EIGRP, proto="89",XDM_CONST.IP_PROTOCOL_OSPFIGP, proto="90",XDM_CONST.IP_PROTOCOL_SPRITE_RPC, proto="91",XDM_CONST.IP_PROTOCOL_LARP, proto="92",XDM_CONST.IP_PROTOCOL_MTP, proto="93",XDM_CONST.IP_PROTOCOL_AX25, proto="94",XDM_CONST.IP_PROTOCOL_IPIP, proto="95",XDM_CONST.IP_PROTOCOL_MICP, proto="96",XDM_CONST.IP_PROTOCOL_SCC_SP, proto="97",XDM_CONST.IP_PROTOCOL_ETHERIP, proto="98",XDM_CONST.IP_PROTOCOL_ENCAP, proto="100",XDM_CONST.IP_PROTOCOL_GMTP, proto="101",XDM_CONST.IP_PROTOCOL_IFMP, proto="102",XDM_CONST.IP_PROTOCOL_PNNI, proto="103",XDM_CONST.IP_PROTOCOL_PIM, proto="104",XDM_CONST.IP_PROTOCOL_ARIS, proto="105",XDM_CONST.IP_PROTOCOL_SCPS, proto="106",XDM_CONST.IP_PROTOCOL_QNX, proto="107",XDM_CONST.IP_PROTOCOL_AN, proto="108",XDM_CONST.IP_PROTOCOL_IPCOMP, proto="110",XDM_CONST.IP_PROTOCOL_COMPAQ_PEER, proto="111",XDM_CONST.IP_PROTOCOL_IPX_IN_IP, proto="112",XDM_CONST.IP_PROTOCOL_VRRP, proto="113",XDM_CONST.IP_PROTOCOL_PGM, proto="115",XDM_CONST.IP_PROTOCOL_L2TP, proto="116",XDM_CONST.IP_PROTOCOL_DDX, proto="117",XDM_CONST.IP_PROTOCOL_IATP, proto="118",XDM_CONST.IP_PROTOCOL_STP, proto="119",XDM_CONST.IP_PROTOCOL_SRP, proto="120",XDM_CONST.IP_PROTOCOL_UTI, proto="121",XDM_CONST.IP_PROTOCOL_SMP, proto="122",XDM_CONST.IP_PROTOCOL_SM, proto="123",XDM_CONST.IP_PROTOCOL_PTP, proto="124",XDM_CONST.IP_PROTOCOL_ISIS, proto="125",XDM_CONST.IP_PROTOCOL_FIRE, proto="126",XDM_CONST.IP_PROTOCOL_CRTP, proto="127",XDM_CONST.IP_PROTOCOL_CRUDP, proto="128",XDM_CONST.IP_PROTOCOL_SSCOPMCE, proto="129",XDM_CONST.IP_PROTOCOL_IPLT, proto="130",XDM_CONST.IP_PROTOCOL_SPS, proto="131",XDM_CONST.IP_PROTOCOL_PIPE, proto="132",XDM_CONST.IP_PROTOCOL_SCTP, proto="133",XDM_CONST.IP_PROTOCOL_FC, proto="134",XDM_CONST.IP_PROTOCOL_RSVP_E2E_IGNORE, proto="135",XDM_CONST.IP_PROTOCOL_MOBILITY, proto="136",XDM_CONST.IP_PROTOCOL_UDPLITE, proto="137",XDM_CONST.IP_PROTOCOL_MPLS_IN_IP,to_string(proto)),
    xdm.network.application_protocol = application,
    xdm.network.rule = coalesce(ruleName, protection_Type),
    xdm.event.duration = to_integer(coalesce(duration_format, elapsed_Time_Seconds)),
    xdm.network.dns.dns_question.type = dns_type,
    xdm.network.dns.dns_resource_record.type = dns_query,
    xdm.observer.action = act,
    xdm.observer.version = cefDeviceVersion,
    xdm.observer.name = origin,
    xdm.source.host.hostname = shost,
    xdm.source.user.username = suser,
    xdm.source.ipv4 = ipv4src,
    xdm.source.ipv6 = ipv6src,
    xdm.source.port = spt,
    xdm.source.zone = inzone,
    xdm.target.host.hostname = dhost,
    xdm.target.user.username = duser,
    xdm.target.ipv4 = ipv4dest,
    xdm.target.ipv6 = ipv6dest,
    xdm.target.port = dpt,
    xdm.target.zone = outzone,
    xdm.network.icmp.type = ICMP_type,
    xdm.network.icmp.code = ICMP_code,
    xdm.source.sent_bytes = to_integer(out),
    xdm.target.sent_bytes = to_integer(`in`),
    xdm.event.description = msg,
    xdm.source.interface = ifname,
    xdm.source.sent_packets = to_integer(client_outbound_packets),
    xdm.target.sent_packets = to_integer(server_outbound_packets);
[MODEL: dataset ="check_point_url_filtering_raw", content_id="CheckpointFirewall"]
alter application = if(app = null or app="Unknown Protocol", service_id, app)
| alter ruleName = if(cs2Label = "Rule Name", cs2, null)
| alter ipv4src = if(src ~= "\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}", src, null)
| alter ipv6src = if(src != null and ipv4src = null, src, null)
| alter ipv4dest = if(dst ~= "\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}", dst, null)
| alter ipv6dest = if(dst != null and ipv4dest = null, dst, null)
// Fields Modeling
| alter
    xdm.event.id = loguid,
    xdm.event.type = cefDeviceEventClassId,
    xdm.network.ip_protocol = if(proto="0",XDM_CONST.IP_PROTOCOL_HOPOPT, proto="1",XDM_CONST.IP_PROTOCOL_ICMP, proto="2",XDM_CONST.IP_PROTOCOL_IGMP, proto="3",XDM_CONST.IP_PROTOCOL_GGP, proto="4",XDM_CONST.IP_PROTOCOL_IP, proto="5",XDM_CONST.IP_PROTOCOL_ST, proto="6",XDM_CONST.IP_PROTOCOL_TCP, proto="7",XDM_CONST.IP_PROTOCOL_CBT, proto="8",XDM_CONST.IP_PROTOCOL_EGP, proto="9",XDM_CONST.IP_PROTOCOL_IGP, proto="10",XDM_CONST.IP_PROTOCOL_BBN_RCC_MON, proto="11",XDM_CONST.IP_PROTOCOL_NVP_II, proto="12",XDM_CONST.IP_PROTOCOL_PUP, proto="13",XDM_CONST.IP_PROTOCOL_ARGUS, proto="14",XDM_CONST.IP_PROTOCOL_EMCON, proto="15",XDM_CONST.IP_PROTOCOL_XNET, proto="16",XDM_CONST.IP_PROTOCOL_CHAOS, proto="17",XDM_CONST.IP_PROTOCOL_UDP, proto="18",XDM_CONST.IP_PROTOCOL_MUX, proto="19",XDM_CONST.IP_PROTOCOL_DCN_MEAS, proto="20",XDM_CONST.IP_PROTOCOL_HMP, proto="21",XDM_CONST.IP_PROTOCOL_PRM, proto="22",XDM_CONST.IP_PROTOCOL_XNS_IDP, proto="23",XDM_CONST.IP_PROTOCOL_TRUNK_1, proto="24",XDM_CONST.IP_PROTOCOL_TRUNK_2, proto="25",XDM_CONST.IP_PROTOCOL_LEAF_1, proto="26",XDM_CONST.IP_PROTOCOL_LEAF_2, proto="27",XDM_CONST.IP_PROTOCOL_RDP, proto="28",XDM_CONST.IP_PROTOCOL_IRTP, proto="29",XDM_CONST.IP_PROTOCOL_ISO_TP4, proto="30",XDM_CONST.IP_PROTOCOL_NETBLT, proto="31",XDM_CONST.IP_PROTOCOL_MFE_NSP, proto="32",XDM_CONST.IP_PROTOCOL_MERIT_INP, proto="33",XDM_CONST.IP_PROTOCOL_DCCP, proto="34",XDM_CONST.IP_PROTOCOL_3PC, proto="35",XDM_CONST.IP_PROTOCOL_IDPR, proto="36",XDM_CONST.IP_PROTOCOL_XTP, proto="37",XDM_CONST.IP_PROTOCOL_DDP, proto="38",XDM_CONST.IP_PROTOCOL_IDPR_CMTP, proto="39",XDM_CONST.IP_PROTOCOL_TP, proto="40",XDM_CONST.IP_PROTOCOL_IL, proto="41",XDM_CONST.IP_PROTOCOL_IPV6, proto="42",XDM_CONST.IP_PROTOCOL_SDRP, proto="43",XDM_CONST.IP_PROTOCOL_IPV6_ROUTE, proto="44",XDM_CONST.IP_PROTOCOL_IPV6_FRAG, proto="45",XDM_CONST.IP_PROTOCOL_IDRP, proto="46",XDM_CONST.IP_PROTOCOL_RSVP, proto="47",XDM_CONST.IP_PROTOCOL_GRE, proto="48",XDM_CONST.IP_PROTOCOL_DSR, proto="49",XDM_CONST.IP_PROTOCOL_BNA, proto="50",XDM_CONST.IP_PROTOCOL_ESP, proto="51",XDM_CONST.IP_PROTOCOL_AH, proto="52",XDM_CONST.IP_PROTOCOL_I_NLSP, proto="53",XDM_CONST.IP_PROTOCOL_SWIPE, proto="54",XDM_CONST.IP_PROTOCOL_NARP, proto="55",XDM_CONST.IP_PROTOCOL_MOBILE, proto="56",XDM_CONST.IP_PROTOCOL_TLSP, proto="57",XDM_CONST.IP_PROTOCOL_SKIP, proto="58",XDM_CONST.IP_PROTOCOL_IPV6_ICMP, proto="59",XDM_CONST.IP_PROTOCOL_IPV6_NONXT, proto="60",XDM_CONST.IP_PROTOCOL_IPV6_OPTS, proto="62",XDM_CONST.IP_PROTOCOL_CFTP, proto="64",XDM_CONST.IP_PROTOCOL_SAT_EXPAK, proto="65",XDM_CONST.IP_PROTOCOL_KRYPTOLAN, proto="66",XDM_CONST.IP_PROTOCOL_RVD, proto="67",XDM_CONST.IP_PROTOCOL_IPPC, proto="69",XDM_CONST.IP_PROTOCOL_SAT_MON, proto="70",XDM_CONST.IP_PROTOCOL_VISA, proto="71",XDM_CONST.IP_PROTOCOL_IPCV, proto="72",XDM_CONST.IP_PROTOCOL_CPNX, proto="73",XDM_CONST.IP_PROTOCOL_CPHB, proto="74",XDM_CONST.IP_PROTOCOL_WSN, proto="75",XDM_CONST.IP_PROTOCOL_PVP, proto="76",XDM_CONST.IP_PROTOCOL_BR_SAT_MON, proto="77",XDM_CONST.IP_PROTOCOL_SUN_ND, proto="78",XDM_CONST.IP_PROTOCOL_WB_MON, proto="79",XDM_CONST.IP_PROTOCOL_WB_EXPAK, proto="80",XDM_CONST.IP_PROTOCOL_ISO_IP, proto="81",XDM_CONST.IP_PROTOCOL_VMTP, proto="82",XDM_CONST.IP_PROTOCOL_SECURE_VMTP, proto="83",XDM_CONST.IP_PROTOCOL_VINES, proto="84",XDM_CONST.IP_PROTOCOL_TTP, proto="85",XDM_CONST.IP_PROTOCOL_NSFNET_IGP, proto="86",XDM_CONST.IP_PROTOCOL_DGP, proto="87",XDM_CONST.IP_PROTOCOL_TCF, proto="88",XDM_CONST.IP_PROTOCOL_EIGRP, proto="89",XDM_CONST.IP_PROTOCOL_OSPFIGP, proto="90",XDM_CONST.IP_PROTOCOL_SPRITE_RPC, proto="91",XDM_CONST.IP_PROTOCOL_LARP, proto="92",XDM_CONST.IP_PROTOCOL_MTP, proto="93",XDM_CONST.IP_PROTOCOL_AX25, proto="94",XDM_CONST.IP_PROTOCOL_IPIP, proto="95",XDM_CONST.IP_PROTOCOL_MICP, proto="96",XDM_CONST.IP_PROTOCOL_SCC_SP, proto="97",XDM_CONST.IP_PROTOCOL_ETHERIP, proto="98",XDM_CONST.IP_PROTOCOL_ENCAP, proto="100",XDM_CONST.IP_PROTOCOL_GMTP, proto="101",XDM_CONST.IP_PROTOCOL_IFMP, proto="102",XDM_CONST.IP_PROTOCOL_PNNI, proto="103",XDM_CONST.IP_PROTOCOL_PIM, proto="104",XDM_CONST.IP_PROTOCOL_ARIS, proto="105",XDM_CONST.IP_PROTOCOL_SCPS, proto="106",XDM_CONST.IP_PROTOCOL_QNX, proto="107",XDM_CONST.IP_PROTOCOL_AN, proto="108",XDM_CONST.IP_PROTOCOL_IPCOMP, proto="110",XDM_CONST.IP_PROTOCOL_COMPAQ_PEER, proto="111",XDM_CONST.IP_PROTOCOL_IPX_IN_IP, proto="112",XDM_CONST.IP_PROTOCOL_VRRP, proto="113",XDM_CONST.IP_PROTOCOL_PGM, proto="115",XDM_CONST.IP_PROTOCOL_L2TP, proto="116",XDM_CONST.IP_PROTOCOL_DDX, proto="117",XDM_CONST.IP_PROTOCOL_IATP, proto="118",XDM_CONST.IP_PROTOCOL_STP, proto="119",XDM_CONST.IP_PROTOCOL_SRP, proto="120",XDM_CONST.IP_PROTOCOL_UTI, proto="121",XDM_CONST.IP_PROTOCOL_SMP, proto="122",XDM_CONST.IP_PROTOCOL_SM, proto="123",XDM_CONST.IP_PROTOCOL_PTP, proto="124",XDM_CONST.IP_PROTOCOL_ISIS, proto="125",XDM_CONST.IP_PROTOCOL_FIRE, proto="126",XDM_CONST.IP_PROTOCOL_CRTP, proto="127",XDM_CONST.IP_PROTOCOL_CRUDP, proto="128",XDM_CONST.IP_PROTOCOL_SSCOPMCE, proto="129",XDM_CONST.IP_PROTOCOL_IPLT, proto="130",XDM_CONST.IP_PROTOCOL_SPS, proto="131",XDM_CONST.IP_PROTOCOL_PIPE, proto="132",XDM_CONST.IP_PROTOCOL_SCTP, proto="133",XDM_CONST.IP_PROTOCOL_FC, proto="134",XDM_CONST.IP_PROTOCOL_RSVP_E2E_IGNORE, proto="135",XDM_CONST.IP_PROTOCOL_MOBILITY, proto="136",XDM_CONST.IP_PROTOCOL_UDPLITE, proto="137",XDM_CONST.IP_PROTOCOL_MPLS_IN_IP,to_string(proto)),
    xdm.network.application_protocol = application,
    xdm.network.rule = ruleName,
    xdm.event.duration = to_integer(duration),
    xdm.network.http.url = request,
    xdm.network.http.method = requestMethod,
    xdm.alert.severity = cp_severity,
    xdm.observer.action = act,
    xdm.source.host.hostname = shost,
    xdm.source.user.username = suser,
    xdm.source.ipv4 = ipv4src,
    xdm.source.ipv6 = ipv6src,
    xdm.target.user.username = duser,
    xdm.target.ipv4 = ipv4dest,
    xdm.target.ipv6 = ipv6dest,
    xdm.target.port = dpt;
[MODEL: dataset ="check_point_smartdefense_raw", content_id="CheckpointFirewall"]
// Fields Parsing
alter Threat_Prevention_Rule_Name = if(cs1Label = "Threat Prevention Rule Name", cs1, null)
| alter protectionName = if(cs4Label = "Protection Name", cs4, null)
| alter Attack_Information = if(flexString2Label = "Attack Information", flexString2, null)
| alter ipv4src = if(src ~= "\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}", src, null)
| alter ipv6src = if(src != null and ipv4src = null, src, null)
| alter ipv4dest = if(dst ~= "\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}", dst, null)
| alter ipv6dest = if(dst != null and ipv4dest = null, dst, null)
// Fields Modeling
| alter    
    xdm.event.id = loguid,
    xdm.event.type = cefDeviceEventClassId,
    xdm.network.session_id = session_id,
    xdm.network.ip_protocol = if(proto="0",XDM_CONST.IP_PROTOCOL_HOPOPT, proto="1",XDM_CONST.IP_PROTOCOL_ICMP, proto="2",XDM_CONST.IP_PROTOCOL_IGMP, proto="3",XDM_CONST.IP_PROTOCOL_GGP, proto="4",XDM_CONST.IP_PROTOCOL_IP, proto="5",XDM_CONST.IP_PROTOCOL_ST, proto="6",XDM_CONST.IP_PROTOCOL_TCP, proto="7",XDM_CONST.IP_PROTOCOL_CBT, proto="8",XDM_CONST.IP_PROTOCOL_EGP, proto="9",XDM_CONST.IP_PROTOCOL_IGP, proto="10",XDM_CONST.IP_PROTOCOL_BBN_RCC_MON, proto="11",XDM_CONST.IP_PROTOCOL_NVP_II, proto="12",XDM_CONST.IP_PROTOCOL_PUP, proto="13",XDM_CONST.IP_PROTOCOL_ARGUS, proto="14",XDM_CONST.IP_PROTOCOL_EMCON, proto="15",XDM_CONST.IP_PROTOCOL_XNET, proto="16",XDM_CONST.IP_PROTOCOL_CHAOS, proto="17",XDM_CONST.IP_PROTOCOL_UDP, proto="18",XDM_CONST.IP_PROTOCOL_MUX, proto="19",XDM_CONST.IP_PROTOCOL_DCN_MEAS, proto="20",XDM_CONST.IP_PROTOCOL_HMP, proto="21",XDM_CONST.IP_PROTOCOL_PRM, proto="22",XDM_CONST.IP_PROTOCOL_XNS_IDP, proto="23",XDM_CONST.IP_PROTOCOL_TRUNK_1, proto="24",XDM_CONST.IP_PROTOCOL_TRUNK_2, proto="25",XDM_CONST.IP_PROTOCOL_LEAF_1, proto="26",XDM_CONST.IP_PROTOCOL_LEAF_2, proto="27",XDM_CONST.IP_PROTOCOL_RDP, proto="28",XDM_CONST.IP_PROTOCOL_IRTP, proto="29",XDM_CONST.IP_PROTOCOL_ISO_TP4, proto="30",XDM_CONST.IP_PROTOCOL_NETBLT, proto="31",XDM_CONST.IP_PROTOCOL_MFE_NSP, proto="32",XDM_CONST.IP_PROTOCOL_MERIT_INP, proto="33",XDM_CONST.IP_PROTOCOL_DCCP, proto="34",XDM_CONST.IP_PROTOCOL_3PC, proto="35",XDM_CONST.IP_PROTOCOL_IDPR, proto="36",XDM_CONST.IP_PROTOCOL_XTP, proto="37",XDM_CONST.IP_PROTOCOL_DDP, proto="38",XDM_CONST.IP_PROTOCOL_IDPR_CMTP, proto="39",XDM_CONST.IP_PROTOCOL_TP, proto="40",XDM_CONST.IP_PROTOCOL_IL, proto="41",XDM_CONST.IP_PROTOCOL_IPV6, proto="42",XDM_CONST.IP_PROTOCOL_SDRP, proto="43",XDM_CONST.IP_PROTOCOL_IPV6_ROUTE, proto="44",XDM_CONST.IP_PROTOCOL_IPV6_FRAG, proto="45",XDM_CONST.IP_PROTOCOL_IDRP, proto="46",XDM_CONST.IP_PROTOCOL_RSVP, proto="47",XDM_CONST.IP_PROTOCOL_GRE, proto="48",XDM_CONST.IP_PROTOCOL_DSR, proto="49",XDM_CONST.IP_PROTOCOL_BNA, proto="50",XDM_CONST.IP_PROTOCOL_ESP, proto="51",XDM_CONST.IP_PROTOCOL_AH, proto="52",XDM_CONST.IP_PROTOCOL_I_NLSP, proto="53",XDM_CONST.IP_PROTOCOL_SWIPE, proto="54",XDM_CONST.IP_PROTOCOL_NARP, proto="55",XDM_CONST.IP_PROTOCOL_MOBILE, proto="56",XDM_CONST.IP_PROTOCOL_TLSP, proto="57",XDM_CONST.IP_PROTOCOL_SKIP, proto="58",XDM_CONST.IP_PROTOCOL_IPV6_ICMP, proto="59",XDM_CONST.IP_PROTOCOL_IPV6_NONXT, proto="60",XDM_CONST.IP_PROTOCOL_IPV6_OPTS, proto="62",XDM_CONST.IP_PROTOCOL_CFTP, proto="64",XDM_CONST.IP_PROTOCOL_SAT_EXPAK, proto="65",XDM_CONST.IP_PROTOCOL_KRYPTOLAN, proto="66",XDM_CONST.IP_PROTOCOL_RVD, proto="67",XDM_CONST.IP_PROTOCOL_IPPC, proto="69",XDM_CONST.IP_PROTOCOL_SAT_MON, proto="70",XDM_CONST.IP_PROTOCOL_VISA, proto="71",XDM_CONST.IP_PROTOCOL_IPCV, proto="72",XDM_CONST.IP_PROTOCOL_CPNX, proto="73",XDM_CONST.IP_PROTOCOL_CPHB, proto="74",XDM_CONST.IP_PROTOCOL_WSN, proto="75",XDM_CONST.IP_PROTOCOL_PVP, proto="76",XDM_CONST.IP_PROTOCOL_BR_SAT_MON, proto="77",XDM_CONST.IP_PROTOCOL_SUN_ND, proto="78",XDM_CONST.IP_PROTOCOL_WB_MON, proto="79",XDM_CONST.IP_PROTOCOL_WB_EXPAK, proto="80",XDM_CONST.IP_PROTOCOL_ISO_IP, proto="81",XDM_CONST.IP_PROTOCOL_VMTP, proto="82",XDM_CONST.IP_PROTOCOL_SECURE_VMTP, proto="83",XDM_CONST.IP_PROTOCOL_VINES, proto="84",XDM_CONST.IP_PROTOCOL_TTP, proto="85",XDM_CONST.IP_PROTOCOL_NSFNET_IGP, proto="86",XDM_CONST.IP_PROTOCOL_DGP, proto="87",XDM_CONST.IP_PROTOCOL_TCF, proto="88",XDM_CONST.IP_PROTOCOL_EIGRP, proto="89",XDM_CONST.IP_PROTOCOL_OSPFIGP, proto="90",XDM_CONST.IP_PROTOCOL_SPRITE_RPC, proto="91",XDM_CONST.IP_PROTOCOL_LARP, proto="92",XDM_CONST.IP_PROTOCOL_MTP, proto="93",XDM_CONST.IP_PROTOCOL_AX25, proto="94",XDM_CONST.IP_PROTOCOL_IPIP, proto="95",XDM_CONST.IP_PROTOCOL_MICP, proto="96",XDM_CONST.IP_PROTOCOL_SCC_SP, proto="97",XDM_CONST.IP_PROTOCOL_ETHERIP, proto="98",XDM_CONST.IP_PROTOCOL_ENCAP, proto="100",XDM_CONST.IP_PROTOCOL_GMTP, proto="101",XDM_CONST.IP_PROTOCOL_IFMP, proto="102",XDM_CONST.IP_PROTOCOL_PNNI, proto="103",XDM_CONST.IP_PROTOCOL_PIM, proto="104",XDM_CONST.IP_PROTOCOL_ARIS, proto="105",XDM_CONST.IP_PROTOCOL_SCPS, proto="106",XDM_CONST.IP_PROTOCOL_QNX, proto="107",XDM_CONST.IP_PROTOCOL_AN, proto="108",XDM_CONST.IP_PROTOCOL_IPCOMP, proto="110",XDM_CONST.IP_PROTOCOL_COMPAQ_PEER, proto="111",XDM_CONST.IP_PROTOCOL_IPX_IN_IP, proto="112",XDM_CONST.IP_PROTOCOL_VRRP, proto="113",XDM_CONST.IP_PROTOCOL_PGM, proto="115",XDM_CONST.IP_PROTOCOL_L2TP, proto="116",XDM_CONST.IP_PROTOCOL_DDX, proto="117",XDM_CONST.IP_PROTOCOL_IATP, proto="118",XDM_CONST.IP_PROTOCOL_STP, proto="119",XDM_CONST.IP_PROTOCOL_SRP, proto="120",XDM_CONST.IP_PROTOCOL_UTI, proto="121",XDM_CONST.IP_PROTOCOL_SMP, proto="122",XDM_CONST.IP_PROTOCOL_SM, proto="123",XDM_CONST.IP_PROTOCOL_PTP, proto="124",XDM_CONST.IP_PROTOCOL_ISIS, proto="125",XDM_CONST.IP_PROTOCOL_FIRE, proto="126",XDM_CONST.IP_PROTOCOL_CRTP, proto="127",XDM_CONST.IP_PROTOCOL_CRUDP, proto="128",XDM_CONST.IP_PROTOCOL_SSCOPMCE, proto="129",XDM_CONST.IP_PROTOCOL_IPLT, proto="130",XDM_CONST.IP_PROTOCOL_SPS, proto="131",XDM_CONST.IP_PROTOCOL_PIPE, proto="132",XDM_CONST.IP_PROTOCOL_SCTP, proto="133",XDM_CONST.IP_PROTOCOL_FC, proto="134",XDM_CONST.IP_PROTOCOL_RSVP_E2E_IGNORE, proto="135",XDM_CONST.IP_PROTOCOL_MOBILITY, proto="136",XDM_CONST.IP_PROTOCOL_UDPLITE, proto="137",XDM_CONST.IP_PROTOCOL_MPLS_IN_IP,to_string(proto)),
    xdm.network.rule = Threat_Prevention_Rule_Name,
    xdm.alert.severity = cefSeverity,
    xdm.alert.name = protectionName,
    xdm.alert.description = Attack_Information,
    xdm.observer.action = act,
    xdm.source.host.hostname = shost,
    xdm.source.user.username = suser,
    xdm.source.ipv4 = ipv4src,
    xdm.source.ipv6 = ipv6src,
    xdm.source.port = spt,
    xdm.target.host.hostname = dhost,
    xdm.target.user.username = duser,
    xdm.target.ipv4 = ipv4dest,
    xdm.target.ipv6 = ipv6dest,
    xdm.target.port = dpt;
[MODEL: dataset ="check_point_application_control_raw", content_id="CheckpointFirewall"]
// Fields Parsing
alter application = if(app = null or app="Unknown Protocol", service_id, app)
| alter ruleName = if(cs2Label = "Rule Name", cs2, null)
| alter ipv4src = if(src ~= "\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}", src, null)
| alter ipv6src = if(src != null and ipv4src = null, src, null)
| alter ipv4dest = if(dst ~= "\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}", dst, null)
| alter ipv6dest = if(dst != null and ipv4dest = null, dst, null)
// Fields Modeling
| alter
    xdm.event.id = loguid,
    xdm.event.type = cefDeviceEventClassId,
    xdm.network.ip_protocol = if(proto="0",XDM_CONST.IP_PROTOCOL_HOPOPT, proto="1",XDM_CONST.IP_PROTOCOL_ICMP, proto="2",XDM_CONST.IP_PROTOCOL_IGMP, proto="3",XDM_CONST.IP_PROTOCOL_GGP, proto="4",XDM_CONST.IP_PROTOCOL_IP, proto="5",XDM_CONST.IP_PROTOCOL_ST, proto="6",XDM_CONST.IP_PROTOCOL_TCP, proto="7",XDM_CONST.IP_PROTOCOL_CBT, proto="8",XDM_CONST.IP_PROTOCOL_EGP, proto="9",XDM_CONST.IP_PROTOCOL_IGP, proto="10",XDM_CONST.IP_PROTOCOL_BBN_RCC_MON, proto="11",XDM_CONST.IP_PROTOCOL_NVP_II, proto="12",XDM_CONST.IP_PROTOCOL_PUP, proto="13",XDM_CONST.IP_PROTOCOL_ARGUS, proto="14",XDM_CONST.IP_PROTOCOL_EMCON, proto="15",XDM_CONST.IP_PROTOCOL_XNET, proto="16",XDM_CONST.IP_PROTOCOL_CHAOS, proto="17",XDM_CONST.IP_PROTOCOL_UDP, proto="18",XDM_CONST.IP_PROTOCOL_MUX, proto="19",XDM_CONST.IP_PROTOCOL_DCN_MEAS, proto="20",XDM_CONST.IP_PROTOCOL_HMP, proto="21",XDM_CONST.IP_PROTOCOL_PRM, proto="22",XDM_CONST.IP_PROTOCOL_XNS_IDP, proto="23",XDM_CONST.IP_PROTOCOL_TRUNK_1, proto="24",XDM_CONST.IP_PROTOCOL_TRUNK_2, proto="25",XDM_CONST.IP_PROTOCOL_LEAF_1, proto="26",XDM_CONST.IP_PROTOCOL_LEAF_2, proto="27",XDM_CONST.IP_PROTOCOL_RDP, proto="28",XDM_CONST.IP_PROTOCOL_IRTP, proto="29",XDM_CONST.IP_PROTOCOL_ISO_TP4, proto="30",XDM_CONST.IP_PROTOCOL_NETBLT, proto="31",XDM_CONST.IP_PROTOCOL_MFE_NSP, proto="32",XDM_CONST.IP_PROTOCOL_MERIT_INP, proto="33",XDM_CONST.IP_PROTOCOL_DCCP, proto="34",XDM_CONST.IP_PROTOCOL_3PC, proto="35",XDM_CONST.IP_PROTOCOL_IDPR, proto="36",XDM_CONST.IP_PROTOCOL_XTP, proto="37",XDM_CONST.IP_PROTOCOL_DDP, proto="38",XDM_CONST.IP_PROTOCOL_IDPR_CMTP, proto="39",XDM_CONST.IP_PROTOCOL_TP, proto="40",XDM_CONST.IP_PROTOCOL_IL, proto="41",XDM_CONST.IP_PROTOCOL_IPV6, proto="42",XDM_CONST.IP_PROTOCOL_SDRP, proto="43",XDM_CONST.IP_PROTOCOL_IPV6_ROUTE, proto="44",XDM_CONST.IP_PROTOCOL_IPV6_FRAG, proto="45",XDM_CONST.IP_PROTOCOL_IDRP, proto="46",XDM_CONST.IP_PROTOCOL_RSVP, proto="47",XDM_CONST.IP_PROTOCOL_GRE, proto="48",XDM_CONST.IP_PROTOCOL_DSR, proto="49",XDM_CONST.IP_PROTOCOL_BNA, proto="50",XDM_CONST.IP_PROTOCOL_ESP, proto="51",XDM_CONST.IP_PROTOCOL_AH, proto="52",XDM_CONST.IP_PROTOCOL_I_NLSP, proto="53",XDM_CONST.IP_PROTOCOL_SWIPE, proto="54",XDM_CONST.IP_PROTOCOL_NARP, proto="55",XDM_CONST.IP_PROTOCOL_MOBILE, proto="56",XDM_CONST.IP_PROTOCOL_TLSP, proto="57",XDM_CONST.IP_PROTOCOL_SKIP, proto="58",XDM_CONST.IP_PROTOCOL_IPV6_ICMP, proto="59",XDM_CONST.IP_PROTOCOL_IPV6_NONXT, proto="60",XDM_CONST.IP_PROTOCOL_IPV6_OPTS, proto="62",XDM_CONST.IP_PROTOCOL_CFTP, proto="64",XDM_CONST.IP_PROTOCOL_SAT_EXPAK, proto="65",XDM_CONST.IP_PROTOCOL_KRYPTOLAN, proto="66",XDM_CONST.IP_PROTOCOL_RVD, proto="67",XDM_CONST.IP_PROTOCOL_IPPC, proto="69",XDM_CONST.IP_PROTOCOL_SAT_MON, proto="70",XDM_CONST.IP_PROTOCOL_VISA, proto="71",XDM_CONST.IP_PROTOCOL_IPCV, proto="72",XDM_CONST.IP_PROTOCOL_CPNX, proto="73",XDM_CONST.IP_PROTOCOL_CPHB, proto="74",XDM_CONST.IP_PROTOCOL_WSN, proto="75",XDM_CONST.IP_PROTOCOL_PVP, proto="76",XDM_CONST.IP_PROTOCOL_BR_SAT_MON, proto="77",XDM_CONST.IP_PROTOCOL_SUN_ND, proto="78",XDM_CONST.IP_PROTOCOL_WB_MON, proto="79",XDM_CONST.IP_PROTOCOL_WB_EXPAK, proto="80",XDM_CONST.IP_PROTOCOL_ISO_IP, proto="81",XDM_CONST.IP_PROTOCOL_VMTP, proto="82",XDM_CONST.IP_PROTOCOL_SECURE_VMTP, proto="83",XDM_CONST.IP_PROTOCOL_VINES, proto="84",XDM_CONST.IP_PROTOCOL_TTP, proto="85",XDM_CONST.IP_PROTOCOL_NSFNET_IGP, proto="86",XDM_CONST.IP_PROTOCOL_DGP, proto="87",XDM_CONST.IP_PROTOCOL_TCF, proto="88",XDM_CONST.IP_PROTOCOL_EIGRP, proto="89",XDM_CONST.IP_PROTOCOL_OSPFIGP, proto="90",XDM_CONST.IP_PROTOCOL_SPRITE_RPC, proto="91",XDM_CONST.IP_PROTOCOL_LARP, proto="92",XDM_CONST.IP_PROTOCOL_MTP, proto="93",XDM_CONST.IP_PROTOCOL_AX25, proto="94",XDM_CONST.IP_PROTOCOL_IPIP, proto="95",XDM_CONST.IP_PROTOCOL_MICP, proto="96",XDM_CONST.IP_PROTOCOL_SCC_SP, proto="97",XDM_CONST.IP_PROTOCOL_ETHERIP, proto="98",XDM_CONST.IP_PROTOCOL_ENCAP, proto="100",XDM_CONST.IP_PROTOCOL_GMTP, proto="101",XDM_CONST.IP_PROTOCOL_IFMP, proto="102",XDM_CONST.IP_PROTOCOL_PNNI, proto="103",XDM_CONST.IP_PROTOCOL_PIM, proto="104",XDM_CONST.IP_PROTOCOL_ARIS, proto="105",XDM_CONST.IP_PROTOCOL_SCPS, proto="106",XDM_CONST.IP_PROTOCOL_QNX, proto="107",XDM_CONST.IP_PROTOCOL_AN, proto="108",XDM_CONST.IP_PROTOCOL_IPCOMP, proto="110",XDM_CONST.IP_PROTOCOL_COMPAQ_PEER, proto="111",XDM_CONST.IP_PROTOCOL_IPX_IN_IP, proto="112",XDM_CONST.IP_PROTOCOL_VRRP, proto="113",XDM_CONST.IP_PROTOCOL_PGM, proto="115",XDM_CONST.IP_PROTOCOL_L2TP, proto="116",XDM_CONST.IP_PROTOCOL_DDX, proto="117",XDM_CONST.IP_PROTOCOL_IATP, proto="118",XDM_CONST.IP_PROTOCOL_STP, proto="119",XDM_CONST.IP_PROTOCOL_SRP, proto="120",XDM_CONST.IP_PROTOCOL_UTI, proto="121",XDM_CONST.IP_PROTOCOL_SMP, proto="122",XDM_CONST.IP_PROTOCOL_SM, proto="123",XDM_CONST.IP_PROTOCOL_PTP, proto="124",XDM_CONST.IP_PROTOCOL_ISIS, proto="125",XDM_CONST.IP_PROTOCOL_FIRE, proto="126",XDM_CONST.IP_PROTOCOL_CRTP, proto="127",XDM_CONST.IP_PROTOCOL_CRUDP, proto="128",XDM_CONST.IP_PROTOCOL_SSCOPMCE, proto="129",XDM_CONST.IP_PROTOCOL_IPLT, proto="130",XDM_CONST.IP_PROTOCOL_SPS, proto="131",XDM_CONST.IP_PROTOCOL_PIPE, proto="132",XDM_CONST.IP_PROTOCOL_SCTP, proto="133",XDM_CONST.IP_PROTOCOL_FC, proto="134",XDM_CONST.IP_PROTOCOL_RSVP_E2E_IGNORE, proto="135",XDM_CONST.IP_PROTOCOL_MOBILITY, proto="136",XDM_CONST.IP_PROTOCOL_UDPLITE, proto="137",XDM_CONST.IP_PROTOCOL_MPLS_IN_IP,to_string(proto)),
    xdm.network.application_protocol = application,
    xdm.network.rule = ruleName,
    xdm.event.duration = to_integer(duration),
    xdm.network.http.url = request,
    xdm.network.http.method = requestMethod,
    xdm.alert.severity = cefSeverity,
    xdm.observer.action = act,
    xdm.source.host.hostname = shost,
    xdm.source.user.username = suser,
    xdm.source.ipv4 = ipv4src,
    xdm.source.ipv6 = ipv6src,
    xdm.target.host.hostname = dhost,
    xdm.target.user.username = duser,
    xdm.target.ipv4 = ipv4dest,
    xdm.target.ipv6 = ipv6dest,
    xdm.target.port = dpt;
[MODEL: dataset ="check_point_identity_awareness_raw", content_id="CheckpointFirewall"]
// Fields Parsing
alter ipv4src = if(src ~= "\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}", src, null)
| alter ipv6src = if(src != null and ipv4src = null, src, null)
| alter ipv4dest = if(dst ~= "\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}", dst, null)
| alter ipv6dest = if(dst != null and ipv4dest = null, dst, null)
| alter auth_status_temp = if(auth_status = null, act, auth_status)
// Fields Modeling
| alter
    xdm.event.id = loguid,
    xdm.event.type = cefDeviceEventClassId,
    xdm.auth.auth_method = cs5,
    xdm.event.outcome = if(auth_status_temp = "Failed Log In", XDM_CONST.OUTCOME_FAILED, auth_status_temp = "Log In", XDM_CONST.OUTCOME_SUCCESS,  auth_status_temp = "Successful Login", XDM_CONST.OUTCOME_SUCCESS, auth_status_temp = "Failed Login", XDM_CONST.OUTCOME_FAILED, auth_status_temp = null, null, to_string(auth_status_temp)),
    xdm.event.outcome_reason = reason,
    xdm.source.ipv4 = ipv4src,
    xdm.source.ipv6 = ipv6src,
    xdm.source.user.username = suser,
    xdm.source.user.user_type = if(cs3 in("user"),XDM_CONST.USER_TYPE_REGULAR,cs3 in("machine") ,XDM_CONST.USER_TYPE_MACHINE_ACCOUNT ,to_string(cs3)),
    xdm.target.ipv4 = ipv4dest,
    xdm.target.ipv6 = ipv6dest,
    xdm.target.user.username = duser;


[RULE: cisco_wlc_general_fields content_id="Cisco_Wireless_LAN_Controller"]
alter

	// General Extraction for all evennt types

	get_msg_group = arraystring(regextract(_raw_log, "\%([^\-]+)\-\d+\-[^\:]+"), ""),

	get_severity = arraystring(regextract(_raw_log, "\%[^\-]+\-(\d+)\-[^\:]+"), ""),

	get_msg_code = arraystring(regextract(_raw_log, "\%[^\-]+\-\d+\-([^\:]+)"), ""),

	get_description = arraystring(regextract(_raw_log, "\%[^\-]+\-\d+\-[^\:]+:\s+(.*)"), "")

| alter

	xdm.event.original_event_type = get_msg_group,

	xdm.alert.severity = get_severity,

	xdm.event.operation_sub_type = get_msg_code,

	xdm.event.description = get_description,

	xdm.event.log_level = if(get_severity = "0", XDM_CONST.LOG_LEVEL_EMERGENCY, get_severity = "1", XDM_CONST.LOG_LEVEL_ALERT, get_severity = "2", XDM_CONST.LOG_LEVEL_CRITICAL, get_severity = "3", XDM_CONST.LOG_LEVEL_ERROR, get_severity = "4", XDM_CONST.LOG_LEVEL_WARNING, get_severity = "5", XDM_CONST.LOG_LEVEL_NOTICE, get_severity = "6", XDM_CONST.LOG_LEVEL_INFORMATIONAL, get_severity = "7", XDM_CONST.LOG_LEVEL_DEBUG, get_severity = null, null, to_string(get_severity));
[RULE: cisco_wlc_check_fields content_id="Cisco_Wireless_LAN_Controller"]
alter

	src_ip_v4 = if(get_source_ip !~= ":", get_source_ip, null),
    src_ip_v6 = if(get_source_ip ~= ":", get_source_ip, null)
| alter

	xdm.source.ipv4 = src_ip_v4,

	xdm.source.ipv6 = src_ip_v6;
[MODEL: dataset = cisco_wlc_raw, content_id="Cisco_Wireless_LAN_Controller"]
alter

	get_event_type = arraystring(regextract(_raw_log, "\%([^\s\:]+)"), "")

| filter get_event_type ~= "SESSION_MGR-5-FAIL"
| call cisco_wlc_general_fields
| alter

	get_client = arraystring(regextract(_raw_log, "Authorization\s+failed\s+or\s+unapplied\s+for\s+client\s+\(([^\)]+)"), ""),

	get_interface = arraystring(regextract(_raw_log, "on\s+Interface\s+([^\s]+)"), ""),

	get_AuditSessionID = arraystring(regextract(_raw_log, "AuditSessionID\s+([^\s\.]+)"), ""),

	get_failure_reason = arraystring(regextract(_raw_log, "Failure\s+reason:\s+([^\.]+)"), ""),

	get_authc_failure_reason = arraystring(regextract(_raw_log, "Authc\s+failure\s+reason:\s+([^\.]+)"), ""),

	get_process_name = arraystring(regextract(_raw_log, "%\S+\s+\S+\s+\d+\s+\S+\s+([^\:]+)"), "")

| alter

	check_source_mac_formatted = if(get_client ~= "[\da-fA-F]{4}\.[\da-fA-F]{4}\.[\da-fA-F]{4}", arraystring(regextract(get_client, "[\da-fA-F]{2}"), ":"), null) 	// reformat the MAC from xxxx.xxxx.xxxx to 

| alter

	xdm.source.host.mac_addresses = arraycreate(check_source_mac_formatted),

	xdm.target.interface = get_interface,

	xdm.session_context_id = get_AuditSessionID,

	xdm.event.outcome = if(get_failure_reason ~= "fail", XDM_CONST.OUTCOME_FAILED, get_msg_code ~= "FAIL", XDM_CONST.OUTCOME_FAILED, get_msg_code ~= "PASSED|SUCCESS", XDM_CONST.OUTCOME_SUCCESS, null),

	xdm.event.outcome_reason = get_authc_failure_reason,

	xdm.source.process.name = get_process_name;



alter

	get_event_type = arraystring(regextract(_raw_log, "\%([^\s\:]+)"), "")

| filter get_event_type ~= "DOT1X-5-FAIL"
| call cisco_wlc_general_fields
| alter

	get_mac = arraystring(regextract(_raw_log, "for\s+client\s\(([^\)]+)"), ""),

	get_reason = arraystring(regextract(_raw_log, "with\s+reason\s+\(([^\)]+)"), ""),

	get_interface = arraystring(regextract(_raw_log, "on\s+Interface\s+([^\s]+)"), ""),

	get_AuditSessionID = arraystring(regextract(_raw_log, "AuditSessionID\s+([^\s\.]+)"), ""),

	get_username = arraystring(regextract(_raw_log, "Username\:\s+([^\s]+)"), ""),

	get_process_name = arraystring(regextract(_raw_log, "%\S+\s+\S+\s+\d+\s+\S+\s+([^\:]+)"), "")

| alter

	check_source_mac_formatted = if(get_mac ~= "[\da-fA-F]{4}\.[\da-fA-F]{4}\.[\da-fA-F]{4}", arraystring(regextract(get_mac, "[\da-fA-F]{2}"), ":"), get_mac ~= "\-|\:", get_mac, null)

| alter

	xdm.source.host.mac_addresses = arraycreate(check_source_mac_formatted),

	xdm.event.outcome = if(get_reason ~= "fail", XDM_CONST.OUTCOME_FAILED, get_msg_code ~= "FAIL", XDM_CONST.OUTCOME_FAILED, get_msg_code ~= "PASSED|SUCCESS", XDM_CONST.OUTCOME_SUCCESS, null),

	xdm.event.outcome_reason = get_reason,

	xdm.target.interface = get_interface,

	xdm.session_context_id = get_AuditSessionID,

	xdm.source.user.username = get_username,

	xdm.source.process.name = get_process_name;



alter

	get_event_type = arraystring(regextract(_raw_log, "\%([^\s\:]+)"), "")

| filter get_event_type ~= "CLIENT_ORCH_LOG-6-CLIENT_ADDED_TO_RUN_STATE"
| call cisco_wlc_general_fields
| alter

	get_username = arraystring(regextract(_raw_log, "Username\s+entry\s+\(([^\)]+)"), ""),

	get_ssid = arraystring(regextract(_raw_log, "with\s+ssid\s+\(([^\)]+)"), ""),

	get_mac = arraystring(regextract(_raw_log, "device\s+with\s+MAC:\s+([^\s]+)"), ""),

	get_process_name = arraystring(regextract(_raw_log, "%\S+\s+\S+\s+\d+\s+\S+\s+([^\:]+)"), "")

| alter

	source_mac_formatted = if(get_mac ~= "[\da-fA-F]{4}\.[\da-fA-F]{4}\.[\da-fA-F]{4}", arraystring(regextract(get_mac, "[\da-fA-F]{2}"), ":"), get_mac ~= "\-|\:", get_mac, null)

| alter

	xdm.source.user.username = get_username,

	xdm.target.agent.identifier = get_ssid,

	xdm.source.host.mac_addresses = arraycreate(source_mac_formatted),

	xdm.source.process.name = get_process_name;



alter

	get_event_type = arraystring(regextract(_raw_log, "\%([^\s\:]+)"), "")

| filter get_event_type ~= "SEC_LOGIN-5-LOGIN_SUCCESS"
| call cisco_wlc_general_fields
| alter

	get_username = arraystring(regextract(_raw_log, "\[user:\s+([^\]]+)"), ""),

	get_source_ip = arraystring(regextract(_raw_log, "\[Source:\s+([^\]]+)"), ""),

	get_source_port = to_integer(arraystring(regextract(_raw_log, "\[localport:\s+([^\]]+)"), ""))

| call cisco_wlc_check_fields
| alter

	xdm.source.user.username = get_username,

	xdm.source.port = to_integer(get_source_port);



alter

	get_event_type = arraystring(regextract(_raw_log, "\%([^\s\:]+)"), "")

| filter get_event_type ~= "DMI-5-AUTH_PASSED"
| call cisco_wlc_general_fields
| alter

	get_username = arraystring(regextract(_raw_log, "User[\s\']+([^\'\s]+)"), ""),

	get_source_ip = arraystring(regextract(_raw_log, "successfully\s+from\s+([^\:]+)\:\d+"), ""),

	get_source_port = to_integer(arraystring(regextract(_raw_log, "successfully\s+from\s+[^\:]+\:(\d+)"), "")),

	get_process_name = arraystring(regextract(_raw_log, "%\S+\s+\S+\s+\d+\s+\S+\s+([^\:]+)"), "")

| call cisco_wlc_check_fields
| alter

	xdm.source.user.username = get_username,

	xdm.source.port = to_integer(get_source_port),

	xdm.source.process.name = get_process_name;



alter

	get_event_type = arraystring(regextract(_raw_log, "\%([^\s\:]+)"), "")

| filter get_event_type ~= "SYS-6-LOGOUT"
| call cisco_wlc_general_fields
| alter

	get_username = arraystring(regextract(_raw_log, "User[\s\']+([^\'\s]+)"), ""),

	get_source_ip = arraystring(regextract(_raw_log, "exited\s+tty\s+session\s+\d+\(([^\)]+)"), "")

| call cisco_wlc_check_fields
| alter

	xdm.source.user.username = get_username;



alter

	get_event_type = arraystring(regextract(_raw_log, "\%([^\s\:]+)"), "")

| filter get_event_type ~= "APMGR_TRACE_MESSAGE-3-AP_NTP_SYNC"
| call cisco_wlc_general_fields
| alter

	get_access_point = arraystring(regextract(_raw_log, "wncd\:\s+AP\s+(\S+)"), ""),

	get_mac = arraystring(regextract(_raw_log, "wncd\:\s+AP\s+\S+\s+MAC\s+([^\s\,]+)"), ""),

	get_reason = arraystring(regextract(_raw_log, "\s+[Rr]eason:\s+(.*)"), ""),

	get_process_name = arraystring(regextract(_raw_log, "%\S+\s+\S+\s+\d+\s+\S+\s+([^\:]+)"), "")

| alter

	source_mac_formatted = if(get_mac ~= "[\da-fA-F]{4}\.[\da-fA-F]{4}\.[\da-fA-F]{4}", arraystring(regextract(get_mac, "[\da-fA-F]{2}"), ":"), get_mac ~= "\-|\:", get_mac, null)

| alter

	xdm.target.host.hostname = get_access_point,

	xdm.source.host.mac_addresses = arraycreate(source_mac_formatted),

	xdm.event.outcome = if(get_reason ~= "fail|unreachable", XDM_CONST.OUTCOME_FAILED, get_msg_code ~= "FAIL", XDM_CONST.OUTCOME_FAILED, get_msg_code ~= "PASSED|SUCCESS", XDM_CONST.OUTCOME_SUCCESS, null),

	xdm.event.outcome_reason = get_reason,

	xdm.source.process.name = get_process_name;



alter

	get_event_type = arraystring(regextract(_raw_log, "\%([^\s\:]+)"), "")

| filter get_event_type ~= "EPM_PLUGIN-5-IGNORED_VLAN_VALIDATION"
| call cisco_wlc_general_fields
| alter

	get_interface = arraystring(regextract(_raw_log, "wncd:\s+Vlan\s+(\S+)"), ""),

	get_vlan_number = arraystring(regextract(_raw_log, "choosing\s+Vlan\s+(\d+)"), ""),

	get_process_name = arraystring(regextract(_raw_log, "%\S+\s+\S+\s+\d+\s+\S+\s+([^\:]+)"), "")

| alter

	xdm.target.interface = get_interface,

	xdm.target.vlan = to_integer(get_vlan_number),

	xdm.source.process.name = get_process_name;



alter

	get_event_type = arraystring(regextract(_raw_log, "\%([^\s\:]+)"), "")

| filter get_event_type ~= "APMGR_AWIPS_SYSLOG-6-APMGR_AWIPS_MESSAGE"
| call cisco_wlc_general_fields
| alter

	get_mac1 = arraystring(regextract(_raw_log, "AWIPS\s+alarm\:\([^\)]+\)\s+([^\s]+)\s+"), ""),

	get_mac2 = arraystring(regextract(_raw_log, "AWIPS\s+alarm\:\([^\)]+\)\s+[^\s]+\s+Radio\s+MAC\s+(\S+)"), ""),

	get_access_point = arraystring(regextract(_raw_log, "AWIPS\s+alarm\:\(([^\)]+)"), ""),

	get_ap_detection = arraystring(regextract(_raw_log, "AWIPS\s+alarm\:\([^\)]+\)\s+[^\s]+\s+Radio\s+MAC\s+\S+\s+(detected\s+.*)"), ""),

	get_process_name = arraystring(regextract(_raw_log, "%\S+\s+\S+\s+\d+\s+\S+\s+([^\:]+)"), "")

| alter

	target_mac_formatted1 = if(get_mac1 ~= "[\da-fA-F]{4}\.[\da-fA-F]{4}\.[\da-fA-F]{4}", arraystring(regextract(get_mac1, "[\da-fA-F]{2}"), ":"), get_mac1 ~= "\-|\:", get_mac1, null),

	target_mac_formatted2 = if(get_mac2 ~= "[\da-fA-F]{4}\.[\da-fA-F]{4}\.[\da-fA-F]{4}", arraystring(regextract(get_mac2, "[\da-fA-F]{2}"), ":"), get_mac2 ~= "\-|\:", get_mac2, null)

| alter

	xdm.target.host.mac_addresses = arraycreate(target_mac_formatted1, target_mac_formatted2),

	xdm.target.host.hostname = get_access_point,

	xdm.alert.description = get_ap_detection,

	xdm.source.process.name = get_process_name;



alter

	get_event_type = arraystring(regextract(_raw_log, "\%([^\s\:]+)"), "")

| filter get_event_type ~= "CLIENT_ORCH_LOG-5-ADD_TO_EXCLUSIONLIST_REASON"
| call cisco_wlc_general_fields
| alter

	get_mac = arraystring(regextract(_raw_log, "wncd:\s+Client\s+MAC:\s+([^\s\,]+)\s+with\s+IP:\s+\S+"), ""),

	get_process_name = arraystring(regextract(_raw_log, "%\S+\s+\S+\s+\d+\s+\S+\s+([^\:]+)"), "")

| alter

	source_mac_formatted = if(get_mac ~= "[\da-fA-F]{4}\.[\da-fA-F]{4}\.[\da-fA-F]{4}", arraystring(regextract(get_mac, "[\da-fA-F]{2}"), ":"), get_mac ~= "\-|\:", get_mac, null)

| alter

	xdm.source.host.mac_addresses = arraycreate(source_mac_formatted),

	xdm.source.process.name = get_process_name;



alter

	get_event_type = arraystring(regextract(_raw_log, "\%([^\s\:]+)"), "")

| filter get_event_type ~= "CLIENT_EXCLUSION_SERVER-5-ADD_TO_EXCLUSIONLIST_REASON_DYNAMIC"
| call cisco_wlc_general_fields
| alter

	get_access_point = arraystring(regextract(_raw_log, "AP\s+Name:\s*([^\s\,]+)"), ""),

	get_mac = arraystring(regextract(_raw_log, "BSSID:MAC:\s+([^\s\,]+)"), ""),

	get_reason = arraystring(regextract(_raw_log, "\s+[Rr]eason:\s*(.*)"), ""),

	get_process_name = arraystring(regextract(_raw_log, "%\S+\s+\S+\s+\d+\s+\S+\s+([^\:]+)"), "")

| alter

	source_mac_formatted = if(get_mac ~= "[\da-fA-F]{4}\.[\da-fA-F]{4}\.[\da-fA-F]{4}", arraystring(regextract(get_mac, "[\da-fA-F]{2}"), ":"), get_mac ~= "\-|\:", get_mac, null)

| alter

	xdm.target.host.hostname = get_access_point,

	xdm.source.host.mac_addresses = arraycreate(source_mac_formatted),

	xdm.alert.description = get_reason,

	xdm.source.process.name = get_process_name;



alter

	get_event_type = arraystring(regextract(_raw_log, "\%([^\s\:]+)"), "")

| filter get_event_type ~= "CAPWAPAC_SMGR_TRACE_MESSAGE-5-AP_JOIN_DISJOIN"
| call cisco_wlc_general_fields
| alter

	get_access_point = arraystring(regextract(_raw_log, "AP\s+Name:\s*([^\s\,]+)"), ""),

	get_mac = arraystring(regextract(_raw_log, "AP\s+Name:\s*[^\s\,]+\s+Mac\:\s*(.*)\s+Session-IP:"), ""),

	get_target_ip1 = arraystring(regextract(_raw_log, "Session\-IP\:\s*([^\[]+)\[\d+"), ""),

	get_target_ip2 = arraystring(regextract(_raw_log, "Session\-IP\:\s*[^\[]+\[\d+\]\s+([^\[]+)"), ""),

	get_target_port = to_integer(arraystring(regextract(_raw_log, "Session\-IP\:\s*[^\[]+\[(\d+)"), "")),

	get_reason = arraystring(regextract(_raw_log, "Session\-IP\:\s*[^\[]+\[\d+\]\s+\S+\s+(.*)"), ""),

	get_process_name = arraystring(regextract(_raw_log, "%\S+\s+\S+\s+\d+\s+\S+\s+([^\:]+)"), "")

| alter

	target_mac_formatted = if(get_mac ~= "[\da-fA-F]{4}\.[\da-fA-F]{4}\.[\da-fA-F]{4}", arraystring(regextract(get_mac, "[\da-fA-F]{2}"), ":"), get_mac ~= "\-|\:", get_mac, null),

	tar_ip_v4_1 = if(get_target_ip1 !~= ":", get_target_ip1, null),
    tar_ip_v6_1 = if(get_target_ip1 ~= ":", get_target_ip1, null),
    tar_ip_v4_2 = if(get_target_ip2 !~= ":", get_target_ip2, null),
    tar_ip_v6_2 = if(get_target_ip2 ~= ":", get_target_ip2, null)
| alter

	xdm.target.host.hostname = get_access_point,

	xdm.target.host.mac_addresses = arraycreate(target_mac_formatted),

	xdm.target.port = to_integer(get_target_port),

	xdm.target.host.ipv4_addresses = arraycreate(tar_ip_v4_1, tar_ip_v4_2),

	xdm.target.host.ipv6_addresses = arraycreate(tar_ip_v6_1, tar_ip_v6_2),

	xdm.alert.description = get_reason,

	xdm.source.process.name = get_process_name;



alter

	get_event_type = arraystring(regextract(_raw_log, "\%([^\s\:]+)"), "")

| filter get_event_type ~= "MM_LOG-4-RETRIES_FAILED"
| call cisco_wlc_general_fields
| alter

	get_mac = arraystring(regextract(_raw_log, "MAC:\s+(\S+):"), ""),

	get_target_ip = arraystring(regextract(_raw_log, "ipv4:\s+(\S+)"), ""),

	get_process_name = arraystring(regextract(_raw_log, "%\S+\s+\S+\s+\d+\s+\S+\s+([^\:]+)"), "")

| alter

	source_mac_formatted = if(get_mac ~= "[\da-fA-F]{4}\.[\da-fA-F]{4}\.[\da-fA-F]{4}", arraystring(regextract(get_mac, "[\da-fA-F]{2}"), ":"), get_mac ~= "\-|\:", get_mac, null)

| alter

	xdm.source.host.mac_addresses = arraycreate(source_mac_formatted),

	xdm.target.ipv4 = get_target_ip,

	xdm.source.process.name = get_process_name;



alter

	get_event_type = arraystring(regextract(_raw_log, "\%([^\s\:]+)"), "")

| filter get_event_type ~= "SYS-5-CONFIG_P"
| call cisco_wlc_general_fields
| alter

	get_process_name = arraystring(regextract(_raw_log, "by\s+process\s+(\S+)"), ""),

	get_console = arraystring(regextract(_raw_log, "from\s+console\s+as\s+(\S+)"), ""),

	get_line_interface = arraystring(regextract(_raw_log, "from\s+console\s+as\s+\S+\s+on\s+(\S+)"), "")

| alter

	xdm.source.process.name = get_process_name,

	xdm.source.agent.identifier = get_console,

	xdm.source.agent.type = get_line_interface;



alter

	get_event_type = arraystring(regextract(_raw_log, "\%([^\s\:]+)"), "")

| filter get_event_type ~= "FMANFP-6-IPACCESSLOGP"
| call cisco_wlc_general_fields
| alter

	get_process_name = arraystring(regextract(_raw_log, "%\S+\s+\S+\s+\d+\s+\S+\s+([^\:]+)"), ""),

	get_acl = arraystring(regextract(_raw_log, "%\S+\s+\S+\s+\d+\s+\S+\s+[^\:]+:\s+list\s+(\S+)"), ""),

	get_protocol = arraystring(regextract(_raw_log, "%\S+\s+\S+\s+\d+\s+\S+\s+[^\:]+:\s+list\s+\S+\s+permitted\s+(\S+)"), ""),

	get_mac = arraystring(regextract(_raw_log, "%\S+\s+\S+\s+\d+\s+\S+\s+[^\:]+:\s+list\s+\S+\s+permitted\s+\S+\s+(\S+)"), ""),

	get_source_ip = arraystring(regextract(_raw_log, "%\S+\s+\S+\s+\d+\s+\S+\s+[^\:]+:\s+list\s+\S+\s+permitted\s+\S+\s+\S+\s+([^\(]+)"), ""),

	get_source_port = arraystring(regextract(_raw_log, "%\S+\s+\S+\s+\d+\s+\S+\s+[^\:]+:\s+list\s+\S+\s+permitted\s+\S+\s+\S+\s+[^\(]+\((\d+)"), ""),

	get_target_ip = arraystring(regextract(_raw_log, "->\s+([^\(]+)"), ""),

	get_target_port = arraystring(regextract(_raw_log, "->\s+[^\(]+\((\d+)"), "")

| alter

	source_mac_formatted = if(get_mac ~= "[\da-fA-F]{4}\.[\da-fA-F]{4}\.[\da-fA-F]{4}", arraystring(regextract(get_mac, "[\da-fA-F]{2}"), ":"), get_mac ~= "\-|\:", get_mac, null),

	proto = uppercase(get_protocol),

	tar_ip_v4 = if(get_target_ip !~= ":", get_target_ip, null),
    tar_ip_v6 = if(get_target_ip ~= ":", get_target_ip, null)
| call cisco_wlc_check_fields
| alter

	xdm.source.process.name = get_process_name,

	xdm.network.rule = get_acl,

	xdm.network.ip_protocol = if(proto="HOPOPT",XDM_CONST.IP_PROTOCOL_HOPOPT, proto="ICMP",XDM_CONST.IP_PROTOCOL_ICMP, proto="IGMP",XDM_CONST.IP_PROTOCOL_IGMP, proto="GGP",XDM_CONST.IP_PROTOCOL_GGP, proto="IP",XDM_CONST.IP_PROTOCOL_IP, proto="ST",XDM_CONST.IP_PROTOCOL_ST, proto="TCP",XDM_CONST.IP_PROTOCOL_TCP, proto="CBT",XDM_CONST.IP_PROTOCOL_CBT, proto="EGP",XDM_CONST.IP_PROTOCOL_EGP, proto="IGP",XDM_CONST.IP_PROTOCOL_IGP, proto="BBN_RCC_MON",XDM_CONST.IP_PROTOCOL_BBN_RCC_MON, proto="NVP_II",XDM_CONST.IP_PROTOCOL_NVP_II, proto="PUP",XDM_CONST.IP_PROTOCOL_PUP, proto="ARGUS",XDM_CONST.IP_PROTOCOL_ARGUS, proto="EMCON",XDM_CONST.IP_PROTOCOL_EMCON, proto="XNET",XDM_CONST.IP_PROTOCOL_XNET, proto="CHAOS",XDM_CONST.IP_PROTOCOL_CHAOS, proto="UDP",XDM_CONST.IP_PROTOCOL_UDP, proto="MUX",XDM_CONST.IP_PROTOCOL_MUX, proto="DCN_MEAS",XDM_CONST.IP_PROTOCOL_DCN_MEAS, proto="HMP",XDM_CONST.IP_PROTOCOL_HMP, proto="PRM",XDM_CONST.IP_PROTOCOL_PRM, proto="XNS_IDP",XDM_CONST.IP_PROTOCOL_XNS_IDP, proto="TRUNK_1",XDM_CONST.IP_PROTOCOL_TRUNK_1, proto="TRUNK_2",XDM_CONST.IP_PROTOCOL_TRUNK_2, proto="LEAF_1",XDM_CONST.IP_PROTOCOL_LEAF_1, proto="LEAF_2",XDM_CONST.IP_PROTOCOL_LEAF_2, proto="RDP",XDM_CONST.IP_PROTOCOL_RDP, proto="IRTP",XDM_CONST.IP_PROTOCOL_IRTP, proto="ISO_TP4",XDM_CONST.IP_PROTOCOL_ISO_TP4, proto="NETBLT",XDM_CONST.IP_PROTOCOL_NETBLT, proto="MFE_NSP",XDM_CONST.IP_PROTOCOL_MFE_NSP, proto="MERIT_INP",XDM_CONST.IP_PROTOCOL_MERIT_INP, proto="DCCP",XDM_CONST.IP_PROTOCOL_DCCP, proto="3PC",XDM_CONST.IP_PROTOCOL_3PC, proto="IDPR",XDM_CONST.IP_PROTOCOL_IDPR, proto="XTP",XDM_CONST.IP_PROTOCOL_XTP, proto="DDP",XDM_CONST.IP_PROTOCOL_DDP, proto="IDPR_CMTP",XDM_CONST.IP_PROTOCOL_IDPR_CMTP, proto="TP",XDM_CONST.IP_PROTOCOL_TP, proto="IL",XDM_CONST.IP_PROTOCOL_IL, proto="IPV6",XDM_CONST.IP_PROTOCOL_IPV6, proto="SDRP",XDM_CONST.IP_PROTOCOL_SDRP, proto="IPV6_ROUTE",XDM_CONST.IP_PROTOCOL_IPV6_ROUTE, proto="IPV6_FRAG",XDM_CONST.IP_PROTOCOL_IPV6_FRAG, proto="IDRP",XDM_CONST.IP_PROTOCOL_IDRP, proto="RSVP",XDM_CONST.IP_PROTOCOL_RSVP, proto="GRE",XDM_CONST.IP_PROTOCOL_GRE, proto="DSR",XDM_CONST.IP_PROTOCOL_DSR, proto="BNA",XDM_CONST.IP_PROTOCOL_BNA, proto="ESP",XDM_CONST.IP_PROTOCOL_ESP, proto="AH",XDM_CONST.IP_PROTOCOL_AH, proto="I_NLSP",XDM_CONST.IP_PROTOCOL_I_NLSP, proto="SWIPE",XDM_CONST.IP_PROTOCOL_SWIPE, proto="NARP",XDM_CONST.IP_PROTOCOL_NARP, proto="MOBILE",XDM_CONST.IP_PROTOCOL_MOBILE, proto="TLSP",XDM_CONST.IP_PROTOCOL_TLSP, proto="SKIP",XDM_CONST.IP_PROTOCOL_SKIP, proto="IPV6_ICMP",XDM_CONST.IP_PROTOCOL_IPV6_ICMP, proto="IPV6_NONXT",XDM_CONST.IP_PROTOCOL_IPV6_NONXT, proto="IPV6_OPTS",XDM_CONST.IP_PROTOCOL_IPV6_OPTS, proto="CFTP",XDM_CONST.IP_PROTOCOL_CFTP, proto="SAT_EXPAK",XDM_CONST.IP_PROTOCOL_SAT_EXPAK, proto="KRYPTOLAN",XDM_CONST.IP_PROTOCOL_KRYPTOLAN, proto="RVD",XDM_CONST.IP_PROTOCOL_RVD, proto="IPPC",XDM_CONST.IP_PROTOCOL_IPPC, proto="SAT_MON",XDM_CONST.IP_PROTOCOL_SAT_MON, proto="VISA",XDM_CONST.IP_PROTOCOL_VISA, proto="IPCV",XDM_CONST.IP_PROTOCOL_IPCV, proto="CPNX",XDM_CONST.IP_PROTOCOL_CPNX, proto="CPHB",XDM_CONST.IP_PROTOCOL_CPHB, proto="WSN",XDM_CONST.IP_PROTOCOL_WSN, proto="PVP",XDM_CONST.IP_PROTOCOL_PVP, proto="BR_SAT_MON",XDM_CONST.IP_PROTOCOL_BR_SAT_MON, proto="SUN_ND",XDM_CONST.IP_PROTOCOL_SUN_ND, proto="WB_MON",XDM_CONST.IP_PROTOCOL_WB_MON, proto="WB_EXPAK",XDM_CONST.IP_PROTOCOL_WB_EXPAK, proto="ISO_IP",XDM_CONST.IP_PROTOCOL_ISO_IP, proto="VMTP",XDM_CONST.IP_PROTOCOL_VMTP, proto="SECURE_VMTP",XDM_CONST.IP_PROTOCOL_SECURE_VMTP, proto="VINES",XDM_CONST.IP_PROTOCOL_VINES, proto="TTP",XDM_CONST.IP_PROTOCOL_TTP, proto="NSFNET_IGP",XDM_CONST.IP_PROTOCOL_NSFNET_IGP, proto="DGP",XDM_CONST.IP_PROTOCOL_DGP, proto="TCF",XDM_CONST.IP_PROTOCOL_TCF, proto="EIGRP",XDM_CONST.IP_PROTOCOL_EIGRP, proto="OSPFIGP",XDM_CONST.IP_PROTOCOL_OSPFIGP, proto="SPRITE_RPC",XDM_CONST.IP_PROTOCOL_SPRITE_RPC, proto="LARP",XDM_CONST.IP_PROTOCOL_LARP, proto="MTP",XDM_CONST.IP_PROTOCOL_MTP, proto="AX25",XDM_CONST.IP_PROTOCOL_AX25, proto="IPIP",XDM_CONST.IP_PROTOCOL_IPIP, proto="MICP",XDM_CONST.IP_PROTOCOL_MICP, proto="SCC_SP",XDM_CONST.IP_PROTOCOL_SCC_SP, proto="ETHERIP",XDM_CONST.IP_PROTOCOL_ETHERIP, proto="ENCAP",XDM_CONST.IP_PROTOCOL_ENCAP, proto="GMTP",XDM_CONST.IP_PROTOCOL_GMTP, proto="IFMP",XDM_CONST.IP_PROTOCOL_IFMP, proto="PNNI",XDM_CONST.IP_PROTOCOL_PNNI, proto="PIM",XDM_CONST.IP_PROTOCOL_PIM, proto="ARIS",XDM_CONST.IP_PROTOCOL_ARIS, proto="SCPS",XDM_CONST.IP_PROTOCOL_SCPS, proto="QNX",XDM_CONST.IP_PROTOCOL_QNX, proto="AN",XDM_CONST.IP_PROTOCOL_AN, proto="IPCOMP",XDM_CONST.IP_PROTOCOL_IPCOMP, proto="COMPAQ_PEER",XDM_CONST.IP_PROTOCOL_COMPAQ_PEER, proto="IPX_IN_IP",XDM_CONST.IP_PROTOCOL_IPX_IN_IP, proto="VRRP",XDM_CONST.IP_PROTOCOL_VRRP, proto="PGM",XDM_CONST.IP_PROTOCOL_PGM, proto="L2TP",XDM_CONST.IP_PROTOCOL_L2TP, proto="DDX",XDM_CONST.IP_PROTOCOL_DDX, proto="IATP",XDM_CONST.IP_PROTOCOL_IATP, proto="STP",XDM_CONST.IP_PROTOCOL_STP, proto="SRP",XDM_CONST.IP_PROTOCOL_SRP, proto="UTI",XDM_CONST.IP_PROTOCOL_UTI, proto="SMP",XDM_CONST.IP_PROTOCOL_SMP, proto="SM",XDM_CONST.IP_PROTOCOL_SM, proto="PTP",XDM_CONST.IP_PROTOCOL_PTP, proto="ISIS",XDM_CONST.IP_PROTOCOL_ISIS, proto="FIRE",XDM_CONST.IP_PROTOCOL_FIRE, proto="CRTP",XDM_CONST.IP_PROTOCOL_CRTP, proto="CRUDP",XDM_CONST.IP_PROTOCOL_CRUDP, proto="SSCOPMCE",XDM_CONST.IP_PROTOCOL_SSCOPMCE, proto="IPLT",XDM_CONST.IP_PROTOCOL_IPLT, proto="SPS",XDM_CONST.IP_PROTOCOL_SPS, proto="PIPE",XDM_CONST.IP_PROTOCOL_PIPE, proto="SCTP",XDM_CONST.IP_PROTOCOL_SCTP, proto="FC",XDM_CONST.IP_PROTOCOL_FC, proto="RSVP_E2E_IGNORE",XDM_CONST.IP_PROTOCOL_RSVP_E2E_IGNORE, proto="MOBILITY",XDM_CONST.IP_PROTOCOL_MOBILITY, proto="UDPLITE",XDM_CONST.IP_PROTOCOL_UDPLITE, proto="MPLS_IN_IP",XDM_CONST.IP_PROTOCOL_MPLS_IN_IP, proto = null, null, to_string(proto)),

	xdm.source.host.mac_addresses = arraycreate(source_mac_formatted),

	xdm.source.port = to_integer(get_source_port),

	xdm.target.ipv4 = tar_ip_v4,

	xdm.target.ipv6 = tar_ip_v6,

	xdm.target.port = to_integer(get_target_port);



alter

	get_event_type = arraystring(regextract(_raw_log, "\%([^\s\:]+)"), "")

| filter get_event_type ~= "MAB-5-FAIL"
| call cisco_wlc_general_fields
| alter

	get_process_name = arraystring(regextract(_raw_log, "%\S+\s+\S+\s+\d+\s+\S+\s+([^\:]+)"), ""),

	get_mac = arraystring(regextract(_raw_log, "for\s+client\s\(([^\)]+)"), ""),

	get_reason = arraystring(regextract(_raw_log, "with\s+reason\s+\(([^\)]+)"), ""),

	get_interface = arraystring(regextract(_raw_log, "on\s+Interface\s+([^\s]+)"), ""),

	get_AuditSessionID = arraystring(regextract(_raw_log, "AuditSessionID\s+([^\s\.]+)"), "")

| alter

	check_source_mac_formatted = if(get_mac ~= "[\da-fA-F]{4}\.[\da-fA-F]{4}\.[\da-fA-F]{4}", arraystring(regextract(get_mac, "[\da-fA-F]{2}"), ":"), get_mac ~= "\-|\:", get_mac, null)

| alter

	xdm.source.host.mac_addresses = arraycreate(check_source_mac_formatted),

	xdm.event.outcome = if(get_reason ~= "[Ff]ail", XDM_CONST.OUTCOME_FAILED, get_msg_code ~= "FAIL", XDM_CONST.OUTCOME_FAILED, get_msg_code ~= "PASSED|SUCCESS", XDM_CONST.OUTCOME_SUCCESS, null),

	xdm.event.outcome_reason = get_reason,

	xdm.target.interface = get_interface,

	xdm.session_context_id = get_AuditSessionID,

	xdm.source.process.name = get_process_name;



alter

	get_event_type = arraystring(regextract(_raw_log, "\%([^\s\:]+)"), "")

| filter get_event_type ~= "APMGR_TRACE_MESSAGE-6-WLC_APMGR_INFO"
| call cisco_wlc_general_fields
| alter

	get_process_name = arraystring(regextract(_raw_log, "%\S+\s+\S+\s+\d+\s+\S+\s+([^\:]+)"), ""),

	get_access_point = arraystring(regextract(_raw_log, "from\s+AP\s+\<([^\s\>]+)"), "")

| alter

	xdm.source.process.name = get_process_name,

	xdm.target.host.hostname = get_access_point;



alter

	get_event_type = arraystring(regextract(_raw_log, "\%([^\s\:]+)"), "")

| filter get_event_type ~= "MM_INFRA_LOG-3-MSG_PROC_FAILED"
| call cisco_wlc_general_fields
| alter

	get_process_name = arraystring(regextract(_raw_log, "%\S+\s+\S+\s+\d+\s+\S+\s+([^\:]+)"), ""),

	get_mac1 = arraystring(regextract(_raw_log, "Pkt\s+MAC\:\s+(\S+)"), ""),

	get_mac2 = arraystring(regextract(_raw_log, "Pkt\s+MAC\:\s+[^\s]+\s+Peer\s+MAC:\s+(\S+)"), ""),

	get_reason = arraystring(regextract(_raw_log, "reason:\s+(.*)"), "")

| alter

	check_source_mac_formatted_1 = if(get_mac1 ~= "[\da-fA-F]{4}\.[\da-fA-F]{4}\.[\da-fA-F]{4}", arraystring(regextract(get_mac1, "[\da-fA-F]{2}"), ":"), get_mac1 ~= "\-|\:", get_mac1, null),

	check_source_mac_formatted_2 = if(get_mac2 ~= "[\da-fA-F]{4}\.[\da-fA-F]{4}\.[\da-fA-F]{4}", arraystring(regextract(get_mac2, "[\da-fA-F]{2}"), ":"), get_mac2 ~= "\-|\:", get_mac2, null)

| alter

	xdm.source.process.name = get_process_name,

	xdm.source.host.mac_addresses = arraycreate(check_source_mac_formatted_1),

	xdm.target.host.mac_addresses = arraycreate(check_source_mac_formatted_2),

	xdm.event.outcome = if(get_reason ~= "[Ff]ail", XDM_CONST.OUTCOME_FAILED, get_msg_code ~= "FAIL", XDM_CONST.OUTCOME_FAILED, get_msg_code ~= "PASSED|SUCCESS", XDM_CONST.OUTCOME_SUCCESS, null),

	xdm.event.outcome_reason = get_reason;



alter

	get_event_type = arraystring(regextract(_raw_log, "\%([^\s\:]+)"), "")

| filter get_event_type ~= "MM_NODE_LOG-5-KEEP_ALIVE"
| call cisco_wlc_general_fields
| alter

	get_process_name = arraystring(regextract(_raw_log, "%\S+\s+\S+\s+\d+\s+\S+\s+([^\:]+)"), ""),

	get_target_ip = arraystring(regextract(_raw_log, "peer\s+IP:\s+(\S+)"), "")

| alter

	tar_ip_v4 = if(get_target_ip !~= ":", get_target_ip, null),
    tar_ip_v6 = if(get_target_ip ~= ":", get_target_ip, null)
| alter

	xdm.source.process.name = get_process_name,

	xdm.target.ipv4 = tar_ip_v4,

	xdm.target.ipv6 = tar_ip_v6;



alter

	get_event_type = arraystring(regextract(_raw_log, "\%([^\s\:]+)"), "")

| filter get_event_type ~= "MM_INFRA_LOG-3-RECV_FAILED"
| call cisco_wlc_general_fields
| alter

	get_process_name = arraystring(regextract(_raw_log, "%\S+\s+\S+\s+\d+\s+\S+\s+([^\:]+)"), ""),

	get_source_ip = arraystring(regextract(_raw_log, "ipv4\:\s+(\S+)"), ""),

	get_reason = arraystring(regextract(_raw_log, "reason:\s+(.*)"), "")

| alter

	xdm.source.process.name = get_process_name,

	xdm.source.ipv4 = get_source_ip,

	xdm.event.outcome = if(get_reason ~= "[Ff]ail", XDM_CONST.OUTCOME_FAILED, get_msg_code ~= "FAIL", XDM_CONST.OUTCOME_FAILED, get_msg_code ~= "PASSED|SUCCESS", XDM_CONST.OUTCOME_SUCCESS, null),

	xdm.event.outcome_reason = get_reason;



alter

	get_event_type = arraystring(regextract(_raw_log, "\%([^\s\:]+)"), "")

| filter get_event_type ~= "WEBSERVER-5-LOGIN_PASSED"
| call cisco_wlc_general_fields
| alter

	get_source_ip = arraystring(regextract(_raw_log, "from\s+host\s+(\S+)"), ""),

	get_username = arraystring(regextract(_raw_log, "user[\s\']*([^\s\']+)"), ""),

	get_cipher = arraystring(regextract(_raw_log, "cipher[\s\']*([^\s\']+)"), "")

| call cisco_wlc_check_fields
| alter

	xdm.source.user.username = get_username,

	xdm.network.tls.cipher = get_cipher;



alter

	get_event_type = arraystring(regextract(_raw_log, "\%([^\s\:]+)"), "")

| filter get_event_type ~= "SEC_LOGIN-5-WEBLOGIN_SUCCESS"
| call cisco_wlc_general_fields
| alter

	get_username = arraystring(regextract(_raw_log, "\[user\:\s+([^\]]+)"), ""),

	get_source_ip = arraystring(regextract(_raw_log, "\[Source\:\s+([^\]]+)"), "")

| call cisco_wlc_check_fields		
| alter

	xdm.source.user.username = get_username;



alter

	get_event_type = arraystring(regextract(_raw_log, "\%([^\s\:]+)"), "")

| filter get_event_type ~= "APMGR_TRACE_MESSAGE-4-WLC_APMGR_WARNING_MSG"
| call cisco_wlc_general_fields
| alter

	get_process_name = arraystring(regextract(_raw_log, "%\S+\s+\S+\s+\d+\s+\S+\s+([^\:]+)"), ""),

	get_mac = arraystring(regextract(_raw_log, "%\S+\s+\S+\s+\d+\s+\S+\s+[^\:]+\:\s+[^\s\,]+\,\s+(\S+)"), ""),

	get_access_point = arraystring(regextract(_raw_log, "Name\s+\:\s+(\S+)"), ""),

	get_change_type =  arraystring(regextract(_raw_log, "Name\s+\:\s+\S+\s+(\S+)\s+changed"), ""),

	get_change_b_value =  arraystring(regextract(_raw_log, "Name\s+\:\s+\S+\s+\S+\s+changed\s+from\s(\S*)"), ""),

	get_change_value =  arraystring(regextract(_raw_log, "Name\s+\:\s+\S+\s+\S+\s+changed\s+from\s\S*\s+to\s+(\S+)"), "")

| alter

	check_target_mac_formatted = if(get_mac ~= "[\da-fA-F]{4}\.[\da-fA-F]{4}\.[\da-fA-F]{4}", arraystring(regextract(get_mac, "[\da-fA-F]{2}"), ":"), get_mac ~= "\-|\:", get_mac, null)

| alter

	xdm.source.process.name = get_process_name,

	xdm.target.host.mac_addresses = arraycreate(check_target_mac_formatted),

	xdm.target.host.hostname = get_access_point,

	xdm.target.resource.type = get_change_type,

	xdm.target.resource_before.value = get_change_b_value,

	xdm.target.resource.value = get_change_value;



alter

	get_event_type = arraystring(regextract(_raw_log, "\%([^\s\:]+)"), "")

| filter get_event_type !~= "SESSION_MGR-5-FAIL|DOT1X-5-FAIL|CLIENT_ORCH_LOG-6-CLIENT_ADDED_TO_RUN_STATE|SEC_LOGIN-5-LOGIN_SUCCESS|DMI-5-AUTH_PASSED|SYS-6-LOGOUT|APMGR_TRACE_MESSAGE-3-AP_NTP_SYNC|EPM_PLUGIN-5-IGNORED_VLAN_VALIDATION|APMGR_AWIPS_SYSLOG-6-APMGR_AWIPS_MESSAGE|CLIENT_ORCH_LOG-5-ADD_TO_EXCLUSIONLIST_REASON|CLIENT_EXCLUSION_SERVER-5-ADD_TO_EXCLUSIONLIST_REASON_DYNAMIC|CAPWAPAC_SMGR_TRACE_MESSAGE-5-AP_JOIN_DISJOIN|MM_LOG-4-RETRIES_FAILED|SYS-5-CONFIG_P|FMANFP-6-IPACCESSLOGP|MAB-5-FAIL|APMGR_TRACE_MESSAGE-6-WLC_APMGR_INFO|MM_INFRA_LOG-3-MSG_PROC_FAILED|MM_NODE_LOG-5-KEEP_ALIVE|MM_INFRA_LOG-3-RECV_FAILED|WEBSERVER-5-LOGIN_PASSED|SEC_LOGIN-5-WEBLOGIN_SUCCESS|APMGR_TRACE_MESSAGE-4-WLC_APMGR_WARNING_MSG"
| call cisco_wlc_general_fields;


[MODEL: dataset=cisco_ise_raw, content_id="cisco-ise"]
// CISE_Passed_Authentications, CISE_Failed_Attempts, CISE_RADIUS_Diagnostics Parsing
alter 
    logType = arrayindex(regextract(_raw_log, "<\d+>\w+\s*\d+\s\d+:\d+:\d+\s[\S]+\s(\w+)\s"),0)
| filter logType in ("CISE_Passed_Authentications", "CISE_Failed_Attempts", "CISE_RADIUS_Diagnostics")
| alter 
    UserName1 = arrayindex(regextract(_raw_log, "User-Name=([a-zA-Z0-9\@\-\\\/\\\._]+)"),0),
    UserName2 = arrayindex(regextract(_raw_log, "UserName=([a-zA-Z0-9\@\-\\\/\\\._]+)"),0),
    framedIP_ipv4 = arrayindex(regextract(_raw_log, "Framed-IP-Address=(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}),"),0),
    framedIP_ipv6 = arrayindex(regextract(_raw_log, "Framed-IP-Address=([a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}),"),0),
    DeviceIPAddress_ipv4 = arrayindex(regextract(_raw_log, "Device IP Address=(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}),"),0),
    DeviceIPAddress_ipv6 = arrayindex(regextract(_raw_log, "Device IP Address=([a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}),"),0),
    get_description1 = arrayindex(regextract(_raw_log, "<\d+>\w+\s*\d+\s\d+:\d+:\d+\s[\S]+\s\w+\s\d+\s\d{4}-\d{2}-\d{2}\s\d+:\d+:\d+\.\d{3}\s[\S]+\s\d+\s\d+\s\w+\s([^,]+),"),0),
    get_description2 = arrayindex(regextract(_raw_log, "FailureReason=([^\,]+)"),0),
    get_description3 = arrayindex(regextract(_raw_log, "<\d+>\w+\s*\d+\s\d+:\d+:\d+\s[\S]+\s\w+\s\d+\s+(.*)"),0),
    get_description4 = arrayindex(regextract(_raw_log, "(?:DEBUG|INFO|WARN|ERROR|FATAL|CRITICAL|NOTICE)\:\s+(.*)"), 0),
    src_mac_address1 = arrayindex(regextract(_raw_log, "EndPointMACAddress=([^\,]+)"),0),
    src_mac_address2 = arrayindex(regextract(_raw_log, "Calling-Station-ID=([^\,]+)"),0),
    tar_mac_address = regextract(_raw_log, "Called-Station-ID=([^\,]+)"),
    logSeverity = lowercase(arrayindex(regextract(_raw_log, "\s+(DEBUG|INFO|WARN|ERROR|FATAL|CRITICAL|NOTICE)[\s:]+"),0))
| alter 
    xdm.event.type = logType,
    xdm.source.interface = arrayindex(regextract(_raw_log, "NAS-Port-Id=([^\,\;]+)"),0),
    xdm.event.log_level = if(logSeverity ~= "debug", XDM_CONST.LOG_LEVEL_DEBUG, logSeverity ~= "info", XDM_CONST.LOG_LEVEL_INFORMATIONAL, logSeverity ~= "warn", XDM_CONST.LOG_LEVEL_WARNING, logSeverity ~= "error", XDM_CONST.LOG_LEVEL_ERROR, logSeverity = "fatal", XDM_CONST.LOG_LEVEL_EMERGENCY, logSeverity ~= "critical", XDM_CONST.LOG_LEVEL_CRITICAL, logSeverity ~= "notice", XDM_CONST.LOG_LEVEL_NOTICE, logSeverity = null, null, XDM_CONST.LOG_LEVEL_NOTICE),
    xdm.observer.name = arrayindex(regextract(_raw_log, "<\d+>\w+\s*\d+\s\d+:\d+:\d+\s([\S]+)"),0),
    xdm.event.id = arrayindex(regextract(_raw_log, "<\d+>\w+\s*\d+\s\d+:\d+:\d+\s[\S]+\s\w+\s(\d+)"),0),
    xdm.event.description = if(logSeverity != null, coalesce(get_description1, get_description4), get_description3),
    xdm.alert.name = get_description2,
    xdm.target.ipv4 = arrayindex(regextract(_raw_log, "DestinationIPAddress=(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}),"),0),
    xdm.target.ipv6 = arrayindex(regextract(_raw_log, "DestinationIPAddress=([a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}),"),0),
    xdm.source.ipv4 = coalesce(framedIP_ipv4, DeviceIPAddress_ipv4),
    xdm.source.ipv6 = coalesce(framedIP_ipv6, DeviceIPAddress_ipv6 ),
    xdm.source.port = to_integer(arrayindex(regextract(_raw_log, "Device Port=(\d+),"),0)),
    xdm.source.host.hostname = arrayindex(regextract(_raw_log, "NetworkDeviceName=([^,]+)"),0),
    xdm.intermediate.ipv4 = arrayindex(regextract(_raw_log, "NAS-IP-Address=(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}),"),0),
    xdm.intermediate.ipv6 = arrayindex(regextract(_raw_log, "NAS-IP-Address=([a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}),"),0),
    xdm.target.port = to_integer(arrayindex(regextract(_raw_log, "DestinationPort=(\d+),"),0)),
    xdm.intermediate.port = to_integer(arrayindex(regextract(_raw_log, "NAS-Port=(\d+),"),0)),
    xdm.source.user.username = coalesce(UserName1, UserName2),
    xdm.network.application_protocol = arrayindex(regextract(_raw_log, "Protocol=([^,]+),"),0),
    xdm.event.outcome = if(get_description1 ~= "[Ss][Uu][Cc][Cc][Ee]", XDM_CONST.OUTCOME_SUCCESS, get_description1 ~= "[Ff][Aa][Ii][Ll]", XDM_CONST.OUTCOME_FAILED, null),
    xdm.network.rule = arrayindex(regextract(_raw_log, "IdentityPolicyMatchedRule=([^\,]+)"),0),
    xdm.source.host.device_category = to_string(regextract(_raw_log, "NetworkDeviceGroups=([^\,]+)")),
    xdm.auth.auth_method = arrayindex(regextract(_raw_log, "EapAuthentication=([^\,]+)"),0),
    xdm.source.user.identifier = arrayindex(regextract(_raw_log, "SSID=([^\,]+)"),0),
    xdm.network.session_id = arrayindex(regextract(_raw_log, "AcsSessionID=([^\,]+)"),0),
    xdm.source.host.mac_addresses = arraycreate(src_mac_address1, src_mac_address2),
    xdm.target.host.mac_addresses = tar_mac_address;

// CISE_Alarm Parsing
alter 
    logType = arrayindex(regextract(_raw_log, "<\d+>\w+\s*\d+\s\d+:\d+:\d+\s[\S]+\s(\w+)\s"),0)
| filter logType = "CISE_Alarm"
| alter
    logSeverity = lowercase(arrayindex(regextract(_raw_log, "\s+(DEBUG|INFO|WARN|ERROR|FATAL|CRITICAL|NOTICE)[\s:]+"),0)),
    observerName1 = arrayindex(regextract(_raw_log, "Server=([^;,]+)"),0),
    observerName2 = arrayindex(regextract(_raw_log, "<\d+>\w+\s*\d+\s\d+:\d+:\d+\s([\S]+)\s"),0),
    get_src_ip1 = arrayindex(regextract(_raw_log, "NAS IP Address=([^\,\;]+)"),0),
    get_src_ip2 = arrayindex(regextract(_raw_log, "NAD Address=([^\,\;]+)"),0),
    get_src_ip3 = arrayindex(regextract(_raw_log, "Network device IP=([^\,\;]+)"),0),
    get_src_ip4 = arrayindex(regextract(_raw_log, "Endpoint=([^\,\;]+)"),0),
    get_admin_user = arrayindex(regextract(_raw_log, "Admin=([^\,\;]+)"),0),
    get_target_resource_name1 = arrayindex(regextract(_raw_log, "Object Name=([^\,,\;]+)"),0),
    get_target_resource_name2 = arrayindex(regextract(_raw_log, "Repository Name: \'([^\']+)\'"),0),
    get_tar_ip = arrayindex(regextract(_raw_log, "Calling Station Id=([^\,\;]+)"),0),
    get_cause = arrayindex(regextract(_raw_log, "Cause=([^\=]+)"),0),
    src_hostname1 = arrayindex(regextract(_raw_log, "Network Device Name=([^\,\;]+)"),0),
    src_hostname2 = arrayindex(regextract(_raw_log, "From\s+(\S+)\s+To\s+\S+\;"),0),
    tar_hostname = arrayindex(regextract(_raw_log, "From\s+\S+\s+To\s+(\S+)\;"),0),
    get_description1 = arrayindex(regextract(_raw_log, "(?:Details|Error\sMessage|Failure\sReason)=([^,;]+)"),0),
    get_description2 = arrayindex(regextract(_raw_log, "<\d+>\w+\s*\d+\s\d+:\d+:\d+\s[\S]+\s\w+\s\d+\s\d{4}-\d{2}-\d{2}\s\d+:\d+:\d+\.\d{3}\s[\S]+\s\d+\s\d+\s\w+\s([^,]+),"),0),
    get_description3 = arrayindex(regextract(_raw_log, "<\d+>\w+\s*\d+\s\d+:\d+:\d+\s[\S]+\s\w+\s\d+\s+(.*)"),0),
    get_description4 = arrayindex(regextract(_raw_log, "(?:DEBUG|INFO|WARN|ERROR|FATAL|CRITICAL|NOTICE)\:\s+(.*)"), 0)
| alter
    check_src_ipv4_1 = if(get_src_ip1 ~= "\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}", get_src_ip1, null),
    check_src_ipv6_1 = if(get_src_ip1 ~= ":", get_src_ip1, null),
    check_src_mac_1 = if(get_src_ip1 ~= "\S{2}[:-]\S{2}[:-]\S{2}[:-]\S{2}[:-]\S{2}[:-]\S{2}|[a-fA-F\d]{12}", get_src_ip1, null),

    check_src_ipv4_2 = if(get_src_ip2 ~= "\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}", get_src_ip2, null),
    check_src_ipv6_2 = if(get_src_ip2 ~= ":", get_src_ip2, null),
    check_src_mac_2 = if(get_src_ip2 ~= "\S{2}[:-]\S{2}[:-]\S{2}[:-]\S{2}[:-]\S{2}[:-]\S{2}|[a-fA-F\d]{12}", get_src_ip2, null),

    check_src_ipv4_3 = if(get_src_ip3 ~= "\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}", get_src_ip3, null),
    check_src_ipv6_3 = if(get_src_ip3 ~= ":", get_src_ip3, null),
    check_src_mac_3 = if(get_src_ip3 ~= "\S{2}[:-]\S{2}[:-]\S{2}[:-]\S{2}[:-]\S{2}[:-]\S{2}|[a-fA-F\d]{12}", get_src_ip3, null),

    check_src_ipv4_4 = if(get_src_ip4 !~= ":", get_src_ip4, null),
    check_src_ipv6_4 = if(get_src_ip4 ~= ":", get_src_ip4, null),

    check_tar_ipv4 = if(get_tar_ip ~= "\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}", get_tar_ip, null),
    check_tar_ipv6 = if(get_tar_ip ~= ":", get_tar_ip, null),
    check_tar_mac = if(get_tar_ip ~= "\S{2}[:-]\S{2}[:-]\S{2}[:-]\S{2}[:-]\S{2}[:-]\S{2}|[a-fA-F\d]{12}", get_tar_ip, null)
| alter
    get_src_ipv6 = coalesce(check_src_ipv6_1, check_src_ipv6_2, check_src_ipv6_3)
| alter 
    xdm.event.description = if(logSeverity != null, coalesce(get_description2,get_description4), get_description3),
    xdm.event.type = logType,
    xdm.event.log_level = if(logSeverity ~= "debug", XDM_CONST.LOG_LEVEL_DEBUG, logSeverity ~= "info", XDM_CONST.LOG_LEVEL_INFORMATIONAL, logSeverity ~= "warn", XDM_CONST.LOG_LEVEL_WARNING, logSeverity ~= "error", XDM_CONST.LOG_LEVEL_ERROR, logSeverity = "fatal", XDM_CONST.LOG_LEVEL_EMERGENCY, logSeverity ~= "critical", XDM_CONST.LOG_LEVEL_CRITICAL, logSeverity ~= "notice", XDM_CONST.LOG_LEVEL_NOTICE, logSeverity = null, null, XDM_CONST.LOG_LEVEL_NOTICE),
    xdm.alert.name = rtrim(arrayindex(regextract(_raw_log, "<\d+>\w+\s*\d+\s\d+:\d+:\d+\s[\S]+\s\w+\s\w+:\s([^:]+)"),0)),
    xdm.observer.name = coalesce(observerName1, observerName2),
    xdm.alert.description = coalesce(rtrim(get_cause, ","), get_description1),
    xdm.source.ipv4 = coalesce(check_src_ipv4_1, check_src_ipv4_2, check_src_ipv4_3),
    xdm.source.ipv6 = if(get_src_ipv6 !~= "\S{2}:\S{2}:\S{2}:\S{2}:\S{2}:\S{2}", get_src_ipv6, null),
    xdm.source.host.ipv4_addresses = arraycreate(check_src_ipv4_4),
    xdm.source.host.ipv6_addresses = if(check_src_ipv6_4 !~= "\S{2}:\S{2}:\S{2}:\S{2}:\S{2}:\S{2}", arraycreate(check_src_ipv6_4), null),
    xdm.source.host.mac_addresses = arraycreate(coalesce(check_src_mac_1, check_src_mac_2, check_src_mac_3)),
    xdm.target.ipv4 = check_tar_ipv4,
    xdm.target.ipv6 = if(check_tar_ipv6 !~= "\S{2}:\S{2}:\S{2}:\S{2}:\S{2}:\S{2}", check_tar_ipv6, null),
    xdm.target.host.mac_addresses = arraycreate(check_tar_mac), 
    xdm.source.host.device_id = arrayindex(regextract(_raw_log, "NAS Identifier=([^\,\;]+)"),0),
    xdm.target.resource.type = arrayindex(regextract(_raw_log, "Object Type=([^\,,\;]+)"),0),
    xdm.target.resource.name = coalesce(get_target_resource_name1, get_target_resource_name2),
    xdm.source.user.username = get_admin_user,
    xdm.auth.privilege_level = if(get_admin_user != null, XDM_CONST.PRIVILEGE_LEVEL_ADMIN, null),
    xdm.target.file.filename = arrayindex(regextract(_raw_log, "back up file name: \'([^\']+)\'"),0),
    xdm.source.host.hostname = coalesce(src_hostname1, src_hostname2),
    xdm.target.host.hostname = tar_hostname;

// CISE_RADIUS_Accounting Parsing
alter     
    logType = arrayindex(regextract(_raw_log, "<\d+>\w+\s*\d+\s\d+:\d+:\d+\s[\S]+\s(\w+)\s"),0)
| filter logType = "CISE_RADIUS_Accounting"
| alter 
    logSeverity = lowercase(arrayindex(regextract(_raw_log, "\s+(DEBUG|INFO|WARN|ERROR|FATAL|CRITICAL|NOTICE)[\s:]+"),0)),
    UserName1 = arrayindex(regextract(_raw_log, "User-Name=([a-zA-Z0-9\@\-\\\/\\\._]+)"),0),
    UserName2 = arrayindex(regextract(_raw_log, "UserName=([a-zA-Z0-9\@\-\\\/\\\._]+)"),0),
    framedIP_ipv4 = arrayindex(regextract(_raw_log, "Framed-IP-Address=(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}),"),0),
    framedIP_ipv6 = arrayindex(regextract(_raw_log, "Framed-IP-Address=([a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}),"),0),
    DeviceIPAddress_ipv4 = arrayindex(regextract(_raw_log, "Device IP Address=(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}),"),0),
    DeviceIPAddress_ipv6 = arrayindex(regextract(_raw_log, "Device IP Address=([a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}),"),0),
    src_mac_address = regextract(_raw_log, "Calling-Station-ID=([^\,]+)"),
    tar_mac_address = regextract(_raw_log, "Called-Station-ID=([^\,]+)"),
    src_port = arrayindex(regextract(_raw_log, "(?:NAS-Port|Device Port)=([^\,\;]+)"),0),
    get_description1 = arrayindex(regextract(_raw_log, "<\d+>\w+\s*\d+\s\d+:\d+:\d+\s[\S]+\s\w+\s\d+\s\d{4}-\d{2}-\d{2}\s\d+:\d+:\d+\.\d{3}\s[\S]+\s\d+\s\d+\s\w+\s([^,]+),"),0),
    get_description2 = arrayindex(regextract(_raw_log, "<\d+>\w+\s*\d+\s\d+:\d+:\d+\s[\S]+\s\w+\s\d+\s+(.*)"),0),
    get_description3 = arrayindex(regextract(_raw_log, "(?:DEBUG|INFO|WARN|ERROR|FATAL|CRITICAL|NOTICE)\:\s+(.*)"), 0)
| alter 
    xdm.observer.name = arrayindex(regextract(_raw_log, "<\d+>\w+\s*\d+\s\d+:\d+:\d+\s([\S]+)"),0),
    xdm.event.type = logType,
    xdm.event.log_level = if(logSeverity ~= "debug", XDM_CONST.LOG_LEVEL_DEBUG, logSeverity ~= "info", XDM_CONST.LOG_LEVEL_INFORMATIONAL, logSeverity ~= "warn", XDM_CONST.LOG_LEVEL_WARNING, logSeverity ~= "error", XDM_CONST.LOG_LEVEL_ERROR, logSeverity = "fatal", XDM_CONST.LOG_LEVEL_EMERGENCY, logSeverity ~= "critical", XDM_CONST.LOG_LEVEL_CRITICAL, logSeverity ~= "notice", XDM_CONST.LOG_LEVEL_NOTICE, logSeverity = null, null, XDM_CONST.LOG_LEVEL_NOTICE),
    xdm.event.id = arrayindex(regextract(_raw_log, "<\d+>\w+\s*\d+\s\d+:\d+:\d+\s[\S]+\s\w+\s(\d+)"),0),
    xdm.event.description = if(logSeverity != null, coalesce(get_description1, get_description3), get_description2),
    xdm.source.ipv4 = coalesce(framedIP_ipv4, DeviceIPAddress_ipv4),
    xdm.source.ipv6 = coalesce(framedIP_ipv6, DeviceIPAddress_ipv6 ),
    xdm.source.host.hostname = arrayindex(regextract(_raw_log, "NetworkDeviceName=([^,]+),"),0),
    xdm.intermediate.ipv4 = arrayindex(regextract(_raw_log, "NAS-IP-Address=(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}),"),0),
    xdm.intermediate.ipv6 = arrayindex(regextract(_raw_log, "NAS-IP-Address=([a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}),"),0),
    xdm.intermediate.port = to_integer(arrayindex(regextract(_raw_log, "NAS-Port=(\d+),"),0)),
    xdm.target.host.hostname = arrayindex(regextract(_raw_log, "Class=([^,]+),"),0),
    xdm.source.user.username = coalesce(UserName1, UserName2),
    xdm.source.interface = arrayindex(regextract(_raw_log, "NAS-Port-Id=([^\,\;]+)"),0),
    xdm.source.host.mac_addresses = src_mac_address,
    xdm.target.host.mac_addresses = tar_mac_address,
    xdm.source.port = to_integer(src_port),
    xdm.event.operation_sub_type = arrayindex(regextract(_raw_log, "Acct-Status-Type=([^\,\;]+)"),0),
    xdm.network.session_id = arrayindex(regextract(_raw_log, "Acct-Session-Id=([^\,\;]+)"),0),
    xdm.source.sent_packets = to_integer(arrayindex(regextract(_raw_log, "Acct-Output-Packets=([^\,\;]+)"),0)),
    xdm.target.sent_packets = to_integer(arrayindex(regextract(_raw_log, "Acct-Input-Packets=([^\,\;]+)"),0));
        

// ### Everything NOT - CISE_Passed_Authentications, CISE_Failed_Attempts, CISE_RADIUS_Diagnostics, CISE_Alarm, CISE_RADIUS_Accounting
alter         
    logType = arrayindex(regextract(_raw_log, "<\d+>\w+\s*\d+\s\d+:\d+:\d+\s[\S]+\s(\w+)\s"),0)
| filter logType not in ("CISE_Passed_Authentications", "CISE_Failed_Attempts", "CISE_RADIUS_Diagnostics", "CISE_Alarm", "CISE_RADIUS_Accounting")
| alter
    logSeverity = lowercase(arrayindex(regextract(_raw_log, "\s+(DEBUG|INFO|WARN|ERROR|FATAL|CRITICAL|NOTICE)[\s:]+"),0)),
    get_description1 = arrayindex(regextract(_raw_log, "INFO\s+null:(.*)"),0),
    get_description2 = arrayindex(regextract(_raw_log, "(?:WARN\s+|DEBUG\s+|ERROR\s+|FATAL\s+|CRITICAL\s+|NOTICE\s+|INFO\s+)(.*)"),0),
    get_description3 = arrayindex(regextract(_raw_log, "<\d+>\w+\s*\d+\s\d+:\d+:\d+\s[\S]+\s\w+\s\d+\s+(.*)"),0),
    get_description4 = arrayindex(regextract(_raw_log, "(?:DEBUG|INFO|WARN|ERROR|FATAL|CRITICAL|NOTICE)\:\s+(.*)"), 0),
    get_message = arrayindex(regextract(_raw_log, "MESSAGE=([^\,]+)"),0),
    get_ProfilerErrorMessage = arrayindex(regextract(_raw_log, "ProfilerErrorMessage=([^\,]+)"),0),
    get_FailureReason = arrayindex(regextract(_raw_log, "FailureReason=([^,\\;]+)"),0),
    get_src_ip = arrayindex(regextract(_raw_log, "(?:EndpointNADAddress|EndpointIPAddress)=([^\,]+)"),0),
    get_ProfilerServer = arrayindex(regextract(_raw_log, "ProfilerServer=([^\,]+)"),0),
    get_mac_address = arrayindex(regextract(_raw_log, "(?:EndpointMacAddress|MacAddress)=([^,;\\]+)"),0),
    get_os = arrayindex(regextract(_raw_log, "(?:OperatingSystem|AD-Operating-System)=([^,;\\]+)"),0),
    get_tar_ip = arrayindex(regextract(_raw_log, "(?:PeerAddress|DestinationIPAddress)=([^,;\\]+)"),0),
    get_rules_1 = arrayindex(regextract(_raw_log, "posturePassCondition=((?:\S+\\,\s)+[^\\,]+)"),0),
    get_rules_2 = arrayindex(regextract(_raw_log, "IdentitySelectionMatchedRule=([^,\\;]+)"),0),
    get_UserType = arrayindex(regextract(_raw_log, "UserType=([^,\\;]+)"),0),
    get_sys_mgmt = arrayindex(regextract(_raw_log, "System-Management:\s+([^\,]+)"),0)
| alter
    check_src_ipv4 = if(get_src_ip !~= ":", get_src_ip, null),
    check_src_ipv6 = if(get_src_ip ~= ":", get_src_ip, null),

    check_tar_ipv4 = if(get_tar_ip ~= "\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}", arrayindex(regextract(get_tar_ip, "\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}"), 0), null),
    check_tar_ipv6 = if(get_tar_ip ~= ":", arrayindex(regextract(get_tar_ip, "[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}"), 0), null),
    check_tar_mac = if(get_tar_ip ~= "\d{2}[:-]\d{2}[:-]\d{2}[:-]\d{2}[:-]\d{2}[:-]\d{2}|\d{12}", arrayindex(regextract(get_tar_ip, "\d{2}[:-]\d{2}[:-]\d{2}[:-]\d{2}[:-]\d{2}[:-]\d{2}|\d{12}"), 0), null)
| alter
    xdm.observer.name = arrayindex(regextract(_raw_log, "<\d+>\w+\s*\d+\s\d+:\d+:\d+\s([\S]+)"),0),
    xdm.observer.type = get_ProfilerServer,
    xdm.event.log_level = if(logSeverity ~= "debug", XDM_CONST.LOG_LEVEL_DEBUG, logSeverity ~= "info", XDM_CONST.LOG_LEVEL_INFORMATIONAL, logSeverity ~= "warn", XDM_CONST.LOG_LEVEL_WARNING, logSeverity ~= "error", XDM_CONST.LOG_LEVEL_ERROR, logSeverity = "fatal", XDM_CONST.LOG_LEVEL_EMERGENCY, logSeverity ~= "critical", XDM_CONST.LOG_LEVEL_CRITICAL, logSeverity ~= "notice", XDM_CONST.LOG_LEVEL_NOTICE, logSeverity = null, null, XDM_CONST.LOG_LEVEL_NOTICE),
    xdm.source.host.device_category = to_string(regextract(_raw_log, "NetworkDeviceGroups=([^\,\\]+)")),
    xdm.event.description = if(logSeverity != null, coalesce(get_description1, get_description2, get_description4), get_description3),
    xdm.alert.description = coalesce(get_message, get_ProfilerErrorMessage, get_FailureReason, get_sys_mgmt),
    xdm.source.ipv4 = check_src_ipv4,
    xdm.source.ipv6 = check_src_ipv6,
    xdm.source.host.os = get_os,
    xdm.network.rule = coalesce(get_rules_1, get_rules_2),
    xdm.auth.auth_method = arrayindex(regextract(_raw_log, "AuthenticationMethod=([^\\,]+)"),0),
    xdm.target.port = to_integer(arrayindex(regextract(_raw_log, "DestinationPort=([^\\,]+)"),0)),
    xdm.target.ipv4 = check_tar_ipv4,
    xdm.target.ipv6 = if(check_tar_ipv6 !~= "\S{2}:\S{2}:\S{2}:\S{2}:\S{2}:\S{2}", check_tar_ipv6, null),
    xdm.target.host.mac_addresses = arraycreate(check_tar_mac, get_mac_address),
    xdm.source.user.domain = arrayindex(regextract(_raw_log, "CN=([^\\,]+)"), 0),
    xdm.network.session_id = arrayindex(regextract(_raw_log, "UniqueConnectionIdentifier[\s+=]+(\S+)\,"),0),
    xdm.event.outcome_reason = arrayindex(regextract(_raw_log, "ShutdownReason[\s+=]+([^,]+)"),0),
    xdm.intermediate.port = to_integer(arrayindex(regextract(_raw_log, "NAS-Port=(\d+)"),0)),
    xdm.source.host.hostname = arrayindex(regextract(_raw_log, "NetworkDeviceName=([^,]+),"),0),
    xdm.source.user.ou = arrayindex(regextract(_raw_log, "User-Fetch-Organizational-Unit=([^,\\;]+)"),0),
    xdm.source.user.username = arrayindex(regextract(_raw_log, "OriginalUserName=([^,\\;]+)"),0),
    xdm.source.user.user_type = if(get_UserType = "User", XDM_CONST.USER_TYPE_REGULAR, get_UserType = "Host", XDM_CONST.USER_TYPE_MACHINE_ACCOUNT, get_UserType = null, null, to_string(get_UserType)),
    xdm.event.operation_sub_type = arrayindex(regextract(_raw_log, "OperationMessageText=([^,\\;]+)"),0),
    xdm.target.url = arrayindex(regextract(_raw_log, "FeedUrl=([^,]+)"),0);


[MODEL: dataset="cisco_meraki_raw", content_id="cisco-meraki"]

// URLs Events (HTTP GET requests)
alter event_type = arrayindex(regextract(_raw_log, "\d{10}\.\d+\s+\S+\s+(\S+)"), 0)
| filter event_type = "urls"
| alter 
    appliance_name = arrayindex(regextract(_raw_log, "\d{10}\.\d+\s+(\S+)"), 0),
    direction = arrayindex(regextract(_raw_log, "\S+\s+(0|1)\s+\d{10}\.\d+"), 0),
    src_ip = arrayindex(regextract(_raw_log, "src=((?:\d{1,3}\.){3}\d{1,3})"), 0),
    src_port = to_integer(arrayindex(regextract(_raw_log, "src=[^\:]+:(\d{1,5})"), 0)),
    src_mac_address = arrayindex(regextract(_raw_log, "mac=((?:[\da-fA-F]{2}:){5}\w+)"), 0),
    dst_ip = arrayindex(regextract(_raw_log, "dst=((?:\d{1,3}\.){3}\d{1,3})"), 0),
    dst_port = to_integer(arrayindex(regextract(_raw_log, "dst=[^\:]+:(\d{1,5})"), 0)), 
    http_method = uppercase(arrayindex(regextract(_raw_log, "request:\s*(\w+)"), 0)), 
    target_url = arrayindex(regextract(_raw_log, "request:\s*\w+\s+(\S+)"), 0),
    user_agent = trim(arrayindex(regextract(_raw_log, "agent=\'?([^\']+)"), 0))
| alter 
    xdm.event.type = "NETWORK",
    xdm.event.original_event_type = event_type,
    xdm.event.description = direction,
    xdm.observer.name = appliance_name,
    xdm.network.application_protocol = "HTTP",
    xdm.network.http.method = if(http_method = null, null, http_method = "ACL", XDM_CONST.HTTP_METHOD_ACL, http_method = "BASELINE_CONTROL", XDM_CONST.HTTP_METHOD_BASELINE_CONTROL, http_method = "BIND", XDM_CONST.HTTP_METHOD_BIND, http_method = "CHECKIN", XDM_CONST.HTTP_METHOD_CHECKIN, http_method = "CHECKOUT", XDM_CONST.HTTP_METHOD_CHECKOUT, http_method = "CONNECT", XDM_CONST.HTTP_METHOD_CONNECT, http_method = "COPY", XDM_CONST.HTTP_METHOD_COPY, http_method = "DELETE", XDM_CONST.HTTP_METHOD_DELETE, http_method = "GET", XDM_CONST.HTTP_METHOD_GET, http_method = "HEAD", XDM_CONST.HTTP_METHOD_HEAD, http_method = "LABEL", XDM_CONST.HTTP_METHOD_LABEL, http_method = "LINK", XDM_CONST.HTTP_METHOD_LINK, http_method = "LOCK", XDM_CONST.HTTP_METHOD_LOCK, http_method = "MERGE", XDM_CONST.HTTP_METHOD_MERGE, http_method = "MKACTIVITY", XDM_CONST.HTTP_METHOD_MKACTIVITY, http_method = "MKCALENDAR", XDM_CONST.HTTP_METHOD_MKCALENDAR, http_method = "MKCOL", XDM_CONST.HTTP_METHOD_MKCOL, http_method = "MKREDIRECTREF", XDM_CONST.HTTP_METHOD_MKREDIRECTREF, http_method = "MKWORKSPACE", XDM_CONST.HTTP_METHOD_MKWORKSPACE, http_method = "MOVE", XDM_CONST.HTTP_METHOD_MOVE, http_method = "OPTIONS", XDM_CONST.HTTP_METHOD_OPTIONS, http_method = "ORDERPATCH", XDM_CONST.HTTP_METHOD_ORDERPATCH, http_method = "PATCH", XDM_CONST.HTTP_METHOD_PATCH, http_method = "POST", XDM_CONST.HTTP_METHOD_POST, http_method = "PRI", XDM_CONST.HTTP_METHOD_PRI, http_method = "PROPFIND", XDM_CONST.HTTP_METHOD_PROPFIND, http_method = "PROPPATCH", XDM_CONST.HTTP_METHOD_PROPPATCH, http_method = "PUT", XDM_CONST.HTTP_METHOD_PUT, http_method = "REBIND", XDM_CONST.HTTP_METHOD_REBIND, http_method = "REPORT", XDM_CONST.HTTP_METHOD_REPORT, http_method = "SEARCH", XDM_CONST.HTTP_METHOD_SEARCH, http_method = "TRACE", XDM_CONST.HTTP_METHOD_TRACE, http_method = "UNBIND", XDM_CONST.HTTP_METHOD_UNBIND, http_method = "UNCHECKOUT", XDM_CONST.HTTP_METHOD_UNCHECKOUT, http_method = "UNLINK", XDM_CONST.HTTP_METHOD_UNLINK, http_method = "UNLOCK", XDM_CONST.HTTP_METHOD_UNLOCK, http_method = "UPDATE", XDM_CONST.HTTP_METHOD_UPDATE, http_method = "UPDATEREDIRECTREF", XDM_CONST.HTTP_METHOD_UPDATEREDIRECTREF, http_method = "VERSION_CONTROL", XDM_CONST.HTTP_METHOD_VERSION_CONTROL,http_method),
    xdm.network.http.url = target_url, 
    xdm.source.port = src_port, 
    xdm.source.ipv4 = src_ip, 
    xdm.source.host.ipv4_addresses = arraycreate(src_ip), 
    xdm.source.host.mac_addresses = if(src_mac_address != null, arraycreate(src_mac_address)),
    xdm.source.user_agent = user_agent, 
    xdm.target.ipv4 = dst_ip,
    xdm.target.port = dst_port, 
    xdm.target.host.ipv4_addresses = arraycreate(dst_ip);
    
/* Flows. for inbound rules, 1=deny and 0=allow. */
alter event_type = arrayindex(regextract(_raw_log, "\d{10}\.\d+\s+\S+\s+(\S+)"), 0)
| filter event_type in ("flows", "firewall", "cellular_firewall", "vpn_firewall", "bridge_anyconnect_client_vpn_firewall")
| alter 
    appliance_name = arrayindex(regextract(_raw_log, "\d{10}\.\d+\s+(\S+)"), 0),
    direction = arrayindex(regextract(_raw_log, "\S+\s+(0|1)\s+\d{10}\.\d+"), 0),
    src_ip = arrayindex(regextract(_raw_log, "src=((?:\d{1,3}\.){3}\d{1,3})"), 0),
    src_port = to_integer(arrayindex(regextract(_raw_log, "sport=(\d{1,5})"), 0)),
    src_mac_address = arrayindex(regextract(_raw_log, "mac=((?:[\da-fA-F]{2}:){5}\w+)"), 0),
    dst_ip = arrayindex(regextract(_raw_log, "dst=((?:\d{1,3}\.){3}\d{1,3})"), 0),
    dst_port = to_integer(arrayindex(regextract(_raw_log, "dport=(\d{1,5})"), 0)),
    protocol = uppercase(arrayindex(regextract(_raw_log, "protocol=(\w+)"), 0)),
    fw_rule = arrayindex(regextract(_raw_log, "pattern:\s*(.+)"), 0),
    fw_rule_outcome = arrayindex(regextract(_raw_log, "pattern:\s*(\w+)"), 0),
    icmp_type = to_integer(arrayindex(regextract(_raw_log, "type=(\d+)"), 0))
| alter fw_rule_outcome = if(fw_rule_outcome = "0", "allow", fw_rule_outcome = "1", "deny", fw_rule_outcome)
| alter 
    xdm.event.type = "NETWORK",
    xdm.event.original_event_type = event_type,
    xdm.event.description = direction,
    xdm.event.outcome = if(fw_rule_outcome = "allow", XDM_CONST.OUTCOME_SUCCESS, fw_rule_outcome = "deny", XDM_CONST.OUTCOME_FAILED),
    xdm.observer.name = appliance_name,
    xdm.network.icmp.type = to_integer(icmp_type), 
    xdm.network.ip_protocol = if(protocol="HOPOPT",XDM_CONST.IP_PROTOCOL_HOPOPT, protocol="ICMP",XDM_CONST.IP_PROTOCOL_ICMP, protocol="IGMP",XDM_CONST.IP_PROTOCOL_IGMP, protocol="GGP",XDM_CONST.IP_PROTOCOL_GGP, protocol="IP",XDM_CONST.IP_PROTOCOL_IP, protocol="ST",XDM_CONST.IP_PROTOCOL_ST, protocol ~= "TCP",XDM_CONST.IP_PROTOCOL_TCP, protocol="CBT",XDM_CONST.IP_PROTOCOL_CBT, protocol="EGP",XDM_CONST.IP_PROTOCOL_EGP, protocol="IGP",XDM_CONST.IP_PROTOCOL_IGP, protocol="BBN_RCC_MON",XDM_CONST.IP_PROTOCOL_BBN_RCC_MON, protocol="NVP_II",XDM_CONST.IP_PROTOCOL_NVP_II, protocol="PUP",XDM_CONST.IP_PROTOCOL_PUP, protocol="ARGUS",XDM_CONST.IP_PROTOCOL_ARGUS, protocol="EMCON",XDM_CONST.IP_PROTOCOL_EMCON, protocol="XNET",XDM_CONST.IP_PROTOCOL_XNET, protocol="CHAOS",XDM_CONST.IP_PROTOCOL_CHAOS, protocol="UDP",XDM_CONST.IP_PROTOCOL_UDP, protocol="MUX",XDM_CONST.IP_PROTOCOL_MUX, protocol="DCN_MEAS",XDM_CONST.IP_PROTOCOL_DCN_MEAS, protocol="HMP",XDM_CONST.IP_PROTOCOL_HMP, protocol="PRM",XDM_CONST.IP_PROTOCOL_PRM, protocol="XNS_IDP",XDM_CONST.IP_PROTOCOL_XNS_IDP, protocol="TRUNK_1",XDM_CONST.IP_PROTOCOL_TRUNK_1, protocol="TRUNK_2",XDM_CONST.IP_PROTOCOL_TRUNK_2, protocol="LEAF_1",XDM_CONST.IP_PROTOCOL_LEAF_1, protocol="LEAF_2",XDM_CONST.IP_PROTOCOL_LEAF_2, protocol="RDP",XDM_CONST.IP_PROTOCOL_RDP, protocol="IRTP",XDM_CONST.IP_PROTOCOL_IRTP, protocol="ISO_TP4",XDM_CONST.IP_PROTOCOL_ISO_TP4, protocol="NETBLT",XDM_CONST.IP_PROTOCOL_NETBLT, protocol="MFE_NSP",XDM_CONST.IP_PROTOCOL_MFE_NSP, protocol="MERIT_INP",XDM_CONST.IP_PROTOCOL_MERIT_INP, protocol="DCCP",XDM_CONST.IP_PROTOCOL_DCCP, protocol="3PC",XDM_CONST.IP_PROTOCOL_3PC, protocol="IDPR",XDM_CONST.IP_PROTOCOL_IDPR, protocol="XTP",XDM_CONST.IP_PROTOCOL_XTP, protocol="DDP",XDM_CONST.IP_PROTOCOL_DDP, protocol="IDPR_CMTP",XDM_CONST.IP_PROTOCOL_IDPR_CMTP, protocol="TP",XDM_CONST.IP_PROTOCOL_TP, protocol="IL",XDM_CONST.IP_PROTOCOL_IL, protocol="IPV6",XDM_CONST.IP_PROTOCOL_IPV6, protocol="SDRP",XDM_CONST.IP_PROTOCOL_SDRP, protocol="IPV6_ROUTE",XDM_CONST.IP_PROTOCOL_IPV6_ROUTE, protocol="IPV6_FRAG",XDM_CONST.IP_PROTOCOL_IPV6_FRAG, protocol="IDRP",XDM_CONST.IP_PROTOCOL_IDRP, protocol="RSVP",XDM_CONST.IP_PROTOCOL_RSVP, protocol="GRE",XDM_CONST.IP_PROTOCOL_GRE, protocol="DSR",XDM_CONST.IP_PROTOCOL_DSR, protocol="BNA",XDM_CONST.IP_PROTOCOL_BNA, protocol="ESP",XDM_CONST.IP_PROTOCOL_ESP, protocol="AH",XDM_CONST.IP_PROTOCOL_AH, protocol="I_NLSP",XDM_CONST.IP_PROTOCOL_I_NLSP, protocol="SWIPE",XDM_CONST.IP_PROTOCOL_SWIPE, protocol="NARP",XDM_CONST.IP_PROTOCOL_NARP, protocol="MOBILE",XDM_CONST.IP_PROTOCOL_MOBILE, protocol="TLSP",XDM_CONST.IP_PROTOCOL_TLSP, protocol="SKIP",XDM_CONST.IP_PROTOCOL_SKIP, protocol="IPV6_ICMP",XDM_CONST.IP_PROTOCOL_IPV6_ICMP, protocol="IPV6_NONXT",XDM_CONST.IP_PROTOCOL_IPV6_NONXT, protocol="IPV6_OPTS",XDM_CONST.IP_PROTOCOL_IPV6_OPTS, protocol="CFTP",XDM_CONST.IP_PROTOCOL_CFTP, protocol="SAT_EXPAK",XDM_CONST.IP_PROTOCOL_SAT_EXPAK, protocol="KRYPTOLAN",XDM_CONST.IP_PROTOCOL_KRYPTOLAN, protocol="RVD",XDM_CONST.IP_PROTOCOL_RVD, protocol="IPPC",XDM_CONST.IP_PROTOCOL_IPPC, protocol="SAT_MON",XDM_CONST.IP_PROTOCOL_SAT_MON, protocol="VISA",XDM_CONST.IP_PROTOCOL_VISA, protocol="IPCV",XDM_CONST.IP_PROTOCOL_IPCV, protocol="CPNX",XDM_CONST.IP_PROTOCOL_CPNX, protocol="CPHB",XDM_CONST.IP_PROTOCOL_CPHB, protocol="WSN",XDM_CONST.IP_PROTOCOL_WSN, protocol="PVP",XDM_CONST.IP_PROTOCOL_PVP, protocol="BR_SAT_MON",XDM_CONST.IP_PROTOCOL_BR_SAT_MON, protocol="SUN_ND",XDM_CONST.IP_PROTOCOL_SUN_ND, protocol="WB_MON",XDM_CONST.IP_PROTOCOL_WB_MON, protocol="WB_EXPAK",XDM_CONST.IP_PROTOCOL_WB_EXPAK, protocol="ISO_IP",XDM_CONST.IP_PROTOCOL_ISO_IP, protocol="VMTP",XDM_CONST.IP_PROTOCOL_VMTP, protocol="SECURE_VMTP",XDM_CONST.IP_PROTOCOL_SECURE_VMTP, protocol="VINES",XDM_CONST.IP_PROTOCOL_VINES, protocol="TTP",XDM_CONST.IP_PROTOCOL_TTP, protocol="NSFNET_IGP",XDM_CONST.IP_PROTOCOL_NSFNET_IGP, protocol="DGP",XDM_CONST.IP_PROTOCOL_DGP, protocol="TCF",XDM_CONST.IP_PROTOCOL_TCF, protocol="EIGRP",XDM_CONST.IP_PROTOCOL_EIGRP, protocol="OSPFIGP",XDM_CONST.IP_PROTOCOL_OSPFIGP, protocol="SPRITE_RPC",XDM_CONST.IP_PROTOCOL_SPRITE_RPC, protocol="LARP",XDM_CONST.IP_PROTOCOL_LARP, protocol="MTP",XDM_CONST.IP_PROTOCOL_MTP, protocol="AX25",XDM_CONST.IP_PROTOCOL_AX25, protocol="IPIP",XDM_CONST.IP_PROTOCOL_IPIP, protocol="MICP",XDM_CONST.IP_PROTOCOL_MICP, protocol="SCC_SP",XDM_CONST.IP_PROTOCOL_SCC_SP, protocol="ETHERIP",XDM_CONST.IP_PROTOCOL_ETHERIP, protocol="ENCAP",XDM_CONST.IP_PROTOCOL_ENCAP, protocol="GMTP",XDM_CONST.IP_PROTOCOL_GMTP, protocol="IFMP",XDM_CONST.IP_PROTOCOL_IFMP, protocol="PNNI",XDM_CONST.IP_PROTOCOL_PNNI, protocol="PIM",XDM_CONST.IP_PROTOCOL_PIM, protocol="ARIS",XDM_CONST.IP_PROTOCOL_ARIS, protocol="SCPS",XDM_CONST.IP_PROTOCOL_SCPS, protocol="QNX",XDM_CONST.IP_PROTOCOL_QNX, protocol="AN",XDM_CONST.IP_PROTOCOL_AN, protocol="IPCOMP",XDM_CONST.IP_PROTOCOL_IPCOMP, protocol="SNP",XDM_CONST.IP_PROTOCOL_SNP, protocol="COMPAQ_PEER",XDM_CONST.IP_PROTOCOL_COMPAQ_PEER, protocol="IPX_IN_IP",XDM_CONST.IP_PROTOCOL_IPX_IN_IP, protocol="VRRP",XDM_CONST.IP_PROTOCOL_VRRP, protocol="PGM",XDM_CONST.IP_PROTOCOL_PGM, protocol="L2TP",XDM_CONST.IP_PROTOCOL_L2TP, protocol="DDX",XDM_CONST.IP_PROTOCOL_DDX, protocol="IATP",XDM_CONST.IP_PROTOCOL_IATP, protocol="STP",XDM_CONST.IP_PROTOCOL_STP, protocol="SRP",XDM_CONST.IP_PROTOCOL_SRP, protocol="UTI",XDM_CONST.IP_PROTOCOL_UTI, protocol="SMP",XDM_CONST.IP_PROTOCOL_SMP, protocol="SM",XDM_CONST.IP_PROTOCOL_SM, protocol="PTP",XDM_CONST.IP_PROTOCOL_PTP, protocol="ISIS",XDM_CONST.IP_PROTOCOL_ISIS, protocol="FIRE",XDM_CONST.IP_PROTOCOL_FIRE, protocol="CRTP",XDM_CONST.IP_PROTOCOL_CRTP, protocol="CRUDP",XDM_CONST.IP_PROTOCOL_CRUDP, protocol="SSCOPMCE",XDM_CONST.IP_PROTOCOL_SSCOPMCE, protocol="IPLT",XDM_CONST.IP_PROTOCOL_IPLT, protocol="SPS",XDM_CONST.IP_PROTOCOL_SPS, protocol="PIPE",XDM_CONST.IP_PROTOCOL_PIPE, protocol="SCTP",XDM_CONST.IP_PROTOCOL_SCTP, protocol="FC",XDM_CONST.IP_PROTOCOL_FC, protocol="RSVP_E2E_IGNORE",XDM_CONST.IP_PROTOCOL_RSVP_E2E_IGNORE, protocol="MOBILITY",XDM_CONST.IP_PROTOCOL_MOBILITY, protocol="UDPLITE",XDM_CONST.IP_PROTOCOL_UDPLITE, protocol="MPLS_IN_IP",XDM_CONST.IP_PROTOCOL_MPLS_IN_IP, protocol="MANET",XDM_CONST.IP_PROTOCOL_MANET, protocol="HIP",XDM_CONST.IP_PROTOCOL_HIP, protocol="SHIM6",XDM_CONST.IP_PROTOCOL_SHIM6, protocol="WESP",XDM_CONST.IP_PROTOCOL_WESP, protocol="ROHC",XDM_CONST.IP_PROTOCOL_ROHC, protocol="RESERVED",XDM_CONST.IP_PROTOCOL_RESERVED,protocol),
    xdm.network.rule = fw_rule, 
    xdm.observer.action = fw_rule_outcome, 
    xdm.source.port = src_port, 
    xdm.source.ipv4 = src_ip, 
    xdm.source.host.ipv4_addresses = arraycreate(src_ip), 
    xdm.source.host.mac_addresses = if(src_mac_address != null, arraycreate(src_mac_address)),
    xdm.target.ipv4 = dst_ip,
    xdm.target.port = dst_port, 
    xdm.target.host.ipv4_addresses = arraycreate(dst_ip);

/* IP_Flow_start/end */
alter event_type = arrayindex(regextract(_raw_log, "\d{10}\.\d+\s+\S+\s+(\S+)"), 0)
| filter event_type in ("ip_flow_start", "ip_flow_end")
| alter
    appliance_name = arrayindex(regextract(_raw_log, "\d{10}\.\d+\s+(\S+)"), 0),
    direction = arrayindex(regextract(_raw_log, "\S+\s+(0|1)\s+\d{10}\.\d+"), 0),
    src_ip = arrayindex(regextract(_raw_log, "src=(\S+)"), 0),
    translated_src_ip = arrayindex(regextract(_raw_log, "translated_src_ip=((?:\d{1,3}\.){3}\d{1,3})"), 0),
    translated_src_port = to_integer(arrayindex(regextract(_raw_log, "translated_port=(\d{1,5})"), 0)),
    translated_dst_ip = arrayindex(regextract(_raw_log, "translated_dst_ip=((?:\d{1,3}\.){3}\d{1,3})"), 0),
    src_port = to_integer(arrayindex(regextract(_raw_log, "sport=(\d{1,5})"), 0)),
    dst_ip = arrayindex(regextract(_raw_log, "dst=(\S+)"), 0),
    dst_port = to_integer(arrayindex(regextract(_raw_log, "dport=(\d{1,5})"), 0)),
    protocol = uppercase(arrayindex(regextract(_raw_log, "protocol=(\w+)"), 0))
| alter 
    xdm.event.type = "NETWORK",
    xdm.event.original_event_type = event_type,
    xdm.event.description = direction,
    xdm.observer.name = appliance_name,
    xdm.intermediate.ipv4 = if(translated_src_ip != null, src_ip, translated_dst_ip != null, dst_ip),
    xdm.intermediate.port = translated_src_port,
    xdm.network.ip_protocol = if(protocol="HOPOPT",XDM_CONST.IP_PROTOCOL_HOPOPT, protocol="ICMP",XDM_CONST.IP_PROTOCOL_ICMP, protocol="IGMP",XDM_CONST.IP_PROTOCOL_IGMP, protocol="GGP",XDM_CONST.IP_PROTOCOL_GGP, protocol="IP",XDM_CONST.IP_PROTOCOL_IP, protocol="ST",XDM_CONST.IP_PROTOCOL_ST, protocol ~= "TCP",XDM_CONST.IP_PROTOCOL_TCP, protocol="CBT",XDM_CONST.IP_PROTOCOL_CBT, protocol="EGP",XDM_CONST.IP_PROTOCOL_EGP, protocol="IGP",XDM_CONST.IP_PROTOCOL_IGP, protocol="BBN_RCC_MON",XDM_CONST.IP_PROTOCOL_BBN_RCC_MON, protocol="NVP_II",XDM_CONST.IP_PROTOCOL_NVP_II, protocol="PUP",XDM_CONST.IP_PROTOCOL_PUP, protocol="ARGUS",XDM_CONST.IP_PROTOCOL_ARGUS, protocol="EMCON",XDM_CONST.IP_PROTOCOL_EMCON, protocol="XNET",XDM_CONST.IP_PROTOCOL_XNET, protocol="CHAOS",XDM_CONST.IP_PROTOCOL_CHAOS, protocol="UDP",XDM_CONST.IP_PROTOCOL_UDP, protocol="MUX",XDM_CONST.IP_PROTOCOL_MUX, protocol="DCN_MEAS",XDM_CONST.IP_PROTOCOL_DCN_MEAS, protocol="HMP",XDM_CONST.IP_PROTOCOL_HMP, protocol="PRM",XDM_CONST.IP_PROTOCOL_PRM, protocol="XNS_IDP",XDM_CONST.IP_PROTOCOL_XNS_IDP, protocol="TRUNK_1",XDM_CONST.IP_PROTOCOL_TRUNK_1, protocol="TRUNK_2",XDM_CONST.IP_PROTOCOL_TRUNK_2, protocol="LEAF_1",XDM_CONST.IP_PROTOCOL_LEAF_1, protocol="LEAF_2",XDM_CONST.IP_PROTOCOL_LEAF_2, protocol="RDP",XDM_CONST.IP_PROTOCOL_RDP, protocol="IRTP",XDM_CONST.IP_PROTOCOL_IRTP, protocol="ISO_TP4",XDM_CONST.IP_PROTOCOL_ISO_TP4, protocol="NETBLT",XDM_CONST.IP_PROTOCOL_NETBLT, protocol="MFE_NSP",XDM_CONST.IP_PROTOCOL_MFE_NSP, protocol="MERIT_INP",XDM_CONST.IP_PROTOCOL_MERIT_INP, protocol="DCCP",XDM_CONST.IP_PROTOCOL_DCCP, protocol="3PC",XDM_CONST.IP_PROTOCOL_3PC, protocol="IDPR",XDM_CONST.IP_PROTOCOL_IDPR, protocol="XTP",XDM_CONST.IP_PROTOCOL_XTP, protocol="DDP",XDM_CONST.IP_PROTOCOL_DDP, protocol="IDPR_CMTP",XDM_CONST.IP_PROTOCOL_IDPR_CMTP, protocol="TP",XDM_CONST.IP_PROTOCOL_TP, protocol="IL",XDM_CONST.IP_PROTOCOL_IL, protocol="IPV6",XDM_CONST.IP_PROTOCOL_IPV6, protocol="SDRP",XDM_CONST.IP_PROTOCOL_SDRP, protocol="IPV6_ROUTE",XDM_CONST.IP_PROTOCOL_IPV6_ROUTE, protocol="IPV6_FRAG",XDM_CONST.IP_PROTOCOL_IPV6_FRAG, protocol="IDRP",XDM_CONST.IP_PROTOCOL_IDRP, protocol="RSVP",XDM_CONST.IP_PROTOCOL_RSVP, protocol="GRE",XDM_CONST.IP_PROTOCOL_GRE, protocol="DSR",XDM_CONST.IP_PROTOCOL_DSR, protocol="BNA",XDM_CONST.IP_PROTOCOL_BNA, protocol="ESP",XDM_CONST.IP_PROTOCOL_ESP, protocol="AH",XDM_CONST.IP_PROTOCOL_AH, protocol="I_NLSP",XDM_CONST.IP_PROTOCOL_I_NLSP, protocol="SWIPE",XDM_CONST.IP_PROTOCOL_SWIPE, protocol="NARP",XDM_CONST.IP_PROTOCOL_NARP, protocol="MOBILE",XDM_CONST.IP_PROTOCOL_MOBILE, protocol="TLSP",XDM_CONST.IP_PROTOCOL_TLSP, protocol="SKIP",XDM_CONST.IP_PROTOCOL_SKIP, protocol="IPV6_ICMP",XDM_CONST.IP_PROTOCOL_IPV6_ICMP, protocol="IPV6_NONXT",XDM_CONST.IP_PROTOCOL_IPV6_NONXT, protocol="IPV6_OPTS",XDM_CONST.IP_PROTOCOL_IPV6_OPTS, protocol="CFTP",XDM_CONST.IP_PROTOCOL_CFTP, protocol="SAT_EXPAK",XDM_CONST.IP_PROTOCOL_SAT_EXPAK, protocol="KRYPTOLAN",XDM_CONST.IP_PROTOCOL_KRYPTOLAN, protocol="RVD",XDM_CONST.IP_PROTOCOL_RVD, protocol="IPPC",XDM_CONST.IP_PROTOCOL_IPPC, protocol="SAT_MON",XDM_CONST.IP_PROTOCOL_SAT_MON, protocol="VISA",XDM_CONST.IP_PROTOCOL_VISA, protocol="IPCV",XDM_CONST.IP_PROTOCOL_IPCV, protocol="CPNX",XDM_CONST.IP_PROTOCOL_CPNX, protocol="CPHB",XDM_CONST.IP_PROTOCOL_CPHB, protocol="WSN",XDM_CONST.IP_PROTOCOL_WSN, protocol="PVP",XDM_CONST.IP_PROTOCOL_PVP, protocol="BR_SAT_MON",XDM_CONST.IP_PROTOCOL_BR_SAT_MON, protocol="SUN_ND",XDM_CONST.IP_PROTOCOL_SUN_ND, protocol="WB_MON",XDM_CONST.IP_PROTOCOL_WB_MON, protocol="WB_EXPAK",XDM_CONST.IP_PROTOCOL_WB_EXPAK, protocol="ISO_IP",XDM_CONST.IP_PROTOCOL_ISO_IP, protocol="VMTP",XDM_CONST.IP_PROTOCOL_VMTP, protocol="SECURE_VMTP",XDM_CONST.IP_PROTOCOL_SECURE_VMTP, protocol="VINES",XDM_CONST.IP_PROTOCOL_VINES, protocol="TTP",XDM_CONST.IP_PROTOCOL_TTP, protocol="NSFNET_IGP",XDM_CONST.IP_PROTOCOL_NSFNET_IGP, protocol="DGP",XDM_CONST.IP_PROTOCOL_DGP, protocol="TCF",XDM_CONST.IP_PROTOCOL_TCF, protocol="EIGRP",XDM_CONST.IP_PROTOCOL_EIGRP, protocol="OSPFIGP",XDM_CONST.IP_PROTOCOL_OSPFIGP, protocol="SPRITE_RPC",XDM_CONST.IP_PROTOCOL_SPRITE_RPC, protocol="LARP",XDM_CONST.IP_PROTOCOL_LARP, protocol="MTP",XDM_CONST.IP_PROTOCOL_MTP, protocol="AX25",XDM_CONST.IP_PROTOCOL_AX25, protocol="IPIP",XDM_CONST.IP_PROTOCOL_IPIP, protocol="MICP",XDM_CONST.IP_PROTOCOL_MICP, protocol="SCC_SP",XDM_CONST.IP_PROTOCOL_SCC_SP, protocol="ETHERIP",XDM_CONST.IP_PROTOCOL_ETHERIP, protocol="ENCAP",XDM_CONST.IP_PROTOCOL_ENCAP, protocol="GMTP",XDM_CONST.IP_PROTOCOL_GMTP, protocol="IFMP",XDM_CONST.IP_PROTOCOL_IFMP, protocol="PNNI",XDM_CONST.IP_PROTOCOL_PNNI, protocol="PIM",XDM_CONST.IP_PROTOCOL_PIM, protocol="ARIS",XDM_CONST.IP_PROTOCOL_ARIS, protocol="SCPS",XDM_CONST.IP_PROTOCOL_SCPS, protocol="QNX",XDM_CONST.IP_PROTOCOL_QNX, protocol="AN",XDM_CONST.IP_PROTOCOL_AN, protocol="IPCOMP",XDM_CONST.IP_PROTOCOL_IPCOMP, protocol="SNP",XDM_CONST.IP_PROTOCOL_SNP, protocol="COMPAQ_PEER",XDM_CONST.IP_PROTOCOL_COMPAQ_PEER, protocol="IPX_IN_IP",XDM_CONST.IP_PROTOCOL_IPX_IN_IP, protocol="VRRP",XDM_CONST.IP_PROTOCOL_VRRP, protocol="PGM",XDM_CONST.IP_PROTOCOL_PGM, protocol="L2TP",XDM_CONST.IP_PROTOCOL_L2TP, protocol="DDX",XDM_CONST.IP_PROTOCOL_DDX, protocol="IATP",XDM_CONST.IP_PROTOCOL_IATP, protocol="STP",XDM_CONST.IP_PROTOCOL_STP, protocol="SRP",XDM_CONST.IP_PROTOCOL_SRP, protocol="UTI",XDM_CONST.IP_PROTOCOL_UTI, protocol="SMP",XDM_CONST.IP_PROTOCOL_SMP, protocol="SM",XDM_CONST.IP_PROTOCOL_SM, protocol="PTP",XDM_CONST.IP_PROTOCOL_PTP, protocol="ISIS",XDM_CONST.IP_PROTOCOL_ISIS, protocol="FIRE",XDM_CONST.IP_PROTOCOL_FIRE, protocol="CRTP",XDM_CONST.IP_PROTOCOL_CRTP, protocol="CRUDP",XDM_CONST.IP_PROTOCOL_CRUDP, protocol="SSCOPMCE",XDM_CONST.IP_PROTOCOL_SSCOPMCE, protocol="IPLT",XDM_CONST.IP_PROTOCOL_IPLT, protocol="SPS",XDM_CONST.IP_PROTOCOL_SPS, protocol="PIPE",XDM_CONST.IP_PROTOCOL_PIPE, protocol="SCTP",XDM_CONST.IP_PROTOCOL_SCTP, protocol="FC",XDM_CONST.IP_PROTOCOL_FC, protocol="RSVP_E2E_IGNORE",XDM_CONST.IP_PROTOCOL_RSVP_E2E_IGNORE, protocol="MOBILITY",XDM_CONST.IP_PROTOCOL_MOBILITY, protocol="UDPLITE",XDM_CONST.IP_PROTOCOL_UDPLITE, protocol="MPLS_IN_IP",XDM_CONST.IP_PROTOCOL_MPLS_IN_IP, protocol="MANET",XDM_CONST.IP_PROTOCOL_MANET, protocol="HIP",XDM_CONST.IP_PROTOCOL_HIP, protocol="SHIM6",XDM_CONST.IP_PROTOCOL_SHIM6, protocol="WESP",XDM_CONST.IP_PROTOCOL_WESP, protocol="ROHC",XDM_CONST.IP_PROTOCOL_ROHC, protocol="RESERVED",XDM_CONST.IP_PROTOCOL_RESERVED,protocol), 
    xdm.source.port = src_port, 
    xdm.source.ipv4 = coalesce(translated_src_ip, src_ip), 
    xdm.source.host.ipv4_addresses = arraydistinct(arrayconcat(arraycreate(src_ip), arraycreate(translated_src_ip))),
    xdm.target.ipv4 = coalesce(translated_dst_ip, dst_ip),
    xdm.target.port = dst_port, 
    xdm.target.host.ipv4_addresses = arraydistinct(arrayconcat(arraycreate(dst_ip), arraycreate(translated_dst_ip)));

/* Security AMP (Advanced Malware Protection) Events
   security_filtering_file_scanned , security_filtering_disposition_change */ 
alter 
    event_type = arrayindex(regextract(_raw_log, "\d{10}\.\d+\s+\S+\s+(\S+)"), 0),
    alert_name = arrayindex(regextract(_raw_log, "\d{10}\.\d+\s+\S+\s+\S+\s+(\S+)"), 0)
| filter event_type in ("security_event") and alert_name ~= "security_filtering"
| alter 
    appliance_name = arrayindex(regextract(_raw_log, "\d{10}\.\d+\s+(\S+)"), 0),
    url = arrayindex(regextract(_raw_log, "url=(\S+)"), 0),
    src_ip = arrayindex(regextract(_raw_log, "src=((?:\d{1,3}\.){3}\d{1,3})"), 0),
    src_port = to_integer(arrayindex(regextract(_raw_log, "src=[^\:]+:(\d{1,5})"), 0)),
    src_mac_address = arrayindex(regextract(_raw_log, "mac=((?:[\da-fA-F]{2}:){5}\w+)"), 0),
    dst_ip = arrayindex(regextract(_raw_log, "dst=((?:\d{1,3}\.){3}\d{1,3})"), 0),
    dst_port = to_integer(arrayindex(regextract(_raw_log, "dst=[^\:]+:(\d{1,5})"), 0)), 
    file_name = arrayindex(regextract(_raw_log, "name='?([^\'\s]+)"), 0), 
    file_sha256 = arrayindex(regextract(_raw_log, "sha256=([a-fA-F\d]+)"), 0), 
    disposition = arrayindex(regextract(_raw_log, "disposition=(\S+)"), 0), 
    action = arrayindex(regextract(_raw_log, "action=(\S+)"), 0) 
| alter 
    xdm.alert.name = alert_name, 
    xdm.event.type = "NETWORK",
    xdm.event.original_event_type = event_type,
    xdm.event.outcome = if(action = "allow", XDM_CONST.OUTCOME_SUCCESS, action ~= "block", XDM_CONST.OUTCOME_FAILED, action),
    xdm.event.outcome_reason = disposition,
    xdm.observer.name = appliance_name,
    xdm.observer.action = action,
    xdm.source.ipv4 = src_ip, 
    xdm.source.port = src_port,
    xdm.source.host.mac_addresses = if(src_mac_address != null, arraycreate(src_mac_address)),
    xdm.target.ipv4 = dst_ip,
    xdm.target.port = dst_port, 
    xdm.target.file.filename = file_name,
    xdm.target.file.sha256 = file_sha256, 
    xdm.target.url = url; 

/* Security Events: IDS Alerted */
alter 
    event_type = arrayindex(regextract(_raw_log, "\d{10}\.\d+\s+\S+\s+(\S+)"), 0),
    alert_name = arrayindex(regextract(_raw_log, "\d{10}\.\d+\s+\S+\s+\S+\s+(\S+)"), 0)
| filter event_type in ("security_event", "ids-alerts", "ids_alerted") and alert_name ~= "ids"
| alter 
    appliance_name = arrayindex(regextract(_raw_log, "\d{10}\.\d+\s+(\S+)"), 0),
    signature = arrayindex(regextract(_raw_log, "signature=(\S+)"), 0),
    priority = arrayindex(regextract(_raw_log, "priority=(\S+)"), 0),
    direction = coalesce(arrayindex(regextract(_raw_log, "direction=(\S+)"), 0),
                         arrayindex(regextract(_raw_log, "\S+\s+(0|1)\s+\d{10}\.\d+"), 0)),
    protocol = uppercase(arrayindex(regextract(_raw_log, "protocol=(\S+)"), 0)),
    src_ip = arrayindex(regextract(_raw_log, "src=((?:\d{1,3}\.){3}\d{1,3})"), 0),
    src_port = to_integer(arrayindex(regextract(_raw_log, "src=[^\:]+:(\d{1,5})"), 0)),
    dst_ip = arrayindex(regextract(_raw_log, "dst=((?:\d{1,3}\.){3}\d{1,3})"), 0),
    dst_port = to_integer(arrayindex(regextract(_raw_log, "dst=[^\:]+:(\d{1,5})"), 0)),
    src_mac_address = arrayindex(regextract(_raw_log,"shost=((?:[\da-fA-F]{2}:){5}\w+)"), 0),
    action = arrayindex(regextract(_raw_log, "action=(\S+)"), 0),
    decision = arrayindex(regextract(_raw_log, "decision=(\S+)"), 0),
    message = arrayindex(regextract(_raw_log, "message:\s*(.+)"), 0)
| alter 
    xdm.alert.name = alert_name, 
    xdm.alert.description = message, 
    xdm.alert.severity = priority, 
    xdm.event.type = "NETWORK",
    xdm.event.original_event_type = event_type,
    xdm.event.description = direction, 
    xdm.event.outcome = if(action = "allow", XDM_CONST.OUTCOME_SUCCESS, action ~= "block", XDM_CONST.OUTCOME_FAILED, action),
    xdm.network.ip_protocol = if(protocol="HOPOPT",XDM_CONST.IP_PROTOCOL_HOPOPT, protocol="ICMP",XDM_CONST.IP_PROTOCOL_ICMP, protocol="IGMP",XDM_CONST.IP_PROTOCOL_IGMP, protocol="GGP",XDM_CONST.IP_PROTOCOL_GGP, protocol="IP",XDM_CONST.IP_PROTOCOL_IP, protocol="ST",XDM_CONST.IP_PROTOCOL_ST, protocol ~= "TCP",XDM_CONST.IP_PROTOCOL_TCP, protocol="CBT",XDM_CONST.IP_PROTOCOL_CBT, protocol="EGP",XDM_CONST.IP_PROTOCOL_EGP, protocol="IGP",XDM_CONST.IP_PROTOCOL_IGP, protocol="BBN_RCC_MON",XDM_CONST.IP_PROTOCOL_BBN_RCC_MON, protocol="NVP_II",XDM_CONST.IP_PROTOCOL_NVP_II, protocol="PUP",XDM_CONST.IP_PROTOCOL_PUP, protocol="ARGUS",XDM_CONST.IP_PROTOCOL_ARGUS, protocol="EMCON",XDM_CONST.IP_PROTOCOL_EMCON, protocol="XNET",XDM_CONST.IP_PROTOCOL_XNET, protocol="CHAOS",XDM_CONST.IP_PROTOCOL_CHAOS, protocol="UDP",XDM_CONST.IP_PROTOCOL_UDP, protocol="MUX",XDM_CONST.IP_PROTOCOL_MUX, protocol="DCN_MEAS",XDM_CONST.IP_PROTOCOL_DCN_MEAS, protocol="HMP",XDM_CONST.IP_PROTOCOL_HMP, protocol="PRM",XDM_CONST.IP_PROTOCOL_PRM, protocol="XNS_IDP",XDM_CONST.IP_PROTOCOL_XNS_IDP, protocol="TRUNK_1",XDM_CONST.IP_PROTOCOL_TRUNK_1, protocol="TRUNK_2",XDM_CONST.IP_PROTOCOL_TRUNK_2, protocol="LEAF_1",XDM_CONST.IP_PROTOCOL_LEAF_1, protocol="LEAF_2",XDM_CONST.IP_PROTOCOL_LEAF_2, protocol="RDP",XDM_CONST.IP_PROTOCOL_RDP, protocol="IRTP",XDM_CONST.IP_PROTOCOL_IRTP, protocol="ISO_TP4",XDM_CONST.IP_PROTOCOL_ISO_TP4, protocol="NETBLT",XDM_CONST.IP_PROTOCOL_NETBLT, protocol="MFE_NSP",XDM_CONST.IP_PROTOCOL_MFE_NSP, protocol="MERIT_INP",XDM_CONST.IP_PROTOCOL_MERIT_INP, protocol="DCCP",XDM_CONST.IP_PROTOCOL_DCCP, protocol="3PC",XDM_CONST.IP_PROTOCOL_3PC, protocol="IDPR",XDM_CONST.IP_PROTOCOL_IDPR, protocol="XTP",XDM_CONST.IP_PROTOCOL_XTP, protocol="DDP",XDM_CONST.IP_PROTOCOL_DDP, protocol="IDPR_CMTP",XDM_CONST.IP_PROTOCOL_IDPR_CMTP, protocol="TP",XDM_CONST.IP_PROTOCOL_TP, protocol="IL",XDM_CONST.IP_PROTOCOL_IL, protocol="IPV6",XDM_CONST.IP_PROTOCOL_IPV6, protocol="SDRP",XDM_CONST.IP_PROTOCOL_SDRP, protocol="IPV6_ROUTE",XDM_CONST.IP_PROTOCOL_IPV6_ROUTE, protocol="IPV6_FRAG",XDM_CONST.IP_PROTOCOL_IPV6_FRAG, protocol="IDRP",XDM_CONST.IP_PROTOCOL_IDRP, protocol="RSVP",XDM_CONST.IP_PROTOCOL_RSVP, protocol="GRE",XDM_CONST.IP_PROTOCOL_GRE, protocol="DSR",XDM_CONST.IP_PROTOCOL_DSR, protocol="BNA",XDM_CONST.IP_PROTOCOL_BNA, protocol="ESP",XDM_CONST.IP_PROTOCOL_ESP, protocol="AH",XDM_CONST.IP_PROTOCOL_AH, protocol="I_NLSP",XDM_CONST.IP_PROTOCOL_I_NLSP, protocol="SWIPE",XDM_CONST.IP_PROTOCOL_SWIPE, protocol="NARP",XDM_CONST.IP_PROTOCOL_NARP, protocol="MOBILE",XDM_CONST.IP_PROTOCOL_MOBILE, protocol="TLSP",XDM_CONST.IP_PROTOCOL_TLSP, protocol="SKIP",XDM_CONST.IP_PROTOCOL_SKIP, protocol="IPV6_ICMP",XDM_CONST.IP_PROTOCOL_IPV6_ICMP, protocol="IPV6_NONXT",XDM_CONST.IP_PROTOCOL_IPV6_NONXT, protocol="IPV6_OPTS",XDM_CONST.IP_PROTOCOL_IPV6_OPTS, protocol="CFTP",XDM_CONST.IP_PROTOCOL_CFTP, protocol="SAT_EXPAK",XDM_CONST.IP_PROTOCOL_SAT_EXPAK, protocol="KRYPTOLAN",XDM_CONST.IP_PROTOCOL_KRYPTOLAN, protocol="RVD",XDM_CONST.IP_PROTOCOL_RVD, protocol="IPPC",XDM_CONST.IP_PROTOCOL_IPPC, protocol="SAT_MON",XDM_CONST.IP_PROTOCOL_SAT_MON, protocol="VISA",XDM_CONST.IP_PROTOCOL_VISA, protocol="IPCV",XDM_CONST.IP_PROTOCOL_IPCV, protocol="CPNX",XDM_CONST.IP_PROTOCOL_CPNX, protocol="CPHB",XDM_CONST.IP_PROTOCOL_CPHB, protocol="WSN",XDM_CONST.IP_PROTOCOL_WSN, protocol="PVP",XDM_CONST.IP_PROTOCOL_PVP, protocol="BR_SAT_MON",XDM_CONST.IP_PROTOCOL_BR_SAT_MON, protocol="SUN_ND",XDM_CONST.IP_PROTOCOL_SUN_ND, protocol="WB_MON",XDM_CONST.IP_PROTOCOL_WB_MON, protocol="WB_EXPAK",XDM_CONST.IP_PROTOCOL_WB_EXPAK, protocol="ISO_IP",XDM_CONST.IP_PROTOCOL_ISO_IP, protocol="VMTP",XDM_CONST.IP_PROTOCOL_VMTP, protocol="SECURE_VMTP",XDM_CONST.IP_PROTOCOL_SECURE_VMTP, protocol="VINES",XDM_CONST.IP_PROTOCOL_VINES, protocol="TTP",XDM_CONST.IP_PROTOCOL_TTP, protocol="NSFNET_IGP",XDM_CONST.IP_PROTOCOL_NSFNET_IGP, protocol="DGP",XDM_CONST.IP_PROTOCOL_DGP, protocol="TCF",XDM_CONST.IP_PROTOCOL_TCF, protocol="EIGRP",XDM_CONST.IP_PROTOCOL_EIGRP, protocol="OSPFIGP",XDM_CONST.IP_PROTOCOL_OSPFIGP, protocol="SPRITE_RPC",XDM_CONST.IP_PROTOCOL_SPRITE_RPC, protocol="LARP",XDM_CONST.IP_PROTOCOL_LARP, protocol="MTP",XDM_CONST.IP_PROTOCOL_MTP, protocol="AX25",XDM_CONST.IP_PROTOCOL_AX25, protocol="IPIP",XDM_CONST.IP_PROTOCOL_IPIP, protocol="MICP",XDM_CONST.IP_PROTOCOL_MICP, protocol="SCC_SP",XDM_CONST.IP_PROTOCOL_SCC_SP, protocol="ETHERIP",XDM_CONST.IP_PROTOCOL_ETHERIP, protocol="ENCAP",XDM_CONST.IP_PROTOCOL_ENCAP, protocol="GMTP",XDM_CONST.IP_PROTOCOL_GMTP, protocol="IFMP",XDM_CONST.IP_PROTOCOL_IFMP, protocol="PNNI",XDM_CONST.IP_PROTOCOL_PNNI, protocol="PIM",XDM_CONST.IP_PROTOCOL_PIM, protocol="ARIS",XDM_CONST.IP_PROTOCOL_ARIS, protocol="SCPS",XDM_CONST.IP_PROTOCOL_SCPS, protocol="QNX",XDM_CONST.IP_PROTOCOL_QNX, protocol="AN",XDM_CONST.IP_PROTOCOL_AN, protocol="IPCOMP",XDM_CONST.IP_PROTOCOL_IPCOMP, protocol="SNP",XDM_CONST.IP_PROTOCOL_SNP, protocol="COMPAQ_PEER",XDM_CONST.IP_PROTOCOL_COMPAQ_PEER, protocol="IPX_IN_IP",XDM_CONST.IP_PROTOCOL_IPX_IN_IP, protocol="VRRP",XDM_CONST.IP_PROTOCOL_VRRP, protocol="PGM",XDM_CONST.IP_PROTOCOL_PGM, protocol="L2TP",XDM_CONST.IP_PROTOCOL_L2TP, protocol="DDX",XDM_CONST.IP_PROTOCOL_DDX, protocol="IATP",XDM_CONST.IP_PROTOCOL_IATP, protocol="STP",XDM_CONST.IP_PROTOCOL_STP, protocol="SRP",XDM_CONST.IP_PROTOCOL_SRP, protocol="UTI",XDM_CONST.IP_PROTOCOL_UTI, protocol="SMP",XDM_CONST.IP_PROTOCOL_SMP, protocol="SM",XDM_CONST.IP_PROTOCOL_SM, protocol="PTP",XDM_CONST.IP_PROTOCOL_PTP, protocol="ISIS",XDM_CONST.IP_PROTOCOL_ISIS, protocol="FIRE",XDM_CONST.IP_PROTOCOL_FIRE, protocol="CRTP",XDM_CONST.IP_PROTOCOL_CRTP, protocol="CRUDP",XDM_CONST.IP_PROTOCOL_CRUDP, protocol="SSCOPMCE",XDM_CONST.IP_PROTOCOL_SSCOPMCE, protocol="IPLT",XDM_CONST.IP_PROTOCOL_IPLT, protocol="SPS",XDM_CONST.IP_PROTOCOL_SPS, protocol="PIPE",XDM_CONST.IP_PROTOCOL_PIPE, protocol="SCTP",XDM_CONST.IP_PROTOCOL_SCTP, protocol="FC",XDM_CONST.IP_PROTOCOL_FC, protocol="RSVP_E2E_IGNORE",XDM_CONST.IP_PROTOCOL_RSVP_E2E_IGNORE, protocol="MOBILITY",XDM_CONST.IP_PROTOCOL_MOBILITY, protocol="UDPLITE",XDM_CONST.IP_PROTOCOL_UDPLITE, protocol="MPLS_IN_IP",XDM_CONST.IP_PROTOCOL_MPLS_IN_IP, protocol="MANET",XDM_CONST.IP_PROTOCOL_MANET, protocol="HIP",XDM_CONST.IP_PROTOCOL_HIP, protocol="SHIM6",XDM_CONST.IP_PROTOCOL_SHIM6, protocol="WESP",XDM_CONST.IP_PROTOCOL_WESP, protocol="ROHC",XDM_CONST.IP_PROTOCOL_ROHC, protocol="RESERVED",XDM_CONST.IP_PROTOCOL_RESERVED,protocol), 
    xdm.network.rule = signature, 
    xdm.observer.name = appliance_name,
    xdm.observer.action = decision,
    xdm.source.ipv4 = src_ip, 
    xdm.source.port = src_port,
    xdm.source.host.mac_addresses = if(src_mac_address != null, arraycreate(src_mac_address)),
    xdm.target.ipv4 = dst_ip,
    xdm.target.host.ipv4_addresses = arraycreate(dst_ip),
    xdm.target.port = dst_port;

/* Fallback for mapping all other event types */
alter event_type = arrayindex(regextract(_raw_log, "\d{10}\.\d+\s+\S+\s+(\S+)"), 0)
| filter event_type not in ("urls", "flows", "firewall", "cellular_firewall", "vpn_firewall", "bridge_anyconnect_client_vpn_firewall", "ip_flow_start", "ip_flow_end", "security_event", "ids-alerts", "ids_alerted")
| alter 
    appliance_name = arrayindex(regextract(_raw_log, "\d{10}\.\d+\s+(\S+)"), 0),
    event_description = arrayindex(regextract(_raw_log, "\d{10}\.\d+\s+\S+\s+\S+\s+(.+)"), 0)
| alter 
    connectivity = arrayindex(regextract(event_description, "connectivity=\'(\w+)"), 0),
    connection =  arrayindex(regextract(event_description, "connection\s+(\w+)"), 0),
    dns_servers = arraymap(split(arrayindex(regextract(event_description, "subnet \S+ with dns\s+(.+)"), 0), ","), trim("@element")),
    dst_ip = coalesce(arrayindex(regextract(event_description, "dst=((?:\d{1,3}\.){3}\d{1,3})"), 0),
                      arrayindex(regextract(event_description,"\-((?:\d{1,3}\.){3}\d{1,3})"), 0), 
                      arrayindex(regextract(event_description,"\>((?:\d{1,3}\.){3}\d{1,3})"), 0), 
                      arrayindex(regextract(event_description,"ip\s+((?:\d{1,3}\.){3}\d{1,3})"), 0)),
    dhcp_router = arrayindex(regextract(event_description, "from router (\S+) on subnet \S+"), 0),
    interface_port = coalesce(arrayindex(regextract(event_description, "port (\S+) status changed"), 0), 
                              arrayindex(regextract(event_description, "Port (\S+) changed"), 0)),
    leased_ip = arrayindex(regextract(event_description, "lease of ip (\w+[\.\:]\S+)"), 0),
    src_mac_address = coalesce(arrayindex(regextract(event_description, "client mac\s+((?:[\da-fA-F]{2}:){5}\w+)"), 0),
                               arrayindex(regextract(event_description, "MAC=\'?((?:[\da-fA-F]{2}:){5}\w+)"), 0),
                               arrayindex(regextract(event_description, "no offers for mac\s+((?:[\da-fA-F]{2}:){5}\w+)"), 0)),
    src_ip = coalesce(arrayindex(regextract(event_description, "src=((?:\d{1,3}\.){3}\d{1,3})"), 0), 
                      arrayindex(regextract(event_description, "Client=\'?((?:\d{1,3}\.){3}\d{1,3})"), 0), 
                      arrayindex(regextract(event_description, "peer_contact=\'?((?:\d{1,3}\.){3}\d{1,3})"), 0), // vpn peer
                      arrayindex(regextract(event_description, "for mac \S+ host = ((?:\d{1,3}\.){3}\d{1,3})"), 0), // dhcp no offers
                      arrayindex(regextract(event_description, "request for\s+((?:\d{1,3}\.){3}\d{1,3})"), 0), // IPsec-SA request 
                      arrayindex(regextract(event_description, "\s+((?:\d{1,3}\.){3}\d{1,3})\[\d+\]"), 0)),  // IPsec session 
    src_port = coalesce(arrayindex(regextract(event_description, "\s+(?:\d{1,3}\.){3}\d{1,3}\[(\d+)\]"), 0), // IPsec session 
                        arrayindex(regextract(event_description, "peer_contact=\'?(?:\d{1,3}\.){3}\d{1,3}:(\d{1,5})"), 0)), // vpn peer
    subnet = arrayindex(regextract(event_description, "subnet\s+(\d+\S+)"), 0),
    sent_packets = to_integer(arrayindex(regextract(event_description, "sent\s+(\d+)\s+\w*\s*packets"), 0)),
    isakmp_spi = arrayindex(regextract(event_description,"spi[\:=](\S+)"), 0), // security parameter index 

    vlan = to_integer(arrayindex(regextract(event_description, "vlan=\'?(\d+)"), 0)),
    vpn_type = arrayindex(regextract(event_description, "vpn_type=\'(\S+)\'"), 0),
    vpn_peer_id = arrayindex(regextract(event_description,"peer_ident=\'([^\']+)"), 0),
    event_sub_type = if(
        _raw_log ~= "\w+\s+type=\S+", arrayindex(regextract(event_description, "type=(\S+)"), 0), // general event type extraction 
        event_description ~= "events Cellular connection|events failover to", "uplink_connectivity_change", // uplink connectivity change
        event_description ~= "dhcp no offers", "dhcp_no_offers", // dhcp no offers
        event_description ~= "dhcp lease", "dhcp_lease", // dhcp lease
        event_description ~= "purging ISAKMP-SA", "purging_isakmp_sa", // purging internet security association & key management protocol for security association 
        event_description ~= "purged ISAKMP-SA", "purged_isakmp_sa",  // purged internet security association & key management protocol for security association 
        event_description ~= "ISAKMP-SA deleted", "isakmp_sa_deleted", // internet security association & key management protocol security association deleted
        event_description ~= "IPsec-SA established", "ipsec_sa_established", // IPsec security association established 
        event_description ~= "IPsec-SA request", "ipsec_sa_request", // IPsec security association request 
        event_description ~= "failed to get sainfo", "failed_to_get_sa_info", // failed to get security association info 
        event_description ~= "phase\w* negotiation failed", "phase_negotiation_failed", // phase_negotiation_failed
        event_description ~= "initiate new phase \w* negotiation", "initiate_new_phase_negotiation", // new phased negotiation initiated
        event_description ~= "port \S+ status changed", "port_status_change", // Meraki MS switch interface port status change
        event_description ~= "port \S+ changed STP role", "spanning_tree_interface_role_change", // Meraki MS switch STP interface port role change
        event_description ~= "Temperature\s+has\s+reached\s+critical\s+level", "temperature_has_reached_critical_level") // critical temperature level 
| alter 
    xdm.observer.name = appliance_name,
    xdm.event.type = "NETWORK",
    xdm.event.original_event_type = coalesce(event_sub_type, event_type), 
    xdm.event.description = event_description,
    xdm.event.outcome = if(connectivity = "false" or connection = "down" or event_description ~= "failed", XDM_CONST.OUTCOME_FAILED, connectivity = "true" or connection = "up", XDM_CONST.OUTCOME_SUCCESS),
    xdm.event.operation_sub_type = vpn_type,
    xdm.network.dhcp.dns_server = dns_servers,
    xdm.network.dhcp.sname = dhcp_router,
    xdm.network.dhcp.requested_address = leased_ip,
    xdm.network.session_id = isakmp_spi,
    xdm.source.interface = coalesce(interface_port, src_mac_address),
    xdm.source.ipv4 = src_ip, 
    xdm.source.port = to_integer(src_port),
    xdm.source.host.ipv4_addresses = if(src_ip != null, arraycreate(src_ip)),
    xdm.source.host.mac_addresses = if(src_mac_address != null, arraycreate(src_mac_address)),
    xdm.source.host.device_id = vpn_peer_id, 
    xdm.source.subnet = subnet, 
    xdm.source.sent_packets = sent_packets,
    xdm.source.vlan  = vlan,
    xdm.target.ipv4 = dst_ip, 
    xdm.target.host.ipv4_addresses =  if(dst_ip != null, arraycreate(dst_ip));


[RULE: cisco_asa_main_fields_extraction content_id="CiscoASA"]
alter event_id = to_integer(arrayindex(regextract(_raw_log , "ASA\-(?:session)*\-*\d\-(\d+)\:"),0)),
    severity = arrayindex(regextract(_raw_log, "ASA\-(?:session)*\-*(\d+)\-\d+\:"),0),
    message = arrayindex(regextract(_raw_log, "\%ASA\-(?:session)*\-*\d\-\d+[\:|\s\-]+\s(.*)"),0),
    observer_name = arrayindex(regextract(_raw_log , "([\w\-\_\.\@]+)\s\:*\s*\%ASA-\d+"),0);
[MODEL: dataset=cisco_asa_raw, content_id="CiscoASA"]
//from <source_ip>/<source_port> to <dest_ip>/<dest_port>
config case_sensitive = true
| filter _raw_log  ~= "from\s\d+\.\d+\.\d+\.\d+\/\d+\s*to\s*\d+\.\d+\.\d+\.\d+\/\d+"
| call cisco_asa_main_fields_extraction
| alter
    source_ip = arrayindex(regextract(_raw_log,"from\s(\d+\.\d+\.\d+\.\d+)\/\d+\s*to\s*\d+\.\d+\.\d+\.\d+\/\d+"),0),
    source_port = arrayindex(regextract(_raw_log,"from\s\d+\.\d+\.\d+\.\d+\/(\d+)\s*to\s*\d+\.\d+\.\d+\.\d+\/\d+"),0),
    dst_ip = arrayindex(regextract(_raw_log,"from\s\d+\.\d+\.\d+\.\d+\/\d+\s*to\s*(\d+\.\d+\.\d+\.\d+)\/\d+"),0),
    dst_port = arrayindex(regextract(_raw_log,"from\s\d+\.\d+\.\d+\.\d+\/\d+\s*to\s*\d+\.\d+\.\d+\.\d+\/(\d+)"),0),
    action = arrayindex(regextract(_raw_log,"\%ASA\-[session]*\-*\d\-\d+[\:|\s\-]+\s(.*)from\s\d+\."),0),
    protocol1 = arrayindex(regextract(_raw_log,"\%ASA\-[session]*\-*\d\-\d+\:\s\w+\s([A-Z]+)"),0),
    protocol2 = arrayindex(regextract(_raw_log,"\%ASA\-[session]*\-*\d\-\d+\:+\s\w+\s\w+\s+([A-Z]{1,5})\s"),0),
    protocol3 = uppercase(arrayindex(regextract(_raw_log,"\sprotocol\=([^\,]+)\s*\,"),0)),
    protocol4 = arrayindex(regextract(_raw_log,"\%ASA\-[session]*\-*\d\-\d+\:\s([A-Z]{3,})\s"),0),
    protocol5 = arrayindex(regextract(_raw_log,"on\sinterface\s\S+\susing\s([A-Z]+)"),0),
    protocol6 = arrayindex(regextract(_raw_log,"Interactive\schallenge\sprocessing\sis\snot\ssupported\sfor\s([A-Z]+)\sconnections"),0),
    protocol7 = arrayindex(regextract(_raw_log ,"\,\sdropped\s([A-Z]+)\sfragment\sfrom"),0),
    dst_interface = arrayindex(regextract(_raw_log,"on\sinterface\s(\S+)"),0),
    dst_username1 = arrayindex(regextract(_raw_log,"for\suser\s\'*(\S+)\'*\sfrom"),0),
    dst_username2 = arrayindex(regextract(_raw_log,"for\sNetwork\suser\s\'*(\S+)\'*\sfrom"),0),
    outcome1 = arrayindex(regextract(_raw_log ,"\%ASA\-[session]*\-*\d\-\d+\:\sAuthentication\s(\w+)\sfor\suser"),0),
    outcome2 = arrayindex(regextract(_raw_log ,"\%ASA\-[session]*\-*\d\-\d+\:\sAuthentication\s(\w+)\sfor\snetwork\suser"),0),
    outcome3 = arrayindex(regextract(_raw_log ,"Auth\sfrom\s\d+\.\d+\.\d+\.\d+\/\d+\sto\s\d+\.\d+\.\d+\.\d+\/\d+\s(\w+)\s"),0)
| alter protocol = coalesce(protocol1 , protocol2 , protocol3 , protocol4 ,protocol5, protocol6, protocol7),
    dst_username = coalesce(dst_username1, dst_username2 ),
    outcome = coalesce(outcome1, outcome2, outcome3) //ENUM: succeeded failed permitted denied
| alter xdm.network.ip_protocol = if(protocol="HOPOPT",XDM_CONST.IP_PROTOCOL_HOPOPT, protocol="ICMP",XDM_CONST.IP_PROTOCOL_ICMP, protocol="IGMP",XDM_CONST.IP_PROTOCOL_IGMP, protocol="GGP",XDM_CONST.IP_PROTOCOL_GGP, protocol="IP",XDM_CONST.IP_PROTOCOL_IP, protocol="ST",XDM_CONST.IP_PROTOCOL_ST, protocol="TCP",XDM_CONST.IP_PROTOCOL_TCP, protocol="CBT",XDM_CONST.IP_PROTOCOL_CBT, protocol="EGP",XDM_CONST.IP_PROTOCOL_EGP, protocol="IGP",XDM_CONST.IP_PROTOCOL_IGP, protocol="BBN_RCC_MON",XDM_CONST.IP_PROTOCOL_BBN_RCC_MON, protocol="NVP_II",XDM_CONST.IP_PROTOCOL_NVP_II, protocol="PUP",XDM_CONST.IP_PROTOCOL_PUP, protocol="ARGUS",XDM_CONST.IP_PROTOCOL_ARGUS, protocol="EMCON",XDM_CONST.IP_PROTOCOL_EMCON, protocol="XNET",XDM_CONST.IP_PROTOCOL_XNET, protocol="CHAOS",XDM_CONST.IP_PROTOCOL_CHAOS, protocol="UDP",XDM_CONST.IP_PROTOCOL_UDP, protocol="MUX",XDM_CONST.IP_PROTOCOL_MUX, protocol="DCN_MEAS",XDM_CONST.IP_PROTOCOL_DCN_MEAS, protocol="HMP",XDM_CONST.IP_PROTOCOL_HMP, protocol="PRM",XDM_CONST.IP_PROTOCOL_PRM, protocol="XNS_IDP",XDM_CONST.IP_PROTOCOL_XNS_IDP, protocol="TRUNK_1",XDM_CONST.IP_PROTOCOL_TRUNK_1, protocol="TRUNK_2",XDM_CONST.IP_PROTOCOL_TRUNK_2, protocol="LEAF_1",XDM_CONST.IP_PROTOCOL_LEAF_1, protocol="LEAF_2",XDM_CONST.IP_PROTOCOL_LEAF_2, protocol="RDP",XDM_CONST.IP_PROTOCOL_RDP, protocol="IRTP",XDM_CONST.IP_PROTOCOL_IRTP, protocol="ISO_TP4",XDM_CONST.IP_PROTOCOL_ISO_TP4, protocol="NETBLT",XDM_CONST.IP_PROTOCOL_NETBLT, protocol="MFE_NSP",XDM_CONST.IP_PROTOCOL_MFE_NSP, protocol="MERIT_INP",XDM_CONST.IP_PROTOCOL_MERIT_INP, protocol="DCCP",XDM_CONST.IP_PROTOCOL_DCCP, protocol="3PC",XDM_CONST.IP_PROTOCOL_3PC, protocol="IDPR",XDM_CONST.IP_PROTOCOL_IDPR, protocol="XTP",XDM_CONST.IP_PROTOCOL_XTP, protocol="DDP",XDM_CONST.IP_PROTOCOL_DDP, protocol="IDPR_CMTP",XDM_CONST.IP_PROTOCOL_IDPR_CMTP, protocol="TP",XDM_CONST.IP_PROTOCOL_TP, protocol="IL",XDM_CONST.IP_PROTOCOL_IL, protocol="IPV6",XDM_CONST.IP_PROTOCOL_IPV6, protocol="SDRP",XDM_CONST.IP_PROTOCOL_SDRP, protocol="IPV6_ROUTE",XDM_CONST.IP_PROTOCOL_IPV6_ROUTE, protocol="IPV6_FRAG",XDM_CONST.IP_PROTOCOL_IPV6_FRAG, protocol="IDRP",XDM_CONST.IP_PROTOCOL_IDRP, protocol="RSVP",XDM_CONST.IP_PROTOCOL_RSVP, protocol="GRE",XDM_CONST.IP_PROTOCOL_GRE, protocol="DSR",XDM_CONST.IP_PROTOCOL_DSR, protocol="BNA",XDM_CONST.IP_PROTOCOL_BNA, protocol="ESP",XDM_CONST.IP_PROTOCOL_ESP, protocol="AH",XDM_CONST.IP_PROTOCOL_AH, protocol="I_NLSP",XDM_CONST.IP_PROTOCOL_I_NLSP, protocol="SWIPE",XDM_CONST.IP_PROTOCOL_SWIPE, protocol="NARP",XDM_CONST.IP_PROTOCOL_NARP, protocol="MOBILE",XDM_CONST.IP_PROTOCOL_MOBILE, protocol="TLSP",XDM_CONST.IP_PROTOCOL_TLSP, protocol="SKIP",XDM_CONST.IP_PROTOCOL_SKIP, protocol="IPV6_ICMP",XDM_CONST.IP_PROTOCOL_IPV6_ICMP, protocol="IPV6_NONXT",XDM_CONST.IP_PROTOCOL_IPV6_NONXT, protocol="IPV6_OPTS",XDM_CONST.IP_PROTOCOL_IPV6_OPTS, protocol="CFTP",XDM_CONST.IP_PROTOCOL_CFTP, protocol="SAT_EXPAK",XDM_CONST.IP_PROTOCOL_SAT_EXPAK, protocol="KRYPTOLAN",XDM_CONST.IP_PROTOCOL_KRYPTOLAN, protocol="RVD",XDM_CONST.IP_PROTOCOL_RVD, protocol="IPPC",XDM_CONST.IP_PROTOCOL_IPPC, protocol="SAT_MON",XDM_CONST.IP_PROTOCOL_SAT_MON, protocol="VISA",XDM_CONST.IP_PROTOCOL_VISA, protocol="IPCV",XDM_CONST.IP_PROTOCOL_IPCV, protocol="CPNX",XDM_CONST.IP_PROTOCOL_CPNX, protocol="CPHB",XDM_CONST.IP_PROTOCOL_CPHB, protocol="WSN",XDM_CONST.IP_PROTOCOL_WSN, protocol="PVP",XDM_CONST.IP_PROTOCOL_PVP, protocol="BR_SAT_MON",XDM_CONST.IP_PROTOCOL_BR_SAT_MON, protocol="SUN_ND",XDM_CONST.IP_PROTOCOL_SUN_ND, protocol="WB_MON",XDM_CONST.IP_PROTOCOL_WB_MON, protocol="WB_EXPAK",XDM_CONST.IP_PROTOCOL_WB_EXPAK, protocol="ISO_IP",XDM_CONST.IP_PROTOCOL_ISO_IP, protocol="VMTP",XDM_CONST.IP_PROTOCOL_VMTP, protocol="SECURE_VMTP",XDM_CONST.IP_PROTOCOL_SECURE_VMTP, protocol="VINES",XDM_CONST.IP_PROTOCOL_VINES, protocol="TTP",XDM_CONST.IP_PROTOCOL_TTP, protocol="NSFNET_IGP",XDM_CONST.IP_PROTOCOL_NSFNET_IGP, protocol="DGP",XDM_CONST.IP_PROTOCOL_DGP, protocol="TCF",XDM_CONST.IP_PROTOCOL_TCF, protocol="EIGRP",XDM_CONST.IP_PROTOCOL_EIGRP, protocol="OSPFIGP",XDM_CONST.IP_PROTOCOL_OSPFIGP, protocol="SPRITE_RPC",XDM_CONST.IP_PROTOCOL_SPRITE_RPC, protocol="LARP",XDM_CONST.IP_PROTOCOL_LARP, protocol="MTP",XDM_CONST.IP_PROTOCOL_MTP, protocol="AX25",XDM_CONST.IP_PROTOCOL_AX25, protocol="IPIP",XDM_CONST.IP_PROTOCOL_IPIP, protocol="MICP",XDM_CONST.IP_PROTOCOL_MICP, protocol="SCC_SP",XDM_CONST.IP_PROTOCOL_SCC_SP, protocol="ETHERIP",XDM_CONST.IP_PROTOCOL_ETHERIP, protocol="ENCAP",XDM_CONST.IP_PROTOCOL_ENCAP, protocol="GMTP",XDM_CONST.IP_PROTOCOL_GMTP, protocol="IFMP",XDM_CONST.IP_PROTOCOL_IFMP, protocol="PNNI",XDM_CONST.IP_PROTOCOL_PNNI, protocol="PIM",XDM_CONST.IP_PROTOCOL_PIM, protocol="ARIS",XDM_CONST.IP_PROTOCOL_ARIS, protocol="SCPS",XDM_CONST.IP_PROTOCOL_SCPS, protocol="QNX",XDM_CONST.IP_PROTOCOL_QNX, protocol="AN",XDM_CONST.IP_PROTOCOL_AN, protocol="IPCOMP",XDM_CONST.IP_PROTOCOL_IPCOMP, protocol="COMPAQ_PEER",XDM_CONST.IP_PROTOCOL_COMPAQ_PEER, protocol="IPX_IN_IP",XDM_CONST.IP_PROTOCOL_IPX_IN_IP, protocol="VRRP",XDM_CONST.IP_PROTOCOL_VRRP, protocol="PGM",XDM_CONST.IP_PROTOCOL_PGM, protocol="L2TP",XDM_CONST.IP_PROTOCOL_L2TP, protocol="DDX",XDM_CONST.IP_PROTOCOL_DDX, protocol="IATP",XDM_CONST.IP_PROTOCOL_IATP, protocol="STP",XDM_CONST.IP_PROTOCOL_STP, protocol="SRP",XDM_CONST.IP_PROTOCOL_SRP, protocol="UTI",XDM_CONST.IP_PROTOCOL_UTI, protocol="SMP",XDM_CONST.IP_PROTOCOL_SMP, protocol="SM",XDM_CONST.IP_PROTOCOL_SM, protocol="PTP",XDM_CONST.IP_PROTOCOL_PTP, protocol="ISIS",XDM_CONST.IP_PROTOCOL_ISIS, protocol="FIRE",XDM_CONST.IP_PROTOCOL_FIRE, protocol="CRTP",XDM_CONST.IP_PROTOCOL_CRTP, protocol="CRUDP",XDM_CONST.IP_PROTOCOL_CRUDP, protocol="SSCOPMCE",XDM_CONST.IP_PROTOCOL_SSCOPMCE, protocol="IPLT",XDM_CONST.IP_PROTOCOL_IPLT, protocol="SPS",XDM_CONST.IP_PROTOCOL_SPS, protocol="PIPE",XDM_CONST.IP_PROTOCOL_PIPE, protocol="SCTP",XDM_CONST.IP_PROTOCOL_SCTP, protocol="FC",XDM_CONST.IP_PROTOCOL_FC, protocol="RSVP_E2E_IGNORE",XDM_CONST.IP_PROTOCOL_RSVP_E2E_IGNORE, protocol="MOBILITY",XDM_CONST.IP_PROTOCOL_MOBILITY, protocol="UDPLITE",XDM_CONST.IP_PROTOCOL_UDPLITE, protocol="MPLS_IN_IP",XDM_CONST.IP_PROTOCOL_MPLS_IN_IP,to_string(protocol)),
    xdm.event.outcome = if(outcome in("succeeded","permitted") , XDM_CONST.OUTCOME_SUCCESS , outcome in ("failed","denied"),XDM_CONST.OUTCOME_FAILED ,to_string(outcome)),
    xdm.event.original_event_type = to_string(event_id),
    xdm.event.id = to_string(event_id),
    xdm.event.description = message,
    xdm.alert.severity = severity,
    xdm.source.ipv4 = source_ip,
    xdm.source.port = to_integer(source_port),
    xdm.target.ipv4 = dst_ip,
    xdm.target.port = to_integer(dst_port),
    xdm.target.zone = dst_interface,
    xdm.target.user.username = dst_username,
    xdm.event.outcome_reason = action,
    xdm.observer.name = observer_name,
    xdm.event.is_completed = if(action contains "Teardown",true, false);

//<source_interface>:<source_ip>/<source_port> to <dest_interface>:<dest_ip>/<dest_port>
config case_sensitive = true

| filter 
    _raw_log ~= "\w+\s[\w\-]+\:(?:[\w\-\.]+)\/\d{1,5}(?:\s*\(.+?\)\s*)?\sto\s[\w\-]+\:(?:[\w\-\.]+)\/\d{1,5}(?:\s*\(.+?\)\s*)?" or 
    //<source_interface>:<source_ip>/<source_port>(<source_username>) to <dest_interface>:<dest_ip>/<dest_port>
    _raw_log ~= "\w+\s[\w\-]+\:\d+\.\d+\.\d+\.\d+\/\d+\([^\)]+\)\sto\s[\w\-]+\:\d+\.\d+\.\d+\.\d+\/\d+" or
    //<source_interface>:<source_ip>/<source_port> (<mapped_source_ip>/<mapped_source_port>) to <dest_interface>:<dest_ip>/<dest_port> (<mapped_dst_ip>/<mapped_dst_port>)
    _raw_log ~= "\w+\s[\w\-]+\:\d+\.\d+\.\d+\.\d+\/\d+\s\(\d+\.\d+\.\d+\.\d+\/\d+\)\sto\s[\w\-]+\:\d+\.\d+\.\d+\.\d+\/\d+\s\(\d+\.\d+\.\d+\.\d+\/\d+\)" or
    //<source_interface>:<source_ip>/<source_port> (<mapped_source_ip>/<mapped_source_port>)(<source_username>) to <dest_interface>:<dest_ip>/<dest_port> (<mapped_dst_ip>/<mapped_dst_port>) (<dst_username>)
    _raw_log ~= "\w+\s[\w\-]+\:\d+\.\d+\.\d+\.\d+\/\d+\s\(\d+\.\d+\.\d+\.\d+\/\d+\)\([^\)]+\)\sto\s[\w\-]+\:\d+\.\d+\.\d+\.\d+\/\d+\s\(\d+\.\d+\.\d+\.\d+\/\d+\)"
| call cisco_asa_main_fields_extraction
| alter action = arrayindex(regextract(_raw_log,"\%ASA\-(?:session)*\-*\d\-\d+\:\s([A-Za-z\s\:]+)\sfrom"),0)
| alter
    src_ip = if(action contains "Built inbound",arrayindex(regextract(_raw_log ,"(?:for|to)\s[o|O]utside\:(\d+\.\d+\.\d+\.\d+)\/\d+\s*"),0),
    action contains "Built outbound",arrayindex(regextract(_raw_log ,"(?:for|to)\sinside\:(\d+\.\d+\.\d+\.\d+)\/\d+"),0),
    arrayindex(regextract(_raw_log ,"(?:for|from)\s[\w\-\_]+\:(\d+\.\d+\.\d+\.\d+)\/\d+"),0)),
    source_port = if(event_id in(302014, 302015, 302016), arrayindex(regextract(_raw_log, "connection \d+ for \S+?:[\w\-\.]+\/(\d{1,5})"), 0), action contains "Built inbound",arrayindex(regextract(_raw_log ,"(?:for|to)\s[o|O]utside\:\s*\d+\.\d+\.\d+\.\d+\/(\d+)"),0), action contains "Built outbound",arrayindex(regextract(_raw_log ,"(?:for|to)\sinside\:\s*\d+\.\d+\.\d+\.\d+\/(\d+)"),0),arrayindex(regextract(_raw_log ,"(?:for|from)\s[\w\-\_]+\:\d+\.\d+\.\d+\.\d+\/(\d+)"),0)),
    dest_ip = if(action contains "Built inbound",arrayindex(regextract(_raw_log ,"(?:for|to)\s[i|I]nside\:(\d+\.\d+\.\d+\.\d+)\/\d+"),0),action contains "Built outbound",arrayindex(regextract(_raw_log ,"(?:for|to)\soutside\:(\d+\.\d+\.\d+\.\d+)\/\d+"),0),
    arrayindex(regextract(_raw_log ,"to\s[\w\-\_]+\:(\d+\.\d+\.\d+\.\d+)\/\d+"),0)),
    dest_port = if(event_id in(302014, 302015, 302016), arrayindex(regextract(_raw_log, "to \S+?:[\w\-\.]+\/(\d{1,5})"), 0), action contains "Built inbound",arrayindex(regextract(_raw_log ,"(?:for|to)\s[i|I]nside\:\d+\.\d+\.\d+\.\d+\/(\d+)"),0),
    action contains "Built outbound",arrayindex(regextract(_raw_log ,"(?:for|to)\soutside\:\d+\.\d+\.\d+\.\d+\/(\d+)"),0),
    arrayindex(regextract(_raw_log ,"to\s[\w\-\_]+\:\d+\.\d+\.\d+\.\d+\/(\d+)"),0)),
    source_interface = if(event_id in(302014, 302015, 302016), arrayindex(regextract(_raw_log, "for (\S+?):[\w\-\.]+\/\d{1,5}"), 0), action contains "Built inbound",arrayindex(regextract(_raw_log ,"(?:for|to)\s([o|O]utside)\:\d+\.\d+\.\d+\.\d+\/\d+"),0), action contains "Built outbound",arrayindex(regextract(_raw_log ,"(?:for|to)\s([i|I]nside)\:\d+\.\d+\.\d+\.\d+\/\d+"),0),arrayindex(regextract(_raw_log ,"(?:for|from)\s([\w\-\_]+)\:\d+\.\d+\.\d+\.\d+\/\d+"),0)),
    dest_interface = if(event_id in(302014, 302015, 302016), arrayindex(regextract(_raw_log, "to (\S+?):[\w\-\.]+\/\d{1,5}"), 0), action contains "Built inbound",arrayindex(regextract(_raw_log ,"(?:for|to)\s([i|I]nside)\:\d+\.\d+\.\d+\.\d+\/\d+"),0), action contains "Built outbound",arrayindex(regextract(_raw_log ,"(?:for|to)\s([o|O]utside)\:\d+\.\d+\.\d+\.\d+\/\d+"),0),arrayindex(regextract(_raw_log ,"to\s([\w\-\_]+)\:\d+\.\d+\.\d+\.\d+\/\d+"),0)),
    source_username = if(
        event_id in (302014, 302016), arrayindex(regextract(_raw_log ,"for\s[\w+\-]+\:(?:\d{1,3}\.){3}\d{1,3}\/\d{1,5}\s*\(\s*([^\)\s]+)\s*\)"), 0), 
        action contains "Built (?:inbound|outbound)", arrayindex(regextract(_raw_log ,"(?:for|to)\s(?:[o|O]utside|[i|I]nside)\:(?:\d{1,3}\.){3}\d{1,3}\/\d{1,5}\s*\([^\)]+\)\(([^\)]+)\)"), 0), 
        arrayindex(regextract(_raw_log ,"(?:for|from)\s[\w+\-]+\:(?:\d{1,3}\.){3}\d{1,3}\/\d{1,5}\(*[^\)]*\)*\s*\(([^\)]+)\)"), 0)),
    dst_username1 = if(
        event_id in (302014, 30216), arrayindex(regextract(_raw_log ,"to\s[\w+\-]+\:(?:\d{1,3}\.){3}\d{1,3}\/\d{1,5}\s*\(\s*([^\)\s]+)\s*\)"), 0), 
        action contains "Built (?:inbound|outbound)",arrayindex(regextract(_raw_log ,"(?:for|to)\s(?:[i|I]nside|[o|O]utside)\:(?:\d{1,3}\.){3}\d{1,3}\/\d{1,5}\s*\([^\)]+\)\s\(([^\)]+)\)"), 0), 
        arrayindex(regextract(_raw_log ,"to\s[\w+\_\-]+\:\d+\.\d+\.\d+\.\d+\/\d+\s*\([^\)]+\)\s\(([^\)]+)\)"),0)),
    dst_username2 = arrayindex(regextract(_raw_log ,",\suser\s([\w\_\-]+)\s"),0),
    source_host = if(event_id in(302014, 302015, 302016), arrayindex(regextract(_raw_log, "connection \d+ for \S+?:([\w\-\.]+)\/\d{1,5}"), 0)),
    dest_host = if(event_id in(302014, 302015, 302016), arrayindex(regextract(_raw_log, "to \S+?:([\w\-\.]+)\/\d{1,5}"), 0)),
    bytes1 = arrayindex(regextract(_raw_log  ,"\d{2}\:\d{2}\sbytes\s(\d+)"),0),
    bytes2 = arrayindex(regextract(_raw_log  ,"label\slength\s(\d+)\sbytes\sexceeds"),0),
    protocol1 = arrayindex(regextract(_raw_log ,"\d+\-\d+\:\s*[A-Za-z]*\s+[A-Z]*[a-z]+\s+([A-Z]+)\s+"),0),
    protocol2 = arrayindex(regextract(_raw_log ,"\d+\-\d+\:\s([A-Z]{3,})\s"),0),
    protocol3 = uppercase(arrayindex(regextract(_raw_log ,"\s([A-Z]+)\sflow\sfrom"),0)),
    protocol4 = arrayindex(regextract(_raw_log ,"for\s([A-Z]{3,})\sfrom"),0),
    protocol5 = arrayindex(regextract(_raw_log ,"([A-Z]+)\s[A-Za-z]+\sfrom"),0),
    //
    icmp_code1 = arrayindex(regextract(_raw_log ,"for\sfaddr\s\d+\.\d+\.\d+\.\d+\/(\d+)\("),0),
    icmp_code2 = arrayindex(regextract(_raw_log ,"ICMP\scode\s(\d+)\,"),0),
    icmp_type = arrayindex(regextract(_raw_log ,"ICMP\stype\s(\d+)"),0),
    connection_id = arrayindex(regextract(_raw_log ,"connection\s(\d+)\sfor"),0)
| alter source_username = if(source_username ~= "\d+\.\d+\.\d+\.\d+",null,source_username ),
    dst_username1 = if(dst_username1 ~= "\d+\.\d+\.\d+\.\d+",null,dst_username1 ),
    src_ip = if(src_ip = null,arrayindex(regextract(_raw_log ,"(?:for|from)\s[\w\-\_]+\:(\d+\.\d+\.\d+\.\d+)\/\d+"),0),src_ip),
    dest_ip = if(dest_ip = null,arrayindex(regextract(_raw_log ,"to\s[\w\-\_]+\:(\d+\.\d+\.\d+\.\d+)\/\d+"),0),dest_ip),
    source_port = to_integer(if(source_port = null,arrayindex(regextract(_raw_log ,"(?:for|from)\s[\w\-\_]+\:\d+\.\d+\.\d+\.\d+\/(\d+)"),0),source_port)),
    dest_port = to_integer(if(dest_port = null,arrayindex(regextract(_raw_log ,"to\s[\w\-\_]+\:\d+\.\d+\.\d+\.\d+\/(\d+)"),0),dest_port)),
    source_interface = if(source_interface = null,arrayindex(regextract(_raw_log ,"(?:for|from)\s([\w\-\_]+)\:\d+\.\d+\.\d+\.\d+\/\d+"),0),source_interface),
    dest_interface = if(dest_interface = null,arrayindex(regextract(_raw_log ,"to\s([\w\-\_]+)\:\d+\.\d+\.\d+\.\d+\/\d+"),0),dest_interface),
    source_host = if(source_host !~= "(?:\d{1,3}\.){3}\d{1,3}", source_host),
    dest_host = if(dest_host !~= "(?:\d{1,3}\.){3}\d{1,3}", dest_host)
// duration
| alter
        duration_string_no_days = arrayindex(regextract(_raw_log ,"[D|d]uration\:*\s+([hH0-9]+:[mM0-9]+:[sS0-9]+)[\s|\,]*"),0),
        duration_string_days = arrayindex(regextract(_raw_log ,"[D|d]uration\:*\s+([dD0-9]*\s[hH0-9]+:[mM0-9]+:[sS0-9]+)[\s|\,]*"),0)
| alter
        duration_days = arrayindex(split(duration_string_days ," "), 0),
        duration_string = arrayindex(split(duration_string_days ," "), 1)
| alter duration_string = if(duration_string = null or duration_string = "", duration_string_no_days, duration_string)
| alter duration_split = split(duration_string ,":")
// duration parts
| alter
        duration_part_0 = arrayindex(duration_split,0),
        duration_part_1 = arrayindex(duration_split,1),
        duration_part_2 = arrayindex(duration_split,2)
| alter
        duration_part_0_millis = if(duration_part_0 contains "h", multiply(to_integer(arrayindex(regextract(duration_part_0 ,"\d+"),0)),3600000),duration_part_0 ~= "\d+" and duration_part_0 != "0", multiply(to_integer(duration_part_0), 3600000), 0),
        duration_part_1_millis = if(duration_part_1 contains "m", multiply(to_integer(arrayindex(regextract(duration_part_1 ,"\d+"),0)),60000), duration_part_1 ~= "\d+" and duration_part_1 != "0", multiply(to_integer(duration_part_1), 60000), 0),
        duration_part_2_millis = if(duration_part_2 contains "s", multiply(to_integer(arrayindex(regextract(duration_part_2 ,"\d+"),0)),1000) ,duration_part_2 ~= "\d+" and duration_part_2 != "0", multiply(to_integer(duration_part_2), 1000), 0),
        duration_part_days = if(duration_days != null, multiply(to_integer(arrayindex(regextract(duration_days ,"\d+"),0)),86400000),0)
| alter duration = add(add(add(duration_part_0_millis , duration_part_1_millis ),duration_part_2_millis), duration_part_days)
| alter sent_bytes = to_integer(coalesce(bytes1, bytes2)),
    icmp_code = coalesce(icmp_code1, icmp_code2),
    protocol = coalesce(protocol1, protocol2, protocol3, protocol4, protocol5),
    dst_username = coalesce(dst_username1, dst_username2)

// determine if src & dst peers should be swapped 
| alter is_teardown_direction_swap = if(event_id in (302014, 302016) and ( // tcp & udp connection teardown 
    src_ip = "255.255.255.255" // broadcast 
    or incidr(src_ip, "224.0.0.0/4") // multicast 
    or (source_port < 1024 and dest_port >= 1024) // well known ports 
    or (protocol = "UDP" and (source_port = 2944 or (source_port = 67 and dest_port = 68))))) // Megaco H248 / DHCP

| alter // XDM mappings 
    xdm.alert.severity = severity,
    xdm.event.description = message,
    xdm.event.duration = to_integer(duration),
    xdm.event.id = to_string(event_id),
    xdm.event.is_completed = if(action contains "Teardown" or _raw_log contains "Teardown", true, false),
    xdm.event.original_event_type = to_string(event_id),
    xdm.event.outcome_reason = action,
    xdm.network.icmp.code = to_integer(icmp_code),
    xdm.network.icmp.type = to_integer(icmp_type),
    xdm.network.ip_protocol = if(protocol="HOPOPT",XDM_CONST.IP_PROTOCOL_HOPOPT, protocol="ICMP",XDM_CONST.IP_PROTOCOL_ICMP, protocol="IGMP",XDM_CONST.IP_PROTOCOL_IGMP, protocol="GGP",XDM_CONST.IP_PROTOCOL_GGP, protocol="IP",XDM_CONST.IP_PROTOCOL_IP, protocol="ST",XDM_CONST.IP_PROTOCOL_ST, protocol="TCP",XDM_CONST.IP_PROTOCOL_TCP, protocol="CBT",XDM_CONST.IP_PROTOCOL_CBT, protocol="EGP",XDM_CONST.IP_PROTOCOL_EGP, protocol="IGP",XDM_CONST.IP_PROTOCOL_IGP, protocol="BBN_RCC_MON",XDM_CONST.IP_PROTOCOL_BBN_RCC_MON, protocol="NVP_II",XDM_CONST.IP_PROTOCOL_NVP_II, protocol="PUP",XDM_CONST.IP_PROTOCOL_PUP, protocol="ARGUS",XDM_CONST.IP_PROTOCOL_ARGUS, protocol="EMCON",XDM_CONST.IP_PROTOCOL_EMCON, protocol="XNET",XDM_CONST.IP_PROTOCOL_XNET, protocol="CHAOS",XDM_CONST.IP_PROTOCOL_CHAOS, protocol="UDP",XDM_CONST.IP_PROTOCOL_UDP, protocol="MUX",XDM_CONST.IP_PROTOCOL_MUX, protocol="DCN_MEAS",XDM_CONST.IP_PROTOCOL_DCN_MEAS, protocol="HMP",XDM_CONST.IP_PROTOCOL_HMP, protocol="PRM",XDM_CONST.IP_PROTOCOL_PRM, protocol="XNS_IDP",XDM_CONST.IP_PROTOCOL_XNS_IDP, protocol="TRUNK_1",XDM_CONST.IP_PROTOCOL_TRUNK_1, protocol="TRUNK_2",XDM_CONST.IP_PROTOCOL_TRUNK_2, protocol="LEAF_1",XDM_CONST.IP_PROTOCOL_LEAF_1, protocol="LEAF_2",XDM_CONST.IP_PROTOCOL_LEAF_2, protocol="RDP",XDM_CONST.IP_PROTOCOL_RDP, protocol="IRTP",XDM_CONST.IP_PROTOCOL_IRTP, protocol="ISO_TP4",XDM_CONST.IP_PROTOCOL_ISO_TP4, protocol="NETBLT",XDM_CONST.IP_PROTOCOL_NETBLT, protocol="MFE_NSP",XDM_CONST.IP_PROTOCOL_MFE_NSP, protocol="MERIT_INP",XDM_CONST.IP_PROTOCOL_MERIT_INP, protocol="DCCP",XDM_CONST.IP_PROTOCOL_DCCP, protocol="3PC",XDM_CONST.IP_PROTOCOL_3PC, protocol="IDPR",XDM_CONST.IP_PROTOCOL_IDPR, protocol="XTP",XDM_CONST.IP_PROTOCOL_XTP, protocol="DDP",XDM_CONST.IP_PROTOCOL_DDP, protocol="IDPR_CMTP",XDM_CONST.IP_PROTOCOL_IDPR_CMTP, protocol="TP",XDM_CONST.IP_PROTOCOL_TP, protocol="IL",XDM_CONST.IP_PROTOCOL_IL, protocol="IPV6",XDM_CONST.IP_PROTOCOL_IPV6, protocol="SDRP",XDM_CONST.IP_PROTOCOL_SDRP, protocol="IPV6_ROUTE",XDM_CONST.IP_PROTOCOL_IPV6_ROUTE, protocol="IPV6_FRAG",XDM_CONST.IP_PROTOCOL_IPV6_FRAG, protocol="IDRP",XDM_CONST.IP_PROTOCOL_IDRP, protocol="RSVP",XDM_CONST.IP_PROTOCOL_RSVP, protocol="GRE",XDM_CONST.IP_PROTOCOL_GRE, protocol="DSR",XDM_CONST.IP_PROTOCOL_DSR, protocol="BNA",XDM_CONST.IP_PROTOCOL_BNA, protocol="ESP",XDM_CONST.IP_PROTOCOL_ESP, protocol="AH",XDM_CONST.IP_PROTOCOL_AH, protocol="I_NLSP",XDM_CONST.IP_PROTOCOL_I_NLSP, protocol="SWIPE",XDM_CONST.IP_PROTOCOL_SWIPE, protocol="NARP",XDM_CONST.IP_PROTOCOL_NARP, protocol="MOBILE",XDM_CONST.IP_PROTOCOL_MOBILE, protocol="TLSP",XDM_CONST.IP_PROTOCOL_TLSP, protocol="SKIP",XDM_CONST.IP_PROTOCOL_SKIP, protocol="IPV6_ICMP",XDM_CONST.IP_PROTOCOL_IPV6_ICMP, protocol="IPV6_NONXT",XDM_CONST.IP_PROTOCOL_IPV6_NONXT, protocol="IPV6_OPTS",XDM_CONST.IP_PROTOCOL_IPV6_OPTS, protocol="CFTP",XDM_CONST.IP_PROTOCOL_CFTP, protocol="SAT_EXPAK",XDM_CONST.IP_PROTOCOL_SAT_EXPAK, protocol="KRYPTOLAN",XDM_CONST.IP_PROTOCOL_KRYPTOLAN, protocol="RVD",XDM_CONST.IP_PROTOCOL_RVD, protocol="IPPC",XDM_CONST.IP_PROTOCOL_IPPC, protocol="SAT_MON",XDM_CONST.IP_PROTOCOL_SAT_MON, protocol="VISA",XDM_CONST.IP_PROTOCOL_VISA, protocol="IPCV",XDM_CONST.IP_PROTOCOL_IPCV, protocol="CPNX",XDM_CONST.IP_PROTOCOL_CPNX, protocol="CPHB",XDM_CONST.IP_PROTOCOL_CPHB, protocol="WSN",XDM_CONST.IP_PROTOCOL_WSN, protocol="PVP",XDM_CONST.IP_PROTOCOL_PVP, protocol="BR_SAT_MON",XDM_CONST.IP_PROTOCOL_BR_SAT_MON, protocol="SUN_ND",XDM_CONST.IP_PROTOCOL_SUN_ND, protocol="WB_MON",XDM_CONST.IP_PROTOCOL_WB_MON, protocol="WB_EXPAK",XDM_CONST.IP_PROTOCOL_WB_EXPAK, protocol="ISO_IP",XDM_CONST.IP_PROTOCOL_ISO_IP, protocol="VMTP",XDM_CONST.IP_PROTOCOL_VMTP, protocol="SECURE_VMTP",XDM_CONST.IP_PROTOCOL_SECURE_VMTP, protocol="VINES",XDM_CONST.IP_PROTOCOL_VINES, protocol="TTP",XDM_CONST.IP_PROTOCOL_TTP, protocol="NSFNET_IGP",XDM_CONST.IP_PROTOCOL_NSFNET_IGP, protocol="DGP",XDM_CONST.IP_PROTOCOL_DGP, protocol="TCF",XDM_CONST.IP_PROTOCOL_TCF, protocol="EIGRP",XDM_CONST.IP_PROTOCOL_EIGRP, protocol="OSPFIGP",XDM_CONST.IP_PROTOCOL_OSPFIGP, protocol="SPRITE_RPC",XDM_CONST.IP_PROTOCOL_SPRITE_RPC, protocol="LARP",XDM_CONST.IP_PROTOCOL_LARP, protocol="MTP",XDM_CONST.IP_PROTOCOL_MTP, protocol="AX25",XDM_CONST.IP_PROTOCOL_AX25, protocol="IPIP",XDM_CONST.IP_PROTOCOL_IPIP, protocol="MICP",XDM_CONST.IP_PROTOCOL_MICP, protocol="SCC_SP",XDM_CONST.IP_PROTOCOL_SCC_SP, protocol="ETHERIP",XDM_CONST.IP_PROTOCOL_ETHERIP, protocol="ENCAP",XDM_CONST.IP_PROTOCOL_ENCAP, protocol="GMTP",XDM_CONST.IP_PROTOCOL_GMTP, protocol="IFMP",XDM_CONST.IP_PROTOCOL_IFMP, protocol="PNNI",XDM_CONST.IP_PROTOCOL_PNNI, protocol="PIM",XDM_CONST.IP_PROTOCOL_PIM, protocol="ARIS",XDM_CONST.IP_PROTOCOL_ARIS, protocol="SCPS",XDM_CONST.IP_PROTOCOL_SCPS, protocol="QNX",XDM_CONST.IP_PROTOCOL_QNX, protocol="AN",XDM_CONST.IP_PROTOCOL_AN, protocol="IPCOMP",XDM_CONST.IP_PROTOCOL_IPCOMP, protocol="COMPAQ_PEER",XDM_CONST.IP_PROTOCOL_COMPAQ_PEER, protocol="IPX_IN_IP",XDM_CONST.IP_PROTOCOL_IPX_IN_IP, protocol="VRRP",XDM_CONST.IP_PROTOCOL_VRRP, protocol="PGM",XDM_CONST.IP_PROTOCOL_PGM, protocol="L2TP",XDM_CONST.IP_PROTOCOL_L2TP, protocol="DDX",XDM_CONST.IP_PROTOCOL_DDX, protocol="IATP",XDM_CONST.IP_PROTOCOL_IATP, protocol="STP",XDM_CONST.IP_PROTOCOL_STP, protocol="SRP",XDM_CONST.IP_PROTOCOL_SRP, protocol="UTI",XDM_CONST.IP_PROTOCOL_UTI, protocol="SMP",XDM_CONST.IP_PROTOCOL_SMP, protocol="SM",XDM_CONST.IP_PROTOCOL_SM, protocol="PTP",XDM_CONST.IP_PROTOCOL_PTP, protocol="ISIS",XDM_CONST.IP_PROTOCOL_ISIS, protocol="FIRE",XDM_CONST.IP_PROTOCOL_FIRE, protocol="CRTP",XDM_CONST.IP_PROTOCOL_CRTP, protocol="CRUDP",XDM_CONST.IP_PROTOCOL_CRUDP, protocol="SSCOPMCE",XDM_CONST.IP_PROTOCOL_SSCOPMCE, protocol="IPLT",XDM_CONST.IP_PROTOCOL_IPLT, protocol="SPS",XDM_CONST.IP_PROTOCOL_SPS, protocol="PIPE",XDM_CONST.IP_PROTOCOL_PIPE, protocol="SCTP",XDM_CONST.IP_PROTOCOL_SCTP, protocol="FC",XDM_CONST.IP_PROTOCOL_FC, protocol="RSVP_E2E_IGNORE",XDM_CONST.IP_PROTOCOL_RSVP_E2E_IGNORE, protocol="MOBILITY",XDM_CONST.IP_PROTOCOL_MOBILITY, protocol="UDPLITE",XDM_CONST.IP_PROTOCOL_UDPLITE, protocol="MPLS_IN_IP",XDM_CONST.IP_PROTOCOL_MPLS_IN_IP,to_string(protocol)),
    xdm.network.session_id = connection_id,
    xdm.observer.name = observer_name,
    xdm.session_context_id = connection_id,
    xdm.source.host.hostname = if(is_teardown_direction_swap, dest_host, source_host), 
    xdm.source.interface = if(is_teardown_direction_swap, dest_interface, source_interface),
    xdm.source.ipv4 = if(is_teardown_direction_swap, dest_ip, src_ip),
    xdm.source.port = if(is_teardown_direction_swap, dest_port, source_port),
    xdm.source.sent_bytes = if(not is_teardown_direction_swap, sent_bytes),
    xdm.source.user.username = if(is_teardown_direction_swap, dst_username, source_username),
    xdm.source.zone = if(is_teardown_direction_swap, dest_interface, source_interface),
    xdm.target.host.hostname = if(is_teardown_direction_swap, source_host, dest_host), 
    xdm.target.interface = if(is_teardown_direction_swap, source_interface, dest_interface),
    xdm.target.ipv4 = if(is_teardown_direction_swap, src_ip, dest_ip),
    xdm.target.port = if(is_teardown_direction_swap, source_port, dest_port),
    xdm.target.sent_bytes = if(is_teardown_direction_swap, sent_bytes),
    xdm.target.user.username = if(is_teardown_direction_swap, source_username, dst_username),
    xdm.target.zone = if(is_teardown_direction_swap, source_interface, dest_interface);

//from <source_ip>/<source_port> to <dst_interface>:<dst_ip>:<dst_port>
//from <source_ip>/<source_port> to <dst_interface>:<dst_ip>:<protocol>
config case_sensitive = true
| filter _raw_log  ~= "from\s\d+\.\d+\.\d+\.\d+\/\d+\sto\s\w+\:\d+\.\d+\.\d+\.\d+\/[A-Za-z\d]+"
| call cisco_asa_main_fields_extraction
| alter action = arrayindex(regextract(_raw_log ,"\%ASA\-[session]*\-*\d\-\d+[\:|\s\-]+\s(.*)from\s\d+\."),0),
    src_ip = arrayindex(regextract(_raw_log ,"from\s(\d+\.\d+\.\d+\.\d+)\/\d+\sto\s\w+\:\d+\.\d+\.\d+\.\d+"),0),
    src_port = arrayindex(regextract(_raw_log ,"from\s\d+\.\d+\.\d+\.\d+\/(\d+)\sto\s\w+\:\d+\.\d+\.\d+\.\d+"),0),
    dst_ip = arrayindex(regextract(_raw_log ,"from\s\d+\.\d+\.\d+\.\d+\/\d+\sto\s\w+\:(\d+\.\d+\.\d+\.\d+)\/[A-Za-z\d]+"),0),
    dst_port = arrayindex(regextract(_raw_log ,"from\s\d+\.\d+\.\d+\.\d+\/\d+\sto\s\w+\:\d+\.\d+\.\d+\.\d+\/(\d+)"),0),
    dst_interface = arrayindex(regextract(_raw_log ,"from\s\d+\.\d+\.\d+\.\d+\/\d+\sto\s(\w+)\:\d+\.\d+\.\d+\.\d+"),0),
    protocol1 = arrayindex(regextract(_raw_log,"\%ASA\-[session]*\-*\d\-\d+\:\s([A-Z]{3,})\s"),0),
    protocol2 = arrayindex(regextract(_raw_log ,"\sto\s\w+\:\d+\.\d+\.\d+\.\d+\/([A-Za-z]+)"),0),
    dst_user = arrayindex(regextract(_raw_log ,"for\suser\s\"([^\"]+)\""),0)
| alter protocol = uppercase(coalesce(protocol1 , protocol2 ))
| alter
    xdm.network.ip_protocol = if(protocol="HOPOPT",XDM_CONST.IP_PROTOCOL_HOPOPT, protocol="ICMP",XDM_CONST.IP_PROTOCOL_ICMP, protocol="IGMP",XDM_CONST.IP_PROTOCOL_IGMP, protocol="GGP",XDM_CONST.IP_PROTOCOL_GGP, protocol="IP",XDM_CONST.IP_PROTOCOL_IP, protocol="ST",XDM_CONST.IP_PROTOCOL_ST, protocol="TCP",XDM_CONST.IP_PROTOCOL_TCP, protocol="CBT",XDM_CONST.IP_PROTOCOL_CBT, protocol="EGP",XDM_CONST.IP_PROTOCOL_EGP, protocol="IGP",XDM_CONST.IP_PROTOCOL_IGP, protocol="BBN_RCC_MON",XDM_CONST.IP_PROTOCOL_BBN_RCC_MON, protocol="NVP_II",XDM_CONST.IP_PROTOCOL_NVP_II, protocol="PUP",XDM_CONST.IP_PROTOCOL_PUP, protocol="ARGUS",XDM_CONST.IP_PROTOCOL_ARGUS, protocol="EMCON",XDM_CONST.IP_PROTOCOL_EMCON, protocol="XNET",XDM_CONST.IP_PROTOCOL_XNET, protocol="CHAOS",XDM_CONST.IP_PROTOCOL_CHAOS, protocol="UDP",XDM_CONST.IP_PROTOCOL_UDP, protocol="MUX",XDM_CONST.IP_PROTOCOL_MUX, protocol="DCN_MEAS",XDM_CONST.IP_PROTOCOL_DCN_MEAS, protocol="HMP",XDM_CONST.IP_PROTOCOL_HMP, protocol="PRM",XDM_CONST.IP_PROTOCOL_PRM, protocol="XNS_IDP",XDM_CONST.IP_PROTOCOL_XNS_IDP, protocol="TRUNK_1",XDM_CONST.IP_PROTOCOL_TRUNK_1, protocol="TRUNK_2",XDM_CONST.IP_PROTOCOL_TRUNK_2, protocol="LEAF_1",XDM_CONST.IP_PROTOCOL_LEAF_1, protocol="LEAF_2",XDM_CONST.IP_PROTOCOL_LEAF_2, protocol="RDP",XDM_CONST.IP_PROTOCOL_RDP, protocol="IRTP",XDM_CONST.IP_PROTOCOL_IRTP, protocol="ISO_TP4",XDM_CONST.IP_PROTOCOL_ISO_TP4, protocol="NETBLT",XDM_CONST.IP_PROTOCOL_NETBLT, protocol="MFE_NSP",XDM_CONST.IP_PROTOCOL_MFE_NSP, protocol="MERIT_INP",XDM_CONST.IP_PROTOCOL_MERIT_INP, protocol="DCCP",XDM_CONST.IP_PROTOCOL_DCCP, protocol="3PC",XDM_CONST.IP_PROTOCOL_3PC, protocol="IDPR",XDM_CONST.IP_PROTOCOL_IDPR, protocol="XTP",XDM_CONST.IP_PROTOCOL_XTP, protocol="DDP",XDM_CONST.IP_PROTOCOL_DDP, protocol="IDPR_CMTP",XDM_CONST.IP_PROTOCOL_IDPR_CMTP, protocol="TP",XDM_CONST.IP_PROTOCOL_TP, protocol="IL",XDM_CONST.IP_PROTOCOL_IL, protocol="IPV6",XDM_CONST.IP_PROTOCOL_IPV6, protocol="SDRP",XDM_CONST.IP_PROTOCOL_SDRP, protocol="IPV6_ROUTE",XDM_CONST.IP_PROTOCOL_IPV6_ROUTE, protocol="IPV6_FRAG",XDM_CONST.IP_PROTOCOL_IPV6_FRAG, protocol="IDRP",XDM_CONST.IP_PROTOCOL_IDRP, protocol="RSVP",XDM_CONST.IP_PROTOCOL_RSVP, protocol="GRE",XDM_CONST.IP_PROTOCOL_GRE, protocol="DSR",XDM_CONST.IP_PROTOCOL_DSR, protocol="BNA",XDM_CONST.IP_PROTOCOL_BNA, protocol="ESP",XDM_CONST.IP_PROTOCOL_ESP, protocol="AH",XDM_CONST.IP_PROTOCOL_AH, protocol="I_NLSP",XDM_CONST.IP_PROTOCOL_I_NLSP, protocol="SWIPE",XDM_CONST.IP_PROTOCOL_SWIPE, protocol="NARP",XDM_CONST.IP_PROTOCOL_NARP, protocol="MOBILE",XDM_CONST.IP_PROTOCOL_MOBILE, protocol="TLSP",XDM_CONST.IP_PROTOCOL_TLSP, protocol="SKIP",XDM_CONST.IP_PROTOCOL_SKIP, protocol="IPV6_ICMP",XDM_CONST.IP_PROTOCOL_IPV6_ICMP, protocol="IPV6_NONXT",XDM_CONST.IP_PROTOCOL_IPV6_NONXT, protocol="IPV6_OPTS",XDM_CONST.IP_PROTOCOL_IPV6_OPTS, protocol="CFTP",XDM_CONST.IP_PROTOCOL_CFTP, protocol="SAT_EXPAK",XDM_CONST.IP_PROTOCOL_SAT_EXPAK, protocol="KRYPTOLAN",XDM_CONST.IP_PROTOCOL_KRYPTOLAN, protocol="RVD",XDM_CONST.IP_PROTOCOL_RVD, protocol="IPPC",XDM_CONST.IP_PROTOCOL_IPPC, protocol="SAT_MON",XDM_CONST.IP_PROTOCOL_SAT_MON, protocol="VISA",XDM_CONST.IP_PROTOCOL_VISA, protocol="IPCV",XDM_CONST.IP_PROTOCOL_IPCV, protocol="CPNX",XDM_CONST.IP_PROTOCOL_CPNX, protocol="CPHB",XDM_CONST.IP_PROTOCOL_CPHB, protocol="WSN",XDM_CONST.IP_PROTOCOL_WSN, protocol="PVP",XDM_CONST.IP_PROTOCOL_PVP, protocol="BR_SAT_MON",XDM_CONST.IP_PROTOCOL_BR_SAT_MON, protocol="SUN_ND",XDM_CONST.IP_PROTOCOL_SUN_ND, protocol="WB_MON",XDM_CONST.IP_PROTOCOL_WB_MON, protocol="WB_EXPAK",XDM_CONST.IP_PROTOCOL_WB_EXPAK, protocol="ISO_IP",XDM_CONST.IP_PROTOCOL_ISO_IP, protocol="VMTP",XDM_CONST.IP_PROTOCOL_VMTP, protocol="SECURE_VMTP",XDM_CONST.IP_PROTOCOL_SECURE_VMTP, protocol="VINES",XDM_CONST.IP_PROTOCOL_VINES, protocol="TTP",XDM_CONST.IP_PROTOCOL_TTP, protocol="NSFNET_IGP",XDM_CONST.IP_PROTOCOL_NSFNET_IGP, protocol="DGP",XDM_CONST.IP_PROTOCOL_DGP, protocol="TCF",XDM_CONST.IP_PROTOCOL_TCF, protocol="EIGRP",XDM_CONST.IP_PROTOCOL_EIGRP, protocol="OSPFIGP",XDM_CONST.IP_PROTOCOL_OSPFIGP, protocol="SPRITE_RPC",XDM_CONST.IP_PROTOCOL_SPRITE_RPC, protocol="LARP",XDM_CONST.IP_PROTOCOL_LARP, protocol="MTP",XDM_CONST.IP_PROTOCOL_MTP, protocol="AX25",XDM_CONST.IP_PROTOCOL_AX25, protocol="IPIP",XDM_CONST.IP_PROTOCOL_IPIP, protocol="MICP",XDM_CONST.IP_PROTOCOL_MICP, protocol="SCC_SP",XDM_CONST.IP_PROTOCOL_SCC_SP, protocol="ETHERIP",XDM_CONST.IP_PROTOCOL_ETHERIP, protocol="ENCAP",XDM_CONST.IP_PROTOCOL_ENCAP, protocol="GMTP",XDM_CONST.IP_PROTOCOL_GMTP, protocol="IFMP",XDM_CONST.IP_PROTOCOL_IFMP, protocol="PNNI",XDM_CONST.IP_PROTOCOL_PNNI, protocol="PIM",XDM_CONST.IP_PROTOCOL_PIM, protocol="ARIS",XDM_CONST.IP_PROTOCOL_ARIS, protocol="SCPS",XDM_CONST.IP_PROTOCOL_SCPS, protocol="QNX",XDM_CONST.IP_PROTOCOL_QNX, protocol="AN",XDM_CONST.IP_PROTOCOL_AN, protocol="IPCOMP",XDM_CONST.IP_PROTOCOL_IPCOMP, protocol="COMPAQ_PEER",XDM_CONST.IP_PROTOCOL_COMPAQ_PEER, protocol="IPX_IN_IP",XDM_CONST.IP_PROTOCOL_IPX_IN_IP, protocol="VRRP",XDM_CONST.IP_PROTOCOL_VRRP, protocol="PGM",XDM_CONST.IP_PROTOCOL_PGM, protocol="L2TP",XDM_CONST.IP_PROTOCOL_L2TP, protocol="DDX",XDM_CONST.IP_PROTOCOL_DDX, protocol="IATP",XDM_CONST.IP_PROTOCOL_IATP, protocol="STP",XDM_CONST.IP_PROTOCOL_STP, protocol="SRP",XDM_CONST.IP_PROTOCOL_SRP, protocol="UTI",XDM_CONST.IP_PROTOCOL_UTI, protocol="SMP",XDM_CONST.IP_PROTOCOL_SMP, protocol="SM",XDM_CONST.IP_PROTOCOL_SM, protocol="PTP",XDM_CONST.IP_PROTOCOL_PTP, protocol="ISIS",XDM_CONST.IP_PROTOCOL_ISIS, protocol="FIRE",XDM_CONST.IP_PROTOCOL_FIRE, protocol="CRTP",XDM_CONST.IP_PROTOCOL_CRTP, protocol="CRUDP",XDM_CONST.IP_PROTOCOL_CRUDP, protocol="SSCOPMCE",XDM_CONST.IP_PROTOCOL_SSCOPMCE, protocol="IPLT",XDM_CONST.IP_PROTOCOL_IPLT, protocol="SPS",XDM_CONST.IP_PROTOCOL_SPS, protocol="PIPE",XDM_CONST.IP_PROTOCOL_PIPE, protocol="SCTP",XDM_CONST.IP_PROTOCOL_SCTP, protocol="FC",XDM_CONST.IP_PROTOCOL_FC, protocol="RSVP_E2E_IGNORE",XDM_CONST.IP_PROTOCOL_RSVP_E2E_IGNORE, protocol="MOBILITY",XDM_CONST.IP_PROTOCOL_MOBILITY, protocol="UDPLITE",XDM_CONST.IP_PROTOCOL_UDPLITE, protocol="MPLS_IN_IP",XDM_CONST.IP_PROTOCOL_MPLS_IN_IP,to_string(protocol)),
    xdm.event.original_event_type = to_string(event_id),
    xdm.event.id = to_string(event_id),
    xdm.event.description = message,
    xdm.alert.severity = severity,
    xdm.source.ipv4 = src_ip,
    xdm.source.port = to_integer(src_port),
    xdm.target.user.username = dst_user,
    xdm.target.ipv4 = dst_ip,
    xdm.target.port = to_integer(dst_port),
    xdm.target.zone = dst_interface,
    xdm.event.outcome_reason = action,
    xdm.observer.name = observer_name,
    xdm.event.is_completed = if(action contains "Teardown",true, false);


//<source_interface>/<source_ip>(source_port) -> <dst_interface>/<dst_ip>(dst_port)
config case_sensitive = true
| filter _raw_log ~= "[\w|\-\_]+\/\d+\.\d+\.\d+\.\d+\(\d+\)\s\-\>\s[\w|\-\_]+\/\d+\.\d+\.\d+\.\d+\(\d+\)"
| call cisco_asa_main_fields_extraction
| alter src_interface1 = arrayindex(regextract(_raw_log ,"([\w|\-\_]+)\/\d+\.\d+\.\d+\.\d+\(\d+\)\s\-\>\s"),0),
    src_interface2 = arrayindex(regextract(_raw_log ,"([\w|\-\_]+)\/\d+\.\d+\.\d+\.\d+\(\d+\)\s*\([^\)]+\)\s\-\>\s"),0),
    src_ip1 = arrayindex(regextract(_raw_log ,"[\w|\-\_]+\/(\d+\.\d+\.\d+\.\d+)\(\d+\)\s\-\>\s"),0),
    src_ip2 = arrayindex(regextract(_raw_log ,"[\w|\-\_]+\/(\d+\.\d+\.\d+\.\d+)\(\d+\)\s*\([^\)]+\)\s\-\>\s"),0),
    src_port1 = arrayindex(regextract(_raw_log ,"[\w|\-\_]+\/\d+\.\d+\.\d+\.\d+\((\d+)\)\s\-\>\s"),0),
    src_port2 = arrayindex(regextract(_raw_log ,"[\w|\-\_]+\/\d+\.\d+\.\d+\.\d+\((\d+)\)\s*\([^\)]+\)\s\-\>\s"),0),
    src_username = arrayindex(regextract(_raw_log ,"[\w|\-\_]+\/\d+\.\d+\.\d+\.\d+\(\d+\)\s*\(([^\)]+)\)\s\-\>\s"),0),
    dst_interface = arrayindex(regextract(_raw_log ,"\s\-\>\s([\w|\-\_]+)\/\d+\.\d+\.\d+\.\d+\(\d+\)"),0),
    dst_ip = arrayindex(regextract(_raw_log ,"\s\-\>\s[\w|\-\_]+\/(\d+\.\d+\.\d+\.\d+)\(\d+\)"),0),
    dst_port = arrayindex(regextract(_raw_log ,"\s\-\>\s[\w|\-\_]+\/\d+\.\d+\.\d+\.\d+\((\d+)\)"),0),
    dst_username = arrayindex(regextract(_raw_log ,"\s\-\>\s[\w|\-\_]+\/\d+\.\d+\.\d+\.\d+\(\d+\)\s*\(([^\)]+)\)"),0),
    outcome = arrayindex(regextract(_raw_log ,"\d+\-\d+\:\s[\w\-]+\s\S+\s([\w\-]+)\s"),0), // ENUM: permitted | denied | est-allowed
    protocol = uppercase(arrayindex(regextract(_raw_log ,"\d+\-\d+\:\s[\w\-]+\s\S+\s[\w\-]+\s([a-z]{3,})"),0)),
    action = arrayindex(regextract(_raw_log ,"\%ASA\-[session]*\-*\d\-\d+[\:|\s\-]+\s(.*)from\s\d+\."),0),
    access_list = arrayindex(regextract(_raw_log ,"access\-list\s(\S+)\s"),0)
| alter src_ip = coalesce(src_ip1,src_ip2),
    src_port = coalesce(src_port1,src_port2),
    src_interface = coalesce(src_interface1,src_interface2)
| alter
    xdm.network.ip_protocol = if(protocol="HOPOPT",XDM_CONST.IP_PROTOCOL_HOPOPT, protocol="ICMP",XDM_CONST.IP_PROTOCOL_ICMP, protocol="IGMP",XDM_CONST.IP_PROTOCOL_IGMP, protocol="GGP",XDM_CONST.IP_PROTOCOL_GGP, protocol="IP",XDM_CONST.IP_PROTOCOL_IP, protocol="ST",XDM_CONST.IP_PROTOCOL_ST, protocol="TCP",XDM_CONST.IP_PROTOCOL_TCP, protocol="CBT",XDM_CONST.IP_PROTOCOL_CBT, protocol="EGP",XDM_CONST.IP_PROTOCOL_EGP, protocol="IGP",XDM_CONST.IP_PROTOCOL_IGP, protocol="BBN_RCC_MON",XDM_CONST.IP_PROTOCOL_BBN_RCC_MON, protocol="NVP_II",XDM_CONST.IP_PROTOCOL_NVP_II, protocol="PUP",XDM_CONST.IP_PROTOCOL_PUP, protocol="ARGUS",XDM_CONST.IP_PROTOCOL_ARGUS, protocol="EMCON",XDM_CONST.IP_PROTOCOL_EMCON, protocol="XNET",XDM_CONST.IP_PROTOCOL_XNET, protocol="CHAOS",XDM_CONST.IP_PROTOCOL_CHAOS, protocol="UDP",XDM_CONST.IP_PROTOCOL_UDP, protocol="MUX",XDM_CONST.IP_PROTOCOL_MUX, protocol="DCN_MEAS",XDM_CONST.IP_PROTOCOL_DCN_MEAS, protocol="HMP",XDM_CONST.IP_PROTOCOL_HMP, protocol="PRM",XDM_CONST.IP_PROTOCOL_PRM, protocol="XNS_IDP",XDM_CONST.IP_PROTOCOL_XNS_IDP, protocol="TRUNK_1",XDM_CONST.IP_PROTOCOL_TRUNK_1, protocol="TRUNK_2",XDM_CONST.IP_PROTOCOL_TRUNK_2, protocol="LEAF_1",XDM_CONST.IP_PROTOCOL_LEAF_1, protocol="LEAF_2",XDM_CONST.IP_PROTOCOL_LEAF_2, protocol="RDP",XDM_CONST.IP_PROTOCOL_RDP, protocol="IRTP",XDM_CONST.IP_PROTOCOL_IRTP, protocol="ISO_TP4",XDM_CONST.IP_PROTOCOL_ISO_TP4, protocol="NETBLT",XDM_CONST.IP_PROTOCOL_NETBLT, protocol="MFE_NSP",XDM_CONST.IP_PROTOCOL_MFE_NSP, protocol="MERIT_INP",XDM_CONST.IP_PROTOCOL_MERIT_INP, protocol="DCCP",XDM_CONST.IP_PROTOCOL_DCCP, protocol="3PC",XDM_CONST.IP_PROTOCOL_3PC, protocol="IDPR",XDM_CONST.IP_PROTOCOL_IDPR, protocol="XTP",XDM_CONST.IP_PROTOCOL_XTP, protocol="DDP",XDM_CONST.IP_PROTOCOL_DDP, protocol="IDPR_CMTP",XDM_CONST.IP_PROTOCOL_IDPR_CMTP, protocol="TP",XDM_CONST.IP_PROTOCOL_TP, protocol="IL",XDM_CONST.IP_PROTOCOL_IL, protocol="IPV6",XDM_CONST.IP_PROTOCOL_IPV6, protocol="SDRP",XDM_CONST.IP_PROTOCOL_SDRP, protocol="IPV6_ROUTE",XDM_CONST.IP_PROTOCOL_IPV6_ROUTE, protocol="IPV6_FRAG",XDM_CONST.IP_PROTOCOL_IPV6_FRAG, protocol="IDRP",XDM_CONST.IP_PROTOCOL_IDRP, protocol="RSVP",XDM_CONST.IP_PROTOCOL_RSVP, protocol="GRE",XDM_CONST.IP_PROTOCOL_GRE, protocol="DSR",XDM_CONST.IP_PROTOCOL_DSR, protocol="BNA",XDM_CONST.IP_PROTOCOL_BNA, protocol="ESP",XDM_CONST.IP_PROTOCOL_ESP, protocol="AH",XDM_CONST.IP_PROTOCOL_AH, protocol="I_NLSP",XDM_CONST.IP_PROTOCOL_I_NLSP, protocol="SWIPE",XDM_CONST.IP_PROTOCOL_SWIPE, protocol="NARP",XDM_CONST.IP_PROTOCOL_NARP, protocol="MOBILE",XDM_CONST.IP_PROTOCOL_MOBILE, protocol="TLSP",XDM_CONST.IP_PROTOCOL_TLSP, protocol="SKIP",XDM_CONST.IP_PROTOCOL_SKIP, protocol="IPV6_ICMP",XDM_CONST.IP_PROTOCOL_IPV6_ICMP, protocol="IPV6_NONXT",XDM_CONST.IP_PROTOCOL_IPV6_NONXT, protocol="IPV6_OPTS",XDM_CONST.IP_PROTOCOL_IPV6_OPTS, protocol="CFTP",XDM_CONST.IP_PROTOCOL_CFTP, protocol="SAT_EXPAK",XDM_CONST.IP_PROTOCOL_SAT_EXPAK, protocol="KRYPTOLAN",XDM_CONST.IP_PROTOCOL_KRYPTOLAN, protocol="RVD",XDM_CONST.IP_PROTOCOL_RVD, protocol="IPPC",XDM_CONST.IP_PROTOCOL_IPPC, protocol="SAT_MON",XDM_CONST.IP_PROTOCOL_SAT_MON, protocol="VISA",XDM_CONST.IP_PROTOCOL_VISA, protocol="IPCV",XDM_CONST.IP_PROTOCOL_IPCV, protocol="CPNX",XDM_CONST.IP_PROTOCOL_CPNX, protocol="CPHB",XDM_CONST.IP_PROTOCOL_CPHB, protocol="WSN",XDM_CONST.IP_PROTOCOL_WSN, protocol="PVP",XDM_CONST.IP_PROTOCOL_PVP, protocol="BR_SAT_MON",XDM_CONST.IP_PROTOCOL_BR_SAT_MON, protocol="SUN_ND",XDM_CONST.IP_PROTOCOL_SUN_ND, protocol="WB_MON",XDM_CONST.IP_PROTOCOL_WB_MON, protocol="WB_EXPAK",XDM_CONST.IP_PROTOCOL_WB_EXPAK, protocol="ISO_IP",XDM_CONST.IP_PROTOCOL_ISO_IP, protocol="VMTP",XDM_CONST.IP_PROTOCOL_VMTP, protocol="SECURE_VMTP",XDM_CONST.IP_PROTOCOL_SECURE_VMTP, protocol="VINES",XDM_CONST.IP_PROTOCOL_VINES, protocol="TTP",XDM_CONST.IP_PROTOCOL_TTP, protocol="NSFNET_IGP",XDM_CONST.IP_PROTOCOL_NSFNET_IGP, protocol="DGP",XDM_CONST.IP_PROTOCOL_DGP, protocol="TCF",XDM_CONST.IP_PROTOCOL_TCF, protocol="EIGRP",XDM_CONST.IP_PROTOCOL_EIGRP, protocol="OSPFIGP",XDM_CONST.IP_PROTOCOL_OSPFIGP, protocol="SPRITE_RPC",XDM_CONST.IP_PROTOCOL_SPRITE_RPC, protocol="LARP",XDM_CONST.IP_PROTOCOL_LARP, protocol="MTP",XDM_CONST.IP_PROTOCOL_MTP, protocol="AX25",XDM_CONST.IP_PROTOCOL_AX25, protocol="IPIP",XDM_CONST.IP_PROTOCOL_IPIP, protocol="MICP",XDM_CONST.IP_PROTOCOL_MICP, protocol="SCC_SP",XDM_CONST.IP_PROTOCOL_SCC_SP, protocol="ETHERIP",XDM_CONST.IP_PROTOCOL_ETHERIP, protocol="ENCAP",XDM_CONST.IP_PROTOCOL_ENCAP, protocol="GMTP",XDM_CONST.IP_PROTOCOL_GMTP, protocol="IFMP",XDM_CONST.IP_PROTOCOL_IFMP, protocol="PNNI",XDM_CONST.IP_PROTOCOL_PNNI, protocol="PIM",XDM_CONST.IP_PROTOCOL_PIM, protocol="ARIS",XDM_CONST.IP_PROTOCOL_ARIS, protocol="SCPS",XDM_CONST.IP_PROTOCOL_SCPS, protocol="QNX",XDM_CONST.IP_PROTOCOL_QNX, protocol="AN",XDM_CONST.IP_PROTOCOL_AN, protocol="IPCOMP",XDM_CONST.IP_PROTOCOL_IPCOMP, protocol="COMPAQ_PEER",XDM_CONST.IP_PROTOCOL_COMPAQ_PEER, protocol="IPX_IN_IP",XDM_CONST.IP_PROTOCOL_IPX_IN_IP, protocol="VRRP",XDM_CONST.IP_PROTOCOL_VRRP, protocol="PGM",XDM_CONST.IP_PROTOCOL_PGM, protocol="L2TP",XDM_CONST.IP_PROTOCOL_L2TP, protocol="DDX",XDM_CONST.IP_PROTOCOL_DDX, protocol="IATP",XDM_CONST.IP_PROTOCOL_IATP, protocol="STP",XDM_CONST.IP_PROTOCOL_STP, protocol="SRP",XDM_CONST.IP_PROTOCOL_SRP, protocol="UTI",XDM_CONST.IP_PROTOCOL_UTI, protocol="SMP",XDM_CONST.IP_PROTOCOL_SMP, protocol="SM",XDM_CONST.IP_PROTOCOL_SM, protocol="PTP",XDM_CONST.IP_PROTOCOL_PTP, protocol="ISIS",XDM_CONST.IP_PROTOCOL_ISIS, protocol="FIRE",XDM_CONST.IP_PROTOCOL_FIRE, protocol="CRTP",XDM_CONST.IP_PROTOCOL_CRTP, protocol="CRUDP",XDM_CONST.IP_PROTOCOL_CRUDP, protocol="SSCOPMCE",XDM_CONST.IP_PROTOCOL_SSCOPMCE, protocol="IPLT",XDM_CONST.IP_PROTOCOL_IPLT, protocol="SPS",XDM_CONST.IP_PROTOCOL_SPS, protocol="PIPE",XDM_CONST.IP_PROTOCOL_PIPE, protocol="SCTP",XDM_CONST.IP_PROTOCOL_SCTP, protocol="FC",XDM_CONST.IP_PROTOCOL_FC, protocol="RSVP_E2E_IGNORE",XDM_CONST.IP_PROTOCOL_RSVP_E2E_IGNORE, protocol="MOBILITY",XDM_CONST.IP_PROTOCOL_MOBILITY, protocol="UDPLITE",XDM_CONST.IP_PROTOCOL_UDPLITE, protocol="MPLS_IN_IP",XDM_CONST.IP_PROTOCOL_MPLS_IN_IP,to_string(protocol)),
    xdm.event.outcome = if(outcome in("succeeded","permitted") , XDM_CONST.OUTCOME_SUCCESS , outcome in ("failed","denied"),XDM_CONST.OUTCOME_FAILED ,to_string(outcome)),
    xdm.event.original_event_type = to_string(event_id),
    xdm.event.id = to_string(event_id),
    xdm.event.description = message,
    xdm.alert.severity = severity,
    xdm.source.ipv4 = src_ip,
    xdm.source.port = to_integer(src_port ),
    xdm.source.zone = src_interface,
    xdm.target.ipv4 = dst_ip,
    xdm.target.port = to_integer(dst_port),
    xdm.target.zone = dst_interface,
    xdm.source.user.username = src_username,
    xdm.target.user.username = dst_username,
    xdm.event.outcome_reason = action,
    xdm.observer.name = observer_name,
    xdm.network.rule = access_list,
    xdm.event.is_completed = if(action contains "Teardown",true, false);

// src = <source_ip>, dest = <dest_ip>
config case_sensitive = true
| filter _raw_log  ~= "src\s\=\s*\d+\.\d+\.\d+\.\d+\s*,\s*dest\s*\=\s*\d+\.\d+\.\d+\.\d+"
| call cisco_asa_main_fields_extraction
| alter action = arrayindex(regextract(_raw_log ,"\%ASA\-[session]*\-*\d\-\d+[\:|\s\-]+\s(.*)from\s\d+\."),0),
    src_ip = arrayindex(regextract(_raw_log ,"src\s\=\s*(\d+\.\d+\.\d+\.\d+)\s*,"),0),
    dst_ip = arrayindex(regextract(_raw_log ,"dest\s\=\s*(\d+\.\d+\.\d+\.\d+)\s*,"),0),
    protocol = arrayindex(regextract(_raw_log ,"proto\s\=\s([A-Z]+)"),0),
    session_id = arrayindex(regextract(_raw_log ,"id\s\=\s(\d+)"),0),
    bytes = arrayindex(regextract(_raw_log ,"\,\ssize\s=\s(\d+)"),0)
| alter xdm.network.ip_protocol = if(protocol="HOPOPT",XDM_CONST.IP_PROTOCOL_HOPOPT, protocol="ICMP",XDM_CONST.IP_PROTOCOL_ICMP, protocol="IGMP",XDM_CONST.IP_PROTOCOL_IGMP, protocol="GGP",XDM_CONST.IP_PROTOCOL_GGP, protocol="IP",XDM_CONST.IP_PROTOCOL_IP, protocol="ST",XDM_CONST.IP_PROTOCOL_ST, protocol="TCP",XDM_CONST.IP_PROTOCOL_TCP, protocol="CBT",XDM_CONST.IP_PROTOCOL_CBT, protocol="EGP",XDM_CONST.IP_PROTOCOL_EGP, protocol="IGP",XDM_CONST.IP_PROTOCOL_IGP, protocol="BBN_RCC_MON",XDM_CONST.IP_PROTOCOL_BBN_RCC_MON, protocol="NVP_II",XDM_CONST.IP_PROTOCOL_NVP_II, protocol="PUP",XDM_CONST.IP_PROTOCOL_PUP, protocol="ARGUS",XDM_CONST.IP_PROTOCOL_ARGUS, protocol="EMCON",XDM_CONST.IP_PROTOCOL_EMCON, protocol="XNET",XDM_CONST.IP_PROTOCOL_XNET, protocol="CHAOS",XDM_CONST.IP_PROTOCOL_CHAOS, protocol="UDP",XDM_CONST.IP_PROTOCOL_UDP, protocol="MUX",XDM_CONST.IP_PROTOCOL_MUX, protocol="DCN_MEAS",XDM_CONST.IP_PROTOCOL_DCN_MEAS, protocol="HMP",XDM_CONST.IP_PROTOCOL_HMP, protocol="PRM",XDM_CONST.IP_PROTOCOL_PRM, protocol="XNS_IDP",XDM_CONST.IP_PROTOCOL_XNS_IDP, protocol="TRUNK_1",XDM_CONST.IP_PROTOCOL_TRUNK_1, protocol="TRUNK_2",XDM_CONST.IP_PROTOCOL_TRUNK_2, protocol="LEAF_1",XDM_CONST.IP_PROTOCOL_LEAF_1, protocol="LEAF_2",XDM_CONST.IP_PROTOCOL_LEAF_2, protocol="RDP",XDM_CONST.IP_PROTOCOL_RDP, protocol="IRTP",XDM_CONST.IP_PROTOCOL_IRTP, protocol="ISO_TP4",XDM_CONST.IP_PROTOCOL_ISO_TP4, protocol="NETBLT",XDM_CONST.IP_PROTOCOL_NETBLT, protocol="MFE_NSP",XDM_CONST.IP_PROTOCOL_MFE_NSP, protocol="MERIT_INP",XDM_CONST.IP_PROTOCOL_MERIT_INP, protocol="DCCP",XDM_CONST.IP_PROTOCOL_DCCP, protocol="3PC",XDM_CONST.IP_PROTOCOL_3PC, protocol="IDPR",XDM_CONST.IP_PROTOCOL_IDPR, protocol="XTP",XDM_CONST.IP_PROTOCOL_XTP, protocol="DDP",XDM_CONST.IP_PROTOCOL_DDP, protocol="IDPR_CMTP",XDM_CONST.IP_PROTOCOL_IDPR_CMTP, protocol="TP",XDM_CONST.IP_PROTOCOL_TP, protocol="IL",XDM_CONST.IP_PROTOCOL_IL, protocol="IPV6",XDM_CONST.IP_PROTOCOL_IPV6, protocol="SDRP",XDM_CONST.IP_PROTOCOL_SDRP, protocol="IPV6_ROUTE",XDM_CONST.IP_PROTOCOL_IPV6_ROUTE, protocol="IPV6_FRAG",XDM_CONST.IP_PROTOCOL_IPV6_FRAG, protocol="IDRP",XDM_CONST.IP_PROTOCOL_IDRP, protocol="RSVP",XDM_CONST.IP_PROTOCOL_RSVP, protocol="GRE",XDM_CONST.IP_PROTOCOL_GRE, protocol="DSR",XDM_CONST.IP_PROTOCOL_DSR, protocol="BNA",XDM_CONST.IP_PROTOCOL_BNA, protocol="ESP",XDM_CONST.IP_PROTOCOL_ESP, protocol="AH",XDM_CONST.IP_PROTOCOL_AH, protocol="I_NLSP",XDM_CONST.IP_PROTOCOL_I_NLSP, protocol="SWIPE",XDM_CONST.IP_PROTOCOL_SWIPE, protocol="NARP",XDM_CONST.IP_PROTOCOL_NARP, protocol="MOBILE",XDM_CONST.IP_PROTOCOL_MOBILE, protocol="TLSP",XDM_CONST.IP_PROTOCOL_TLSP, protocol="SKIP",XDM_CONST.IP_PROTOCOL_SKIP, protocol="IPV6_ICMP",XDM_CONST.IP_PROTOCOL_IPV6_ICMP, protocol="IPV6_NONXT",XDM_CONST.IP_PROTOCOL_IPV6_NONXT, protocol="IPV6_OPTS",XDM_CONST.IP_PROTOCOL_IPV6_OPTS, protocol="CFTP",XDM_CONST.IP_PROTOCOL_CFTP, protocol="SAT_EXPAK",XDM_CONST.IP_PROTOCOL_SAT_EXPAK, protocol="KRYPTOLAN",XDM_CONST.IP_PROTOCOL_KRYPTOLAN, protocol="RVD",XDM_CONST.IP_PROTOCOL_RVD, protocol="IPPC",XDM_CONST.IP_PROTOCOL_IPPC, protocol="SAT_MON",XDM_CONST.IP_PROTOCOL_SAT_MON, protocol="VISA",XDM_CONST.IP_PROTOCOL_VISA, protocol="IPCV",XDM_CONST.IP_PROTOCOL_IPCV, protocol="CPNX",XDM_CONST.IP_PROTOCOL_CPNX, protocol="CPHB",XDM_CONST.IP_PROTOCOL_CPHB, protocol="WSN",XDM_CONST.IP_PROTOCOL_WSN, protocol="PVP",XDM_CONST.IP_PROTOCOL_PVP, protocol="BR_SAT_MON",XDM_CONST.IP_PROTOCOL_BR_SAT_MON, protocol="SUN_ND",XDM_CONST.IP_PROTOCOL_SUN_ND, protocol="WB_MON",XDM_CONST.IP_PROTOCOL_WB_MON, protocol="WB_EXPAK",XDM_CONST.IP_PROTOCOL_WB_EXPAK, protocol="ISO_IP",XDM_CONST.IP_PROTOCOL_ISO_IP, protocol="VMTP",XDM_CONST.IP_PROTOCOL_VMTP, protocol="SECURE_VMTP",XDM_CONST.IP_PROTOCOL_SECURE_VMTP, protocol="VINES",XDM_CONST.IP_PROTOCOL_VINES, protocol="TTP",XDM_CONST.IP_PROTOCOL_TTP, protocol="NSFNET_IGP",XDM_CONST.IP_PROTOCOL_NSFNET_IGP, protocol="DGP",XDM_CONST.IP_PROTOCOL_DGP, protocol="TCF",XDM_CONST.IP_PROTOCOL_TCF, protocol="EIGRP",XDM_CONST.IP_PROTOCOL_EIGRP, protocol="OSPFIGP",XDM_CONST.IP_PROTOCOL_OSPFIGP, protocol="SPRITE_RPC",XDM_CONST.IP_PROTOCOL_SPRITE_RPC, protocol="LARP",XDM_CONST.IP_PROTOCOL_LARP, protocol="MTP",XDM_CONST.IP_PROTOCOL_MTP, protocol="AX25",XDM_CONST.IP_PROTOCOL_AX25, protocol="IPIP",XDM_CONST.IP_PROTOCOL_IPIP, protocol="MICP",XDM_CONST.IP_PROTOCOL_MICP, protocol="SCC_SP",XDM_CONST.IP_PROTOCOL_SCC_SP, protocol="ETHERIP",XDM_CONST.IP_PROTOCOL_ETHERIP, protocol="ENCAP",XDM_CONST.IP_PROTOCOL_ENCAP, protocol="GMTP",XDM_CONST.IP_PROTOCOL_GMTP, protocol="IFMP",XDM_CONST.IP_PROTOCOL_IFMP, protocol="PNNI",XDM_CONST.IP_PROTOCOL_PNNI, protocol="PIM",XDM_CONST.IP_PROTOCOL_PIM, protocol="ARIS",XDM_CONST.IP_PROTOCOL_ARIS, protocol="SCPS",XDM_CONST.IP_PROTOCOL_SCPS, protocol="QNX",XDM_CONST.IP_PROTOCOL_QNX, protocol="AN",XDM_CONST.IP_PROTOCOL_AN, protocol="IPCOMP",XDM_CONST.IP_PROTOCOL_IPCOMP, protocol="COMPAQ_PEER",XDM_CONST.IP_PROTOCOL_COMPAQ_PEER, protocol="IPX_IN_IP",XDM_CONST.IP_PROTOCOL_IPX_IN_IP, protocol="VRRP",XDM_CONST.IP_PROTOCOL_VRRP, protocol="PGM",XDM_CONST.IP_PROTOCOL_PGM, protocol="L2TP",XDM_CONST.IP_PROTOCOL_L2TP, protocol="DDX",XDM_CONST.IP_PROTOCOL_DDX, protocol="IATP",XDM_CONST.IP_PROTOCOL_IATP, protocol="STP",XDM_CONST.IP_PROTOCOL_STP, protocol="SRP",XDM_CONST.IP_PROTOCOL_SRP, protocol="UTI",XDM_CONST.IP_PROTOCOL_UTI, protocol="SMP",XDM_CONST.IP_PROTOCOL_SMP, protocol="SM",XDM_CONST.IP_PROTOCOL_SM, protocol="PTP",XDM_CONST.IP_PROTOCOL_PTP, protocol="ISIS",XDM_CONST.IP_PROTOCOL_ISIS, protocol="FIRE",XDM_CONST.IP_PROTOCOL_FIRE, protocol="CRTP",XDM_CONST.IP_PROTOCOL_CRTP, protocol="CRUDP",XDM_CONST.IP_PROTOCOL_CRUDP, protocol="SSCOPMCE",XDM_CONST.IP_PROTOCOL_SSCOPMCE, protocol="IPLT",XDM_CONST.IP_PROTOCOL_IPLT, protocol="SPS",XDM_CONST.IP_PROTOCOL_SPS, protocol="PIPE",XDM_CONST.IP_PROTOCOL_PIPE, protocol="SCTP",XDM_CONST.IP_PROTOCOL_SCTP, protocol="FC",XDM_CONST.IP_PROTOCOL_FC, protocol="RSVP_E2E_IGNORE",XDM_CONST.IP_PROTOCOL_RSVP_E2E_IGNORE, protocol="MOBILITY",XDM_CONST.IP_PROTOCOL_MOBILITY, protocol="UDPLITE",XDM_CONST.IP_PROTOCOL_UDPLITE, protocol="MPLS_IN_IP",XDM_CONST.IP_PROTOCOL_MPLS_IN_IP,to_string(protocol))
| alter
    xdm.event.original_event_type = to_string(event_id),
    xdm.event.id = to_string(event_id),
    xdm.event.description = message,
    xdm.alert.severity = severity,
    xdm.source.ipv4 = src_ip,
    xdm.source.sent_bytes = to_integer(bytes ),
    xdm.target.ipv4 = dst_ip,
    xdm.event.outcome_reason = action,
    xdm.observer.name = observer_name,
    xdm.network.session_id = session_id,
    xdm.event.is_completed = if(action contains "Teardown",true, false);

//src <source_interface>:<source_ip> dst <dest_interface>:<dest_ip>
config case_sensitive = true
| filter _raw_log ~= "src\s[\w\-\_]+\:\d+\.\d+\.\d+\.\d+\sdst\s[\w\-\_]+\:\d+\.\d+\.\d+\.\d+\s" and _raw_log !~= "src\s\d+\.\d+\.\d+\.\d+\/\d+\sdst\s\d+\.\d+\.\d+\.\d+\/\d+"
| call cisco_asa_main_fields_extraction
| alter action = arrayindex(regextract(_raw_log ,"\%ASA\-[session]*\-*\d\-\d+\:([A-Za-z\s]+)\s[A-Za-z]+"),0),
    src_ip = arrayindex(regextract(_raw_log ,"\ssrc\s[\w\-\_]+\:(\d+\.\d+\.\d+\.\d+)\sdst"),0),
    src_interface = arrayindex(regextract(_raw_log ,"\ssrc\s([\w\-\_]+)\:\d+\.\d+\.\d+\.\d+\sdst"),0),
    dst_ip = arrayindex(regextract(_raw_log ,"\sdst\s[\w\-\_]+\:(\d+\.\d+\.\d+\.\d+)\s"),0),
    dst_interface = arrayindex(regextract(_raw_log ,"\sdst\s([\w\-\_]+)\:\d+\.\d+\.\d+\.\d+\s"),0),
    protocol1 = arrayindex(regextract(_raw_log ,"\d+\-\d+\:\sNo\smatching\sconnection\sfor\s([A-Z]+)\s"),0),
    protocol2 = uppercase(arrayindex(regextract(_raw_log ,"Deny\sinbound\s([A-Za-z]+)\s"),0)),
    protocol3 = uppercase(arrayindex(regextract(_raw_log ,"\:\s([A-Za-z]+)\ssrc\s[\w\-\_]+\:\d+\."),0)),
    icmp_code = arrayindex(regextract(_raw_log ,"\(type\s\d+\,\s+code\s(\d+)\)"),0),
    icmp_type = arrayindex(regextract(_raw_log ,"\(type\s(\d+)\,\s+code\s\d+\)"),0)
| alter protocol = coalesce(protocol1, protocol2, protocol3)
| alter
    xdm.network.ip_protocol = if(protocol="HOPOPT",XDM_CONST.IP_PROTOCOL_HOPOPT, protocol="ICMP",XDM_CONST.IP_PROTOCOL_ICMP, protocol="IGMP",XDM_CONST.IP_PROTOCOL_IGMP, protocol="GGP",XDM_CONST.IP_PROTOCOL_GGP, protocol="IP",XDM_CONST.IP_PROTOCOL_IP, protocol="ST",XDM_CONST.IP_PROTOCOL_ST, protocol="TCP",XDM_CONST.IP_PROTOCOL_TCP, protocol="CBT",XDM_CONST.IP_PROTOCOL_CBT, protocol="EGP",XDM_CONST.IP_PROTOCOL_EGP, protocol="IGP",XDM_CONST.IP_PROTOCOL_IGP, protocol="BBN_RCC_MON",XDM_CONST.IP_PROTOCOL_BBN_RCC_MON, protocol="NVP_II",XDM_CONST.IP_PROTOCOL_NVP_II, protocol="PUP",XDM_CONST.IP_PROTOCOL_PUP, protocol="ARGUS",XDM_CONST.IP_PROTOCOL_ARGUS, protocol="EMCON",XDM_CONST.IP_PROTOCOL_EMCON, protocol="XNET",XDM_CONST.IP_PROTOCOL_XNET, protocol="CHAOS",XDM_CONST.IP_PROTOCOL_CHAOS, protocol="UDP",XDM_CONST.IP_PROTOCOL_UDP, protocol="MUX",XDM_CONST.IP_PROTOCOL_MUX, protocol="DCN_MEAS",XDM_CONST.IP_PROTOCOL_DCN_MEAS, protocol="HMP",XDM_CONST.IP_PROTOCOL_HMP, protocol="PRM",XDM_CONST.IP_PROTOCOL_PRM, protocol="XNS_IDP",XDM_CONST.IP_PROTOCOL_XNS_IDP, protocol="TRUNK_1",XDM_CONST.IP_PROTOCOL_TRUNK_1, protocol="TRUNK_2",XDM_CONST.IP_PROTOCOL_TRUNK_2, protocol="LEAF_1",XDM_CONST.IP_PROTOCOL_LEAF_1, protocol="LEAF_2",XDM_CONST.IP_PROTOCOL_LEAF_2, protocol="RDP",XDM_CONST.IP_PROTOCOL_RDP, protocol="IRTP",XDM_CONST.IP_PROTOCOL_IRTP, protocol="ISO_TP4",XDM_CONST.IP_PROTOCOL_ISO_TP4, protocol="NETBLT",XDM_CONST.IP_PROTOCOL_NETBLT, protocol="MFE_NSP",XDM_CONST.IP_PROTOCOL_MFE_NSP, protocol="MERIT_INP",XDM_CONST.IP_PROTOCOL_MERIT_INP, protocol="DCCP",XDM_CONST.IP_PROTOCOL_DCCP, protocol="3PC",XDM_CONST.IP_PROTOCOL_3PC, protocol="IDPR",XDM_CONST.IP_PROTOCOL_IDPR, protocol="XTP",XDM_CONST.IP_PROTOCOL_XTP, protocol="DDP",XDM_CONST.IP_PROTOCOL_DDP, protocol="IDPR_CMTP",XDM_CONST.IP_PROTOCOL_IDPR_CMTP, protocol="TP",XDM_CONST.IP_PROTOCOL_TP, protocol="IL",XDM_CONST.IP_PROTOCOL_IL, protocol="IPV6",XDM_CONST.IP_PROTOCOL_IPV6, protocol="SDRP",XDM_CONST.IP_PROTOCOL_SDRP, protocol="IPV6_ROUTE",XDM_CONST.IP_PROTOCOL_IPV6_ROUTE, protocol="IPV6_FRAG",XDM_CONST.IP_PROTOCOL_IPV6_FRAG, protocol="IDRP",XDM_CONST.IP_PROTOCOL_IDRP, protocol="RSVP",XDM_CONST.IP_PROTOCOL_RSVP, protocol="GRE",XDM_CONST.IP_PROTOCOL_GRE, protocol="DSR",XDM_CONST.IP_PROTOCOL_DSR, protocol="BNA",XDM_CONST.IP_PROTOCOL_BNA, protocol="ESP",XDM_CONST.IP_PROTOCOL_ESP, protocol="AH",XDM_CONST.IP_PROTOCOL_AH, protocol="I_NLSP",XDM_CONST.IP_PROTOCOL_I_NLSP, protocol="SWIPE",XDM_CONST.IP_PROTOCOL_SWIPE, protocol="NARP",XDM_CONST.IP_PROTOCOL_NARP, protocol="MOBILE",XDM_CONST.IP_PROTOCOL_MOBILE, protocol="TLSP",XDM_CONST.IP_PROTOCOL_TLSP, protocol="SKIP",XDM_CONST.IP_PROTOCOL_SKIP, protocol="IPV6_ICMP",XDM_CONST.IP_PROTOCOL_IPV6_ICMP, protocol="IPV6_NONXT",XDM_CONST.IP_PROTOCOL_IPV6_NONXT, protocol="IPV6_OPTS",XDM_CONST.IP_PROTOCOL_IPV6_OPTS, protocol="CFTP",XDM_CONST.IP_PROTOCOL_CFTP, protocol="SAT_EXPAK",XDM_CONST.IP_PROTOCOL_SAT_EXPAK, protocol="KRYPTOLAN",XDM_CONST.IP_PROTOCOL_KRYPTOLAN, protocol="RVD",XDM_CONST.IP_PROTOCOL_RVD, protocol="IPPC",XDM_CONST.IP_PROTOCOL_IPPC, protocol="SAT_MON",XDM_CONST.IP_PROTOCOL_SAT_MON, protocol="VISA",XDM_CONST.IP_PROTOCOL_VISA, protocol="IPCV",XDM_CONST.IP_PROTOCOL_IPCV, protocol="CPNX",XDM_CONST.IP_PROTOCOL_CPNX, protocol="CPHB",XDM_CONST.IP_PROTOCOL_CPHB, protocol="WSN",XDM_CONST.IP_PROTOCOL_WSN, protocol="PVP",XDM_CONST.IP_PROTOCOL_PVP, protocol="BR_SAT_MON",XDM_CONST.IP_PROTOCOL_BR_SAT_MON, protocol="SUN_ND",XDM_CONST.IP_PROTOCOL_SUN_ND, protocol="WB_MON",XDM_CONST.IP_PROTOCOL_WB_MON, protocol="WB_EXPAK",XDM_CONST.IP_PROTOCOL_WB_EXPAK, protocol="ISO_IP",XDM_CONST.IP_PROTOCOL_ISO_IP, protocol="VMTP",XDM_CONST.IP_PROTOCOL_VMTP, protocol="SECURE_VMTP",XDM_CONST.IP_PROTOCOL_SECURE_VMTP, protocol="VINES",XDM_CONST.IP_PROTOCOL_VINES, protocol="TTP",XDM_CONST.IP_PROTOCOL_TTP, protocol="NSFNET_IGP",XDM_CONST.IP_PROTOCOL_NSFNET_IGP, protocol="DGP",XDM_CONST.IP_PROTOCOL_DGP, protocol="TCF",XDM_CONST.IP_PROTOCOL_TCF, protocol="EIGRP",XDM_CONST.IP_PROTOCOL_EIGRP, protocol="OSPFIGP",XDM_CONST.IP_PROTOCOL_OSPFIGP, protocol="SPRITE_RPC",XDM_CONST.IP_PROTOCOL_SPRITE_RPC, protocol="LARP",XDM_CONST.IP_PROTOCOL_LARP, protocol="MTP",XDM_CONST.IP_PROTOCOL_MTP, protocol="AX25",XDM_CONST.IP_PROTOCOL_AX25, protocol="IPIP",XDM_CONST.IP_PROTOCOL_IPIP, protocol="MICP",XDM_CONST.IP_PROTOCOL_MICP, protocol="SCC_SP",XDM_CONST.IP_PROTOCOL_SCC_SP, protocol="ETHERIP",XDM_CONST.IP_PROTOCOL_ETHERIP, protocol="ENCAP",XDM_CONST.IP_PROTOCOL_ENCAP, protocol="GMTP",XDM_CONST.IP_PROTOCOL_GMTP, protocol="IFMP",XDM_CONST.IP_PROTOCOL_IFMP, protocol="PNNI",XDM_CONST.IP_PROTOCOL_PNNI, protocol="PIM",XDM_CONST.IP_PROTOCOL_PIM, protocol="ARIS",XDM_CONST.IP_PROTOCOL_ARIS, protocol="SCPS",XDM_CONST.IP_PROTOCOL_SCPS, protocol="QNX",XDM_CONST.IP_PROTOCOL_QNX, protocol="AN",XDM_CONST.IP_PROTOCOL_AN, protocol="IPCOMP",XDM_CONST.IP_PROTOCOL_IPCOMP, protocol="COMPAQ_PEER",XDM_CONST.IP_PROTOCOL_COMPAQ_PEER, protocol="IPX_IN_IP",XDM_CONST.IP_PROTOCOL_IPX_IN_IP, protocol="VRRP",XDM_CONST.IP_PROTOCOL_VRRP, protocol="PGM",XDM_CONST.IP_PROTOCOL_PGM, protocol="L2TP",XDM_CONST.IP_PROTOCOL_L2TP, protocol="DDX",XDM_CONST.IP_PROTOCOL_DDX, protocol="IATP",XDM_CONST.IP_PROTOCOL_IATP, protocol="STP",XDM_CONST.IP_PROTOCOL_STP, protocol="SRP",XDM_CONST.IP_PROTOCOL_SRP, protocol="UTI",XDM_CONST.IP_PROTOCOL_UTI, protocol="SMP",XDM_CONST.IP_PROTOCOL_SMP, protocol="SM",XDM_CONST.IP_PROTOCOL_SM, protocol="PTP",XDM_CONST.IP_PROTOCOL_PTP, protocol="ISIS",XDM_CONST.IP_PROTOCOL_ISIS, protocol="FIRE",XDM_CONST.IP_PROTOCOL_FIRE, protocol="CRTP",XDM_CONST.IP_PROTOCOL_CRTP, protocol="CRUDP",XDM_CONST.IP_PROTOCOL_CRUDP, protocol="SSCOPMCE",XDM_CONST.IP_PROTOCOL_SSCOPMCE, protocol="IPLT",XDM_CONST.IP_PROTOCOL_IPLT, protocol="SPS",XDM_CONST.IP_PROTOCOL_SPS, protocol="PIPE",XDM_CONST.IP_PROTOCOL_PIPE, protocol="SCTP",XDM_CONST.IP_PROTOCOL_SCTP, protocol="FC",XDM_CONST.IP_PROTOCOL_FC, protocol="RSVP_E2E_IGNORE",XDM_CONST.IP_PROTOCOL_RSVP_E2E_IGNORE, protocol="MOBILITY",XDM_CONST.IP_PROTOCOL_MOBILITY, protocol="UDPLITE",XDM_CONST.IP_PROTOCOL_UDPLITE, protocol="MPLS_IN_IP",XDM_CONST.IP_PROTOCOL_MPLS_IN_IP,to_string(protocol)),
    xdm.event.original_event_type = to_string(event_id),
    xdm.event.id = to_string(event_id),
    xdm.network.icmp.code = to_integer(icmp_code),
    xdm.network.icmp.type = to_integer(icmp_type),
    xdm.event.description = message,
    xdm.alert.severity = severity,
    xdm.source.ipv4 = src_ip,
    xdm.source.zone = src_interface,
    xdm.target.ipv4 = dst_ip,
    xdm.target.zone = dst_interface,
    xdm.event.outcome_reason = action,
    xdm.observer.name = observer_name,
    xdm.event.is_completed = if(action contains "Teardown",true, false);


//src <source_ip>/<source_port> dst <dest_ip>/<dest_port>
config case_sensitive = true
| filter _raw_log  ~= "src\s\d+\.\d+\.\d+\.\d+\/\d+\sdst\s\d+\.\d+\.\d+\.\d+\/\d+"
| call cisco_asa_main_fields_extraction
| alter action = arrayindex(regextract(_raw_log ,"\%ASA\-[session]*\-*\d\-\d+\:([A-Za-z\s]+)\s[A-Za-z]+"),0),
    src_ip = arrayindex(regextract(_raw_log ,"src\s(\d+\.\d+\.\d+\.\d+)\/\d+\sdst\s\d+\.\d+\.\d+\.\d+\/\d+"),0),
    src_port = to_integer(arrayindex(regextract(_raw_log ,"src\s\d+\.\d+\.\d+\.\d+\/(\d+)\sdst\s\d+\.\d+\.\d+\.\d+\/\d+"),0)),
    dst_ip = arrayindex(regextract(_raw_log ,"src\s\d+\.\d+\.\d+\.\d+\/\d+\sdst\s(\d+\.\d+\.\d+\.\d+)\/\d+"),0),
    dst_port = to_integer(arrayindex(regextract(_raw_log ,"src\s\d+\.\d+\.\d+\.\d+\/\d+\sdst\s\d+\.\d+\.\d+\.\d+\/(\d+)"),0)),
    src_interface = arrayindex(regextract(_raw_log ,"src\s([\w+\-\_]+)\:\d+\.\d+\.\d+\.\d+"),0),
    dst_interface1 = arrayindex(regextract(_raw_log ,"on\sinterface\s([\w\-\_]+)"),0),
    dst_interface2 = arrayindex(regextract(_raw_log ,"dst\s([\w+\-\_]+)\:\d+\.\d+\.\d+\.\d+"),0),
    protocol1 = arrayindex(regextract(_raw_log ,"\d+\-\d+\:\s+[A-Za-z]+\s+([A-Z]{3,})\s+"),0),
    protocol2 = uppercase(arrayindex(regextract(_raw_log ,"\:\s([A-Za-z]+)\ssrc\s[\w+\-\_]+\:\d+\.\d+\.\d+\.\d+\sdst"),0))
| alter protocol = coalesce(protocol1,protocol2)
| alter
    xdm.network.ip_protocol = if(protocol="HOPOPT",XDM_CONST.IP_PROTOCOL_HOPOPT, protocol="ICMP",XDM_CONST.IP_PROTOCOL_ICMP, protocol="IGMP",XDM_CONST.IP_PROTOCOL_IGMP, protocol="GGP",XDM_CONST.IP_PROTOCOL_GGP, protocol="IP",XDM_CONST.IP_PROTOCOL_IP, protocol="ST",XDM_CONST.IP_PROTOCOL_ST, protocol="TCP",XDM_CONST.IP_PROTOCOL_TCP, protocol="CBT",XDM_CONST.IP_PROTOCOL_CBT, protocol="EGP",XDM_CONST.IP_PROTOCOL_EGP, protocol="IGP",XDM_CONST.IP_PROTOCOL_IGP, protocol="BBN_RCC_MON",XDM_CONST.IP_PROTOCOL_BBN_RCC_MON, protocol="NVP_II",XDM_CONST.IP_PROTOCOL_NVP_II, protocol="PUP",XDM_CONST.IP_PROTOCOL_PUP, protocol="ARGUS",XDM_CONST.IP_PROTOCOL_ARGUS, protocol="EMCON",XDM_CONST.IP_PROTOCOL_EMCON, protocol="XNET",XDM_CONST.IP_PROTOCOL_XNET, protocol="CHAOS",XDM_CONST.IP_PROTOCOL_CHAOS, protocol="UDP",XDM_CONST.IP_PROTOCOL_UDP, protocol="MUX",XDM_CONST.IP_PROTOCOL_MUX, protocol="DCN_MEAS",XDM_CONST.IP_PROTOCOL_DCN_MEAS, protocol="HMP",XDM_CONST.IP_PROTOCOL_HMP, protocol="PRM",XDM_CONST.IP_PROTOCOL_PRM, protocol="XNS_IDP",XDM_CONST.IP_PROTOCOL_XNS_IDP, protocol="TRUNK_1",XDM_CONST.IP_PROTOCOL_TRUNK_1, protocol="TRUNK_2",XDM_CONST.IP_PROTOCOL_TRUNK_2, protocol="LEAF_1",XDM_CONST.IP_PROTOCOL_LEAF_1, protocol="LEAF_2",XDM_CONST.IP_PROTOCOL_LEAF_2, protocol="RDP",XDM_CONST.IP_PROTOCOL_RDP, protocol="IRTP",XDM_CONST.IP_PROTOCOL_IRTP, protocol="ISO_TP4",XDM_CONST.IP_PROTOCOL_ISO_TP4, protocol="NETBLT",XDM_CONST.IP_PROTOCOL_NETBLT, protocol="MFE_NSP",XDM_CONST.IP_PROTOCOL_MFE_NSP, protocol="MERIT_INP",XDM_CONST.IP_PROTOCOL_MERIT_INP, protocol="DCCP",XDM_CONST.IP_PROTOCOL_DCCP, protocol="3PC",XDM_CONST.IP_PROTOCOL_3PC, protocol="IDPR",XDM_CONST.IP_PROTOCOL_IDPR, protocol="XTP",XDM_CONST.IP_PROTOCOL_XTP, protocol="DDP",XDM_CONST.IP_PROTOCOL_DDP, protocol="IDPR_CMTP",XDM_CONST.IP_PROTOCOL_IDPR_CMTP, protocol="TP",XDM_CONST.IP_PROTOCOL_TP, protocol="IL",XDM_CONST.IP_PROTOCOL_IL, protocol="IPV6",XDM_CONST.IP_PROTOCOL_IPV6, protocol="SDRP",XDM_CONST.IP_PROTOCOL_SDRP, protocol="IPV6_ROUTE",XDM_CONST.IP_PROTOCOL_IPV6_ROUTE, protocol="IPV6_FRAG",XDM_CONST.IP_PROTOCOL_IPV6_FRAG, protocol="IDRP",XDM_CONST.IP_PROTOCOL_IDRP, protocol="RSVP",XDM_CONST.IP_PROTOCOL_RSVP, protocol="GRE",XDM_CONST.IP_PROTOCOL_GRE, protocol="DSR",XDM_CONST.IP_PROTOCOL_DSR, protocol="BNA",XDM_CONST.IP_PROTOCOL_BNA, protocol="ESP",XDM_CONST.IP_PROTOCOL_ESP, protocol="AH",XDM_CONST.IP_PROTOCOL_AH, protocol="I_NLSP",XDM_CONST.IP_PROTOCOL_I_NLSP, protocol="SWIPE",XDM_CONST.IP_PROTOCOL_SWIPE, protocol="NARP",XDM_CONST.IP_PROTOCOL_NARP, protocol="MOBILE",XDM_CONST.IP_PROTOCOL_MOBILE, protocol="TLSP",XDM_CONST.IP_PROTOCOL_TLSP, protocol="SKIP",XDM_CONST.IP_PROTOCOL_SKIP, protocol="IPV6_ICMP",XDM_CONST.IP_PROTOCOL_IPV6_ICMP, protocol="IPV6_NONXT",XDM_CONST.IP_PROTOCOL_IPV6_NONXT, protocol="IPV6_OPTS",XDM_CONST.IP_PROTOCOL_IPV6_OPTS, protocol="CFTP",XDM_CONST.IP_PROTOCOL_CFTP, protocol="SAT_EXPAK",XDM_CONST.IP_PROTOCOL_SAT_EXPAK, protocol="KRYPTOLAN",XDM_CONST.IP_PROTOCOL_KRYPTOLAN, protocol="RVD",XDM_CONST.IP_PROTOCOL_RVD, protocol="IPPC",XDM_CONST.IP_PROTOCOL_IPPC, protocol="SAT_MON",XDM_CONST.IP_PROTOCOL_SAT_MON, protocol="VISA",XDM_CONST.IP_PROTOCOL_VISA, protocol="IPCV",XDM_CONST.IP_PROTOCOL_IPCV, protocol="CPNX",XDM_CONST.IP_PROTOCOL_CPNX, protocol="CPHB",XDM_CONST.IP_PROTOCOL_CPHB, protocol="WSN",XDM_CONST.IP_PROTOCOL_WSN, protocol="PVP",XDM_CONST.IP_PROTOCOL_PVP, protocol="BR_SAT_MON",XDM_CONST.IP_PROTOCOL_BR_SAT_MON, protocol="SUN_ND",XDM_CONST.IP_PROTOCOL_SUN_ND, protocol="WB_MON",XDM_CONST.IP_PROTOCOL_WB_MON, protocol="WB_EXPAK",XDM_CONST.IP_PROTOCOL_WB_EXPAK, protocol="ISO_IP",XDM_CONST.IP_PROTOCOL_ISO_IP, protocol="VMTP",XDM_CONST.IP_PROTOCOL_VMTP, protocol="SECURE_VMTP",XDM_CONST.IP_PROTOCOL_SECURE_VMTP, protocol="VINES",XDM_CONST.IP_PROTOCOL_VINES, protocol="TTP",XDM_CONST.IP_PROTOCOL_TTP, protocol="NSFNET_IGP",XDM_CONST.IP_PROTOCOL_NSFNET_IGP, protocol="DGP",XDM_CONST.IP_PROTOCOL_DGP, protocol="TCF",XDM_CONST.IP_PROTOCOL_TCF, protocol="EIGRP",XDM_CONST.IP_PROTOCOL_EIGRP, protocol="OSPFIGP",XDM_CONST.IP_PROTOCOL_OSPFIGP, protocol="SPRITE_RPC",XDM_CONST.IP_PROTOCOL_SPRITE_RPC, protocol="LARP",XDM_CONST.IP_PROTOCOL_LARP, protocol="MTP",XDM_CONST.IP_PROTOCOL_MTP, protocol="AX25",XDM_CONST.IP_PROTOCOL_AX25, protocol="IPIP",XDM_CONST.IP_PROTOCOL_IPIP, protocol="MICP",XDM_CONST.IP_PROTOCOL_MICP, protocol="SCC_SP",XDM_CONST.IP_PROTOCOL_SCC_SP, protocol="ETHERIP",XDM_CONST.IP_PROTOCOL_ETHERIP, protocol="ENCAP",XDM_CONST.IP_PROTOCOL_ENCAP, protocol="GMTP",XDM_CONST.IP_PROTOCOL_GMTP, protocol="IFMP",XDM_CONST.IP_PROTOCOL_IFMP, protocol="PNNI",XDM_CONST.IP_PROTOCOL_PNNI, protocol="PIM",XDM_CONST.IP_PROTOCOL_PIM, protocol="ARIS",XDM_CONST.IP_PROTOCOL_ARIS, protocol="SCPS",XDM_CONST.IP_PROTOCOL_SCPS, protocol="QNX",XDM_CONST.IP_PROTOCOL_QNX, protocol="AN",XDM_CONST.IP_PROTOCOL_AN, protocol="IPCOMP",XDM_CONST.IP_PROTOCOL_IPCOMP, protocol="COMPAQ_PEER",XDM_CONST.IP_PROTOCOL_COMPAQ_PEER, protocol="IPX_IN_IP",XDM_CONST.IP_PROTOCOL_IPX_IN_IP, protocol="VRRP",XDM_CONST.IP_PROTOCOL_VRRP, protocol="PGM",XDM_CONST.IP_PROTOCOL_PGM, protocol="L2TP",XDM_CONST.IP_PROTOCOL_L2TP, protocol="DDX",XDM_CONST.IP_PROTOCOL_DDX, protocol="IATP",XDM_CONST.IP_PROTOCOL_IATP, protocol="STP",XDM_CONST.IP_PROTOCOL_STP, protocol="SRP",XDM_CONST.IP_PROTOCOL_SRP, protocol="UTI",XDM_CONST.IP_PROTOCOL_UTI, protocol="SMP",XDM_CONST.IP_PROTOCOL_SMP, protocol="SM",XDM_CONST.IP_PROTOCOL_SM, protocol="PTP",XDM_CONST.IP_PROTOCOL_PTP, protocol="ISIS",XDM_CONST.IP_PROTOCOL_ISIS, protocol="FIRE",XDM_CONST.IP_PROTOCOL_FIRE, protocol="CRTP",XDM_CONST.IP_PROTOCOL_CRTP, protocol="CRUDP",XDM_CONST.IP_PROTOCOL_CRUDP, protocol="SSCOPMCE",XDM_CONST.IP_PROTOCOL_SSCOPMCE, protocol="IPLT",XDM_CONST.IP_PROTOCOL_IPLT, protocol="SPS",XDM_CONST.IP_PROTOCOL_SPS, protocol="PIPE",XDM_CONST.IP_PROTOCOL_PIPE, protocol="SCTP",XDM_CONST.IP_PROTOCOL_SCTP, protocol="FC",XDM_CONST.IP_PROTOCOL_FC, protocol="RSVP_E2E_IGNORE",XDM_CONST.IP_PROTOCOL_RSVP_E2E_IGNORE, protocol="MOBILITY",XDM_CONST.IP_PROTOCOL_MOBILITY, protocol="UDPLITE",XDM_CONST.IP_PROTOCOL_UDPLITE, protocol="MPLS_IN_IP",XDM_CONST.IP_PROTOCOL_MPLS_IN_IP,to_string(protocol)),
    xdm.event.original_event_type = to_string(event_id),
    xdm.event.id = to_string(event_id),
    xdm.event.description = message,
    xdm.alert.severity = severity,
    xdm.source.ipv4 = src_ip,
    xdm.target.ipv4 = dst_ip,
    xdm.source.port = src_port,
    xdm.target.port = dst_port,
    xdm.source.zone = src_interface,
    xdm.target.zone = coalesce(dst_interface1,dst_interface2),
    xdm.event.outcome_reason = action,
    xdm.observer.name = observer_name,
    xdm.event.is_completed = if(action contains "Teardown",true, false);

//<source_interface>:<source_ip>/<source_port> to <dest_ip>/<dest_port>
config case_sensitive = true
| filter _raw_log ~= "[\w\-\_]+\:\d+\.\d+\.\d+\.\d+\/\d+\sto\s\d+\.\d+\.\d+\.\d+\/\d+"
| call cisco_asa_main_fields_extraction
| alter action = arrayindex(regextract(_raw_log ,"\%ASA\-[session]*\-*\d\-\d+\:([A-Za-z\s]+)\s[A-Za-z]+"),0)
| alter protocol = arrayindex(regextract(action ,"([A-Z]{3,})"),0),
    src_interface = arrayindex(regextract(_raw_log ,"\s([\w\-\_]+)\:\d+\.\d+\.\d+\.\d+\/\d+\sto"),0),
    src_ip = arrayindex(regextract(_raw_log ,"\s[\w\-\_]+\:(\d+\.\d+\.\d+\.\d+)\/\d+\sto"),0),
    src_port = arrayindex(regextract(_raw_log ,"\s[\w\-\_]+\:\d+\.\d+\.\d+\.\d+\/(\d+)\sto"),0),
    dst_ip = arrayindex(regextract(_raw_log ,"\sto\s(\d+\.\d+\.\d+\.\d+)\/\d+"),0),
    dst_port = arrayindex(regextract(_raw_log ,"\sto\s\d+\.\d+\.\d+\.\d+\/(\d+)"),0)
| alter
    xdm.network.ip_protocol = if(protocol="HOPOPT",XDM_CONST.IP_PROTOCOL_HOPOPT, protocol="ICMP",XDM_CONST.IP_PROTOCOL_ICMP, protocol="IGMP",XDM_CONST.IP_PROTOCOL_IGMP, protocol="GGP",XDM_CONST.IP_PROTOCOL_GGP, protocol="IP",XDM_CONST.IP_PROTOCOL_IP, protocol="ST",XDM_CONST.IP_PROTOCOL_ST, protocol="TCP",XDM_CONST.IP_PROTOCOL_TCP, protocol="CBT",XDM_CONST.IP_PROTOCOL_CBT, protocol="EGP",XDM_CONST.IP_PROTOCOL_EGP, protocol="IGP",XDM_CONST.IP_PROTOCOL_IGP, protocol="BBN_RCC_MON",XDM_CONST.IP_PROTOCOL_BBN_RCC_MON, protocol="NVP_II",XDM_CONST.IP_PROTOCOL_NVP_II, protocol="PUP",XDM_CONST.IP_PROTOCOL_PUP, protocol="ARGUS",XDM_CONST.IP_PROTOCOL_ARGUS, protocol="EMCON",XDM_CONST.IP_PROTOCOL_EMCON, protocol="XNET",XDM_CONST.IP_PROTOCOL_XNET, protocol="CHAOS",XDM_CONST.IP_PROTOCOL_CHAOS, protocol="UDP",XDM_CONST.IP_PROTOCOL_UDP, protocol="MUX",XDM_CONST.IP_PROTOCOL_MUX, protocol="DCN_MEAS",XDM_CONST.IP_PROTOCOL_DCN_MEAS, protocol="HMP",XDM_CONST.IP_PROTOCOL_HMP, protocol="PRM",XDM_CONST.IP_PROTOCOL_PRM, protocol="XNS_IDP",XDM_CONST.IP_PROTOCOL_XNS_IDP, protocol="TRUNK_1",XDM_CONST.IP_PROTOCOL_TRUNK_1, protocol="TRUNK_2",XDM_CONST.IP_PROTOCOL_TRUNK_2, protocol="LEAF_1",XDM_CONST.IP_PROTOCOL_LEAF_1, protocol="LEAF_2",XDM_CONST.IP_PROTOCOL_LEAF_2, protocol="RDP",XDM_CONST.IP_PROTOCOL_RDP, protocol="IRTP",XDM_CONST.IP_PROTOCOL_IRTP, protocol="ISO_TP4",XDM_CONST.IP_PROTOCOL_ISO_TP4, protocol="NETBLT",XDM_CONST.IP_PROTOCOL_NETBLT, protocol="MFE_NSP",XDM_CONST.IP_PROTOCOL_MFE_NSP, protocol="MERIT_INP",XDM_CONST.IP_PROTOCOL_MERIT_INP, protocol="DCCP",XDM_CONST.IP_PROTOCOL_DCCP, protocol="3PC",XDM_CONST.IP_PROTOCOL_3PC, protocol="IDPR",XDM_CONST.IP_PROTOCOL_IDPR, protocol="XTP",XDM_CONST.IP_PROTOCOL_XTP, protocol="DDP",XDM_CONST.IP_PROTOCOL_DDP, protocol="IDPR_CMTP",XDM_CONST.IP_PROTOCOL_IDPR_CMTP, protocol="TP",XDM_CONST.IP_PROTOCOL_TP, protocol="IL",XDM_CONST.IP_PROTOCOL_IL, protocol="IPV6",XDM_CONST.IP_PROTOCOL_IPV6, protocol="SDRP",XDM_CONST.IP_PROTOCOL_SDRP, protocol="IPV6_ROUTE",XDM_CONST.IP_PROTOCOL_IPV6_ROUTE, protocol="IPV6_FRAG",XDM_CONST.IP_PROTOCOL_IPV6_FRAG, protocol="IDRP",XDM_CONST.IP_PROTOCOL_IDRP, protocol="RSVP",XDM_CONST.IP_PROTOCOL_RSVP, protocol="GRE",XDM_CONST.IP_PROTOCOL_GRE, protocol="DSR",XDM_CONST.IP_PROTOCOL_DSR, protocol="BNA",XDM_CONST.IP_PROTOCOL_BNA, protocol="ESP",XDM_CONST.IP_PROTOCOL_ESP, protocol="AH",XDM_CONST.IP_PROTOCOL_AH, protocol="I_NLSP",XDM_CONST.IP_PROTOCOL_I_NLSP, protocol="SWIPE",XDM_CONST.IP_PROTOCOL_SWIPE, protocol="NARP",XDM_CONST.IP_PROTOCOL_NARP, protocol="MOBILE",XDM_CONST.IP_PROTOCOL_MOBILE, protocol="TLSP",XDM_CONST.IP_PROTOCOL_TLSP, protocol="SKIP",XDM_CONST.IP_PROTOCOL_SKIP, protocol="IPV6_ICMP",XDM_CONST.IP_PROTOCOL_IPV6_ICMP, protocol="IPV6_NONXT",XDM_CONST.IP_PROTOCOL_IPV6_NONXT, protocol="IPV6_OPTS",XDM_CONST.IP_PROTOCOL_IPV6_OPTS, protocol="CFTP",XDM_CONST.IP_PROTOCOL_CFTP, protocol="SAT_EXPAK",XDM_CONST.IP_PROTOCOL_SAT_EXPAK, protocol="KRYPTOLAN",XDM_CONST.IP_PROTOCOL_KRYPTOLAN, protocol="RVD",XDM_CONST.IP_PROTOCOL_RVD, protocol="IPPC",XDM_CONST.IP_PROTOCOL_IPPC, protocol="SAT_MON",XDM_CONST.IP_PROTOCOL_SAT_MON, protocol="VISA",XDM_CONST.IP_PROTOCOL_VISA, protocol="IPCV",XDM_CONST.IP_PROTOCOL_IPCV, protocol="CPNX",XDM_CONST.IP_PROTOCOL_CPNX, protocol="CPHB",XDM_CONST.IP_PROTOCOL_CPHB, protocol="WSN",XDM_CONST.IP_PROTOCOL_WSN, protocol="PVP",XDM_CONST.IP_PROTOCOL_PVP, protocol="BR_SAT_MON",XDM_CONST.IP_PROTOCOL_BR_SAT_MON, protocol="SUN_ND",XDM_CONST.IP_PROTOCOL_SUN_ND, protocol="WB_MON",XDM_CONST.IP_PROTOCOL_WB_MON, protocol="WB_EXPAK",XDM_CONST.IP_PROTOCOL_WB_EXPAK, protocol="ISO_IP",XDM_CONST.IP_PROTOCOL_ISO_IP, protocol="VMTP",XDM_CONST.IP_PROTOCOL_VMTP, protocol="SECURE_VMTP",XDM_CONST.IP_PROTOCOL_SECURE_VMTP, protocol="VINES",XDM_CONST.IP_PROTOCOL_VINES, protocol="TTP",XDM_CONST.IP_PROTOCOL_TTP, protocol="NSFNET_IGP",XDM_CONST.IP_PROTOCOL_NSFNET_IGP, protocol="DGP",XDM_CONST.IP_PROTOCOL_DGP, protocol="TCF",XDM_CONST.IP_PROTOCOL_TCF, protocol="EIGRP",XDM_CONST.IP_PROTOCOL_EIGRP, protocol="OSPFIGP",XDM_CONST.IP_PROTOCOL_OSPFIGP, protocol="SPRITE_RPC",XDM_CONST.IP_PROTOCOL_SPRITE_RPC, protocol="LARP",XDM_CONST.IP_PROTOCOL_LARP, protocol="MTP",XDM_CONST.IP_PROTOCOL_MTP, protocol="AX25",XDM_CONST.IP_PROTOCOL_AX25, protocol="IPIP",XDM_CONST.IP_PROTOCOL_IPIP, protocol="MICP",XDM_CONST.IP_PROTOCOL_MICP, protocol="SCC_SP",XDM_CONST.IP_PROTOCOL_SCC_SP, protocol="ETHERIP",XDM_CONST.IP_PROTOCOL_ETHERIP, protocol="ENCAP",XDM_CONST.IP_PROTOCOL_ENCAP, protocol="GMTP",XDM_CONST.IP_PROTOCOL_GMTP, protocol="IFMP",XDM_CONST.IP_PROTOCOL_IFMP, protocol="PNNI",XDM_CONST.IP_PROTOCOL_PNNI, protocol="PIM",XDM_CONST.IP_PROTOCOL_PIM, protocol="ARIS",XDM_CONST.IP_PROTOCOL_ARIS, protocol="SCPS",XDM_CONST.IP_PROTOCOL_SCPS, protocol="QNX",XDM_CONST.IP_PROTOCOL_QNX, protocol="AN",XDM_CONST.IP_PROTOCOL_AN, protocol="IPCOMP",XDM_CONST.IP_PROTOCOL_IPCOMP, protocol="COMPAQ_PEER",XDM_CONST.IP_PROTOCOL_COMPAQ_PEER, protocol="IPX_IN_IP",XDM_CONST.IP_PROTOCOL_IPX_IN_IP, protocol="VRRP",XDM_CONST.IP_PROTOCOL_VRRP, protocol="PGM",XDM_CONST.IP_PROTOCOL_PGM, protocol="L2TP",XDM_CONST.IP_PROTOCOL_L2TP, protocol="DDX",XDM_CONST.IP_PROTOCOL_DDX, protocol="IATP",XDM_CONST.IP_PROTOCOL_IATP, protocol="STP",XDM_CONST.IP_PROTOCOL_STP, protocol="SRP",XDM_CONST.IP_PROTOCOL_SRP, protocol="UTI",XDM_CONST.IP_PROTOCOL_UTI, protocol="SMP",XDM_CONST.IP_PROTOCOL_SMP, protocol="SM",XDM_CONST.IP_PROTOCOL_SM, protocol="PTP",XDM_CONST.IP_PROTOCOL_PTP, protocol="ISIS",XDM_CONST.IP_PROTOCOL_ISIS, protocol="FIRE",XDM_CONST.IP_PROTOCOL_FIRE, protocol="CRTP",XDM_CONST.IP_PROTOCOL_CRTP, protocol="CRUDP",XDM_CONST.IP_PROTOCOL_CRUDP, protocol="SSCOPMCE",XDM_CONST.IP_PROTOCOL_SSCOPMCE, protocol="IPLT",XDM_CONST.IP_PROTOCOL_IPLT, protocol="SPS",XDM_CONST.IP_PROTOCOL_SPS, protocol="PIPE",XDM_CONST.IP_PROTOCOL_PIPE, protocol="SCTP",XDM_CONST.IP_PROTOCOL_SCTP, protocol="FC",XDM_CONST.IP_PROTOCOL_FC, protocol="RSVP_E2E_IGNORE",XDM_CONST.IP_PROTOCOL_RSVP_E2E_IGNORE, protocol="MOBILITY",XDM_CONST.IP_PROTOCOL_MOBILITY, protocol="UDPLITE",XDM_CONST.IP_PROTOCOL_UDPLITE, protocol="MPLS_IN_IP",XDM_CONST.IP_PROTOCOL_MPLS_IN_IP,to_string(protocol)),
    xdm.event.original_event_type = to_string(event_id),
    xdm.event.id = to_string(event_id),
    xdm.event.description = message,
    xdm.alert.severity = severity,
    xdm.source.ipv4 = src_ip,
    xdm.source.port = to_integer(src_port),
    xdm.source.zone = src_interface,
    xdm.target.ipv4 = dst_ip,
    xdm.target.port = to_integer(dst_port),
    xdm.event.outcome_reason = action,
    xdm.observer.name = observer_name,
    xdm.event.is_completed = if(action contains "Teardown",true, false);

//from <source_ip> to <dst_ip>
config case_sensitive = true
| filter _raw_log ~= "from\s\d+\.\d+\.\d+\.\d+\sto\s\d+\.\d+\.\d+\.\d+"
| call cisco_asa_main_fields_extraction
| alter action = arrayindex(regextract(_raw_log ,"\%ASA\-[session]*\-*\d\-\d+\:([A-Za-z\s]+)\s[A-Za-z]+"),0),
    src_ip = arrayindex(regextract(_raw_log ,"from\s(\d+\.\d+\.\d+\.\d+)\s"),0),
    dst_ip = arrayindex(regextract(_raw_log ,"to\s(\d+\.\d+\.\d+\.\d+)"),0),
    dst_interface = arrayindex(regextract(_raw_log ,"on\sinterface\s([\w+\-\_]+)"),0),
    bytes = arrayindex(regextract(_raw_log ,"size\s\=\s(\d+)"),0),
    outcome = arrayindex(regextract(_raw_log ,"\d+\-\d+\:\s([A-Za-z]+)\s"),0),
    protocol1 = arrayindex(regextract(_raw_log ,"\d+\-\d+\:\s[A-Za-z]+\s([A-Z]{3,})\s"),0),
    protocol2 = arrayindex(regextract(_raw_log, "\(protocol\=\s([A-Z]+)\)"),0),
    ip_options = arrayindex(regextract(_raw_log , "IP\soptions\:\s\"([^\"]+)\""),0)
| alter protocol = coalesce(protocol1 , protocol2 )
| alter
    xdm.network.ip_protocol = if(protocol="HOPOPT",XDM_CONST.IP_PROTOCOL_HOPOPT, protocol="ICMP",XDM_CONST.IP_PROTOCOL_ICMP, protocol="IGMP",XDM_CONST.IP_PROTOCOL_IGMP, protocol="GGP",XDM_CONST.IP_PROTOCOL_GGP, protocol="IP",XDM_CONST.IP_PROTOCOL_IP, protocol="ST",XDM_CONST.IP_PROTOCOL_ST, protocol="TCP",XDM_CONST.IP_PROTOCOL_TCP, protocol="CBT",XDM_CONST.IP_PROTOCOL_CBT, protocol="EGP",XDM_CONST.IP_PROTOCOL_EGP, protocol="IGP",XDM_CONST.IP_PROTOCOL_IGP, protocol="BBN_RCC_MON",XDM_CONST.IP_PROTOCOL_BBN_RCC_MON, protocol="NVP_II",XDM_CONST.IP_PROTOCOL_NVP_II, protocol="PUP",XDM_CONST.IP_PROTOCOL_PUP, protocol="ARGUS",XDM_CONST.IP_PROTOCOL_ARGUS, protocol="EMCON",XDM_CONST.IP_PROTOCOL_EMCON, protocol="XNET",XDM_CONST.IP_PROTOCOL_XNET, protocol="CHAOS",XDM_CONST.IP_PROTOCOL_CHAOS, protocol="UDP",XDM_CONST.IP_PROTOCOL_UDP, protocol="MUX",XDM_CONST.IP_PROTOCOL_MUX, protocol="DCN_MEAS",XDM_CONST.IP_PROTOCOL_DCN_MEAS, protocol="HMP",XDM_CONST.IP_PROTOCOL_HMP, protocol="PRM",XDM_CONST.IP_PROTOCOL_PRM, protocol="XNS_IDP",XDM_CONST.IP_PROTOCOL_XNS_IDP, protocol="TRUNK_1",XDM_CONST.IP_PROTOCOL_TRUNK_1, protocol="TRUNK_2",XDM_CONST.IP_PROTOCOL_TRUNK_2, protocol="LEAF_1",XDM_CONST.IP_PROTOCOL_LEAF_1, protocol="LEAF_2",XDM_CONST.IP_PROTOCOL_LEAF_2, protocol="RDP",XDM_CONST.IP_PROTOCOL_RDP, protocol="IRTP",XDM_CONST.IP_PROTOCOL_IRTP, protocol="ISO_TP4",XDM_CONST.IP_PROTOCOL_ISO_TP4, protocol="NETBLT",XDM_CONST.IP_PROTOCOL_NETBLT, protocol="MFE_NSP",XDM_CONST.IP_PROTOCOL_MFE_NSP, protocol="MERIT_INP",XDM_CONST.IP_PROTOCOL_MERIT_INP, protocol="DCCP",XDM_CONST.IP_PROTOCOL_DCCP, protocol="3PC",XDM_CONST.IP_PROTOCOL_3PC, protocol="IDPR",XDM_CONST.IP_PROTOCOL_IDPR, protocol="XTP",XDM_CONST.IP_PROTOCOL_XTP, protocol="DDP",XDM_CONST.IP_PROTOCOL_DDP, protocol="IDPR_CMTP",XDM_CONST.IP_PROTOCOL_IDPR_CMTP, protocol="TP",XDM_CONST.IP_PROTOCOL_TP, protocol="IL",XDM_CONST.IP_PROTOCOL_IL, protocol="IPV6",XDM_CONST.IP_PROTOCOL_IPV6, protocol="SDRP",XDM_CONST.IP_PROTOCOL_SDRP, protocol="IPV6_ROUTE",XDM_CONST.IP_PROTOCOL_IPV6_ROUTE, protocol="IPV6_FRAG",XDM_CONST.IP_PROTOCOL_IPV6_FRAG, protocol="IDRP",XDM_CONST.IP_PROTOCOL_IDRP, protocol="RSVP",XDM_CONST.IP_PROTOCOL_RSVP, protocol="GRE",XDM_CONST.IP_PROTOCOL_GRE, protocol="DSR",XDM_CONST.IP_PROTOCOL_DSR, protocol="BNA",XDM_CONST.IP_PROTOCOL_BNA, protocol="ESP",XDM_CONST.IP_PROTOCOL_ESP, protocol="AH",XDM_CONST.IP_PROTOCOL_AH, protocol="I_NLSP",XDM_CONST.IP_PROTOCOL_I_NLSP, protocol="SWIPE",XDM_CONST.IP_PROTOCOL_SWIPE, protocol="NARP",XDM_CONST.IP_PROTOCOL_NARP, protocol="MOBILE",XDM_CONST.IP_PROTOCOL_MOBILE, protocol="TLSP",XDM_CONST.IP_PROTOCOL_TLSP, protocol="SKIP",XDM_CONST.IP_PROTOCOL_SKIP, protocol="IPV6_ICMP",XDM_CONST.IP_PROTOCOL_IPV6_ICMP, protocol="IPV6_NONXT",XDM_CONST.IP_PROTOCOL_IPV6_NONXT, protocol="IPV6_OPTS",XDM_CONST.IP_PROTOCOL_IPV6_OPTS, protocol="CFTP",XDM_CONST.IP_PROTOCOL_CFTP, protocol="SAT_EXPAK",XDM_CONST.IP_PROTOCOL_SAT_EXPAK, protocol="KRYPTOLAN",XDM_CONST.IP_PROTOCOL_KRYPTOLAN, protocol="RVD",XDM_CONST.IP_PROTOCOL_RVD, protocol="IPPC",XDM_CONST.IP_PROTOCOL_IPPC, protocol="SAT_MON",XDM_CONST.IP_PROTOCOL_SAT_MON, protocol="VISA",XDM_CONST.IP_PROTOCOL_VISA, protocol="IPCV",XDM_CONST.IP_PROTOCOL_IPCV, protocol="CPNX",XDM_CONST.IP_PROTOCOL_CPNX, protocol="CPHB",XDM_CONST.IP_PROTOCOL_CPHB, protocol="WSN",XDM_CONST.IP_PROTOCOL_WSN, protocol="PVP",XDM_CONST.IP_PROTOCOL_PVP, protocol="BR_SAT_MON",XDM_CONST.IP_PROTOCOL_BR_SAT_MON, protocol="SUN_ND",XDM_CONST.IP_PROTOCOL_SUN_ND, protocol="WB_MON",XDM_CONST.IP_PROTOCOL_WB_MON, protocol="WB_EXPAK",XDM_CONST.IP_PROTOCOL_WB_EXPAK, protocol="ISO_IP",XDM_CONST.IP_PROTOCOL_ISO_IP, protocol="VMTP",XDM_CONST.IP_PROTOCOL_VMTP, protocol="SECURE_VMTP",XDM_CONST.IP_PROTOCOL_SECURE_VMTP, protocol="VINES",XDM_CONST.IP_PROTOCOL_VINES, protocol="TTP",XDM_CONST.IP_PROTOCOL_TTP, protocol="NSFNET_IGP",XDM_CONST.IP_PROTOCOL_NSFNET_IGP, protocol="DGP",XDM_CONST.IP_PROTOCOL_DGP, protocol="TCF",XDM_CONST.IP_PROTOCOL_TCF, protocol="EIGRP",XDM_CONST.IP_PROTOCOL_EIGRP, protocol="OSPFIGP",XDM_CONST.IP_PROTOCOL_OSPFIGP, protocol="SPRITE_RPC",XDM_CONST.IP_PROTOCOL_SPRITE_RPC, protocol="LARP",XDM_CONST.IP_PROTOCOL_LARP, protocol="MTP",XDM_CONST.IP_PROTOCOL_MTP, protocol="AX25",XDM_CONST.IP_PROTOCOL_AX25, protocol="IPIP",XDM_CONST.IP_PROTOCOL_IPIP, protocol="MICP",XDM_CONST.IP_PROTOCOL_MICP, protocol="SCC_SP",XDM_CONST.IP_PROTOCOL_SCC_SP, protocol="ETHERIP",XDM_CONST.IP_PROTOCOL_ETHERIP, protocol="ENCAP",XDM_CONST.IP_PROTOCOL_ENCAP, protocol="GMTP",XDM_CONST.IP_PROTOCOL_GMTP, protocol="IFMP",XDM_CONST.IP_PROTOCOL_IFMP, protocol="PNNI",XDM_CONST.IP_PROTOCOL_PNNI, protocol="PIM",XDM_CONST.IP_PROTOCOL_PIM, protocol="ARIS",XDM_CONST.IP_PROTOCOL_ARIS, protocol="SCPS",XDM_CONST.IP_PROTOCOL_SCPS, protocol="QNX",XDM_CONST.IP_PROTOCOL_QNX, protocol="AN",XDM_CONST.IP_PROTOCOL_AN, protocol="IPCOMP",XDM_CONST.IP_PROTOCOL_IPCOMP, protocol="COMPAQ_PEER",XDM_CONST.IP_PROTOCOL_COMPAQ_PEER, protocol="IPX_IN_IP",XDM_CONST.IP_PROTOCOL_IPX_IN_IP, protocol="VRRP",XDM_CONST.IP_PROTOCOL_VRRP, protocol="PGM",XDM_CONST.IP_PROTOCOL_PGM, protocol="L2TP",XDM_CONST.IP_PROTOCOL_L2TP, protocol="DDX",XDM_CONST.IP_PROTOCOL_DDX, protocol="IATP",XDM_CONST.IP_PROTOCOL_IATP, protocol="STP",XDM_CONST.IP_PROTOCOL_STP, protocol="SRP",XDM_CONST.IP_PROTOCOL_SRP, protocol="UTI",XDM_CONST.IP_PROTOCOL_UTI, protocol="SMP",XDM_CONST.IP_PROTOCOL_SMP, protocol="SM",XDM_CONST.IP_PROTOCOL_SM, protocol="PTP",XDM_CONST.IP_PROTOCOL_PTP, protocol="ISIS",XDM_CONST.IP_PROTOCOL_ISIS, protocol="FIRE",XDM_CONST.IP_PROTOCOL_FIRE, protocol="CRTP",XDM_CONST.IP_PROTOCOL_CRTP, protocol="CRUDP",XDM_CONST.IP_PROTOCOL_CRUDP, protocol="SSCOPMCE",XDM_CONST.IP_PROTOCOL_SSCOPMCE, protocol="IPLT",XDM_CONST.IP_PROTOCOL_IPLT, protocol="SPS",XDM_CONST.IP_PROTOCOL_SPS, protocol="PIPE",XDM_CONST.IP_PROTOCOL_PIPE, protocol="SCTP",XDM_CONST.IP_PROTOCOL_SCTP, protocol="FC",XDM_CONST.IP_PROTOCOL_FC, protocol="RSVP_E2E_IGNORE",XDM_CONST.IP_PROTOCOL_RSVP_E2E_IGNORE, protocol="MOBILITY",XDM_CONST.IP_PROTOCOL_MOBILITY, protocol="UDPLITE",XDM_CONST.IP_PROTOCOL_UDPLITE, protocol="MPLS_IN_IP",XDM_CONST.IP_PROTOCOL_MPLS_IN_IP,to_string(protocol)),
    xdm.event.outcome = if(outcome = "Deny",XDM_CONST.OUTCOME_FAILED,to_string(outcome)),
    xdm.event.original_event_type = to_string(event_id),
    xdm.event.id = to_string(event_id),
    xdm.event.description = message,
    xdm.alert.severity = severity,
    xdm.source.ipv4 = src_ip,
    xdm.target.ipv4 = dst_ip,
    xdm.target.zone = dst_interface,
    xdm.event.outcome_reason = action,
    xdm.observer.name = observer_name,
    xdm.source.sent_bytes=to_integer(bytes),
    xdm.network.rule = ip_options,
    xdm.event.is_completed = if(action contains "Teardown",true, false);

//IP \=<dst_ip>
config case_sensitive = true
| filter _raw_log ~= "IP\s*\=\s*\d+\.\d+\.\d+\.\d+" and _raw_log !~= "\d\:\sAAA"
| call cisco_asa_main_fields_extraction
| alter action1 = arrayindex(regextract(_raw_log ,"\%ASA\-[session]*\-*\d\-\d+\:([A-Za-z\s]+)\s[A-Za-z]+"),0),
    action2 = arrayindex(regextract(_raw_log ,"\,\s([\w\s]+)\.*$"),0),
    dst_ip = arrayindex(regextract(_raw_log ,"IP\s*\=\s*(\d+\.\d+\.\d+\.\d+)"),0),
    dst_user1 = arrayindex(regextract(_raw_log ,"[u|U]ser\s*\=\s*([\w\-\_\.\@]+)"),0),
    dst_user2 = arrayindex(regextract(_raw_log ,"Username\s*\=\s*([^\,]+)\,"),0),
    sent_bytes = arrayindex(regextract(_raw_log ,"Bytes\sxmt\:\s(\d+)"),0),
    //bytes_received = arrayindex(regextract(_raw_log ,"Bytes\srcv\:\s(\d+)"),0),
    outcome_reason = arrayindex(regextract(_raw_log ,"[R|r]eason\s*[\:|\=]\s*([\w\s]+)"),0),
    session_id = arrayindex(regextract(_raw_log ,"Session\=([^\,]+)\,"),0)
| alter dst_user = coalesce(dst_user1 , dst_user2 ),
    action = coalesce(action1 , action2 )
// duration
| alter
        duration_string_no_days = arrayindex(regextract(_raw_log ,"[D|d]uration\:*\s+([hH0-9]+:[mM0-9]+:[sS0-9]+)[\s|\,]*"),0),
        duration_string_days = arrayindex(regextract(_raw_log ,"[D|d]uration\:*\s+([dD0-9]*\s[hH0-9]+:[mM0-9]+:[sS0-9]+)[\s|\,]*"),0)
| alter
        duration_days = arrayindex(split(duration_string_days ," "), 0),
        duration_string = arrayindex(split(duration_string_days ," "), 1)
| alter duration_string = if(duration_string = null or duration_string = "", duration_string_no_days, duration_string)
| alter duration_split = split(duration_string ,":")
// duration parts
| alter
        duration_part_0 = arrayindex(duration_split,0),
        duration_part_1 = arrayindex(duration_split,1),
        duration_part_2 = arrayindex(duration_split,2)
| alter
        duration_part_0_millis = if(duration_part_0 contains "h", multiply(to_integer(arrayindex(regextract(duration_part_0 ,"\d+"),0)),3600000),duration_part_0 ~= "\d+" and duration_part_0 != "0", multiply(to_integer(duration_part_0), 3600000), 0),
        duration_part_1_millis = if(duration_part_1 contains "m", multiply(to_integer(arrayindex(regextract(duration_part_1 ,"\d+"),0)),60000), duration_part_1 ~= "\d+" and duration_part_1 != "0", multiply(to_integer(duration_part_1), 60000), 0),
        duration_part_2_millis = if(duration_part_2 contains "s", multiply(to_integer(arrayindex(regextract(duration_part_2 ,"\d+"),0)),1000) ,duration_part_2 ~= "\d+" and duration_part_2 != "0", multiply(to_integer(duration_part_2), 1000), 0),
        duration_part_days = if(duration_days != null, multiply(to_integer(arrayindex(regextract(duration_days ,"\d+"),0)),86400000),0)
| alter duration = add(add(add(duration_part_0_millis , duration_part_1_millis ),duration_part_2_millis), duration_part_days)
| alter xdm.event.original_event_type = to_string(event_id),
    xdm.event.id = to_string(event_id),
    xdm.event.description = message,
    xdm.alert.severity = severity,
    xdm.target.ipv4 = dst_ip,
    xdm.event.outcome_reason = coalesce(outcome_reason,action),
    xdm.observer.name = observer_name,
    xdm.event.is_completed = if(action contains "Teardown",true, false),
    xdm.target.user.username = dst_user,
    xdm.source.sent_bytes = to_integer(sent_bytes),
    xdm.network.session_id = session_id,
    xdm.event.duration = to_integer(duration);

//, dest_addr=<dest_ip>, src_addr=<source_ip>
config case_sensitive = true
| filter _raw_log ~= "dest_addr\=\d+\.\d+\.\d+\.\d+\,\ssrc_addr\=\d+\.\d+\.\d+\.\d+"
| call cisco_asa_main_fields_extraction
| alter action = arrayindex(regextract(_raw_log ,"\%ASA\-[session]*\-*\d\-\d+\:([A-Za-z\s\-]+)\s[A-Za-z]+"),0),
    src_ip = arrayindex(regextract(_raw_log ,"src_addr\=(\d+\.\d+\.\d+\.\d+)"),0),
    dst_ip = arrayindex(regextract(_raw_log ,"dest_addr\=(\d+\.\d+\.\d+\.\d+)"),0),
    protocol = arrayindex(regextract(_raw_log ,"prot\=([A-Z]+)"),0),
    sent_bytes = arrayindex(regextract(_raw_log ,"PMTU\-D\spacket\s(\d+)\sbytes"),0),
    packets = to_integer( arrayindex(regextract(_raw_log ,"packet\s(\d+)\sbytes"),0))
| alter
    xdm.network.ip_protocol = if(protocol="HOPOPT",XDM_CONST.IP_PROTOCOL_HOPOPT, protocol="ICMP",XDM_CONST.IP_PROTOCOL_ICMP, protocol="IGMP",XDM_CONST.IP_PROTOCOL_IGMP, protocol="GGP",XDM_CONST.IP_PROTOCOL_GGP, protocol="IP",XDM_CONST.IP_PROTOCOL_IP, protocol="ST",XDM_CONST.IP_PROTOCOL_ST, protocol="TCP",XDM_CONST.IP_PROTOCOL_TCP, protocol="CBT",XDM_CONST.IP_PROTOCOL_CBT, protocol="EGP",XDM_CONST.IP_PROTOCOL_EGP, protocol="IGP",XDM_CONST.IP_PROTOCOL_IGP, protocol="BBN_RCC_MON",XDM_CONST.IP_PROTOCOL_BBN_RCC_MON, protocol="NVP_II",XDM_CONST.IP_PROTOCOL_NVP_II, protocol="PUP",XDM_CONST.IP_PROTOCOL_PUP, protocol="ARGUS",XDM_CONST.IP_PROTOCOL_ARGUS, protocol="EMCON",XDM_CONST.IP_PROTOCOL_EMCON, protocol="XNET",XDM_CONST.IP_PROTOCOL_XNET, protocol="CHAOS",XDM_CONST.IP_PROTOCOL_CHAOS, protocol="UDP",XDM_CONST.IP_PROTOCOL_UDP, protocol="MUX",XDM_CONST.IP_PROTOCOL_MUX, protocol="DCN_MEAS",XDM_CONST.IP_PROTOCOL_DCN_MEAS, protocol="HMP",XDM_CONST.IP_PROTOCOL_HMP, protocol="PRM",XDM_CONST.IP_PROTOCOL_PRM, protocol="XNS_IDP",XDM_CONST.IP_PROTOCOL_XNS_IDP, protocol="TRUNK_1",XDM_CONST.IP_PROTOCOL_TRUNK_1, protocol="TRUNK_2",XDM_CONST.IP_PROTOCOL_TRUNK_2, protocol="LEAF_1",XDM_CONST.IP_PROTOCOL_LEAF_1, protocol="LEAF_2",XDM_CONST.IP_PROTOCOL_LEAF_2, protocol="RDP",XDM_CONST.IP_PROTOCOL_RDP, protocol="IRTP",XDM_CONST.IP_PROTOCOL_IRTP, protocol="ISO_TP4",XDM_CONST.IP_PROTOCOL_ISO_TP4, protocol="NETBLT",XDM_CONST.IP_PROTOCOL_NETBLT, protocol="MFE_NSP",XDM_CONST.IP_PROTOCOL_MFE_NSP, protocol="MERIT_INP",XDM_CONST.IP_PROTOCOL_MERIT_INP, protocol="DCCP",XDM_CONST.IP_PROTOCOL_DCCP, protocol="3PC",XDM_CONST.IP_PROTOCOL_3PC, protocol="IDPR",XDM_CONST.IP_PROTOCOL_IDPR, protocol="XTP",XDM_CONST.IP_PROTOCOL_XTP, protocol="DDP",XDM_CONST.IP_PROTOCOL_DDP, protocol="IDPR_CMTP",XDM_CONST.IP_PROTOCOL_IDPR_CMTP, protocol="TP",XDM_CONST.IP_PROTOCOL_TP, protocol="IL",XDM_CONST.IP_PROTOCOL_IL, protocol="IPV6",XDM_CONST.IP_PROTOCOL_IPV6, protocol="SDRP",XDM_CONST.IP_PROTOCOL_SDRP, protocol="IPV6_ROUTE",XDM_CONST.IP_PROTOCOL_IPV6_ROUTE, protocol="IPV6_FRAG",XDM_CONST.IP_PROTOCOL_IPV6_FRAG, protocol="IDRP",XDM_CONST.IP_PROTOCOL_IDRP, protocol="RSVP",XDM_CONST.IP_PROTOCOL_RSVP, protocol="GRE",XDM_CONST.IP_PROTOCOL_GRE, protocol="DSR",XDM_CONST.IP_PROTOCOL_DSR, protocol="BNA",XDM_CONST.IP_PROTOCOL_BNA, protocol="ESP",XDM_CONST.IP_PROTOCOL_ESP, protocol="AH",XDM_CONST.IP_PROTOCOL_AH, protocol="I_NLSP",XDM_CONST.IP_PROTOCOL_I_NLSP, protocol="SWIPE",XDM_CONST.IP_PROTOCOL_SWIPE, protocol="NARP",XDM_CONST.IP_PROTOCOL_NARP, protocol="MOBILE",XDM_CONST.IP_PROTOCOL_MOBILE, protocol="TLSP",XDM_CONST.IP_PROTOCOL_TLSP, protocol="SKIP",XDM_CONST.IP_PROTOCOL_SKIP, protocol="IPV6_ICMP",XDM_CONST.IP_PROTOCOL_IPV6_ICMP, protocol="IPV6_NONXT",XDM_CONST.IP_PROTOCOL_IPV6_NONXT, protocol="IPV6_OPTS",XDM_CONST.IP_PROTOCOL_IPV6_OPTS, protocol="CFTP",XDM_CONST.IP_PROTOCOL_CFTP, protocol="SAT_EXPAK",XDM_CONST.IP_PROTOCOL_SAT_EXPAK, protocol="KRYPTOLAN",XDM_CONST.IP_PROTOCOL_KRYPTOLAN, protocol="RVD",XDM_CONST.IP_PROTOCOL_RVD, protocol="IPPC",XDM_CONST.IP_PROTOCOL_IPPC, protocol="SAT_MON",XDM_CONST.IP_PROTOCOL_SAT_MON, protocol="VISA",XDM_CONST.IP_PROTOCOL_VISA, protocol="IPCV",XDM_CONST.IP_PROTOCOL_IPCV, protocol="CPNX",XDM_CONST.IP_PROTOCOL_CPNX, protocol="CPHB",XDM_CONST.IP_PROTOCOL_CPHB, protocol="WSN",XDM_CONST.IP_PROTOCOL_WSN, protocol="PVP",XDM_CONST.IP_PROTOCOL_PVP, protocol="BR_SAT_MON",XDM_CONST.IP_PROTOCOL_BR_SAT_MON, protocol="SUN_ND",XDM_CONST.IP_PROTOCOL_SUN_ND, protocol="WB_MON",XDM_CONST.IP_PROTOCOL_WB_MON, protocol="WB_EXPAK",XDM_CONST.IP_PROTOCOL_WB_EXPAK, protocol="ISO_IP",XDM_CONST.IP_PROTOCOL_ISO_IP, protocol="VMTP",XDM_CONST.IP_PROTOCOL_VMTP, protocol="SECURE_VMTP",XDM_CONST.IP_PROTOCOL_SECURE_VMTP, protocol="VINES",XDM_CONST.IP_PROTOCOL_VINES, protocol="TTP",XDM_CONST.IP_PROTOCOL_TTP, protocol="NSFNET_IGP",XDM_CONST.IP_PROTOCOL_NSFNET_IGP, protocol="DGP",XDM_CONST.IP_PROTOCOL_DGP, protocol="TCF",XDM_CONST.IP_PROTOCOL_TCF, protocol="EIGRP",XDM_CONST.IP_PROTOCOL_EIGRP, protocol="OSPFIGP",XDM_CONST.IP_PROTOCOL_OSPFIGP, protocol="SPRITE_RPC",XDM_CONST.IP_PROTOCOL_SPRITE_RPC, protocol="LARP",XDM_CONST.IP_PROTOCOL_LARP, protocol="MTP",XDM_CONST.IP_PROTOCOL_MTP, protocol="AX25",XDM_CONST.IP_PROTOCOL_AX25, protocol="IPIP",XDM_CONST.IP_PROTOCOL_IPIP, protocol="MICP",XDM_CONST.IP_PROTOCOL_MICP, protocol="SCC_SP",XDM_CONST.IP_PROTOCOL_SCC_SP, protocol="ETHERIP",XDM_CONST.IP_PROTOCOL_ETHERIP, protocol="ENCAP",XDM_CONST.IP_PROTOCOL_ENCAP, protocol="GMTP",XDM_CONST.IP_PROTOCOL_GMTP, protocol="IFMP",XDM_CONST.IP_PROTOCOL_IFMP, protocol="PNNI",XDM_CONST.IP_PROTOCOL_PNNI, protocol="PIM",XDM_CONST.IP_PROTOCOL_PIM, protocol="ARIS",XDM_CONST.IP_PROTOCOL_ARIS, protocol="SCPS",XDM_CONST.IP_PROTOCOL_SCPS, protocol="QNX",XDM_CONST.IP_PROTOCOL_QNX, protocol="AN",XDM_CONST.IP_PROTOCOL_AN, protocol="IPCOMP",XDM_CONST.IP_PROTOCOL_IPCOMP, protocol="COMPAQ_PEER",XDM_CONST.IP_PROTOCOL_COMPAQ_PEER, protocol="IPX_IN_IP",XDM_CONST.IP_PROTOCOL_IPX_IN_IP, protocol="VRRP",XDM_CONST.IP_PROTOCOL_VRRP, protocol="PGM",XDM_CONST.IP_PROTOCOL_PGM, protocol="L2TP",XDM_CONST.IP_PROTOCOL_L2TP, protocol="DDX",XDM_CONST.IP_PROTOCOL_DDX, protocol="IATP",XDM_CONST.IP_PROTOCOL_IATP, protocol="STP",XDM_CONST.IP_PROTOCOL_STP, protocol="SRP",XDM_CONST.IP_PROTOCOL_SRP, protocol="UTI",XDM_CONST.IP_PROTOCOL_UTI, protocol="SMP",XDM_CONST.IP_PROTOCOL_SMP, protocol="SM",XDM_CONST.IP_PROTOCOL_SM, protocol="PTP",XDM_CONST.IP_PROTOCOL_PTP, protocol="ISIS",XDM_CONST.IP_PROTOCOL_ISIS, protocol="FIRE",XDM_CONST.IP_PROTOCOL_FIRE, protocol="CRTP",XDM_CONST.IP_PROTOCOL_CRTP, protocol="CRUDP",XDM_CONST.IP_PROTOCOL_CRUDP, protocol="SSCOPMCE",XDM_CONST.IP_PROTOCOL_SSCOPMCE, protocol="IPLT",XDM_CONST.IP_PROTOCOL_IPLT, protocol="SPS",XDM_CONST.IP_PROTOCOL_SPS, protocol="PIPE",XDM_CONST.IP_PROTOCOL_PIPE, protocol="SCTP",XDM_CONST.IP_PROTOCOL_SCTP, protocol="FC",XDM_CONST.IP_PROTOCOL_FC, protocol="RSVP_E2E_IGNORE",XDM_CONST.IP_PROTOCOL_RSVP_E2E_IGNORE, protocol="MOBILITY",XDM_CONST.IP_PROTOCOL_MOBILITY, protocol="UDPLITE",XDM_CONST.IP_PROTOCOL_UDPLITE, protocol="MPLS_IN_IP",XDM_CONST.IP_PROTOCOL_MPLS_IN_IP,to_string(protocol)),
    xdm.event.original_event_type = to_string(event_id),
    xdm.event.id = to_string(event_id),
    xdm.event.description = message,
    xdm.alert.severity = severity,
    xdm.source.ipv4 = src_ip,
    xdm.source.sent_bytes = to_integer(sent_bytes ),
    xdm.target.ipv4 = dst_ip,
    xdm.event.outcome_reason = action,
    xdm.observer.name = observer_name,
    xdm.source.sent_packets = packets,
    xdm.event.is_completed = if(action contains "Teardown",true, false);

// faddr <source_ip>/<source_port> to laddr <dest_ip>
config case_sensitive = true
| filter _raw_log ~= "faddr\s\d+\.\d+\.\d+\.\d+\/\d+\sto\sladdr\s\d+\.\d+\.\d+\.\d+"
| call cisco_asa_main_fields_extraction
| alter action = arrayindex(regextract(_raw_log ,"\%ASA\-[session]*\-*\d\-\d+\:([A-Za-z\s\-]+)\s[A-Za-z]+"),0),
    src_ip = arrayindex(regextract(_raw_log ,"for\sfaddr\s(\d+\.\d+\.\d+\.\d+)\/\d+"),0),
    src_port = arrayindex(regextract(_raw_log ,"for\sfaddr\s\d+\.\d+\.\d+\.\d+\/(\d+)"),0),
    dst_ip = arrayindex(regextract(_raw_log ,"to\sladdr\s(\d+\.\d+\.\d+\.\d+)"),0),
    protocol = arrayindex(regextract(_raw_log ,"\:\sPre\-allocate\s([A-Z0-9]+)\s"),0)
| alter
    xdm.network.ip_protocol = if(protocol="HOPOPT",XDM_CONST.IP_PROTOCOL_HOPOPT, protocol="ICMP",XDM_CONST.IP_PROTOCOL_ICMP, protocol="IGMP",XDM_CONST.IP_PROTOCOL_IGMP, protocol="GGP",XDM_CONST.IP_PROTOCOL_GGP, protocol="IP",XDM_CONST.IP_PROTOCOL_IP, protocol="ST",XDM_CONST.IP_PROTOCOL_ST, protocol="TCP",XDM_CONST.IP_PROTOCOL_TCP, protocol="CBT",XDM_CONST.IP_PROTOCOL_CBT, protocol="EGP",XDM_CONST.IP_PROTOCOL_EGP, protocol="IGP",XDM_CONST.IP_PROTOCOL_IGP, protocol="BBN_RCC_MON",XDM_CONST.IP_PROTOCOL_BBN_RCC_MON, protocol="NVP_II",XDM_CONST.IP_PROTOCOL_NVP_II, protocol="PUP",XDM_CONST.IP_PROTOCOL_PUP, protocol="ARGUS",XDM_CONST.IP_PROTOCOL_ARGUS, protocol="EMCON",XDM_CONST.IP_PROTOCOL_EMCON, protocol="XNET",XDM_CONST.IP_PROTOCOL_XNET, protocol="CHAOS",XDM_CONST.IP_PROTOCOL_CHAOS, protocol="UDP",XDM_CONST.IP_PROTOCOL_UDP, protocol="MUX",XDM_CONST.IP_PROTOCOL_MUX, protocol="DCN_MEAS",XDM_CONST.IP_PROTOCOL_DCN_MEAS, protocol="HMP",XDM_CONST.IP_PROTOCOL_HMP, protocol="PRM",XDM_CONST.IP_PROTOCOL_PRM, protocol="XNS_IDP",XDM_CONST.IP_PROTOCOL_XNS_IDP, protocol="TRUNK_1",XDM_CONST.IP_PROTOCOL_TRUNK_1, protocol="TRUNK_2",XDM_CONST.IP_PROTOCOL_TRUNK_2, protocol="LEAF_1",XDM_CONST.IP_PROTOCOL_LEAF_1, protocol="LEAF_2",XDM_CONST.IP_PROTOCOL_LEAF_2, protocol="RDP",XDM_CONST.IP_PROTOCOL_RDP, protocol="IRTP",XDM_CONST.IP_PROTOCOL_IRTP, protocol="ISO_TP4",XDM_CONST.IP_PROTOCOL_ISO_TP4, protocol="NETBLT",XDM_CONST.IP_PROTOCOL_NETBLT, protocol="MFE_NSP",XDM_CONST.IP_PROTOCOL_MFE_NSP, protocol="MERIT_INP",XDM_CONST.IP_PROTOCOL_MERIT_INP, protocol="DCCP",XDM_CONST.IP_PROTOCOL_DCCP, protocol="3PC",XDM_CONST.IP_PROTOCOL_3PC, protocol="IDPR",XDM_CONST.IP_PROTOCOL_IDPR, protocol="XTP",XDM_CONST.IP_PROTOCOL_XTP, protocol="DDP",XDM_CONST.IP_PROTOCOL_DDP, protocol="IDPR_CMTP",XDM_CONST.IP_PROTOCOL_IDPR_CMTP, protocol="TP",XDM_CONST.IP_PROTOCOL_TP, protocol="IL",XDM_CONST.IP_PROTOCOL_IL, protocol="IPV6",XDM_CONST.IP_PROTOCOL_IPV6, protocol="SDRP",XDM_CONST.IP_PROTOCOL_SDRP, protocol="IPV6_ROUTE",XDM_CONST.IP_PROTOCOL_IPV6_ROUTE, protocol="IPV6_FRAG",XDM_CONST.IP_PROTOCOL_IPV6_FRAG, protocol="IDRP",XDM_CONST.IP_PROTOCOL_IDRP, protocol="RSVP",XDM_CONST.IP_PROTOCOL_RSVP, protocol="GRE",XDM_CONST.IP_PROTOCOL_GRE, protocol="DSR",XDM_CONST.IP_PROTOCOL_DSR, protocol="BNA",XDM_CONST.IP_PROTOCOL_BNA, protocol="ESP",XDM_CONST.IP_PROTOCOL_ESP, protocol="AH",XDM_CONST.IP_PROTOCOL_AH, protocol="I_NLSP",XDM_CONST.IP_PROTOCOL_I_NLSP, protocol="SWIPE",XDM_CONST.IP_PROTOCOL_SWIPE, protocol="NARP",XDM_CONST.IP_PROTOCOL_NARP, protocol="MOBILE",XDM_CONST.IP_PROTOCOL_MOBILE, protocol="TLSP",XDM_CONST.IP_PROTOCOL_TLSP, protocol="SKIP",XDM_CONST.IP_PROTOCOL_SKIP, protocol="IPV6_ICMP",XDM_CONST.IP_PROTOCOL_IPV6_ICMP, protocol="IPV6_NONXT",XDM_CONST.IP_PROTOCOL_IPV6_NONXT, protocol="IPV6_OPTS",XDM_CONST.IP_PROTOCOL_IPV6_OPTS, protocol="CFTP",XDM_CONST.IP_PROTOCOL_CFTP, protocol="SAT_EXPAK",XDM_CONST.IP_PROTOCOL_SAT_EXPAK, protocol="KRYPTOLAN",XDM_CONST.IP_PROTOCOL_KRYPTOLAN, protocol="RVD",XDM_CONST.IP_PROTOCOL_RVD, protocol="IPPC",XDM_CONST.IP_PROTOCOL_IPPC, protocol="SAT_MON",XDM_CONST.IP_PROTOCOL_SAT_MON, protocol="VISA",XDM_CONST.IP_PROTOCOL_VISA, protocol="IPCV",XDM_CONST.IP_PROTOCOL_IPCV, protocol="CPNX",XDM_CONST.IP_PROTOCOL_CPNX, protocol="CPHB",XDM_CONST.IP_PROTOCOL_CPHB, protocol="WSN",XDM_CONST.IP_PROTOCOL_WSN, protocol="PVP",XDM_CONST.IP_PROTOCOL_PVP, protocol="BR_SAT_MON",XDM_CONST.IP_PROTOCOL_BR_SAT_MON, protocol="SUN_ND",XDM_CONST.IP_PROTOCOL_SUN_ND, protocol="WB_MON",XDM_CONST.IP_PROTOCOL_WB_MON, protocol="WB_EXPAK",XDM_CONST.IP_PROTOCOL_WB_EXPAK, protocol="ISO_IP",XDM_CONST.IP_PROTOCOL_ISO_IP, protocol="VMTP",XDM_CONST.IP_PROTOCOL_VMTP, protocol="SECURE_VMTP",XDM_CONST.IP_PROTOCOL_SECURE_VMTP, protocol="VINES",XDM_CONST.IP_PROTOCOL_VINES, protocol="TTP",XDM_CONST.IP_PROTOCOL_TTP, protocol="NSFNET_IGP",XDM_CONST.IP_PROTOCOL_NSFNET_IGP, protocol="DGP",XDM_CONST.IP_PROTOCOL_DGP, protocol="TCF",XDM_CONST.IP_PROTOCOL_TCF, protocol="EIGRP",XDM_CONST.IP_PROTOCOL_EIGRP, protocol="OSPFIGP",XDM_CONST.IP_PROTOCOL_OSPFIGP, protocol="SPRITE_RPC",XDM_CONST.IP_PROTOCOL_SPRITE_RPC, protocol="LARP",XDM_CONST.IP_PROTOCOL_LARP, protocol="MTP",XDM_CONST.IP_PROTOCOL_MTP, protocol="AX25",XDM_CONST.IP_PROTOCOL_AX25, protocol="IPIP",XDM_CONST.IP_PROTOCOL_IPIP, protocol="MICP",XDM_CONST.IP_PROTOCOL_MICP, protocol="SCC_SP",XDM_CONST.IP_PROTOCOL_SCC_SP, protocol="ETHERIP",XDM_CONST.IP_PROTOCOL_ETHERIP, protocol="ENCAP",XDM_CONST.IP_PROTOCOL_ENCAP, protocol="GMTP",XDM_CONST.IP_PROTOCOL_GMTP, protocol="IFMP",XDM_CONST.IP_PROTOCOL_IFMP, protocol="PNNI",XDM_CONST.IP_PROTOCOL_PNNI, protocol="PIM",XDM_CONST.IP_PROTOCOL_PIM, protocol="ARIS",XDM_CONST.IP_PROTOCOL_ARIS, protocol="SCPS",XDM_CONST.IP_PROTOCOL_SCPS, protocol="QNX",XDM_CONST.IP_PROTOCOL_QNX, protocol="AN",XDM_CONST.IP_PROTOCOL_AN, protocol="IPCOMP",XDM_CONST.IP_PROTOCOL_IPCOMP, protocol="COMPAQ_PEER",XDM_CONST.IP_PROTOCOL_COMPAQ_PEER, protocol="IPX_IN_IP",XDM_CONST.IP_PROTOCOL_IPX_IN_IP, protocol="VRRP",XDM_CONST.IP_PROTOCOL_VRRP, protocol="PGM",XDM_CONST.IP_PROTOCOL_PGM, protocol="L2TP",XDM_CONST.IP_PROTOCOL_L2TP, protocol="DDX",XDM_CONST.IP_PROTOCOL_DDX, protocol="IATP",XDM_CONST.IP_PROTOCOL_IATP, protocol="STP",XDM_CONST.IP_PROTOCOL_STP, protocol="SRP",XDM_CONST.IP_PROTOCOL_SRP, protocol="UTI",XDM_CONST.IP_PROTOCOL_UTI, protocol="SMP",XDM_CONST.IP_PROTOCOL_SMP, protocol="SM",XDM_CONST.IP_PROTOCOL_SM, protocol="PTP",XDM_CONST.IP_PROTOCOL_PTP, protocol="ISIS",XDM_CONST.IP_PROTOCOL_ISIS, protocol="FIRE",XDM_CONST.IP_PROTOCOL_FIRE, protocol="CRTP",XDM_CONST.IP_PROTOCOL_CRTP, protocol="CRUDP",XDM_CONST.IP_PROTOCOL_CRUDP, protocol="SSCOPMCE",XDM_CONST.IP_PROTOCOL_SSCOPMCE, protocol="IPLT",XDM_CONST.IP_PROTOCOL_IPLT, protocol="SPS",XDM_CONST.IP_PROTOCOL_SPS, protocol="PIPE",XDM_CONST.IP_PROTOCOL_PIPE, protocol="SCTP",XDM_CONST.IP_PROTOCOL_SCTP, protocol="FC",XDM_CONST.IP_PROTOCOL_FC, protocol="RSVP_E2E_IGNORE",XDM_CONST.IP_PROTOCOL_RSVP_E2E_IGNORE, protocol="MOBILITY",XDM_CONST.IP_PROTOCOL_MOBILITY, protocol="UDPLITE",XDM_CONST.IP_PROTOCOL_UDPLITE, protocol="MPLS_IN_IP",XDM_CONST.IP_PROTOCOL_MPLS_IN_IP,to_string(protocol)),
    xdm.event.original_event_type = to_string(event_id),
    xdm.event.id = to_string(event_id),
    xdm.event.description = message,
    xdm.alert.severity = severity,
    xdm.source.ipv4 = src_ip,
    xdm.source.port = to_integer(src_port),
    xdm.target.ipv4 = dst_ip,
    xdm.event.outcome_reason = action,
    xdm.observer.name = observer_name,
    xdm.event.is_completed = if(action contains "Teardown",true, false);

// from laddr <source_ip> on interface <interface>> to <dest_ip>
config case_sensitive = true
| filter _raw_log ~= "from\sladdr\s\d+\.\d+\.\d+\.\d+\son\sinterface\s[\w\-\_]+\sto\s\d+\.\d+\.\d+\.\d+"
| call cisco_asa_main_fields_extraction
| alter action = arrayindex(regextract(_raw_log ,"\%ASA\-[session]*\-*\d\-\d+\:([A-Za-z\s\-]+)\s[A-Za-z]+"),0),
    protocol = arrayindex(regextract(_raw_log,"\d+\:\s\w+\s([A-Z]{3,})" ),0),
    src_ip = arrayindex(regextract(_raw_log ,"from\sladdr\s(\d+\.\d+\.\d+\.\d+)\s"),0),
    dst_interface = arrayindex(regextract(_raw_log ,"on\sinterface\s([\w\-\_]+)\s"),0),
    dst_ip = arrayindex(regextract(_raw_log ,"to\s(\d+\.\d+\.\d+\.\d+)"),0),
    icmp_type= arrayindex(regextract(_raw_log ,"ICMP\stype\=(\d+)"),0)
| alter
    xdm.network.ip_protocol = if(protocol="HOPOPT",XDM_CONST.IP_PROTOCOL_HOPOPT, protocol="ICMP",XDM_CONST.IP_PROTOCOL_ICMP, protocol="IGMP",XDM_CONST.IP_PROTOCOL_IGMP, protocol="GGP",XDM_CONST.IP_PROTOCOL_GGP, protocol="IP",XDM_CONST.IP_PROTOCOL_IP, protocol="ST",XDM_CONST.IP_PROTOCOL_ST, protocol="TCP",XDM_CONST.IP_PROTOCOL_TCP, protocol="CBT",XDM_CONST.IP_PROTOCOL_CBT, protocol="EGP",XDM_CONST.IP_PROTOCOL_EGP, protocol="IGP",XDM_CONST.IP_PROTOCOL_IGP, protocol="BBN_RCC_MON",XDM_CONST.IP_PROTOCOL_BBN_RCC_MON, protocol="NVP_II",XDM_CONST.IP_PROTOCOL_NVP_II, protocol="PUP",XDM_CONST.IP_PROTOCOL_PUP, protocol="ARGUS",XDM_CONST.IP_PROTOCOL_ARGUS, protocol="EMCON",XDM_CONST.IP_PROTOCOL_EMCON, protocol="XNET",XDM_CONST.IP_PROTOCOL_XNET, protocol="CHAOS",XDM_CONST.IP_PROTOCOL_CHAOS, protocol="UDP",XDM_CONST.IP_PROTOCOL_UDP, protocol="MUX",XDM_CONST.IP_PROTOCOL_MUX, protocol="DCN_MEAS",XDM_CONST.IP_PROTOCOL_DCN_MEAS, protocol="HMP",XDM_CONST.IP_PROTOCOL_HMP, protocol="PRM",XDM_CONST.IP_PROTOCOL_PRM, protocol="XNS_IDP",XDM_CONST.IP_PROTOCOL_XNS_IDP, protocol="TRUNK_1",XDM_CONST.IP_PROTOCOL_TRUNK_1, protocol="TRUNK_2",XDM_CONST.IP_PROTOCOL_TRUNK_2, protocol="LEAF_1",XDM_CONST.IP_PROTOCOL_LEAF_1, protocol="LEAF_2",XDM_CONST.IP_PROTOCOL_LEAF_2, protocol="RDP",XDM_CONST.IP_PROTOCOL_RDP, protocol="IRTP",XDM_CONST.IP_PROTOCOL_IRTP, protocol="ISO_TP4",XDM_CONST.IP_PROTOCOL_ISO_TP4, protocol="NETBLT",XDM_CONST.IP_PROTOCOL_NETBLT, protocol="MFE_NSP",XDM_CONST.IP_PROTOCOL_MFE_NSP, protocol="MERIT_INP",XDM_CONST.IP_PROTOCOL_MERIT_INP, protocol="DCCP",XDM_CONST.IP_PROTOCOL_DCCP, protocol="3PC",XDM_CONST.IP_PROTOCOL_3PC, protocol="IDPR",XDM_CONST.IP_PROTOCOL_IDPR, protocol="XTP",XDM_CONST.IP_PROTOCOL_XTP, protocol="DDP",XDM_CONST.IP_PROTOCOL_DDP, protocol="IDPR_CMTP",XDM_CONST.IP_PROTOCOL_IDPR_CMTP, protocol="TP",XDM_CONST.IP_PROTOCOL_TP, protocol="IL",XDM_CONST.IP_PROTOCOL_IL, protocol="IPV6",XDM_CONST.IP_PROTOCOL_IPV6, protocol="SDRP",XDM_CONST.IP_PROTOCOL_SDRP, protocol="IPV6_ROUTE",XDM_CONST.IP_PROTOCOL_IPV6_ROUTE, protocol="IPV6_FRAG",XDM_CONST.IP_PROTOCOL_IPV6_FRAG, protocol="IDRP",XDM_CONST.IP_PROTOCOL_IDRP, protocol="RSVP",XDM_CONST.IP_PROTOCOL_RSVP, protocol="GRE",XDM_CONST.IP_PROTOCOL_GRE, protocol="DSR",XDM_CONST.IP_PROTOCOL_DSR, protocol="BNA",XDM_CONST.IP_PROTOCOL_BNA, protocol="ESP",XDM_CONST.IP_PROTOCOL_ESP, protocol="AH",XDM_CONST.IP_PROTOCOL_AH, protocol="I_NLSP",XDM_CONST.IP_PROTOCOL_I_NLSP, protocol="SWIPE",XDM_CONST.IP_PROTOCOL_SWIPE, protocol="NARP",XDM_CONST.IP_PROTOCOL_NARP, protocol="MOBILE",XDM_CONST.IP_PROTOCOL_MOBILE, protocol="TLSP",XDM_CONST.IP_PROTOCOL_TLSP, protocol="SKIP",XDM_CONST.IP_PROTOCOL_SKIP, protocol="IPV6_ICMP",XDM_CONST.IP_PROTOCOL_IPV6_ICMP, protocol="IPV6_NONXT",XDM_CONST.IP_PROTOCOL_IPV6_NONXT, protocol="IPV6_OPTS",XDM_CONST.IP_PROTOCOL_IPV6_OPTS, protocol="CFTP",XDM_CONST.IP_PROTOCOL_CFTP, protocol="SAT_EXPAK",XDM_CONST.IP_PROTOCOL_SAT_EXPAK, protocol="KRYPTOLAN",XDM_CONST.IP_PROTOCOL_KRYPTOLAN, protocol="RVD",XDM_CONST.IP_PROTOCOL_RVD, protocol="IPPC",XDM_CONST.IP_PROTOCOL_IPPC, protocol="SAT_MON",XDM_CONST.IP_PROTOCOL_SAT_MON, protocol="VISA",XDM_CONST.IP_PROTOCOL_VISA, protocol="IPCV",XDM_CONST.IP_PROTOCOL_IPCV, protocol="CPNX",XDM_CONST.IP_PROTOCOL_CPNX, protocol="CPHB",XDM_CONST.IP_PROTOCOL_CPHB, protocol="WSN",XDM_CONST.IP_PROTOCOL_WSN, protocol="PVP",XDM_CONST.IP_PROTOCOL_PVP, protocol="BR_SAT_MON",XDM_CONST.IP_PROTOCOL_BR_SAT_MON, protocol="SUN_ND",XDM_CONST.IP_PROTOCOL_SUN_ND, protocol="WB_MON",XDM_CONST.IP_PROTOCOL_WB_MON, protocol="WB_EXPAK",XDM_CONST.IP_PROTOCOL_WB_EXPAK, protocol="ISO_IP",XDM_CONST.IP_PROTOCOL_ISO_IP, protocol="VMTP",XDM_CONST.IP_PROTOCOL_VMTP, protocol="SECURE_VMTP",XDM_CONST.IP_PROTOCOL_SECURE_VMTP, protocol="VINES",XDM_CONST.IP_PROTOCOL_VINES, protocol="TTP",XDM_CONST.IP_PROTOCOL_TTP, protocol="NSFNET_IGP",XDM_CONST.IP_PROTOCOL_NSFNET_IGP, protocol="DGP",XDM_CONST.IP_PROTOCOL_DGP, protocol="TCF",XDM_CONST.IP_PROTOCOL_TCF, protocol="EIGRP",XDM_CONST.IP_PROTOCOL_EIGRP, protocol="OSPFIGP",XDM_CONST.IP_PROTOCOL_OSPFIGP, protocol="SPRITE_RPC",XDM_CONST.IP_PROTOCOL_SPRITE_RPC, protocol="LARP",XDM_CONST.IP_PROTOCOL_LARP, protocol="MTP",XDM_CONST.IP_PROTOCOL_MTP, protocol="AX25",XDM_CONST.IP_PROTOCOL_AX25, protocol="IPIP",XDM_CONST.IP_PROTOCOL_IPIP, protocol="MICP",XDM_CONST.IP_PROTOCOL_MICP, protocol="SCC_SP",XDM_CONST.IP_PROTOCOL_SCC_SP, protocol="ETHERIP",XDM_CONST.IP_PROTOCOL_ETHERIP, protocol="ENCAP",XDM_CONST.IP_PROTOCOL_ENCAP, protocol="GMTP",XDM_CONST.IP_PROTOCOL_GMTP, protocol="IFMP",XDM_CONST.IP_PROTOCOL_IFMP, protocol="PNNI",XDM_CONST.IP_PROTOCOL_PNNI, protocol="PIM",XDM_CONST.IP_PROTOCOL_PIM, protocol="ARIS",XDM_CONST.IP_PROTOCOL_ARIS, protocol="SCPS",XDM_CONST.IP_PROTOCOL_SCPS, protocol="QNX",XDM_CONST.IP_PROTOCOL_QNX, protocol="AN",XDM_CONST.IP_PROTOCOL_AN, protocol="IPCOMP",XDM_CONST.IP_PROTOCOL_IPCOMP, protocol="COMPAQ_PEER",XDM_CONST.IP_PROTOCOL_COMPAQ_PEER, protocol="IPX_IN_IP",XDM_CONST.IP_PROTOCOL_IPX_IN_IP, protocol="VRRP",XDM_CONST.IP_PROTOCOL_VRRP, protocol="PGM",XDM_CONST.IP_PROTOCOL_PGM, protocol="L2TP",XDM_CONST.IP_PROTOCOL_L2TP, protocol="DDX",XDM_CONST.IP_PROTOCOL_DDX, protocol="IATP",XDM_CONST.IP_PROTOCOL_IATP, protocol="STP",XDM_CONST.IP_PROTOCOL_STP, protocol="SRP",XDM_CONST.IP_PROTOCOL_SRP, protocol="UTI",XDM_CONST.IP_PROTOCOL_UTI, protocol="SMP",XDM_CONST.IP_PROTOCOL_SMP, protocol="SM",XDM_CONST.IP_PROTOCOL_SM, protocol="PTP",XDM_CONST.IP_PROTOCOL_PTP, protocol="ISIS",XDM_CONST.IP_PROTOCOL_ISIS, protocol="FIRE",XDM_CONST.IP_PROTOCOL_FIRE, protocol="CRTP",XDM_CONST.IP_PROTOCOL_CRTP, protocol="CRUDP",XDM_CONST.IP_PROTOCOL_CRUDP, protocol="SSCOPMCE",XDM_CONST.IP_PROTOCOL_SSCOPMCE, protocol="IPLT",XDM_CONST.IP_PROTOCOL_IPLT, protocol="SPS",XDM_CONST.IP_PROTOCOL_SPS, protocol="PIPE",XDM_CONST.IP_PROTOCOL_PIPE, protocol="SCTP",XDM_CONST.IP_PROTOCOL_SCTP, protocol="FC",XDM_CONST.IP_PROTOCOL_FC, protocol="RSVP_E2E_IGNORE",XDM_CONST.IP_PROTOCOL_RSVP_E2E_IGNORE, protocol="MOBILITY",XDM_CONST.IP_PROTOCOL_MOBILITY, protocol="UDPLITE",XDM_CONST.IP_PROTOCOL_UDPLITE, protocol="MPLS_IN_IP",XDM_CONST.IP_PROTOCOL_MPLS_IN_IP,to_string(protocol)),
    xdm.event.original_event_type = to_string(event_id),
    xdm.event.id = to_string(event_id),
    xdm.event.description = message,
    xdm.alert.severity = severity,
    xdm.source.ipv4 = src_ip,
    xdm.target.ipv4 = dst_ip,
    xdm.target.zone = dst_interface,
    xdm.target.interface = dst_interface,
    xdm.event.outcome_reason = action,
    xdm.observer.name = observer_name,
    xdm.network.icmp.type = to_integer(icmp_type),
    xdm.event.is_completed = if(action contains "Teardown",true, false);


//AAA (Authentication, authorization, and accounting)
config case_sensitive = true
| filter _raw_log ~= "\d\:\sAAA"
| call cisco_asa_main_fields_extraction
| alter action = arrayindex(regextract(_raw_log ,"\%ASA\-[session]*\-*\d\-\d+\:([A-Za-z\s\-]+)\s[A-Za-z]+"),0),
    src_username1 = arrayindex(regextract(_raw_log ,"user\s\=\s(\S+)\s*"),0),
    src_username2 = arrayindex(regextract(_raw_log ,"for\suser\s(\S{2,})"),0),
    src_ip = arrayindex(regextract(_raw_log ,"user\sIP\s\=\s(\d+\.\d+\.\d+\.\d+)"),0),
    dst_ip = arrayindex(regextract(_raw_log ,"server\s*\=*\s+(\d+\.\d+\.\d+\.\d+)"),0),
    outcome_reason = arrayindex(regextract(_raw_log ,"reason\s\=\s([\w\s]+)\s"),0)
| alter src_username = coalesce(src_username1 , src_username2 )
| alter xdm.event.original_event_type = to_string(event_id),
    xdm.event.id = to_string(event_id),
    xdm.event.outcome = if(action contains "Rejected",XDM_CONST.OUTCOME_FAILED,action in ("Successful","ACCEPT"), XDM_CONST.OUTCOME_SUCCESS, null),
    xdm.event.description = message,
    xdm.alert.severity = severity,
    xdm.source.ipv4 = src_ip,
    xdm.source.user.username = src_username,
    xdm.target.ipv4 = dst_ip,
    xdm.event.outcome_reason = coalesce(outcome_reason, action),
    xdm.observer.name = observer_name,
    xdm.event.is_completed = if(action contains "Teardown",true, false);

// event ids: 111001, 111004, 111005, 111007, 111008, 111009, 111010
config case_sensitive = true
| alter event_id = to_integer(arrayindex(regextract(_raw_log , "ASA\-[session]*\-*\d\-(\d+)\:"),0))
| filter event_id >= 111001 and event_id <= 111010
| alter severity = arrayindex(regextract(_raw_log, "ASA\-[session]*\-*(\d+)\-\d+\:"),0),
    message = arrayindex(regextract(_raw_log, "\%ASA\-[session]*\-*\d\-\d+[\:|\s\-]+\s(.*)"),0),
    observer_name = arrayindex(regextract(_raw_log , "([\w\-\_\.\@]+)\s\:*\s*%ASA-\d+"),0),
    dst_username = arrayindex(regextract(_raw_log ,"User\s\'([^\']+)\'"),0),
    command_line1 = arrayindex(regextract(_raw_log , "executed\scmd:\s(.*)$"),0),
    command_line2 = arrayindex(regextract(_raw_log ,"executed the \'([^\']+)\'"),0),
    command_line3 = arrayindex(regextract(_raw_log ,"executed\s\'([^\']+)\'"),0),
    dst_ip1 = arrayindex(regextract(_raw_log ,"Begin\sconfiguration:\s(\d+\.\d+\.\d+\.\d+)"),0),
    dst_ip2 = arrayindex(regextract(_raw_log ,"(\d+\.\d+\.\d+\.\d+)\send\sconfiguration"),0),
    action = arrayindex(regextract(_raw_log ,"Begin\sconfiguration:\s[\d+\.]*\s*([\w\s]+)"),0)
| alter command_line = coalesce(command_line1 , command_line2, command_line3 ),
    dst_ip = coalesce(dst_ip1 , dst_ip2 )
| alter xdm.event.original_event_type = to_string(event_id),
    xdm.event.id = to_string(event_id),
    xdm.event.description = message,
    xdm.alert.severity = severity,
    xdm.event.outcome_reason = action,
    xdm.observer.name = observer_name,
    xdm.event.is_completed = if(action contains "Teardown",true, false),
    xdm.target.ipv4 = dst_ip,
    xdm.target.user.username = dst_username,
    xdm.target.process.command_line = command_line;

// ASDM
config case_sensitive = true
| filter _raw_log ~= "\d+\:\sASDM"
| call cisco_asa_main_fields_extraction
| alter
    action = arrayindex(regextract(_raw_log ,"\%ASA\-[session]*\-*\d\-\d+\:([A-Za-z\s\-]+)\s[A-Za-z]+"),0),
    src_ip = arrayindex(regextract(_raw_log ,"from\s(\d+\.\d+\.\d+\.\d+)"),0)
| alter xdm.event.original_event_type = to_string(event_id),
    xdm.event.id = to_string(event_id),
    xdm.event.description = message,
    xdm.alert.severity = severity,
    xdm.observer.name = observer_name,
    xdm.source.ipv4 = src_ip,
    xdm.event.outcome_reason = action,
    xdm.event.is_completed = if(action contains "Teardown",true, false);

// for faddr <foreign_host> gaddr <global_host> laddr <local_host>
config case_sensitive = true
| filter _raw_log ~= "for\sfaddr\s\d+\.\d+\.\d+\.\d+\/\d+\sgaddr\s\d+\.\d+\.\d+\.\d+\/\d+"
| call cisco_asa_main_fields_extraction
| alter action = arrayindex(regextract(_raw_log ,"\%ASA\-[session]*\-*\d\-\d+\:([A-Za-z\s\-]+)\s[A-Za-z]+"),0),
    dst_ip = arrayindex(regextract(_raw_log ,"\sgaddr\s(\d+\.\d+\.\d+\.\d+)"),0),
    icmp_type = arrayindex(regextract(_raw_log ,"type\s(\d+)"),0),
    icmp_code = arrayindex(regextract(_raw_log ,"code\s(\d+)"),0)
| alter protocol = if(action contains "Built",arrayindex(regextract(_raw_log ,"Built\s[in|out]+bound\s([A-Z]+)"),0),action contains "Teardown",arrayindex(regextract(_raw_log ,"Teardown\s([A-Z]+)"),0), null)
| alter xdm.event.original_event_type = to_string(event_id),
    xdm.event.id = to_string(event_id),
    xdm.event.description = message,
    xdm.alert.severity = severity,
    xdm.observer.name = observer_name,
    xdm.target.ipv4 = dst_ip,
    xdm.event.outcome_reason = action,
    xdm.network.icmp.type = to_integer(icmp_type),
    xdm.network.icmp.code = to_integer(icmp_code),
    xdm.event.is_completed = if(action contains "Teardown",true, false),
    xdm.network.ip_protocol = if(protocol="HOPOPT",XDM_CONST.IP_PROTOCOL_HOPOPT, protocol="ICMP",XDM_CONST.IP_PROTOCOL_ICMP, protocol="IGMP",XDM_CONST.IP_PROTOCOL_IGMP, protocol="GGP",XDM_CONST.IP_PROTOCOL_GGP, protocol="IP",XDM_CONST.IP_PROTOCOL_IP, protocol="ST",XDM_CONST.IP_PROTOCOL_ST, protocol="TCP",XDM_CONST.IP_PROTOCOL_TCP, protocol="CBT",XDM_CONST.IP_PROTOCOL_CBT, protocol="EGP",XDM_CONST.IP_PROTOCOL_EGP, protocol="IGP",XDM_CONST.IP_PROTOCOL_IGP, protocol="BBN_RCC_MON",XDM_CONST.IP_PROTOCOL_BBN_RCC_MON, protocol="NVP_II",XDM_CONST.IP_PROTOCOL_NVP_II, protocol="PUP",XDM_CONST.IP_PROTOCOL_PUP, protocol="ARGUS",XDM_CONST.IP_PROTOCOL_ARGUS, protocol="EMCON",XDM_CONST.IP_PROTOCOL_EMCON, protocol="XNET",XDM_CONST.IP_PROTOCOL_XNET, protocol="CHAOS",XDM_CONST.IP_PROTOCOL_CHAOS, protocol="UDP",XDM_CONST.IP_PROTOCOL_UDP, protocol="MUX",XDM_CONST.IP_PROTOCOL_MUX, protocol="DCN_MEAS",XDM_CONST.IP_PROTOCOL_DCN_MEAS, protocol="HMP",XDM_CONST.IP_PROTOCOL_HMP, protocol="PRM",XDM_CONST.IP_PROTOCOL_PRM, protocol="XNS_IDP",XDM_CONST.IP_PROTOCOL_XNS_IDP, protocol="TRUNK_1",XDM_CONST.IP_PROTOCOL_TRUNK_1, protocol="TRUNK_2",XDM_CONST.IP_PROTOCOL_TRUNK_2, protocol="LEAF_1",XDM_CONST.IP_PROTOCOL_LEAF_1, protocol="LEAF_2",XDM_CONST.IP_PROTOCOL_LEAF_2, protocol="RDP",XDM_CONST.IP_PROTOCOL_RDP, protocol="IRTP",XDM_CONST.IP_PROTOCOL_IRTP, protocol="ISO_TP4",XDM_CONST.IP_PROTOCOL_ISO_TP4, protocol="NETBLT",XDM_CONST.IP_PROTOCOL_NETBLT, protocol="MFE_NSP",XDM_CONST.IP_PROTOCOL_MFE_NSP, protocol="MERIT_INP",XDM_CONST.IP_PROTOCOL_MERIT_INP, protocol="DCCP",XDM_CONST.IP_PROTOCOL_DCCP, protocol="3PC",XDM_CONST.IP_PROTOCOL_3PC, protocol="IDPR",XDM_CONST.IP_PROTOCOL_IDPR, protocol="XTP",XDM_CONST.IP_PROTOCOL_XTP, protocol="DDP",XDM_CONST.IP_PROTOCOL_DDP, protocol="IDPR_CMTP",XDM_CONST.IP_PROTOCOL_IDPR_CMTP, protocol="TP",XDM_CONST.IP_PROTOCOL_TP, protocol="IL",XDM_CONST.IP_PROTOCOL_IL, protocol="IPV6",XDM_CONST.IP_PROTOCOL_IPV6, protocol="SDRP",XDM_CONST.IP_PROTOCOL_SDRP, protocol="IPV6_ROUTE",XDM_CONST.IP_PROTOCOL_IPV6_ROUTE, protocol="IPV6_FRAG",XDM_CONST.IP_PROTOCOL_IPV6_FRAG, protocol="IDRP",XDM_CONST.IP_PROTOCOL_IDRP, protocol="RSVP",XDM_CONST.IP_PROTOCOL_RSVP, protocol="GRE",XDM_CONST.IP_PROTOCOL_GRE, protocol="DSR",XDM_CONST.IP_PROTOCOL_DSR, protocol="BNA",XDM_CONST.IP_PROTOCOL_BNA, protocol="ESP",XDM_CONST.IP_PROTOCOL_ESP, protocol="AH",XDM_CONST.IP_PROTOCOL_AH, protocol="I_NLSP",XDM_CONST.IP_PROTOCOL_I_NLSP, protocol="SWIPE",XDM_CONST.IP_PROTOCOL_SWIPE, protocol="NARP",XDM_CONST.IP_PROTOCOL_NARP, protocol="MOBILE",XDM_CONST.IP_PROTOCOL_MOBILE, protocol="TLSP",XDM_CONST.IP_PROTOCOL_TLSP, protocol="SKIP",XDM_CONST.IP_PROTOCOL_SKIP, protocol="IPV6_ICMP",XDM_CONST.IP_PROTOCOL_IPV6_ICMP, protocol="IPV6_NONXT",XDM_CONST.IP_PROTOCOL_IPV6_NONXT, protocol="IPV6_OPTS",XDM_CONST.IP_PROTOCOL_IPV6_OPTS, protocol="CFTP",XDM_CONST.IP_PROTOCOL_CFTP, protocol="SAT_EXPAK",XDM_CONST.IP_PROTOCOL_SAT_EXPAK, protocol="KRYPTOLAN",XDM_CONST.IP_PROTOCOL_KRYPTOLAN, protocol="RVD",XDM_CONST.IP_PROTOCOL_RVD, protocol="IPPC",XDM_CONST.IP_PROTOCOL_IPPC, protocol="SAT_MON",XDM_CONST.IP_PROTOCOL_SAT_MON, protocol="VISA",XDM_CONST.IP_PROTOCOL_VISA, protocol="IPCV",XDM_CONST.IP_PROTOCOL_IPCV, protocol="CPNX",XDM_CONST.IP_PROTOCOL_CPNX, protocol="CPHB",XDM_CONST.IP_PROTOCOL_CPHB, protocol="WSN",XDM_CONST.IP_PROTOCOL_WSN, protocol="PVP",XDM_CONST.IP_PROTOCOL_PVP, protocol="BR_SAT_MON",XDM_CONST.IP_PROTOCOL_BR_SAT_MON, protocol="SUN_ND",XDM_CONST.IP_PROTOCOL_SUN_ND, protocol="WB_MON",XDM_CONST.IP_PROTOCOL_WB_MON, protocol="WB_EXPAK",XDM_CONST.IP_PROTOCOL_WB_EXPAK, protocol="ISO_IP",XDM_CONST.IP_PROTOCOL_ISO_IP, protocol="VMTP",XDM_CONST.IP_PROTOCOL_VMTP, protocol="SECURE_VMTP",XDM_CONST.IP_PROTOCOL_SECURE_VMTP, protocol="VINES",XDM_CONST.IP_PROTOCOL_VINES, protocol="TTP",XDM_CONST.IP_PROTOCOL_TTP, protocol="NSFNET_IGP",XDM_CONST.IP_PROTOCOL_NSFNET_IGP, protocol="DGP",XDM_CONST.IP_PROTOCOL_DGP, protocol="TCF",XDM_CONST.IP_PROTOCOL_TCF, protocol="EIGRP",XDM_CONST.IP_PROTOCOL_EIGRP, protocol="OSPFIGP",XDM_CONST.IP_PROTOCOL_OSPFIGP, protocol="SPRITE_RPC",XDM_CONST.IP_PROTOCOL_SPRITE_RPC, protocol="LARP",XDM_CONST.IP_PROTOCOL_LARP, protocol="MTP",XDM_CONST.IP_PROTOCOL_MTP, protocol="AX25",XDM_CONST.IP_PROTOCOL_AX25, protocol="IPIP",XDM_CONST.IP_PROTOCOL_IPIP, protocol="MICP",XDM_CONST.IP_PROTOCOL_MICP, protocol="SCC_SP",XDM_CONST.IP_PROTOCOL_SCC_SP, protocol="ETHERIP",XDM_CONST.IP_PROTOCOL_ETHERIP, protocol="ENCAP",XDM_CONST.IP_PROTOCOL_ENCAP, protocol="GMTP",XDM_CONST.IP_PROTOCOL_GMTP, protocol="IFMP",XDM_CONST.IP_PROTOCOL_IFMP, protocol="PNNI",XDM_CONST.IP_PROTOCOL_PNNI, protocol="PIM",XDM_CONST.IP_PROTOCOL_PIM, protocol="ARIS",XDM_CONST.IP_PROTOCOL_ARIS, protocol="SCPS",XDM_CONST.IP_PROTOCOL_SCPS, protocol="QNX",XDM_CONST.IP_PROTOCOL_QNX, protocol="AN",XDM_CONST.IP_PROTOCOL_AN, protocol="IPCOMP",XDM_CONST.IP_PROTOCOL_IPCOMP, protocol="COMPAQ_PEER",XDM_CONST.IP_PROTOCOL_COMPAQ_PEER, protocol="IPX_IN_IP",XDM_CONST.IP_PROTOCOL_IPX_IN_IP, protocol="VRRP",XDM_CONST.IP_PROTOCOL_VRRP, protocol="PGM",XDM_CONST.IP_PROTOCOL_PGM, protocol="L2TP",XDM_CONST.IP_PROTOCOL_L2TP, protocol="DDX",XDM_CONST.IP_PROTOCOL_DDX, protocol="IATP",XDM_CONST.IP_PROTOCOL_IATP, protocol="STP",XDM_CONST.IP_PROTOCOL_STP, protocol="SRP",XDM_CONST.IP_PROTOCOL_SRP, protocol="UTI",XDM_CONST.IP_PROTOCOL_UTI, protocol="SMP",XDM_CONST.IP_PROTOCOL_SMP, protocol="SM",XDM_CONST.IP_PROTOCOL_SM, protocol="PTP",XDM_CONST.IP_PROTOCOL_PTP, protocol="ISIS",XDM_CONST.IP_PROTOCOL_ISIS, protocol="FIRE",XDM_CONST.IP_PROTOCOL_FIRE, protocol="CRTP",XDM_CONST.IP_PROTOCOL_CRTP, protocol="CRUDP",XDM_CONST.IP_PROTOCOL_CRUDP, protocol="SSCOPMCE",XDM_CONST.IP_PROTOCOL_SSCOPMCE, protocol="IPLT",XDM_CONST.IP_PROTOCOL_IPLT, protocol="SPS",XDM_CONST.IP_PROTOCOL_SPS, protocol="PIPE",XDM_CONST.IP_PROTOCOL_PIPE, protocol="SCTP",XDM_CONST.IP_PROTOCOL_SCTP, protocol="FC",XDM_CONST.IP_PROTOCOL_FC, protocol="RSVP_E2E_IGNORE",XDM_CONST.IP_PROTOCOL_RSVP_E2E_IGNORE, protocol="MOBILITY",XDM_CONST.IP_PROTOCOL_MOBILITY, protocol="UDPLITE",XDM_CONST.IP_PROTOCOL_UDPLITE, protocol="MPLS_IN_IP",XDM_CONST.IP_PROTOCOL_MPLS_IN_IP,to_string(protocol));

//from <src_ipv4> on interface <src_interface>
//from <src_ipv6> on interface <src_interface>
config case_sensitive = true
| filter _raw_log ~= "from\s\d+\.\d+\.\d+\.\d+\son\sinterface\s[\w\-\_]+" or _raw_log ~= "from\s[\:\da-zA-Z]+\son\sinterface\s[\w\-\_]+"
| call cisco_asa_main_fields_extraction
| alter action = arrayindex(regextract(_raw_log ,"\%ASA\-[session]*\-*\d\-\d+\:\s*([A-Za-z\s\-]+)\s[A-Za-z]+"),0),
    src_interface = arrayindex(regextract(_raw_log ,"from\s[\d+\.\:a-z]+\son\sinterface\s([\w\-\_]+)"),0),
    src_ipv4 = arrayindex(regextract(_raw_log ,"from\s(\d+\.\d+\.\d+\.\d+)\son\sinterface"),0),
    src_ipv6 = arrayindex(regextract(_raw_log ,"from\s([a-z\d\:]+)\son\sinterface"),0),
    icmp_type = arrayindex(regextract(_raw_log ,"ICMP\stype\=(\d+)"),0),
    icmp_code = arrayindex(regextract(_raw_log ,"ICMP\stype\=\d+\,\scode\=(\d+)"),0),
    dst_username = arrayindex(regextract(_raw_log,"for\suser\s\"([^\"]+)\"" ),0)
| alter xdm.event.original_event_type = to_string(event_id),
    xdm.event.id = to_string(event_id),
    xdm.event.description = message,
    xdm.alert.severity = severity,
    xdm.observer.name = observer_name,
    xdm.source.ipv4 = src_ipv4,
    xdm.source.ipv6 = src_ipv6,
    xdm.source.zone = src_interface,
    xdm.source.interface = src_interface,
    xdm.event.outcome_reason = action,
    xdm.network.icmp.type = to_integer(icmp_type),
    xdm.network.icmp.code = to_integer(icmp_code),
    xdm.target.user.username = dst_username,
    xdm.event.is_completed = if(action contains "Teardown",true, false);

// authentication events: 611101,611102,611103
config case_sensitive = true
| alter event_id = to_integer(arrayindex(regextract(_raw_log , "ASA\-[session]*\-*\d\-(\d+)\:"),0))
| filter event_id in (611101,611102,611103)
| alter severity = arrayindex(regextract(_raw_log, "ASA\-[session]*\-*(\d+)\-\d+\:"),0),
    message = arrayindex(regextract(_raw_log, "\%ASA\-[session]*\-*\d\-\d+[\:|\s\-]+\s(.*)"),0),
    observer_name = arrayindex(regextract(_raw_log , "([\w\-\_\.\@]+)\s\:*\s*%ASA-\d+"),0),
    action = arrayindex(regextract(_raw_log ,"\%ASA\-[session]*\-*\d\-\d+\:([A-Za-z\s\-]+)"),0),
    src_ip = arrayindex(regextract(_raw_log ,"IP\saddress\:\s(\d+\.\d+\.\d+\.\d+)"),0),
    dst_username = arrayindex(regextract(_raw_log ,"Uname\:\s([\w\-\_\@\.]+)"),0)
| alter xdm.event.original_event_type = to_string(event_id),
    xdm.event.id = to_string(event_id),
    xdm.event.description = message,
    xdm.alert.severity = severity,
    xdm.observer.name = observer_name,
    xdm.event.outcome_reason = action,
    xdm.source.ipv4 = src_ip,
    xdm.target.user.username = dst_username,
    xdm.event.is_completed = if(action contains "Teardown",true, false);

config case_sensitive = true
| filter _raw_log ~= "\d+\:\sTeardown\slocal-host"
| call cisco_asa_main_fields_extraction
| alter action = arrayindex(regextract(_raw_log ,"\%ASA\-[session]*\-*\d\-\d+\:\s([\w\s\-]+)\s"),0),
    dst_interface = arrayindex(regextract(_raw_log ,"\s([\w\-\_]+)\:\d+\.\d+\.\d+\.\d+\s"),0),
    dst_ip = arrayindex(regextract(_raw_log ,"\s[\w\-\_]+\:(\d+\.\d+\.\d+\.\d+)\s"),0)
| alter xdm.event.original_event_type = to_string(event_id),
    xdm.event.id = to_string(event_id),
    xdm.event.description = message,
    xdm.alert.severity = severity,
    xdm.observer.name = observer_name,
    xdm.event.outcome_reason = action,
    xdm.target.ipv4 = dst_ip,
    xdm.target.zone = dst_interface,
    xdm.target.interface = dst_interface,
    xdm.event.is_completed = if(action contains "Teardown",true, false);

//src <source_interface>:<source_ip>/<source_port> dst <dest_interface>:<dest_ip>/<dest_port>
config case_sensitive = true
| filter _raw_log ~= "src\s[a-zA-Z0-9-_]+\:\d+\.\d+\.\d+\.\d+\/\d+\sdst\s[a-zA-Z0-9-_]+\:\d+\.\d+\.\d+\.\d+\/\d+"
| call cisco_asa_main_fields_extraction
| alter src_interface = arrayindex(regextract(_raw_log ,"src\s([a-zA-Z0-9-_]+)\:\d+\.\d+\.\d+\.\d+\/"),0),
    dst_interface = arrayindex(regextract(_raw_log ,"dst\s([a-zA-Z0-9-_]+)\:\d+\.\d+\.\d+\.\d+\/"),0),
    src_ip = arrayindex(regextract(_raw_log ,"src\s[a-zA-Z0-9-_]+\:(\d+\.\d+\.\d+\.\d+)\/"),0),
    dst_ip = arrayindex(regextract(_raw_log ,"dst\s[a-zA-Z0-9-_]+\:(\d+\.\d+\.\d+\.\d+)\/"),0),
    src_port = to_integer(arrayindex(regextract(_raw_log ,"src\s[a-zA-Z0-9-_]+\:\d+\.\d+\.\d+\.\d+\/(\d+)"),0)),
    dst_port = to_integer(arrayindex(regextract(_raw_log ,"dst\s[a-zA-Z0-9-_]+\:\d+\.\d+\.\d+\.\d+\/(\d+)"),0)),
    protocol = uppercase(arrayindex(regextract(_raw_log ,"\-\d+\:\sDeny\s([A-Za-z]+)\s"),0)),
    src_group = arrayindex(regextract(_raw_log ,"\sby\saccess\-group\s\"([^\"]+)\""),0)
| alter xdm.event.original_event_type = to_string(event_id),
    xdm.event.id = to_string(event_id),
    xdm.event.description = message,
    xdm.alert.severity = severity,
    xdm.observer.name = observer_name,
    xdm.source.ipv4 = src_ip,
    xdm.source.port = to_integer(src_port),
    xdm.source.interface = src_interface,
    xdm.target.ipv4 = dst_ip,
    xdm.target.port = to_integer(dst_port),
    xdm.target.interface = dst_interface,
    xdm.source.user.groups = arraycreate(src_group),
    xdm.network.ip_protocol = if(protocol="HOPOPT",XDM_CONST.IP_PROTOCOL_HOPOPT, protocol="ICMP",XDM_CONST.IP_PROTOCOL_ICMP, protocol="IGMP",XDM_CONST.IP_PROTOCOL_IGMP, protocol="GGP",XDM_CONST.IP_PROTOCOL_GGP, protocol="IP",XDM_CONST.IP_PROTOCOL_IP, protocol="ST",XDM_CONST.IP_PROTOCOL_ST, protocol="TCP",XDM_CONST.IP_PROTOCOL_TCP, protocol="CBT",XDM_CONST.IP_PROTOCOL_CBT, protocol="EGP",XDM_CONST.IP_PROTOCOL_EGP, protocol="IGP",XDM_CONST.IP_PROTOCOL_IGP, protocol="BBN_RCC_MON",XDM_CONST.IP_PROTOCOL_BBN_RCC_MON, protocol="NVP_II",XDM_CONST.IP_PROTOCOL_NVP_II, protocol="PUP",XDM_CONST.IP_PROTOCOL_PUP, protocol="ARGUS",XDM_CONST.IP_PROTOCOL_ARGUS, protocol="EMCON",XDM_CONST.IP_PROTOCOL_EMCON, protocol="XNET",XDM_CONST.IP_PROTOCOL_XNET, protocol="CHAOS",XDM_CONST.IP_PROTOCOL_CHAOS, protocol="UDP",XDM_CONST.IP_PROTOCOL_UDP, protocol="MUX",XDM_CONST.IP_PROTOCOL_MUX, protocol="DCN_MEAS",XDM_CONST.IP_PROTOCOL_DCN_MEAS, protocol="HMP",XDM_CONST.IP_PROTOCOL_HMP, protocol="PRM",XDM_CONST.IP_PROTOCOL_PRM, protocol="XNS_IDP",XDM_CONST.IP_PROTOCOL_XNS_IDP, protocol="TRUNK_1",XDM_CONST.IP_PROTOCOL_TRUNK_1, protocol="TRUNK_2",XDM_CONST.IP_PROTOCOL_TRUNK_2, protocol="LEAF_1",XDM_CONST.IP_PROTOCOL_LEAF_1, protocol="LEAF_2",XDM_CONST.IP_PROTOCOL_LEAF_2, protocol="RDP",XDM_CONST.IP_PROTOCOL_RDP, protocol="IRTP",XDM_CONST.IP_PROTOCOL_IRTP, protocol="ISO_TP4",XDM_CONST.IP_PROTOCOL_ISO_TP4, protocol="NETBLT",XDM_CONST.IP_PROTOCOL_NETBLT, protocol="MFE_NSP",XDM_CONST.IP_PROTOCOL_MFE_NSP, protocol="MERIT_INP",XDM_CONST.IP_PROTOCOL_MERIT_INP, protocol="DCCP",XDM_CONST.IP_PROTOCOL_DCCP, protocol="3PC",XDM_CONST.IP_PROTOCOL_3PC, protocol="IDPR",XDM_CONST.IP_PROTOCOL_IDPR, protocol="XTP",XDM_CONST.IP_PROTOCOL_XTP, protocol="DDP",XDM_CONST.IP_PROTOCOL_DDP, protocol="IDPR_CMTP",XDM_CONST.IP_PROTOCOL_IDPR_CMTP, protocol="TP",XDM_CONST.IP_PROTOCOL_TP, protocol="IL",XDM_CONST.IP_PROTOCOL_IL, protocol="IPV6",XDM_CONST.IP_PROTOCOL_IPV6, protocol="SDRP",XDM_CONST.IP_PROTOCOL_SDRP, protocol="IPV6_ROUTE",XDM_CONST.IP_PROTOCOL_IPV6_ROUTE, protocol="IPV6_FRAG",XDM_CONST.IP_PROTOCOL_IPV6_FRAG, protocol="IDRP",XDM_CONST.IP_PROTOCOL_IDRP, protocol="RSVP",XDM_CONST.IP_PROTOCOL_RSVP, protocol="GRE",XDM_CONST.IP_PROTOCOL_GRE, protocol="DSR",XDM_CONST.IP_PROTOCOL_DSR, protocol="BNA",XDM_CONST.IP_PROTOCOL_BNA, protocol="ESP",XDM_CONST.IP_PROTOCOL_ESP, protocol="AH",XDM_CONST.IP_PROTOCOL_AH, protocol="I_NLSP",XDM_CONST.IP_PROTOCOL_I_NLSP, protocol="SWIPE",XDM_CONST.IP_PROTOCOL_SWIPE, protocol="NARP",XDM_CONST.IP_PROTOCOL_NARP, protocol="MOBILE",XDM_CONST.IP_PROTOCOL_MOBILE, protocol="TLSP",XDM_CONST.IP_PROTOCOL_TLSP, protocol="SKIP",XDM_CONST.IP_PROTOCOL_SKIP, protocol="IPV6_ICMP",XDM_CONST.IP_PROTOCOL_IPV6_ICMP, protocol="IPV6_NONXT",XDM_CONST.IP_PROTOCOL_IPV6_NONXT, protocol="IPV6_OPTS",XDM_CONST.IP_PROTOCOL_IPV6_OPTS, protocol="CFTP",XDM_CONST.IP_PROTOCOL_CFTP, protocol="SAT_EXPAK",XDM_CONST.IP_PROTOCOL_SAT_EXPAK, protocol="KRYPTOLAN",XDM_CONST.IP_PROTOCOL_KRYPTOLAN, protocol="RVD",XDM_CONST.IP_PROTOCOL_RVD, protocol="IPPC",XDM_CONST.IP_PROTOCOL_IPPC, protocol="SAT_MON",XDM_CONST.IP_PROTOCOL_SAT_MON, protocol="VISA",XDM_CONST.IP_PROTOCOL_VISA, protocol="IPCV",XDM_CONST.IP_PROTOCOL_IPCV, protocol="CPNX",XDM_CONST.IP_PROTOCOL_CPNX, protocol="CPHB",XDM_CONST.IP_PROTOCOL_CPHB, protocol="WSN",XDM_CONST.IP_PROTOCOL_WSN, protocol="PVP",XDM_CONST.IP_PROTOCOL_PVP, protocol="BR_SAT_MON",XDM_CONST.IP_PROTOCOL_BR_SAT_MON, protocol="SUN_ND",XDM_CONST.IP_PROTOCOL_SUN_ND, protocol="WB_MON",XDM_CONST.IP_PROTOCOL_WB_MON, protocol="WB_EXPAK",XDM_CONST.IP_PROTOCOL_WB_EXPAK, protocol="ISO_IP",XDM_CONST.IP_PROTOCOL_ISO_IP, protocol="VMTP",XDM_CONST.IP_PROTOCOL_VMTP, protocol="SECURE_VMTP",XDM_CONST.IP_PROTOCOL_SECURE_VMTP, protocol="VINES",XDM_CONST.IP_PROTOCOL_VINES, protocol="TTP",XDM_CONST.IP_PROTOCOL_TTP, protocol="NSFNET_IGP",XDM_CONST.IP_PROTOCOL_NSFNET_IGP, protocol="DGP",XDM_CONST.IP_PROTOCOL_DGP, protocol="TCF",XDM_CONST.IP_PROTOCOL_TCF, protocol="EIGRP",XDM_CONST.IP_PROTOCOL_EIGRP, protocol="OSPFIGP",XDM_CONST.IP_PROTOCOL_OSPFIGP, protocol="SPRITE_RPC",XDM_CONST.IP_PROTOCOL_SPRITE_RPC, protocol="LARP",XDM_CONST.IP_PROTOCOL_LARP, protocol="MTP",XDM_CONST.IP_PROTOCOL_MTP, protocol="AX25",XDM_CONST.IP_PROTOCOL_AX25, protocol="IPIP",XDM_CONST.IP_PROTOCOL_IPIP, protocol="MICP",XDM_CONST.IP_PROTOCOL_MICP, protocol="SCC_SP",XDM_CONST.IP_PROTOCOL_SCC_SP, protocol="ETHERIP",XDM_CONST.IP_PROTOCOL_ETHERIP, protocol="ENCAP",XDM_CONST.IP_PROTOCOL_ENCAP, protocol="GMTP",XDM_CONST.IP_PROTOCOL_GMTP, protocol="IFMP",XDM_CONST.IP_PROTOCOL_IFMP, protocol="PNNI",XDM_CONST.IP_PROTOCOL_PNNI, protocol="PIM",XDM_CONST.IP_PROTOCOL_PIM, protocol="ARIS",XDM_CONST.IP_PROTOCOL_ARIS, protocol="SCPS",XDM_CONST.IP_PROTOCOL_SCPS, protocol="QNX",XDM_CONST.IP_PROTOCOL_QNX, protocol="AN",XDM_CONST.IP_PROTOCOL_AN, protocol="IPCOMP",XDM_CONST.IP_PROTOCOL_IPCOMP, protocol="COMPAQ_PEER",XDM_CONST.IP_PROTOCOL_COMPAQ_PEER, protocol="IPX_IN_IP",XDM_CONST.IP_PROTOCOL_IPX_IN_IP, protocol="VRRP",XDM_CONST.IP_PROTOCOL_VRRP, protocol="PGM",XDM_CONST.IP_PROTOCOL_PGM, protocol="L2TP",XDM_CONST.IP_PROTOCOL_L2TP, protocol="DDX",XDM_CONST.IP_PROTOCOL_DDX, protocol="IATP",XDM_CONST.IP_PROTOCOL_IATP, protocol="STP",XDM_CONST.IP_PROTOCOL_STP, protocol="SRP",XDM_CONST.IP_PROTOCOL_SRP, protocol="UTI",XDM_CONST.IP_PROTOCOL_UTI, protocol="SMP",XDM_CONST.IP_PROTOCOL_SMP, protocol="SM",XDM_CONST.IP_PROTOCOL_SM, protocol="PTP",XDM_CONST.IP_PROTOCOL_PTP, protocol="ISIS",XDM_CONST.IP_PROTOCOL_ISIS, protocol="FIRE",XDM_CONST.IP_PROTOCOL_FIRE, protocol="CRTP",XDM_CONST.IP_PROTOCOL_CRTP, protocol="CRUDP",XDM_CONST.IP_PROTOCOL_CRUDP, protocol="SSCOPMCE",XDM_CONST.IP_PROTOCOL_SSCOPMCE, protocol="IPLT",XDM_CONST.IP_PROTOCOL_IPLT, protocol="SPS",XDM_CONST.IP_PROTOCOL_SPS, protocol="PIPE",XDM_CONST.IP_PROTOCOL_PIPE, protocol="SCTP",XDM_CONST.IP_PROTOCOL_SCTP, protocol="FC",XDM_CONST.IP_PROTOCOL_FC, protocol="RSVP_E2E_IGNORE",XDM_CONST.IP_PROTOCOL_RSVP_E2E_IGNORE, protocol="MOBILITY",XDM_CONST.IP_PROTOCOL_MOBILITY, protocol="UDPLITE",XDM_CONST.IP_PROTOCOL_UDPLITE, protocol="MPLS_IN_IP",XDM_CONST.IP_PROTOCOL_MPLS_IN_IP,to_string(protocol));

// event id 733100
config case_sensitive = true
| filter _raw_log contains "ASA-4-733100"
| call cisco_asa_main_fields_extraction
| alter alert_name = arrayindex(regextract(_raw_log ,"\-\d+\:([^\.]+)"),0),
    alert_description = arrayindex(regextract(_raw_log ,"\-\d+\:[^\.]+\.(.*)"),0)
| alter xdm.event.original_event_type = to_string(event_id),
    xdm.event.id = to_string(event_id),
    xdm.event.description = message,
    xdm.alert.severity = severity,
    xdm.observer.name = observer_name,
    xdm.alert.name = alert_name,
    xdm.alert.description = alert_description;

config case_sensitive = true
| filter _raw_log ~= "Group\s\<"
| call cisco_asa_main_fields_extraction
| alter src_group = arrayindex(regextract(_raw_log ,"\sGroup\s\<([^\>]+)\>"),0),
    src_group2 = arrayindex(regextract(_raw_log ,"GroupPolicy\s\<([^\>]+)\>"),0),
    tunnel_group = arrayindex(regextract(_raw_log,"\sTunnelGroup\s\<([^\>]+)\>"),0),
    src_username = arrayindex(regextract(_raw_log ,"User\s\<([^\>]+)\>"),0),
    IP = arrayindex(regextract(_raw_log ,"IP\s\<(\d+\.\d+\.\d+\.\d+)\>"),0),
    src_ipv4 = arrayindex(regextract(_raw_log ,"IPv4\sAddress\s\<([^\>]+)\>"),0),
    src_ipv6 = arrayindex(regextract(_raw_log ,"IPv6\saddress\s\<([^\>]+)\>"),0),
    protocol1 = arrayindex(regextract(_raw_log ,"IP\s\<[^\>]+\>\s([UDP|TCP]+)\s"),0),
    protocol2 = arrayindex(regextract(_raw_log ,"IP\s\<[^\>]+\>\s\w+\s([UDP|TCP]+)\s"),0),
    authentication_outcome = arrayindex(regextract(_raw_log , "Authentication\:\s([^\,]+)\,"),0),
    type_num = to_integer(arrayindex(regextract(_raw_log , "SVC\sMessage\:\s(\d+)"),0)),
    event_log_level = arrayindex(regextract(_raw_log ,"SVC\sMessage\:\s\d+\/([A-Z]+)\:"),0),
    num_packets = to_integer(arrayindex(regextract(_raw_log , "\spacket\s(\d+)\s\("),0)),
    user_agent = arrayindex(regextract(_raw_log , "\>\sClient\sType\:\s(.*)"),0)
| alter protocol = coalesce(protocol1 , protocol2 )
| alter xdm.event.original_event_type = to_string(event_id),
    xdm.event.id = to_string(event_id),
    xdm.event.description = message,
    xdm.alert.severity = severity,
    xdm.observer.name = observer_name,
    xdm.source.user.groups = arraycreate(coalesce(src_group,src_group2)),
    xdm.network.rule = tunnel_group,
    xdm.source.user.username = src_username,
    xdm.source.sent_packets = num_packets,
    xdm.source.user_agent = user_agent,
    xdm.event.operation_sub_type = if(type_num = 0, "Normal", type_num = 16, "Logout", type_num = 17 ,"Closed due to error", type_num = 18, "Closed due to rekey", null ),
    xdm.event.log_level = if(event_log_level = "INFO", XDM_CONST.LOG_LEVEL_INFORMATIONAL ,event_log_level = "ERROR",XDM_CONST.LOG_LEVEL_ERROR ,event_log_level = "NOTICE",XDM_CONST.LOG_LEVEL_NOTICE,event_log_level = "WARNING",XDM_CONST.LOG_LEVEL_WARNING , null),
    xdm.source.ipv4 = if(IP ~= "\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}", IP, null),
    xdm.source.ipv6 = if(IP ~= "[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}", IP, null),
    xdm.source.host.ipv4_addresses = arraycreate(src_ipv4),
    xdm.source.host.ipv6_addresses = if(src_ipv6 != "::", arraycreate(src_ipv6), null),
    xdm.event.outcome = if(authentication_outcome = "successful", XDM_CONST.OUTCOME_SUCCESS,authentication_outcome = "rejected",XDM_CONST.OUTCOME_FAILED, to_String(authentication_outcome )),
    xdm.network.ip_protocol = if(protocol="HOPOPT",XDM_CONST.IP_PROTOCOL_HOPOPT, protocol="ICMP",XDM_CONST.IP_PROTOCOL_ICMP, protocol="IGMP",XDM_CONST.IP_PROTOCOL_IGMP, protocol="GGP",XDM_CONST.IP_PROTOCOL_GGP, protocol="IP",XDM_CONST.IP_PROTOCOL_IP, protocol="ST",XDM_CONST.IP_PROTOCOL_ST, protocol="TCP",XDM_CONST.IP_PROTOCOL_TCP, protocol="CBT",XDM_CONST.IP_PROTOCOL_CBT, protocol="EGP",XDM_CONST.IP_PROTOCOL_EGP, protocol="IGP",XDM_CONST.IP_PROTOCOL_IGP, protocol="BBN_RCC_MON",XDM_CONST.IP_PROTOCOL_BBN_RCC_MON, protocol="NVP_II",XDM_CONST.IP_PROTOCOL_NVP_II, protocol="PUP",XDM_CONST.IP_PROTOCOL_PUP, protocol="ARGUS",XDM_CONST.IP_PROTOCOL_ARGUS, protocol="EMCON",XDM_CONST.IP_PROTOCOL_EMCON, protocol="XNET",XDM_CONST.IP_PROTOCOL_XNET, protocol="CHAOS",XDM_CONST.IP_PROTOCOL_CHAOS, protocol="UDP",XDM_CONST.IP_PROTOCOL_UDP, protocol="MUX",XDM_CONST.IP_PROTOCOL_MUX, protocol="DCN_MEAS",XDM_CONST.IP_PROTOCOL_DCN_MEAS, protocol="HMP",XDM_CONST.IP_PROTOCOL_HMP, protocol="PRM",XDM_CONST.IP_PROTOCOL_PRM, protocol="XNS_IDP",XDM_CONST.IP_PROTOCOL_XNS_IDP, protocol="TRUNK_1",XDM_CONST.IP_PROTOCOL_TRUNK_1, protocol="TRUNK_2",XDM_CONST.IP_PROTOCOL_TRUNK_2, protocol="LEAF_1",XDM_CONST.IP_PROTOCOL_LEAF_1, protocol="LEAF_2",XDM_CONST.IP_PROTOCOL_LEAF_2, protocol="RDP",XDM_CONST.IP_PROTOCOL_RDP, protocol="IRTP",XDM_CONST.IP_PROTOCOL_IRTP, protocol="ISO_TP4",XDM_CONST.IP_PROTOCOL_ISO_TP4, protocol="NETBLT",XDM_CONST.IP_PROTOCOL_NETBLT, protocol="MFE_NSP",XDM_CONST.IP_PROTOCOL_MFE_NSP, protocol="MERIT_INP",XDM_CONST.IP_PROTOCOL_MERIT_INP, protocol="DCCP",XDM_CONST.IP_PROTOCOL_DCCP, protocol="3PC",XDM_CONST.IP_PROTOCOL_3PC, protocol="IDPR",XDM_CONST.IP_PROTOCOL_IDPR, protocol="XTP",XDM_CONST.IP_PROTOCOL_XTP, protocol="DDP",XDM_CONST.IP_PROTOCOL_DDP, protocol="IDPR_CMTP",XDM_CONST.IP_PROTOCOL_IDPR_CMTP, protocol="TP",XDM_CONST.IP_PROTOCOL_TP, protocol="IL",XDM_CONST.IP_PROTOCOL_IL, protocol="IPV6",XDM_CONST.IP_PROTOCOL_IPV6, protocol="SDRP",XDM_CONST.IP_PROTOCOL_SDRP, protocol="IPV6_ROUTE",XDM_CONST.IP_PROTOCOL_IPV6_ROUTE, protocol="IPV6_FRAG",XDM_CONST.IP_PROTOCOL_IPV6_FRAG, protocol="IDRP",XDM_CONST.IP_PROTOCOL_IDRP, protocol="RSVP",XDM_CONST.IP_PROTOCOL_RSVP, protocol="GRE",XDM_CONST.IP_PROTOCOL_GRE, protocol="DSR",XDM_CONST.IP_PROTOCOL_DSR, protocol="BNA",XDM_CONST.IP_PROTOCOL_BNA, protocol="ESP",XDM_CONST.IP_PROTOCOL_ESP, protocol="AH",XDM_CONST.IP_PROTOCOL_AH, protocol="I_NLSP",XDM_CONST.IP_PROTOCOL_I_NLSP, protocol="SWIPE",XDM_CONST.IP_PROTOCOL_SWIPE, protocol="NARP",XDM_CONST.IP_PROTOCOL_NARP, protocol="MOBILE",XDM_CONST.IP_PROTOCOL_MOBILE, protocol="TLSP",XDM_CONST.IP_PROTOCOL_TLSP, protocol="SKIP",XDM_CONST.IP_PROTOCOL_SKIP, protocol="IPV6_ICMP",XDM_CONST.IP_PROTOCOL_IPV6_ICMP, protocol="IPV6_NONXT",XDM_CONST.IP_PROTOCOL_IPV6_NONXT, protocol="IPV6_OPTS",XDM_CONST.IP_PROTOCOL_IPV6_OPTS, protocol="CFTP",XDM_CONST.IP_PROTOCOL_CFTP, protocol="SAT_EXPAK",XDM_CONST.IP_PROTOCOL_SAT_EXPAK, protocol="KRYPTOLAN",XDM_CONST.IP_PROTOCOL_KRYPTOLAN, protocol="RVD",XDM_CONST.IP_PROTOCOL_RVD, protocol="IPPC",XDM_CONST.IP_PROTOCOL_IPPC, protocol="SAT_MON",XDM_CONST.IP_PROTOCOL_SAT_MON, protocol="VISA",XDM_CONST.IP_PROTOCOL_VISA, protocol="IPCV",XDM_CONST.IP_PROTOCOL_IPCV, protocol="CPNX",XDM_CONST.IP_PROTOCOL_CPNX, protocol="CPHB",XDM_CONST.IP_PROTOCOL_CPHB, protocol="WSN",XDM_CONST.IP_PROTOCOL_WSN, protocol="PVP",XDM_CONST.IP_PROTOCOL_PVP, protocol="BR_SAT_MON",XDM_CONST.IP_PROTOCOL_BR_SAT_MON, protocol="SUN_ND",XDM_CONST.IP_PROTOCOL_SUN_ND, protocol="WB_MON",XDM_CONST.IP_PROTOCOL_WB_MON, protocol="WB_EXPAK",XDM_CONST.IP_PROTOCOL_WB_EXPAK, protocol="ISO_IP",XDM_CONST.IP_PROTOCOL_ISO_IP, protocol="VMTP",XDM_CONST.IP_PROTOCOL_VMTP, protocol="SECURE_VMTP",XDM_CONST.IP_PROTOCOL_SECURE_VMTP, protocol="VINES",XDM_CONST.IP_PROTOCOL_VINES, protocol="TTP",XDM_CONST.IP_PROTOCOL_TTP, protocol="NSFNET_IGP",XDM_CONST.IP_PROTOCOL_NSFNET_IGP, protocol="DGP",XDM_CONST.IP_PROTOCOL_DGP, protocol="TCF",XDM_CONST.IP_PROTOCOL_TCF, protocol="EIGRP",XDM_CONST.IP_PROTOCOL_EIGRP, protocol="OSPFIGP",XDM_CONST.IP_PROTOCOL_OSPFIGP, protocol="SPRITE_RPC",XDM_CONST.IP_PROTOCOL_SPRITE_RPC, protocol="LARP",XDM_CONST.IP_PROTOCOL_LARP, protocol="MTP",XDM_CONST.IP_PROTOCOL_MTP, protocol="AX25",XDM_CONST.IP_PROTOCOL_AX25, protocol="IPIP",XDM_CONST.IP_PROTOCOL_IPIP, protocol="MICP",XDM_CONST.IP_PROTOCOL_MICP, protocol="SCC_SP",XDM_CONST.IP_PROTOCOL_SCC_SP, protocol="ETHERIP",XDM_CONST.IP_PROTOCOL_ETHERIP, protocol="ENCAP",XDM_CONST.IP_PROTOCOL_ENCAP, protocol="GMTP",XDM_CONST.IP_PROTOCOL_GMTP, protocol="IFMP",XDM_CONST.IP_PROTOCOL_IFMP, protocol="PNNI",XDM_CONST.IP_PROTOCOL_PNNI, protocol="PIM",XDM_CONST.IP_PROTOCOL_PIM, protocol="ARIS",XDM_CONST.IP_PROTOCOL_ARIS, protocol="SCPS",XDM_CONST.IP_PROTOCOL_SCPS, protocol="QNX",XDM_CONST.IP_PROTOCOL_QNX, protocol="AN",XDM_CONST.IP_PROTOCOL_AN, protocol="IPCOMP",XDM_CONST.IP_PROTOCOL_IPCOMP, protocol="COMPAQ_PEER",XDM_CONST.IP_PROTOCOL_COMPAQ_PEER, protocol="IPX_IN_IP",XDM_CONST.IP_PROTOCOL_IPX_IN_IP, protocol="VRRP",XDM_CONST.IP_PROTOCOL_VRRP, protocol="PGM",XDM_CONST.IP_PROTOCOL_PGM, protocol="L2TP",XDM_CONST.IP_PROTOCOL_L2TP, protocol="DDX",XDM_CONST.IP_PROTOCOL_DDX, protocol="IATP",XDM_CONST.IP_PROTOCOL_IATP, protocol="STP",XDM_CONST.IP_PROTOCOL_STP, protocol="SRP",XDM_CONST.IP_PROTOCOL_SRP, protocol="UTI",XDM_CONST.IP_PROTOCOL_UTI, protocol="SMP",XDM_CONST.IP_PROTOCOL_SMP, protocol="SM",XDM_CONST.IP_PROTOCOL_SM, protocol="PTP",XDM_CONST.IP_PROTOCOL_PTP, protocol="ISIS",XDM_CONST.IP_PROTOCOL_ISIS, protocol="FIRE",XDM_CONST.IP_PROTOCOL_FIRE, protocol="CRTP",XDM_CONST.IP_PROTOCOL_CRTP, protocol="CRUDP",XDM_CONST.IP_PROTOCOL_CRUDP, protocol="SSCOPMCE",XDM_CONST.IP_PROTOCOL_SSCOPMCE, protocol="IPLT",XDM_CONST.IP_PROTOCOL_IPLT, protocol="SPS",XDM_CONST.IP_PROTOCOL_SPS, protocol="PIPE",XDM_CONST.IP_PROTOCOL_PIPE, protocol="SCTP",XDM_CONST.IP_PROTOCOL_SCTP, protocol="FC",XDM_CONST.IP_PROTOCOL_FC, protocol="RSVP_E2E_IGNORE",XDM_CONST.IP_PROTOCOL_RSVP_E2E_IGNORE, protocol="MOBILITY",XDM_CONST.IP_PROTOCOL_MOBILITY, protocol="UDPLITE",XDM_CONST.IP_PROTOCOL_UDPLITE, protocol="MPLS_IN_IP",XDM_CONST.IP_PROTOCOL_MPLS_IN_IP,to_string(protocol));

config case_sensitive = true
| filter _raw_log ~= "\-\d+\:\sIPAA\:\sSession\="
| call cisco_asa_main_fields_extraction
| alter session_id = arrayindex(regextract(_raw_log ,"\-\d+\:\sIPAA\:\sSession\=([^\,]+)\,"),0),
    requested_address1 = arrayindex(regextract(_raw_log ,"address\s(\d+\.\d+\.\d+\.\d+)"),0),
    requested_address2 = arrayindex(regextract(_raw_log ,"Client\sassigned\s(\d+\.\d+\.\d+\.\d+)"),0),
    tunnel_group = arrayindex(regextract(_raw_log , "tunnel\-group\s\'([^\']+)\'"),0),
    protocol_1 = arrayindex(regextract(_raw_log ,"Session\=[^\,]+\,\s([A-Z]{3,})\s"),0),
    protocol_2 = arrayindex(regextract(_raw_log ,"Session\=[^\,]+\,\s\w+\s([A-Z]{3,})\s"),0),
    protocol_3 = arrayindex(regextract(_raw_log ,"[\d\.]+\sfrom\s([A-Z]+)"),0),
    protocol_4 = arrayindex(regextract(_raw_log ,"returning\s([A-Z]+)\sassigned\saddress"),0)
| alter protocol = coalesce(protocol_1 , protocol_2 , protocol_3 , protocol_4)
| alter xdm.event.original_event_type = to_string(event_id),
    xdm.event.id = to_string(event_id),
    xdm.event.description = message,
    xdm.alert.severity = severity,
    xdm.observer.name = observer_name,
    xdm.network.dhcp.requested_address = coalesce(requested_address1,requested_address2),
    xdm.network.session_id = session_id,
    xdm.event.outcome = if(message contains "Callback fail" or message contains "Error freeing",XDM_CONST.OUTCOME_FAILED,message ~= "attempt\s\d+\ssucceeded" or message contains "request succeeded", XDM_CONST.OUTCOME_SUCCESS, null),
    xdm.network.rule = tunnel_group,
    xdm.network.ip_protocol = if(protocol="HOPOPT",XDM_CONST.IP_PROTOCOL_HOPOPT, protocol="ICMP",XDM_CONST.IP_PROTOCOL_ICMP, protocol="IGMP",XDM_CONST.IP_PROTOCOL_IGMP, protocol="GGP",XDM_CONST.IP_PROTOCOL_GGP, protocol="IP",XDM_CONST.IP_PROTOCOL_IP, protocol="ST",XDM_CONST.IP_PROTOCOL_ST, protocol="TCP",XDM_CONST.IP_PROTOCOL_TCP, protocol="CBT",XDM_CONST.IP_PROTOCOL_CBT, protocol="EGP",XDM_CONST.IP_PROTOCOL_EGP, protocol="IGP",XDM_CONST.IP_PROTOCOL_IGP, protocol="BBN_RCC_MON",XDM_CONST.IP_PROTOCOL_BBN_RCC_MON, protocol="NVP_II",XDM_CONST.IP_PROTOCOL_NVP_II, protocol="PUP",XDM_CONST.IP_PROTOCOL_PUP, protocol="ARGUS",XDM_CONST.IP_PROTOCOL_ARGUS, protocol="EMCON",XDM_CONST.IP_PROTOCOL_EMCON, protocol="XNET",XDM_CONST.IP_PROTOCOL_XNET, protocol="CHAOS",XDM_CONST.IP_PROTOCOL_CHAOS, protocol="UDP",XDM_CONST.IP_PROTOCOL_UDP, protocol="MUX",XDM_CONST.IP_PROTOCOL_MUX, protocol="DCN_MEAS",XDM_CONST.IP_PROTOCOL_DCN_MEAS, protocol="HMP",XDM_CONST.IP_PROTOCOL_HMP, protocol="PRM",XDM_CONST.IP_PROTOCOL_PRM, protocol="XNS_IDP",XDM_CONST.IP_PROTOCOL_XNS_IDP, protocol="TRUNK_1",XDM_CONST.IP_PROTOCOL_TRUNK_1, protocol="TRUNK_2",XDM_CONST.IP_PROTOCOL_TRUNK_2, protocol="LEAF_1",XDM_CONST.IP_PROTOCOL_LEAF_1, protocol="LEAF_2",XDM_CONST.IP_PROTOCOL_LEAF_2, protocol="RDP",XDM_CONST.IP_PROTOCOL_RDP, protocol="IRTP",XDM_CONST.IP_PROTOCOL_IRTP, protocol="ISO_TP4",XDM_CONST.IP_PROTOCOL_ISO_TP4, protocol="NETBLT",XDM_CONST.IP_PROTOCOL_NETBLT, protocol="MFE_NSP",XDM_CONST.IP_PROTOCOL_MFE_NSP, protocol="MERIT_INP",XDM_CONST.IP_PROTOCOL_MERIT_INP, protocol="DCCP",XDM_CONST.IP_PROTOCOL_DCCP, protocol="3PC",XDM_CONST.IP_PROTOCOL_3PC, protocol="IDPR",XDM_CONST.IP_PROTOCOL_IDPR, protocol="XTP",XDM_CONST.IP_PROTOCOL_XTP, protocol="DDP",XDM_CONST.IP_PROTOCOL_DDP, protocol="IDPR_CMTP",XDM_CONST.IP_PROTOCOL_IDPR_CMTP, protocol="TP",XDM_CONST.IP_PROTOCOL_TP, protocol="IL",XDM_CONST.IP_PROTOCOL_IL, protocol="IPV6",XDM_CONST.IP_PROTOCOL_IPV6, protocol="SDRP",XDM_CONST.IP_PROTOCOL_SDRP, protocol="IPV6_ROUTE",XDM_CONST.IP_PROTOCOL_IPV6_ROUTE, protocol="IPV6_FRAG",XDM_CONST.IP_PROTOCOL_IPV6_FRAG, protocol="IDRP",XDM_CONST.IP_PROTOCOL_IDRP, protocol="RSVP",XDM_CONST.IP_PROTOCOL_RSVP, protocol="GRE",XDM_CONST.IP_PROTOCOL_GRE, protocol="DSR",XDM_CONST.IP_PROTOCOL_DSR, protocol="BNA",XDM_CONST.IP_PROTOCOL_BNA, protocol="ESP",XDM_CONST.IP_PROTOCOL_ESP, protocol="AH",XDM_CONST.IP_PROTOCOL_AH, protocol="I_NLSP",XDM_CONST.IP_PROTOCOL_I_NLSP, protocol="SWIPE",XDM_CONST.IP_PROTOCOL_SWIPE, protocol="NARP",XDM_CONST.IP_PROTOCOL_NARP, protocol="MOBILE",XDM_CONST.IP_PROTOCOL_MOBILE, protocol="TLSP",XDM_CONST.IP_PROTOCOL_TLSP, protocol="SKIP",XDM_CONST.IP_PROTOCOL_SKIP, protocol="IPV6_ICMP",XDM_CONST.IP_PROTOCOL_IPV6_ICMP, protocol="IPV6_NONXT",XDM_CONST.IP_PROTOCOL_IPV6_NONXT, protocol="IPV6_OPTS",XDM_CONST.IP_PROTOCOL_IPV6_OPTS, protocol="CFTP",XDM_CONST.IP_PROTOCOL_CFTP, protocol="SAT_EXPAK",XDM_CONST.IP_PROTOCOL_SAT_EXPAK, protocol="KRYPTOLAN",XDM_CONST.IP_PROTOCOL_KRYPTOLAN, protocol="RVD",XDM_CONST.IP_PROTOCOL_RVD, protocol="IPPC",XDM_CONST.IP_PROTOCOL_IPPC, protocol="SAT_MON",XDM_CONST.IP_PROTOCOL_SAT_MON, protocol="VISA",XDM_CONST.IP_PROTOCOL_VISA, protocol="IPCV",XDM_CONST.IP_PROTOCOL_IPCV, protocol="CPNX",XDM_CONST.IP_PROTOCOL_CPNX, protocol="CPHB",XDM_CONST.IP_PROTOCOL_CPHB, protocol="WSN",XDM_CONST.IP_PROTOCOL_WSN, protocol="PVP",XDM_CONST.IP_PROTOCOL_PVP, protocol="BR_SAT_MON",XDM_CONST.IP_PROTOCOL_BR_SAT_MON, protocol="SUN_ND",XDM_CONST.IP_PROTOCOL_SUN_ND, protocol="WB_MON",XDM_CONST.IP_PROTOCOL_WB_MON, protocol="WB_EXPAK",XDM_CONST.IP_PROTOCOL_WB_EXPAK, protocol="ISO_IP",XDM_CONST.IP_PROTOCOL_ISO_IP, protocol="VMTP",XDM_CONST.IP_PROTOCOL_VMTP, protocol="SECURE_VMTP",XDM_CONST.IP_PROTOCOL_SECURE_VMTP, protocol="VINES",XDM_CONST.IP_PROTOCOL_VINES, protocol="TTP",XDM_CONST.IP_PROTOCOL_TTP, protocol="NSFNET_IGP",XDM_CONST.IP_PROTOCOL_NSFNET_IGP, protocol="DGP",XDM_CONST.IP_PROTOCOL_DGP, protocol="TCF",XDM_CONST.IP_PROTOCOL_TCF, protocol="EIGRP",XDM_CONST.IP_PROTOCOL_EIGRP, protocol="OSPFIGP",XDM_CONST.IP_PROTOCOL_OSPFIGP, protocol="SPRITE_RPC",XDM_CONST.IP_PROTOCOL_SPRITE_RPC, protocol="LARP",XDM_CONST.IP_PROTOCOL_LARP, protocol="MTP",XDM_CONST.IP_PROTOCOL_MTP, protocol="AX25",XDM_CONST.IP_PROTOCOL_AX25, protocol="IPIP",XDM_CONST.IP_PROTOCOL_IPIP, protocol="MICP",XDM_CONST.IP_PROTOCOL_MICP, protocol="SCC_SP",XDM_CONST.IP_PROTOCOL_SCC_SP, protocol="ETHERIP",XDM_CONST.IP_PROTOCOL_ETHERIP, protocol="ENCAP",XDM_CONST.IP_PROTOCOL_ENCAP, protocol="GMTP",XDM_CONST.IP_PROTOCOL_GMTP, protocol="IFMP",XDM_CONST.IP_PROTOCOL_IFMP, protocol="PNNI",XDM_CONST.IP_PROTOCOL_PNNI, protocol="PIM",XDM_CONST.IP_PROTOCOL_PIM, protocol="ARIS",XDM_CONST.IP_PROTOCOL_ARIS, protocol="SCPS",XDM_CONST.IP_PROTOCOL_SCPS, protocol="QNX",XDM_CONST.IP_PROTOCOL_QNX, protocol="AN",XDM_CONST.IP_PROTOCOL_AN, protocol="IPCOMP",XDM_CONST.IP_PROTOCOL_IPCOMP, protocol="COMPAQ_PEER",XDM_CONST.IP_PROTOCOL_COMPAQ_PEER, protocol="IPX_IN_IP",XDM_CONST.IP_PROTOCOL_IPX_IN_IP, protocol="VRRP",XDM_CONST.IP_PROTOCOL_VRRP, protocol="PGM",XDM_CONST.IP_PROTOCOL_PGM, protocol="L2TP",XDM_CONST.IP_PROTOCOL_L2TP, protocol="DDX",XDM_CONST.IP_PROTOCOL_DDX, protocol="IATP",XDM_CONST.IP_PROTOCOL_IATP, protocol="STP",XDM_CONST.IP_PROTOCOL_STP, protocol="SRP",XDM_CONST.IP_PROTOCOL_SRP, protocol="UTI",XDM_CONST.IP_PROTOCOL_UTI, protocol="SMP",XDM_CONST.IP_PROTOCOL_SMP, protocol="SM",XDM_CONST.IP_PROTOCOL_SM, protocol="PTP",XDM_CONST.IP_PROTOCOL_PTP, protocol="ISIS",XDM_CONST.IP_PROTOCOL_ISIS, protocol="FIRE",XDM_CONST.IP_PROTOCOL_FIRE, protocol="CRTP",XDM_CONST.IP_PROTOCOL_CRTP, protocol="CRUDP",XDM_CONST.IP_PROTOCOL_CRUDP, protocol="SSCOPMCE",XDM_CONST.IP_PROTOCOL_SSCOPMCE, protocol="IPLT",XDM_CONST.IP_PROTOCOL_IPLT, protocol="SPS",XDM_CONST.IP_PROTOCOL_SPS, protocol="PIPE",XDM_CONST.IP_PROTOCOL_PIPE, protocol="SCTP",XDM_CONST.IP_PROTOCOL_SCTP, protocol="FC",XDM_CONST.IP_PROTOCOL_FC, protocol="RSVP_E2E_IGNORE",XDM_CONST.IP_PROTOCOL_RSVP_E2E_IGNORE, protocol="MOBILITY",XDM_CONST.IP_PROTOCOL_MOBILITY, protocol="UDPLITE",XDM_CONST.IP_PROTOCOL_UDPLITE, protocol="MPLS_IN_IP",XDM_CONST.IP_PROTOCOL_MPLS_IN_IP,to_string(protocol));

// %ASA-x-xxxxx: (...)
config case_sensitive = true
| filter _raw_log ~= "\d+\-\d+\:\s\([\w\-\_]+\)"
| call cisco_asa_main_fields_extraction
| alter reason_code = to_integer(arrayindex(regextract(_raw_log ,"\(reason\scode\s\=\s(\d+)\)"),0)),
    dst_interface = arrayindex(regextract(_raw_log ,"[on|Testing]{2,}\s[i|I]nterface\s(\S+)"),0),
    command_line = arrayindex(regextract(_raw_log ,"command\:\s\'([^\']+)\'"),0),
    status1 = arrayindex(regextract(_raw_log ,"Switching\sto\s([A-Za-z]+)"),0),
    status2 = arrayindex(regextract(_raw_log ,"transitioning\sto\s(\S+)\sstate"),0),
    status3 = arrayindex(regextract(_raw_log ,"\,my\=([A-Za-z]+)"),0),
    status4 = arrayindex(regextract(_raw_log ,"\s+my\sstate\s([A-Za-z]+)"),0),
    status5 = arrayindex(regextract(_raw_log ,"Peer\sstate\s([^\.]+)"),0),
    status6 = arrayindex(regextract(_raw_log ,"[Control|Data]+\schannel\sis\s([^\.]+)"),0),
    status7 = arrayindex(regextract(_raw_log ,"Link\sstatus\s\'([^\']+)\'"),0),
    status8 = arrayindex(regextract(_raw_log ,"state\sinformation\s[to|on]+\s[the]*\s*([A-Za-z]+)"),0),
    alert_name = arrayindex(regextract(_raw_log , "event\s([A-Z\_]+)"),0)
| alter status = uppercase(coalesce(status1,status2,status3,status4,status5, status6,status7,status8))
| alter xdm.event.outcome_reason = coalesce(
        // for event if 103001
        if(
            reason_code = 1 and event_id = 103001,"The local unit is not receiving the hello packet on the failover LAN interface when LAN failover occurs or on the serial failover cable when serial failover occurs, and declares that the peer is down.",
            reason_code = 2 and event_id = 103001,"An interface did not pass one of the four failover tests, which are as follows: 1) Link Up, 2) Monitor for Network Traffic, 3) ARP, and 4) Broadcast Ping.",
            reason_code = 3 and event_id = 103001 ,"No proper ACK for 15+ seconds after a command was sent on the serial cable.",
            reason_code = 4 and event_id = 103001,"The failover LAN interface is down, and other data interfaces are not responding to additional interface testing. In addition, the local unit is declaring that the peer is down.",
            reason_code = 5 and event_id = 103001,"The standby peer went down during the configuration synchronization process.",
            reason_code = 6 and event_id = 103001,"Replication is not complete; the failover unit is not synchronized.",null
        ),
        // for event if 104001, 104002
        arrayindex(regextract(_raw_log ,"Switching\sto\s[A-Z]+\s\-\s(.*)"),0)
    ),
    xdm.event.original_event_type = to_string(event_id),
    xdm.event.id = to_string(event_id),
    xdm.event.description = message,
    xdm.alert.severity = severity,
    xdm.observer.name = observer_name,
    xdm.target.zone = dst_interface,
    xdm.target.interface = dst_interface,
    xdm.target.resource.value = status, // status will be on the target.resource.value field.
    xdm.alert.name = alert_name,
    xdm.target.process.command_line = command_line;

//722003 -  %ASA-x-xxxx: IP <src_ip>
config case_sensitive = true
| filter _raw_log ~= "\d+\-\d+\:\sIP\s\<\d+\.\d+\.\d+\.\d+\>"
| call cisco_asa_main_fields_extraction
| alter src_ipv4 = arrayindex(regextract(_raw_log ,"\d+\-\d+\:\sIP\s\<(\d+\.\d+\.\d+\.\d+)\>"),0)
| alter xdm.source.ipv4 = src_ipv4,
    xdm.event.original_event_type = to_string(event_id),
    xdm.event.id = to_string(event_id),
    xdm.event.description = message,
    xdm.alert.severity = severity,
    xdm.observer.name = observer_name;

//106016: from (<source_ip>) to <dest_ip>
config case_sensitive = true
| filter _raw_log ~= "from\s\(\d+\.\d+\.\d+\.\d+\)\sto\s\d+\.\d+\.\d+\.\d+"
| call cisco_asa_main_fields_extraction
| alter src_ip = arrayindex(regextract(_raw_log ,"from\s\((\d+\.\d+\.\d+\.\d+)\)\sto\s\d+\.\d+\.\d+\.\d+"),0),
    action = arrayindex(regextract(_raw_log ,"\%ASA\-[session]*\-*\d\-\d+\:\s([\w\s\-]+)\s"),0),
    dst_ip = arrayindex(regextract(_raw_log ,"from\s\(\d+\.\d+\.\d+\.\d+\)\sto\s(\d+\.\d+\.\d+\.\d+)"),0),
    dst_interface = arrayindex(regextract(_raw_log ,"on\sinterface\s(\S+)"),0)
| alter xdm.source.ipv4 = src_ip,
    xdm.target.ipv4 = dst_ip,
    xdm.target.zone= dst_interface,
    xdm.target.interface = dst_interface,
    xdm.event.original_event_type = to_string(event_id),
    xdm.event.id = to_string(event_id),
    xdm.event.description = message,
    xdm.alert.severity = severity,
    xdm.observer.name = observer_name,
    xdm.event.outcome_reason = action;

// Call-Home
config case_sensitive = true
| filter _raw_log contains "Call-Home"
| call cisco_asa_main_fields_extraction
| alter outcome_reason = arrayindex(regextract(_raw_log, "Reason\:\s+(\S+)"),0),
    dst_url = arrayindex(regextract(_raw_log, "message\sto\s(\S+)"),0),
    outcome = arrayindex(regextract(_raw_log, "message\sto\s\S+\s(\w+)\."),0)
| alter xdm.event.original_event_type = to_string(event_id),
    xdm.event.id = to_string(event_id),
    xdm.event.description = message,
    xdm.alert.severity = severity,
    xdm.observer.name = observer_name,
    xdm.target.url = dst_url,
    xdm.event.outcome = if(outcome = "failed",XDM_CONST.OUTCOME_FAILED,null),
    xdm.event.outcome_reason = outcome_reason;

// UPDATE:
config case_sensitive = true
| filter _raw_log ~= "\-\d+\:\sUPDATE\:"
| call cisco_asa_main_fields_extraction
| alter asa_img = arrayindex(regextract(_raw_log ,"ASA\simage\s\'([^\']+)\'"),0),
    operation_sub_type = arrayindex(regextract(_raw_log ,"\-\d+\:\s([A-Za-z]+)\:"),0)
| alter xdm.event.original_event_type = to_string(event_id),
    xdm.event.id = to_string(event_id),
    xdm.event.operation_sub_type = operation_sub_type,
    xdm.event.description = message,
    xdm.alert.severity = severity,
    xdm.observer.name = observer_name,
    xdm.target.resource.name = asa_img;

// event IDs: 106101,120011,199009,199014,199015,199016,199017,199018,308001
config case_sensitive = true
| alter event_id = to_integer(arrayindex(regextract(_raw_log , "ASA\-[session]*\-*\d\-(\d+)\:"),0))
| filter event_id in (106101,120011,199009,199014,199015,199016,199017,199018,308001)
| alter severity = arrayindex(regextract(_raw_log, "ASA\-[session]*\-*(\d+)\-\d+\:"),0),
    message = arrayindex(regextract(_raw_log, "\%ASA\-[session]*\-*\d\-\d+[\:|\s\-]+\s(.*)"),0),
    observer_name = arrayindex(regextract(_raw_log , "([\w\-\_\.\@]+)\s\:*\s*%ASA-\d+"),0),
    log_level = arrayindex(regextract(_raw_log ,"port\-manager\:\s([A-Za-z]+)\:"),0),
    file_path = arrayindex(regextract(_raw_log ,"state\=\'\w+\(([^\)]+)\)"),0),
    file_size = to_integer(arrayindex(regextract(_raw_log ,"cur_file_size\=\'(\d+)\'"),0)),
    alert_name = arrayindex(regextract(_raw_log , "\'Alert\:([^\']+)\'"),0),
    src_username = arrayindex(regextract(_raw_log ,"by\s(\S+)\sfrom\sssh"),0),
    protocol = uppercase(arrayindex(regextract(_raw_log ,"by\s\S+\sfrom\s([A-Za-z]+)\s"),0)),
    dst_ip = arrayindex(regextract(_raw_log ,"\(remote\s(\d+\.\d+\.\d+\.\d+)\)"),0),
    outcome_reason1 = arrayindex(regextract(_raw_log ,"Reload\sreason\:\s\[([^\]]+)"),0),
    outcome_reason2 = arrayindex(regextract(_raw_log ,"reason\:\s([A-Za-z]+)"),0),
    network_rule = arrayindex(regextract(_raw_log , "for\s([A-Z]+)\slog"),0),
    src_ip = arrayindex(regextract(_raw_log ,"\(from\s(\d+\.\d+\.\d+\.\d+)\)"),0),
    status_1 = arrayindex(regextract(_raw_log ,"state\:\s([\w\-]+)"),0),
    status_2 = arrayindex(regextract(_raw_log ,"entered\s(\S+)\sstate"),0),
    port_mode = arrayindex(regextract(_raw_log ,"mode\sfor\s\S+\sset\sto\s([A-Z]+)"),0),
    ethernet_name = arrayindex(regextract(_raw_log ,"([A-Za-z0-9]+\/\d+)"),0),
    mac_address = arrayindex(regextract(_raw_log , "MAC\s([A-Za-z0-9\:]{5,})\s"),0),
    operation_sub_type = arrayindex(regextract(_raw_log , "MAC\s[A-Za-z0-9\:]+\s([A-Z]+)"),0),
    pid = to_integer(arrayindex(regextract(_raw_log , "pid\s\=\s(\d+)\s"),0)),
    cmd_line = arrayindex(regextract(_raw_log , "cmdline\s\=\s(\S+)"),0),
    target_file_path = arrayindex(regextract(_raw_log ,"[A-Z]+\sFILES\s(\S+)"),0)
| alter status = coalesce(status_1, status_2 ),
    outcome_reason = coalesce(outcome_reason1 , outcome_reason2 )
| alter xdm.event.log_level = if(log_level = "Informational", XDM_CONST.LOG_LEVEL_INFORMATIONAL, uppercase(log_level)),
    xdm.event.original_event_type = to_string(event_id),
    xdm.event.id = to_string(event_id),
    xdm.target.file.path = coalesce(file_path,target_file_path),
    xdm.event.description = message,
    xdm.alert.severity = severity,
    xdm.observer.name = observer_name,
    xdm.target.file.size = to_integer(file_size),
    xdm.alert.name = alert_name,
    xdm.source.user.username = src_username,
    xdm.network.application_protocol = protocol, // like ssh
    xdm.target.ipv4 = dst_ip,
    xdm.source.ipv4 = src_ip,
    xdm.event.outcome_reason = outcome_reason,
    xdm.target.resource.value = status,
    xdm.target.resource.type = port_mode,
    xdm.target.resource.name = ethernet_name,
    xdm.target.host.mac_addresses = arraycreate(mac_address),
    xdm.network.rule = network_rule,
    xdm.event.operation_sub_type = operation_sub_type,
    xdm.source.process.pid = pid,
    xdm.target.process.command_line = cmd_line;


// ------------------- new
// <source_interface>:<source_ip>/<source_port> to <dest_interface>:<dest_ip>
config case_sensitive = true
| filter _raw_log  ~= "\w+\s[a-zA-Z0-9-_]+\:\d+\.\d+\.\d+\.\d+\/\d+\sto\s[a-zA-Z0-9-_]+\:\d+\.\d+\.\d+\.\d+\s"
| call cisco_asa_main_fields_extraction
| alter action = arrayindex(regextract(_raw_log ,"\%ASA\-[session]*\-*\d\-\d+[\:|\s\-]+\s(.*)\sfor\s[\w|\-\_]+\:"),0),
    src_ip = arrayindex(regextract(_raw_log ,"[\w|\-\_]+\:(\d+\.\d+\.\d+\.\d+)\/\d+\sto\s"),0),
    src_port = arrayindex(regextract(_raw_log ,"[\w|\-\_]+\:\d+\.\d+\.\d+\.\d+\/(\d+)\sto\s"),0),
    dst_ip = arrayindex(regextract(_raw_log ,"[\w|\-\_]+\:\d+\.\d+\.\d+\.\d+\/\d+\sto\s[\w|\-\_]+\:(\d+\.\d+\.\d+\.\d+)"),0),
    dst_interface = arrayindex(regextract(_raw_log ,"[\w|\-\_]+\:\d+\.\d+\.\d+\.\d+\/\d+\sto\s([\w|\-\_]+)\:\d+\.\d+\.\d+\.\d+"),0),
    src_interface = arrayindex(regextract(_raw_log ,"([\w|\-\_]+)\:\d+\.\d+\.\d+\.\d+\/\d+\sto\s"),0),
    protocol = arrayindex(regextract(_raw_log , "\s([A-Z]+)\ssecondary\schannel\sfor"),0)
| alter
    xdm.network.ip_protocol = if(protocol="HOPOPT",XDM_CONST.IP_PROTOCOL_HOPOPT, protocol="ICMP",XDM_CONST.IP_PROTOCOL_ICMP, protocol="IGMP",XDM_CONST.IP_PROTOCOL_IGMP, protocol="GGP",XDM_CONST.IP_PROTOCOL_GGP, protocol="IP",XDM_CONST.IP_PROTOCOL_IP, protocol="ST",XDM_CONST.IP_PROTOCOL_ST, protocol="TCP",XDM_CONST.IP_PROTOCOL_TCP, protocol="CBT",XDM_CONST.IP_PROTOCOL_CBT, protocol="EGP",XDM_CONST.IP_PROTOCOL_EGP, protocol="IGP",XDM_CONST.IP_PROTOCOL_IGP, protocol="BBN_RCC_MON",XDM_CONST.IP_PROTOCOL_BBN_RCC_MON, protocol="NVP_II",XDM_CONST.IP_PROTOCOL_NVP_II, protocol="PUP",XDM_CONST.IP_PROTOCOL_PUP, protocol="ARGUS",XDM_CONST.IP_PROTOCOL_ARGUS, protocol="EMCON",XDM_CONST.IP_PROTOCOL_EMCON, protocol="XNET",XDM_CONST.IP_PROTOCOL_XNET, protocol="CHAOS",XDM_CONST.IP_PROTOCOL_CHAOS, protocol="UDP",XDM_CONST.IP_PROTOCOL_UDP, protocol="MUX",XDM_CONST.IP_PROTOCOL_MUX, protocol="DCN_MEAS",XDM_CONST.IP_PROTOCOL_DCN_MEAS, protocol="HMP",XDM_CONST.IP_PROTOCOL_HMP, protocol="PRM",XDM_CONST.IP_PROTOCOL_PRM, protocol="XNS_IDP",XDM_CONST.IP_PROTOCOL_XNS_IDP, protocol="TRUNK_1",XDM_CONST.IP_PROTOCOL_TRUNK_1, protocol="TRUNK_2",XDM_CONST.IP_PROTOCOL_TRUNK_2, protocol="LEAF_1",XDM_CONST.IP_PROTOCOL_LEAF_1, protocol="LEAF_2",XDM_CONST.IP_PROTOCOL_LEAF_2, protocol="RDP",XDM_CONST.IP_PROTOCOL_RDP, protocol="IRTP",XDM_CONST.IP_PROTOCOL_IRTP, protocol="ISO_TP4",XDM_CONST.IP_PROTOCOL_ISO_TP4, protocol="NETBLT",XDM_CONST.IP_PROTOCOL_NETBLT, protocol="MFE_NSP",XDM_CONST.IP_PROTOCOL_MFE_NSP, protocol="MERIT_INP",XDM_CONST.IP_PROTOCOL_MERIT_INP, protocol="DCCP",XDM_CONST.IP_PROTOCOL_DCCP, protocol="3PC",XDM_CONST.IP_PROTOCOL_3PC, protocol="IDPR",XDM_CONST.IP_PROTOCOL_IDPR, protocol="XTP",XDM_CONST.IP_PROTOCOL_XTP, protocol="DDP",XDM_CONST.IP_PROTOCOL_DDP, protocol="IDPR_CMTP",XDM_CONST.IP_PROTOCOL_IDPR_CMTP, protocol="TP",XDM_CONST.IP_PROTOCOL_TP, protocol="IL",XDM_CONST.IP_PROTOCOL_IL, protocol="IPV6",XDM_CONST.IP_PROTOCOL_IPV6, protocol="SDRP",XDM_CONST.IP_PROTOCOL_SDRP, protocol="IPV6_ROUTE",XDM_CONST.IP_PROTOCOL_IPV6_ROUTE, protocol="IPV6_FRAG",XDM_CONST.IP_PROTOCOL_IPV6_FRAG, protocol="IDRP",XDM_CONST.IP_PROTOCOL_IDRP, protocol="RSVP",XDM_CONST.IP_PROTOCOL_RSVP, protocol="GRE",XDM_CONST.IP_PROTOCOL_GRE, protocol="DSR",XDM_CONST.IP_PROTOCOL_DSR, protocol="BNA",XDM_CONST.IP_PROTOCOL_BNA, protocol="ESP",XDM_CONST.IP_PROTOCOL_ESP, protocol="AH",XDM_CONST.IP_PROTOCOL_AH, protocol="I_NLSP",XDM_CONST.IP_PROTOCOL_I_NLSP, protocol="SWIPE",XDM_CONST.IP_PROTOCOL_SWIPE, protocol="NARP",XDM_CONST.IP_PROTOCOL_NARP, protocol="MOBILE",XDM_CONST.IP_PROTOCOL_MOBILE, protocol="TLSP",XDM_CONST.IP_PROTOCOL_TLSP, protocol="SKIP",XDM_CONST.IP_PROTOCOL_SKIP, protocol="IPV6_ICMP",XDM_CONST.IP_PROTOCOL_IPV6_ICMP, protocol="IPV6_NONXT",XDM_CONST.IP_PROTOCOL_IPV6_NONXT, protocol="IPV6_OPTS",XDM_CONST.IP_PROTOCOL_IPV6_OPTS, protocol="CFTP",XDM_CONST.IP_PROTOCOL_CFTP, protocol="SAT_EXPAK",XDM_CONST.IP_PROTOCOL_SAT_EXPAK, protocol="KRYPTOLAN",XDM_CONST.IP_PROTOCOL_KRYPTOLAN, protocol="RVD",XDM_CONST.IP_PROTOCOL_RVD, protocol="IPPC",XDM_CONST.IP_PROTOCOL_IPPC, protocol="SAT_MON",XDM_CONST.IP_PROTOCOL_SAT_MON, protocol="VISA",XDM_CONST.IP_PROTOCOL_VISA, protocol="IPCV",XDM_CONST.IP_PROTOCOL_IPCV, protocol="CPNX",XDM_CONST.IP_PROTOCOL_CPNX, protocol="CPHB",XDM_CONST.IP_PROTOCOL_CPHB, protocol="WSN",XDM_CONST.IP_PROTOCOL_WSN, protocol="PVP",XDM_CONST.IP_PROTOCOL_PVP, protocol="BR_SAT_MON",XDM_CONST.IP_PROTOCOL_BR_SAT_MON, protocol="SUN_ND",XDM_CONST.IP_PROTOCOL_SUN_ND, protocol="WB_MON",XDM_CONST.IP_PROTOCOL_WB_MON, protocol="WB_EXPAK",XDM_CONST.IP_PROTOCOL_WB_EXPAK, protocol="ISO_IP",XDM_CONST.IP_PROTOCOL_ISO_IP, protocol="VMTP",XDM_CONST.IP_PROTOCOL_VMTP, protocol="SECURE_VMTP",XDM_CONST.IP_PROTOCOL_SECURE_VMTP, protocol="VINES",XDM_CONST.IP_PROTOCOL_VINES, protocol="TTP",XDM_CONST.IP_PROTOCOL_TTP, protocol="NSFNET_IGP",XDM_CONST.IP_PROTOCOL_NSFNET_IGP, protocol="DGP",XDM_CONST.IP_PROTOCOL_DGP, protocol="TCF",XDM_CONST.IP_PROTOCOL_TCF, protocol="EIGRP",XDM_CONST.IP_PROTOCOL_EIGRP, protocol="OSPFIGP",XDM_CONST.IP_PROTOCOL_OSPFIGP, protocol="SPRITE_RPC",XDM_CONST.IP_PROTOCOL_SPRITE_RPC, protocol="LARP",XDM_CONST.IP_PROTOCOL_LARP, protocol="MTP",XDM_CONST.IP_PROTOCOL_MTP, protocol="AX25",XDM_CONST.IP_PROTOCOL_AX25, protocol="IPIP",XDM_CONST.IP_PROTOCOL_IPIP, protocol="MICP",XDM_CONST.IP_PROTOCOL_MICP, protocol="SCC_SP",XDM_CONST.IP_PROTOCOL_SCC_SP, protocol="ETHERIP",XDM_CONST.IP_PROTOCOL_ETHERIP, protocol="ENCAP",XDM_CONST.IP_PROTOCOL_ENCAP, protocol="GMTP",XDM_CONST.IP_PROTOCOL_GMTP, protocol="IFMP",XDM_CONST.IP_PROTOCOL_IFMP, protocol="PNNI",XDM_CONST.IP_PROTOCOL_PNNI, protocol="PIM",XDM_CONST.IP_PROTOCOL_PIM, protocol="ARIS",XDM_CONST.IP_PROTOCOL_ARIS, protocol="SCPS",XDM_CONST.IP_PROTOCOL_SCPS, protocol="QNX",XDM_CONST.IP_PROTOCOL_QNX, protocol="AN",XDM_CONST.IP_PROTOCOL_AN, protocol="IPCOMP",XDM_CONST.IP_PROTOCOL_IPCOMP, protocol="COMPAQ_PEER",XDM_CONST.IP_PROTOCOL_COMPAQ_PEER, protocol="IPX_IN_IP",XDM_CONST.IP_PROTOCOL_IPX_IN_IP, protocol="VRRP",XDM_CONST.IP_PROTOCOL_VRRP, protocol="PGM",XDM_CONST.IP_PROTOCOL_PGM, protocol="L2TP",XDM_CONST.IP_PROTOCOL_L2TP, protocol="DDX",XDM_CONST.IP_PROTOCOL_DDX, protocol="IATP",XDM_CONST.IP_PROTOCOL_IATP, protocol="STP",XDM_CONST.IP_PROTOCOL_STP, protocol="SRP",XDM_CONST.IP_PROTOCOL_SRP, protocol="UTI",XDM_CONST.IP_PROTOCOL_UTI, protocol="SMP",XDM_CONST.IP_PROTOCOL_SMP, protocol="SM",XDM_CONST.IP_PROTOCOL_SM, protocol="PTP",XDM_CONST.IP_PROTOCOL_PTP, protocol="ISIS",XDM_CONST.IP_PROTOCOL_ISIS, protocol="FIRE",XDM_CONST.IP_PROTOCOL_FIRE, protocol="CRTP",XDM_CONST.IP_PROTOCOL_CRTP, protocol="CRUDP",XDM_CONST.IP_PROTOCOL_CRUDP, protocol="SSCOPMCE",XDM_CONST.IP_PROTOCOL_SSCOPMCE, protocol="IPLT",XDM_CONST.IP_PROTOCOL_IPLT, protocol="SPS",XDM_CONST.IP_PROTOCOL_SPS, protocol="PIPE",XDM_CONST.IP_PROTOCOL_PIPE, protocol="SCTP",XDM_CONST.IP_PROTOCOL_SCTP, protocol="FC",XDM_CONST.IP_PROTOCOL_FC, protocol="RSVP_E2E_IGNORE",XDM_CONST.IP_PROTOCOL_RSVP_E2E_IGNORE, protocol="MOBILITY",XDM_CONST.IP_PROTOCOL_MOBILITY, protocol="UDPLITE",XDM_CONST.IP_PROTOCOL_UDPLITE, protocol="MPLS_IN_IP",XDM_CONST.IP_PROTOCOL_MPLS_IN_IP,to_string(protocol)),
    xdm.event.original_event_type = to_string(event_id),
    xdm.event.id = to_string(event_id),
    xdm.event.description = message,
    xdm.alert.severity = severity,
    xdm.source.ipv4 = src_ip,
    xdm.source.port = to_integer(src_port),
    xdm.target.ipv4 = dst_ip,
    xdm.target.zone = dst_interface,
    xdm.target.interface = dst_interface,
    xdm.source.interface = src_interface,
    xdm.event.outcome_reason = action,
    xdm.observer.name = observer_name,
    xdm.event.is_completed = if(action contains "Teardown",true, false);

// event ids: 210022,302010,216004,323006,336013,402123,411004,411002,411001,409023,502103,502102,502101,717058,717055,717054,717037,717028,717022,717007,711004,611104,506001,505011,768004,746016,735014,735013,812007
config case_sensitive = true
| call cisco_asa_main_fields_extraction
| filter event_id in (210022,302010,216004,323006,336013,402123,411004,411002,411001,409023,502103,502102,502101,717058,717055,717054,717037,717028,717022,717007,711004,611104,506001,505011,768004,746016,735014,735013,812007)
//
| alter protocol = uppercase(arrayindex(regextract(_raw_log ,"\sfor\s([A-Za-z]+)\sprotocol"),0)),
    trustpoint = arrayindex(regextract(_raw_log , "\strustpoint\s\<([^\>]+)\>"),0),
    subject_name1 = arrayindex(regextract(_raw_log ,"\sSubject\sName\s\<([^\>]+)\>"),0),
    subject_name2 = arrayindex(regextract(_raw_log ,"subject\sname\:\s([A-Za-z0-9\s\=\.\*\-\_]+)"),0),
    issuer_name1 = arrayindex(regextract(_raw_log ,"\sIssuer\sName\s\<([^\>]+)\>"),0),
    issuer_name2 = arrayindex(regextract(_raw_log ,"issuer_name\:\s([^\.]+)\."),0),
    serial_number1 = arrayindex(regextract(_raw_log ,"\sSerial\sNumber\s\<([^\>]+)\>"),0),
    serial_number2 = arrayindex(regextract(_raw_log ,"serial\snumber\:\s([^\,]+)\,"),0),
    outcome1 = arrayindex(regextract(_raw_log ,"mode\sconfiguration\s([A-Za-z]+)"),0),
    outcome2 = arrayindex(regextract(_raw_log , "channel\scommunication\s([A-Za-z]+)\,"),0),
    status1 = arrayindex(regextract(_raw_log ,"data\schannel\sis\s([A-Z]+)"),0),
    status2 = arrayindex(regextract(_raw_log ,"changed\sstate\sto\s([A-Za-z\s]+)"),0),
    status3 = arrayindex(regextract(_raw_log ,"channel\scommunication\sis\s([A-Za-z]+)"),0),
    status4 = arrayindex(regextract(_raw_log ,"Auth\-server\sgroup\s\S+\s(\S+)"),0),
    target_url = arrayindex(regextract(_raw_log ,"DNS\slookup\sfor\s(\S+)\s"),0),
    outcome_reason = arrayindex(regextract(_raw_log ,"reason\:(.*)"),0),
    source_function_filename = arrayindex(regextract(_raw_log ,"in\s\S+\sat\s(\S+)\(\d+\)\s\-\s"),0),
    target_interface1 = arrayindex(regextract(_raw_log ,"\son\sInterface\s([A-Za-z0-9\/\-\_]+)"),0),
    target_interface2 = arrayindex(regextract(_raw_log ,"411004\:\sInterface\s([^\,]+)\,"),0), // spesific for event id 411004
    target_username1 = arrayindex(regextract(_raw_log ,"Uname\:\s(\S+)\s"),0),
    target_username2 = arrayindex(regextract(_raw_log ,"for\suser\s(\S+)\s"),0),
    source_app_name = arrayindex(regextract(_raw_log ,"\(from\s([^\)]+)\)"),0),
    source_process1 = arrayindex(regextract(_raw_log ,"\sProcess\s\=\s([^\,]+)\,"),0),
    source_process2 = arrayindex(regextract(_raw_log ,"\-\d+\:\sModule\s([A-Za-z]+)\s"),0),
    source_hostname = arrayindex(regextract(_raw_log ,"\sPC\s\=\s([^\,]+)\,"),0),
    event_duration = to_integer(arrayindex(regextract(_raw_log ,"ran\sfor\s(\d+)\smsec"),0)),
    target_group = arrayindex(regextract(_raw_log ,"Auth\-server\sgroup\s(\S+)\s"),0),
    city = arrayindex(regextract(_raw_log ,"l\=([A-Za-z\s]+)"),0),
    country = arrayindex(regextract(_raw_log ,"c\=([A-Za-z\s]+)"),0),
    command = arrayindex(regextract(_raw_log , "executing\sthe\scommand\s(.*)\."),0)
| alter outcome = coalesce(outcome1 ,outcome2),
    status = coalesce(status1,status2,status3,status4),
    serial_number = coalesce(serial_number1, serial_number2),
    issuer_name = coalesce(issuer_name1,issuer_name2),
    subject_name = coalesce(subject_name1,subject_name2),
    target_interface = coalesce(target_interface1,target_interface2),
    target_username = coalesce(target_username1,target_username2),
    source_process = coalesce(source_process1,source_process2)
| alter xdm.target.resource.name = trustpoint,
    xdm.network.ip_protocol = if(protocol="HOPOPT",XDM_CONST.IP_PROTOCOL_HOPOPT, protocol="ICMP",XDM_CONST.IP_PROTOCOL_ICMP, protocol="IGMP",XDM_CONST.IP_PROTOCOL_IGMP, protocol="GGP",XDM_CONST.IP_PROTOCOL_GGP, protocol="IP",XDM_CONST.IP_PROTOCOL_IP, protocol="ST",XDM_CONST.IP_PROTOCOL_ST, protocol="TCP",XDM_CONST.IP_PROTOCOL_TCP, protocol="CBT",XDM_CONST.IP_PROTOCOL_CBT, protocol="EGP",XDM_CONST.IP_PROTOCOL_EGP, protocol="IGP",XDM_CONST.IP_PROTOCOL_IGP, protocol="BBN_RCC_MON",XDM_CONST.IP_PROTOCOL_BBN_RCC_MON, protocol="NVP_II",XDM_CONST.IP_PROTOCOL_NVP_II, protocol="PUP",XDM_CONST.IP_PROTOCOL_PUP, protocol="ARGUS",XDM_CONST.IP_PROTOCOL_ARGUS, protocol="EMCON",XDM_CONST.IP_PROTOCOL_EMCON, protocol="XNET",XDM_CONST.IP_PROTOCOL_XNET, protocol="CHAOS",XDM_CONST.IP_PROTOCOL_CHAOS, protocol="UDP",XDM_CONST.IP_PROTOCOL_UDP, protocol="MUX",XDM_CONST.IP_PROTOCOL_MUX, protocol="DCN_MEAS",XDM_CONST.IP_PROTOCOL_DCN_MEAS, protocol="HMP",XDM_CONST.IP_PROTOCOL_HMP, protocol="PRM",XDM_CONST.IP_PROTOCOL_PRM, protocol="XNS_IDP",XDM_CONST.IP_PROTOCOL_XNS_IDP, protocol="TRUNK_1",XDM_CONST.IP_PROTOCOL_TRUNK_1, protocol="TRUNK_2",XDM_CONST.IP_PROTOCOL_TRUNK_2, protocol="LEAF_1",XDM_CONST.IP_PROTOCOL_LEAF_1, protocol="LEAF_2",XDM_CONST.IP_PROTOCOL_LEAF_2, protocol="RDP",XDM_CONST.IP_PROTOCOL_RDP, protocol="IRTP",XDM_CONST.IP_PROTOCOL_IRTP, protocol="ISO_TP4",XDM_CONST.IP_PROTOCOL_ISO_TP4, protocol="NETBLT",XDM_CONST.IP_PROTOCOL_NETBLT, protocol="MFE_NSP",XDM_CONST.IP_PROTOCOL_MFE_NSP, protocol="MERIT_INP",XDM_CONST.IP_PROTOCOL_MERIT_INP, protocol="DCCP",XDM_CONST.IP_PROTOCOL_DCCP, protocol="3PC",XDM_CONST.IP_PROTOCOL_3PC, protocol="IDPR",XDM_CONST.IP_PROTOCOL_IDPR, protocol="XTP",XDM_CONST.IP_PROTOCOL_XTP, protocol="DDP",XDM_CONST.IP_PROTOCOL_DDP, protocol="IDPR_CMTP",XDM_CONST.IP_PROTOCOL_IDPR_CMTP, protocol="TP",XDM_CONST.IP_PROTOCOL_TP, protocol="IL",XDM_CONST.IP_PROTOCOL_IL, protocol="IPV6",XDM_CONST.IP_PROTOCOL_IPV6, protocol="SDRP",XDM_CONST.IP_PROTOCOL_SDRP, protocol="IPV6_ROUTE",XDM_CONST.IP_PROTOCOL_IPV6_ROUTE, protocol="IPV6_FRAG",XDM_CONST.IP_PROTOCOL_IPV6_FRAG, protocol="IDRP",XDM_CONST.IP_PROTOCOL_IDRP, protocol="RSVP",XDM_CONST.IP_PROTOCOL_RSVP, protocol="GRE",XDM_CONST.IP_PROTOCOL_GRE, protocol="DSR",XDM_CONST.IP_PROTOCOL_DSR, protocol="BNA",XDM_CONST.IP_PROTOCOL_BNA, protocol="ESP",XDM_CONST.IP_PROTOCOL_ESP, protocol="AH",XDM_CONST.IP_PROTOCOL_AH, protocol="I_NLSP",XDM_CONST.IP_PROTOCOL_I_NLSP, protocol="SWIPE",XDM_CONST.IP_PROTOCOL_SWIPE, protocol="NARP",XDM_CONST.IP_PROTOCOL_NARP, protocol="MOBILE",XDM_CONST.IP_PROTOCOL_MOBILE, protocol="TLSP",XDM_CONST.IP_PROTOCOL_TLSP, protocol="SKIP",XDM_CONST.IP_PROTOCOL_SKIP, protocol="IPV6_ICMP",XDM_CONST.IP_PROTOCOL_IPV6_ICMP, protocol="IPV6_NONXT",XDM_CONST.IP_PROTOCOL_IPV6_NONXT, protocol="IPV6_OPTS",XDM_CONST.IP_PROTOCOL_IPV6_OPTS, protocol="CFTP",XDM_CONST.IP_PROTOCOL_CFTP, protocol="SAT_EXPAK",XDM_CONST.IP_PROTOCOL_SAT_EXPAK, protocol="KRYPTOLAN",XDM_CONST.IP_PROTOCOL_KRYPTOLAN, protocol="RVD",XDM_CONST.IP_PROTOCOL_RVD, protocol="IPPC",XDM_CONST.IP_PROTOCOL_IPPC, protocol="SAT_MON",XDM_CONST.IP_PROTOCOL_SAT_MON, protocol="VISA",XDM_CONST.IP_PROTOCOL_VISA, protocol="IPCV",XDM_CONST.IP_PROTOCOL_IPCV, protocol="CPNX",XDM_CONST.IP_PROTOCOL_CPNX, protocol="CPHB",XDM_CONST.IP_PROTOCOL_CPHB, protocol="WSN",XDM_CONST.IP_PROTOCOL_WSN, protocol="PVP",XDM_CONST.IP_PROTOCOL_PVP, protocol="BR_SAT_MON",XDM_CONST.IP_PROTOCOL_BR_SAT_MON, protocol="SUN_ND",XDM_CONST.IP_PROTOCOL_SUN_ND, protocol="WB_MON",XDM_CONST.IP_PROTOCOL_WB_MON, protocol="WB_EXPAK",XDM_CONST.IP_PROTOCOL_WB_EXPAK, protocol="ISO_IP",XDM_CONST.IP_PROTOCOL_ISO_IP, protocol="VMTP",XDM_CONST.IP_PROTOCOL_VMTP, protocol="SECURE_VMTP",XDM_CONST.IP_PROTOCOL_SECURE_VMTP, protocol="VINES",XDM_CONST.IP_PROTOCOL_VINES, protocol="TTP",XDM_CONST.IP_PROTOCOL_TTP, protocol="NSFNET_IGP",XDM_CONST.IP_PROTOCOL_NSFNET_IGP, protocol="DGP",XDM_CONST.IP_PROTOCOL_DGP, protocol="TCF",XDM_CONST.IP_PROTOCOL_TCF, protocol="EIGRP",XDM_CONST.IP_PROTOCOL_EIGRP, protocol="OSPFIGP",XDM_CONST.IP_PROTOCOL_OSPFIGP, protocol="SPRITE_RPC",XDM_CONST.IP_PROTOCOL_SPRITE_RPC, protocol="LARP",XDM_CONST.IP_PROTOCOL_LARP, protocol="MTP",XDM_CONST.IP_PROTOCOL_MTP, protocol="AX25",XDM_CONST.IP_PROTOCOL_AX25, protocol="IPIP",XDM_CONST.IP_PROTOCOL_IPIP, protocol="MICP",XDM_CONST.IP_PROTOCOL_MICP, protocol="SCC_SP",XDM_CONST.IP_PROTOCOL_SCC_SP, protocol="ETHERIP",XDM_CONST.IP_PROTOCOL_ETHERIP, protocol="ENCAP",XDM_CONST.IP_PROTOCOL_ENCAP, protocol="GMTP",XDM_CONST.IP_PROTOCOL_GMTP, protocol="IFMP",XDM_CONST.IP_PROTOCOL_IFMP, protocol="PNNI",XDM_CONST.IP_PROTOCOL_PNNI, protocol="PIM",XDM_CONST.IP_PROTOCOL_PIM, protocol="ARIS",XDM_CONST.IP_PROTOCOL_ARIS, protocol="SCPS",XDM_CONST.IP_PROTOCOL_SCPS, protocol="QNX",XDM_CONST.IP_PROTOCOL_QNX, protocol="AN",XDM_CONST.IP_PROTOCOL_AN, protocol="IPCOMP",XDM_CONST.IP_PROTOCOL_IPCOMP, protocol="COMPAQ_PEER",XDM_CONST.IP_PROTOCOL_COMPAQ_PEER, protocol="IPX_IN_IP",XDM_CONST.IP_PROTOCOL_IPX_IN_IP, protocol="VRRP",XDM_CONST.IP_PROTOCOL_VRRP, protocol="PGM",XDM_CONST.IP_PROTOCOL_PGM, protocol="L2TP",XDM_CONST.IP_PROTOCOL_L2TP, protocol="DDX",XDM_CONST.IP_PROTOCOL_DDX, protocol="IATP",XDM_CONST.IP_PROTOCOL_IATP, protocol="STP",XDM_CONST.IP_PROTOCOL_STP, protocol="SRP",XDM_CONST.IP_PROTOCOL_SRP, protocol="UTI",XDM_CONST.IP_PROTOCOL_UTI, protocol="SMP",XDM_CONST.IP_PROTOCOL_SMP, protocol="SM",XDM_CONST.IP_PROTOCOL_SM, protocol="PTP",XDM_CONST.IP_PROTOCOL_PTP, protocol="ISIS",XDM_CONST.IP_PROTOCOL_ISIS, protocol="FIRE",XDM_CONST.IP_PROTOCOL_FIRE, protocol="CRTP",XDM_CONST.IP_PROTOCOL_CRTP, protocol="CRUDP",XDM_CONST.IP_PROTOCOL_CRUDP, protocol="SSCOPMCE",XDM_CONST.IP_PROTOCOL_SSCOPMCE, protocol="IPLT",XDM_CONST.IP_PROTOCOL_IPLT, protocol="SPS",XDM_CONST.IP_PROTOCOL_SPS, protocol="PIPE",XDM_CONST.IP_PROTOCOL_PIPE, protocol="SCTP",XDM_CONST.IP_PROTOCOL_SCTP, protocol="FC",XDM_CONST.IP_PROTOCOL_FC, protocol="RSVP_E2E_IGNORE",XDM_CONST.IP_PROTOCOL_RSVP_E2E_IGNORE, protocol="MOBILITY",XDM_CONST.IP_PROTOCOL_MOBILITY, protocol="UDPLITE",XDM_CONST.IP_PROTOCOL_UDPLITE, protocol="MPLS_IN_IP",XDM_CONST.IP_PROTOCOL_MPLS_IN_IP,to_string(protocol)),
    xdm.event.original_event_type = to_string(event_id),
    xdm.event.id = to_string(event_id),
    xdm.event.description = message,
    xdm.alert.severity = severity,
    xdm.observer.name = observer_name,
    xdm.network.tls.client_certificate.subject = subject_name,
    xdm.network.tls.client_certificate.issuer = issuer_name,
    xdm.network.tls.client_certificate.serial = serial_number,
    xdm.event.outcome = if(outcome in("failed","failure") , XDM_CONST.OUTCOME_FAILED, null),
    xdm.target.resource.value = status,
    xdm.target.url = target_url,
    xdm.event.outcome_reason = outcome_reason,
    xdm.source.process.executable.filename = source_function_filename,
    xdm.target.zone = target_interface,
    xdm.target.interface = target_interface,
    xdm.target.user.username = target_username,
    xdm.source.application.name = source_app_name,
    xdm.event.duration = event_duration,
    xdm.source.process.name = source_process,
    xdm.source.host.hostname = source_hostname,
    xdm.source.location.city = city,
    xdm.source.location.country = country,
    xdm.target.user.groups = arraycreate(target_group),
    xdm.target.process.command_line = command;

// <src_ip> ==> <dest_ip>
config case_sensitive = true
| call cisco_asa_main_fields_extraction
| filter _raw_log ~= "\d+\.\d+\.\d+\.\d+\s\=\=\>\s\d+\.\d+\.\d+\.\d+"
| alter src_ip = arrayindex(regextract(_raw_log ,"(\d+\.\d+\.\d+\.\d+)\s\=\=\>\s\d+\.\d+\.\d+\.\d+"),0),
    dst_ip = arrayindex(regextract(_raw_log ,"\d+\.\d+\.\d+\.\d+\s\=\=\>\s(\d+\.\d+\.\d+\.\d+)"),0),
    src_interface = arrayindex(regextract(_raw_log ,"\s\=\=\>\s\d+\.\d+\.\d+\.\d+\son\sinterface\s(\S+)"),0)| alter xdm.event.original_event_type = to_string(event_id),
    xdm.event.id = to_string(event_id),
    xdm.event.description = message,
    xdm.alert.severity = severity,
    xdm.observer.name = observer_name,
    xdm.source.ipv4 = src_ip,
    xdm.target.ipv4 = dst_ip,
    xdm.source.interface = src_interface,
    xdm.source.zone = src_interface;

//event IDs: 772004,771002,734001,503001,444306,444305,444303,426002,426001,405003,405001,336010,318039,317078,317077,305009,212010,212004
config case_sensitive = true
| alter event_id = to_integer(arrayindex(regextract(_raw_log , "ASA\-[session]*\-*\d\-(\d+)\:"),0))
| filter event_id in (772004,771002,734001,503001,444306,444305,444303,426002,426001,405003,405001,336010,318039,317078,317077,305009,212010,212004)
//
| alter severity = arrayindex(regextract(_raw_log, "ASA\-[session]*\-*(\d+)\-\d+\:"),0),
    message = arrayindex(regextract(_raw_log, "\%ASA\-[session]*\-*\d\-\d+[\:|\s\-]+\s(.*)"),0),
    observer_name = arrayindex(regextract(_raw_log , "([\w\-\_\.\@]+)\s\:*\s*\%ASA-\d+"),0),
    ddb_name = arrayindex(regextract(_raw_log ,"\sEIGRP\-(\S+)\s"),0),
    target_ipv4_1 = arrayindex(regextract(_raw_log ,"LSA\s(\d+\.\d+\.\d+\.\d+)\s"),0),
    target_ipv4_2 = arrayindex(regextract(_raw_log ,"from\s[A-Za-z0-9\-\_]+\:\d+\.\d+\.\d+\.\d+\sto\s[A-Za-z0-9\-\_]+\:(\d+\.\d+\.\d+\.\d+)"),0),
    target_ipv4_3 = arrayindex(regextract(_raw_log ,"\sbetween\shost\s(\d+\.\d+\.\d+\.\d+)\sat"),0),
    target_ipv4_4 = arrayindex(regextract(_raw_log ,"to\sIP\saddress\s(\d+\.\d+\.\d+\.\d+)"),0),
    src_ipv4_1 = arrayindex(regextract(_raw_log ,"Neighbor\s(\d+\.\d+\.\d+\.\d+)\s"),0),
    src_ipv4_2 = arrayindex(regextract(_raw_log ,"\,\sNbr\s(\d+\.\d+\.\d+\.\d+)\s"),0),
    src_ipv4_3 = arrayindex(regextract(_raw_log ,"\,\sAddr\s(\d+\.\d+\.\d+\.\d+)\,"),0),
    src_ipv4_4 = arrayindex(regextract(_raw_log ,"from\s(\d+\.\d+\.\d+\.\d+)\/[0-9a-zA-Z\.]+\son\s"),0),
    src_ipv4_5 = arrayindex(regextract(_raw_log ,"IP\:*\s(\d+\.\d+\.\d+\.\d+\,)"),0),
    src_ipv4_6 = arrayindex(regextract(_raw_log ,"from\s[A-Za-z0-9\-\_]+\:(\d+\.\d+\.\d+\.\d+)\sto\s[A-Za-z0-9\-\_]+\:\d+\.\d+\.\d+\.\d+"),0),
    src_mac_addr1 = arrayindex(regextract(_raw_log ,"from\s\d+\.\d+\.\d+\.\d+\/([0-9a-zA-Z\.]+)\son\s"),0),
    src_mac_addr2 = arrayindex(regextract(_raw_log ,"\sbetween\shost\s\d+\.\d+\.\d+\.\d+\sat\s([a-z0-9\.]+)\s"),0),
    target_mac_addr = arrayindex(regextract(_raw_log ,"and\sinterface\s[A-Za-z0-9\-\_]+,\s([a-z0-9\.]+)"),0),
    src_interface1 = arrayindex(regextract(_raw_log ,"Neighbor\s\d+\.\d+\.\d+\.\d+\s\(([^\)]+)\)"),0),
    src_interface2 = arrayindex(regextract(_raw_log ,"\,\sNbr\s\d+\.\d+\.\d+\.\d+\son\s(\S+)\s"),0),
    src_interface3 = arrayindex(regextract(_raw_log ,"from\s\d+\.\d+\.\d+\.\d+\/[0-9a-zA-Z\.]+\son\sinterface\s(\S+)\s"),0),
    src_interface4 = arrayindex(regextract(_raw_log ,"from\s([A-Za-z0-9\-\_]+)\:\d+\.\d+\.\d+\.\d+\sto\s[A-Za-z0-9\-\_]+\:\d+\.\d+\.\d+\.\d+"),0),
    src_interface5 = arrayindex(regextract(_raw_log ,"and\sinterface\s([A-Za-z0-9\-\_]+),\s[a-z0-9\.]+"),0),
    target_interface1 = if(event_id in(317078,317077) ,arrayindex(regextract(_raw_log ,"\[\d+\/\d+\]\son\s(\S+)"),0),null),
    target_interface2 = if(event_id in (426001,426002),arrayindex(regextract(_raw_log ,"PORT\-CHANNEL\:Interface\s(\S+)\s"),0),null),
    target_interface3 = arrayindex(regextract(_raw_log ,"from\s[A-Za-z0-9\-\_]+\:\d+\.\d+\.\d+\.\d+\sto\s([A-Za-z0-9\-\_]+)\:\d+\.\d+\.\d+\.\d+"),0),
    target_interface4 = arrayindex(regextract(_raw_log ,"to\sIP\saddress\s\d+\.\d+\.\d+\.\d+\sPort\s\d+\sInterface\s\"([^\"]+)\""),0),
    state1 = arrayindex(regextract(_raw_log ,"Neighbor\s\d+\.\d+\.\d+\.\d+\s\([^\)]+\)\sis\s([A-Za-z]+)"),0),
    state2 = arrayindex(regextract(_raw_log ,"from\s[A-Za-z]+\sto\s[A-Za-z]+\,\sLoading\s([A-Za-z]+)"),0),
    alert_msg = arrayindex(regextract(_raw_log ,"\([^\)]+\)\sis\s[A-Za-z]+\:\s(.*)"),0),
    process_id = arrayindex(regextract(_raw_log ,"\d+\:\sProcess\s(\d+)\,"),0),
    src_username = arrayindex(regextract(_raw_log ,"User\s([\w\.]+)"),0),
    network_rule = arrayindex(regextract(_raw_log ,"for\sthis\sconnection\:\s([A-Za-z]+)"),0),
    protocol1 = arrayindex(regextract(_raw_log ,"PASSWORD\:\s([A-Z]+)\/"),0),
    protocol2 = arrayindex(regextract(_raw_log ,"Configuration\srequest\sfor\s([A-Z]+)\s"),0),
    protocol3 = arrayindex(regextract(_raw_log ,"send\san\s([A-Z]+)\sresponse"),0),
    target_app_name = arrayindex(regextract(_raw_log ,"PASSWORD\:\s[A-Z]+\/\S+"),0),
    outcome1 = arrayindex(regextract(_raw_log ,"PASSWORD\:\s[A-Z]+\/\S+\slogin\s([A-Za-z]+)\,"),0),//failed
    outcome2 = arrayindex(regextract(_raw_log ,"Authorization\srenewal\s([a-zA-Z]+)\."),0),//successful
    outcome3 = arrayindex(regextract(_raw_log ,"user\s\S+\s([a-zA-Z]+)\."),0),//failed
    outcome_reason1 = arrayindex(regextract(_raw_log ,"cause\:\s(.*)"),0),
    outcome_reason2 = arrayindex(regextract(_raw_log ,"CLOCK\:\s([A-Za-z\s]+)"),0),
    event_type = arrayindex(regextract(_raw_log ,"\%SMART_LIC\-\d+\-([A-Z\_]+)"),0),
    src_process_name1 = arrayindex(regextract(_raw_log ,"source\:\s([A-Za-z0-9]+)"),0),
    src_process_name2 = arrayindex(regextract(_raw_log ,"\-\d+\:\s([A-Z]+)\sprocess"),0),
    client_certificate_serial = arrayindex(regextract(_raw_log ,"\,SN\:([A-Z0-9]+)"),0),
    target_port = to_integer(arrayindex(regextract(_raw_log ,"to\sIP\saddress\s\d+\.\d+\.\d+\.\d+\sPort\s(\d+)\s"),0)),
    connection_type = arrayindex(regextract(_raw_log ,"for\sthis\sconnection\:\s(\S+)"),0)
| alter src_ipv4 = coalesce(src_ipv4_1 ,src_ipv4_2,src_ipv4_3,src_ipv4_4 ,src_ipv4_5 ,src_ipv4_6),
    src_interface = coalesce(src_interface1,src_interface2,src_interface3,src_interface4,src_interface5),
    target_interface = coalesce(target_interface1,target_interface2,target_interface3,target_interface4),
    state = coalesce(state1,state2),
    outcome = coalesce(outcome1, outcome2,outcome3),
    outcome_reason = coalesce(outcome_reason1 ,outcome_reason2),
    src_process_name = coalesce(src_process_name1,src_process_name2),
    target_ipv4 = coalesce(target_ipv4_1,target_ipv4_2,target_ipv4_3,target_ipv4_4),
    src_mac_addr = coalesce(src_mac_addr1,src_mac_addr2),
    protocol = coalesce(protocol1,protocol2,protocol3)
| alter xdm.event.original_event_type = to_string(event_id),
    xdm.event.id = to_string(event_id),
    xdm.event.description = message,
    xdm.alert.severity = severity,
    xdm.observer.name = observer_name,
    xdm.database.name = ddb_name,
    xdm.target.ipv4 = target_ipv4,
    xdm.source.ipv4 = src_ipv4,
    xdm.source.host.mac_addresses = arraycreate(src_mac_addr),
    xdm.target.host.mac_addresses = arraycreate(target_mac_addr),
    xdm.source.interface = src_interface,
    xdm.source.zone = src_interface,
    xdm.target.interface = target_interface,
    xdm.target.zone = target_interface,
    xdm.target.resource.value = state,
    xdm.alert.description = alert_msg,
    xdm.target.process.pid = to_integer(process_id),
    xdm.source.user.username = src_username,
    xdm.network.rule = coalesce(network_rule,connection_type),
    xdm.network.ip_protocol = if(protocol="HOPOPT",XDM_CONST.IP_PROTOCOL_HOPOPT, protocol="ICMP",XDM_CONST.IP_PROTOCOL_ICMP, protocol="IGMP",XDM_CONST.IP_PROTOCOL_IGMP, protocol="GGP",XDM_CONST.IP_PROTOCOL_GGP, protocol="IP",XDM_CONST.IP_PROTOCOL_IP, protocol="ST",XDM_CONST.IP_PROTOCOL_ST, protocol="TCP",XDM_CONST.IP_PROTOCOL_TCP, protocol="CBT",XDM_CONST.IP_PROTOCOL_CBT, protocol="EGP",XDM_CONST.IP_PROTOCOL_EGP, protocol="IGP",XDM_CONST.IP_PROTOCOL_IGP, protocol="BBN_RCC_MON",XDM_CONST.IP_PROTOCOL_BBN_RCC_MON, protocol="NVP_II",XDM_CONST.IP_PROTOCOL_NVP_II, protocol="PUP",XDM_CONST.IP_PROTOCOL_PUP, protocol="ARGUS",XDM_CONST.IP_PROTOCOL_ARGUS, protocol="EMCON",XDM_CONST.IP_PROTOCOL_EMCON, protocol="XNET",XDM_CONST.IP_PROTOCOL_XNET, protocol="CHAOS",XDM_CONST.IP_PROTOCOL_CHAOS, protocol="UDP",XDM_CONST.IP_PROTOCOL_UDP, protocol="MUX",XDM_CONST.IP_PROTOCOL_MUX, protocol="DCN_MEAS",XDM_CONST.IP_PROTOCOL_DCN_MEAS, protocol="HMP",XDM_CONST.IP_PROTOCOL_HMP, protocol="PRM",XDM_CONST.IP_PROTOCOL_PRM, protocol="XNS_IDP",XDM_CONST.IP_PROTOCOL_XNS_IDP, protocol="TRUNK_1",XDM_CONST.IP_PROTOCOL_TRUNK_1, protocol="TRUNK_2",XDM_CONST.IP_PROTOCOL_TRUNK_2, protocol="LEAF_1",XDM_CONST.IP_PROTOCOL_LEAF_1, protocol="LEAF_2",XDM_CONST.IP_PROTOCOL_LEAF_2, protocol="RDP",XDM_CONST.IP_PROTOCOL_RDP, protocol="IRTP",XDM_CONST.IP_PROTOCOL_IRTP, protocol="ISO_TP4",XDM_CONST.IP_PROTOCOL_ISO_TP4, protocol="NETBLT",XDM_CONST.IP_PROTOCOL_NETBLT, protocol="MFE_NSP",XDM_CONST.IP_PROTOCOL_MFE_NSP, protocol="MERIT_INP",XDM_CONST.IP_PROTOCOL_MERIT_INP, protocol="DCCP",XDM_CONST.IP_PROTOCOL_DCCP, protocol="3PC",XDM_CONST.IP_PROTOCOL_3PC, protocol="IDPR",XDM_CONST.IP_PROTOCOL_IDPR, protocol="XTP",XDM_CONST.IP_PROTOCOL_XTP, protocol="DDP",XDM_CONST.IP_PROTOCOL_DDP, protocol="IDPR_CMTP",XDM_CONST.IP_PROTOCOL_IDPR_CMTP, protocol="TP",XDM_CONST.IP_PROTOCOL_TP, protocol="IL",XDM_CONST.IP_PROTOCOL_IL, protocol="IPV6",XDM_CONST.IP_PROTOCOL_IPV6, protocol="SDRP",XDM_CONST.IP_PROTOCOL_SDRP, protocol="IPV6_ROUTE",XDM_CONST.IP_PROTOCOL_IPV6_ROUTE, protocol="IPV6_FRAG",XDM_CONST.IP_PROTOCOL_IPV6_FRAG, protocol="IDRP",XDM_CONST.IP_PROTOCOL_IDRP, protocol="RSVP",XDM_CONST.IP_PROTOCOL_RSVP, protocol="GRE",XDM_CONST.IP_PROTOCOL_GRE, protocol="DSR",XDM_CONST.IP_PROTOCOL_DSR, protocol="BNA",XDM_CONST.IP_PROTOCOL_BNA, protocol="ESP",XDM_CONST.IP_PROTOCOL_ESP, protocol="AH",XDM_CONST.IP_PROTOCOL_AH, protocol="I_NLSP",XDM_CONST.IP_PROTOCOL_I_NLSP, protocol="SWIPE",XDM_CONST.IP_PROTOCOL_SWIPE, protocol="NARP",XDM_CONST.IP_PROTOCOL_NARP, protocol="MOBILE",XDM_CONST.IP_PROTOCOL_MOBILE, protocol="TLSP",XDM_CONST.IP_PROTOCOL_TLSP, protocol="SKIP",XDM_CONST.IP_PROTOCOL_SKIP, protocol="IPV6_ICMP",XDM_CONST.IP_PROTOCOL_IPV6_ICMP, protocol="IPV6_NONXT",XDM_CONST.IP_PROTOCOL_IPV6_NONXT, protocol="IPV6_OPTS",XDM_CONST.IP_PROTOCOL_IPV6_OPTS, protocol="CFTP",XDM_CONST.IP_PROTOCOL_CFTP, protocol="SAT_EXPAK",XDM_CONST.IP_PROTOCOL_SAT_EXPAK, protocol="KRYPTOLAN",XDM_CONST.IP_PROTOCOL_KRYPTOLAN, protocol="RVD",XDM_CONST.IP_PROTOCOL_RVD, protocol="IPPC",XDM_CONST.IP_PROTOCOL_IPPC, protocol="SAT_MON",XDM_CONST.IP_PROTOCOL_SAT_MON, protocol="VISA",XDM_CONST.IP_PROTOCOL_VISA, protocol="IPCV",XDM_CONST.IP_PROTOCOL_IPCV, protocol="CPNX",XDM_CONST.IP_PROTOCOL_CPNX, protocol="CPHB",XDM_CONST.IP_PROTOCOL_CPHB, protocol="WSN",XDM_CONST.IP_PROTOCOL_WSN, protocol="PVP",XDM_CONST.IP_PROTOCOL_PVP, protocol="BR_SAT_MON",XDM_CONST.IP_PROTOCOL_BR_SAT_MON, protocol="SUN_ND",XDM_CONST.IP_PROTOCOL_SUN_ND, protocol="WB_MON",XDM_CONST.IP_PROTOCOL_WB_MON, protocol="WB_EXPAK",XDM_CONST.IP_PROTOCOL_WB_EXPAK, protocol="ISO_IP",XDM_CONST.IP_PROTOCOL_ISO_IP, protocol="VMTP",XDM_CONST.IP_PROTOCOL_VMTP, protocol="SECURE_VMTP",XDM_CONST.IP_PROTOCOL_SECURE_VMTP, protocol="VINES",XDM_CONST.IP_PROTOCOL_VINES, protocol="TTP",XDM_CONST.IP_PROTOCOL_TTP, protocol="NSFNET_IGP",XDM_CONST.IP_PROTOCOL_NSFNET_IGP, protocol="DGP",XDM_CONST.IP_PROTOCOL_DGP, protocol="TCF",XDM_CONST.IP_PROTOCOL_TCF, protocol="EIGRP",XDM_CONST.IP_PROTOCOL_EIGRP, protocol="OSPFIGP",XDM_CONST.IP_PROTOCOL_OSPFIGP, protocol="SPRITE_RPC",XDM_CONST.IP_PROTOCOL_SPRITE_RPC, protocol="LARP",XDM_CONST.IP_PROTOCOL_LARP, protocol="MTP",XDM_CONST.IP_PROTOCOL_MTP, protocol="AX25",XDM_CONST.IP_PROTOCOL_AX25, protocol="IPIP",XDM_CONST.IP_PROTOCOL_IPIP, protocol="MICP",XDM_CONST.IP_PROTOCOL_MICP, protocol="SCC_SP",XDM_CONST.IP_PROTOCOL_SCC_SP, protocol="ETHERIP",XDM_CONST.IP_PROTOCOL_ETHERIP, protocol="ENCAP",XDM_CONST.IP_PROTOCOL_ENCAP, protocol="GMTP",XDM_CONST.IP_PROTOCOL_GMTP, protocol="IFMP",XDM_CONST.IP_PROTOCOL_IFMP, protocol="PNNI",XDM_CONST.IP_PROTOCOL_PNNI, protocol="PIM",XDM_CONST.IP_PROTOCOL_PIM, protocol="ARIS",XDM_CONST.IP_PROTOCOL_ARIS, protocol="SCPS",XDM_CONST.IP_PROTOCOL_SCPS, protocol="QNX",XDM_CONST.IP_PROTOCOL_QNX, protocol="AN",XDM_CONST.IP_PROTOCOL_AN, protocol="IPCOMP",XDM_CONST.IP_PROTOCOL_IPCOMP, protocol="COMPAQ_PEER",XDM_CONST.IP_PROTOCOL_COMPAQ_PEER, protocol="IPX_IN_IP",XDM_CONST.IP_PROTOCOL_IPX_IN_IP, protocol="VRRP",XDM_CONST.IP_PROTOCOL_VRRP, protocol="PGM",XDM_CONST.IP_PROTOCOL_PGM, protocol="L2TP",XDM_CONST.IP_PROTOCOL_L2TP, protocol="DDX",XDM_CONST.IP_PROTOCOL_DDX, protocol="IATP",XDM_CONST.IP_PROTOCOL_IATP, protocol="STP",XDM_CONST.IP_PROTOCOL_STP, protocol="SRP",XDM_CONST.IP_PROTOCOL_SRP, protocol="UTI",XDM_CONST.IP_PROTOCOL_UTI, protocol="SMP",XDM_CONST.IP_PROTOCOL_SMP, protocol="SM",XDM_CONST.IP_PROTOCOL_SM, protocol="PTP",XDM_CONST.IP_PROTOCOL_PTP, protocol="ISIS",XDM_CONST.IP_PROTOCOL_ISIS, protocol="FIRE",XDM_CONST.IP_PROTOCOL_FIRE, protocol="CRTP",XDM_CONST.IP_PROTOCOL_CRTP, protocol="CRUDP",XDM_CONST.IP_PROTOCOL_CRUDP, protocol="SSCOPMCE",XDM_CONST.IP_PROTOCOL_SSCOPMCE, protocol="IPLT",XDM_CONST.IP_PROTOCOL_IPLT, protocol="SPS",XDM_CONST.IP_PROTOCOL_SPS, protocol="PIPE",XDM_CONST.IP_PROTOCOL_PIPE, protocol="SCTP",XDM_CONST.IP_PROTOCOL_SCTP, protocol="FC",XDM_CONST.IP_PROTOCOL_FC, protocol="RSVP_E2E_IGNORE",XDM_CONST.IP_PROTOCOL_RSVP_E2E_IGNORE, protocol="MOBILITY",XDM_CONST.IP_PROTOCOL_MOBILITY, protocol="UDPLITE",XDM_CONST.IP_PROTOCOL_UDPLITE, protocol="MPLS_IN_IP",XDM_CONST.IP_PROTOCOL_MPLS_IN_IP,to_string(protocol)),
    xdm.target.application.name = target_app_name,
    xdm.event.outcome = if(outcome = "successful",XDM_CONST.OUTCOME_SUCCESS,outcome = "failed",XDM_CONST.OUTCOME_FAILED,null),
    xdm.event.outcome_reason = outcome_reason,
    xdm.event.type = event_type,
    xdm.source.process.name = src_process_name,
    xdm.network.tls.client_certificate.serial = client_certificate_serial,
    xdm.target.port = target_port;


[MODEL: dataset = cisco_asr_raw, content_id="CiscoASR"]
alter
    get_node_id1 = arraystring(regextract(_raw_log, "\:([^:]+):\S{3}\s\d{2}\s\d{2}:\d{2}:\d{2}"), ""),
    get_node_id2 = arraystring(regextract(_raw_log, "([^\:]+)\:[^\:]+\d{2}:\d{2}:\d{2}[^\:]+\:\s[^\[]+\[\d+\]"), ""),
    get_process_name = arraystring(regextract(_raw_log, "(\S+)\[\d+\][\s:]+\%"), ""),
    get_pid = arraystring(regextract(_raw_log, "\S+\[(\d+)\][\s:]+\%"), ""),
    get_msg_group = arraystring(regextract(_raw_log, "\S+\[\d+\][\s:]+\%(.*)\-\d+\-"), ""),
    get_msg_group2 = arraystring(regextract(_raw_log, "\%(.*)\-\d+\-"), ""),
    get_severity = arraystring(regextract(_raw_log, "\S+\[\d+\][\s:]+\%.*\-(\d+)\-"), ""),
    get_severity2 = arraystring(regextract(_raw_log, "\%.*\-(\d+)\-"), ""),
    get_msg_code = arraystring(regextract(_raw_log, "\S+\[\d+\][\s:]+\%.*\-\d+\-([^\s\:]+)"), ""),
    get_msg_code2 = arraystring(regextract(_raw_log, "\%.*\-\d+\-([^\s\:]+)"), ""),
    get_msg = arraystring(regextract(_raw_log, "\S+\[\d+\][\s:]+\%.*\-\d+\-[^\s]+[\s:]+(.*)"), ""),
    get_msg2 = arraystring(regextract(_raw_log, "\%.*\-\d+\-[^\s]+[\s:]+(.*)"), "")
| alter
    c_get_msg_group = if(get_msg_group !~= "\S", null, get_msg_group),
    c_get_severity = if(get_severity !~= "\S", null, get_severity),
    c_get_msg_code = if(get_msg_code !~= "\S", null, get_msg_code),
    c_get_msg = if(get_msg !~= "\S", null, get_msg)
| alter
    check_node_id = if(get_node_id2 ~= "\S+\/\S+\/\S+", arraystring(regextract(get_node_id2, "\s(\S+)\s\S+\/\S+\/\S+"), ""),get_node_id1),
    check_msg_group = coalesce(c_get_msg_group, get_msg_group2),
    check_severity = coalesce(c_get_severity, get_severity2),
    check_msg_code = coalesce(c_get_msg_code, get_msg_code2),
    check_msg = coalesce(c_get_msg, get_msg2)
| alter
    xdm.source.host.hostname = check_node_id,
    xdm.source.process.name = get_process_name,
    xdm.source.process.pid = to_integer(get_pid),
    xdm.target.resource.type = check_msg_group,
    xdm.alert.severity = check_severity,
    xdm.target.resource.sub_type = check_msg_code,
    xdm.event.description = check_msg;


[MODEL: dataset="cisco_catalyst_raw", content_id="CiscoCatalyst"]
/* ----------------------------------------------------------------------------------------------------
    Cisco System Log Message General Format:  
    seq no:timestamp: %facility-severity-MNEMONIC:description 
    https://www.cisco.com/c/en/us/td/docs/routers/access/wireless/software/guide/SysMsgLogging.html#wp1054470)
   ---------------------------------------------------------------------------------------------------*/
filter _raw_log ~= "%\S+\-\d\-\S+:"
| alter // extract out-of-the-box parsed fields
    event_name = uppercase(parsed_fields -> mnemonic), 
    facility = uppercase(parsed_fields -> facility), 
    msg = parsed_fields -> description,
    seq_number = parsed_fields -> sequence_number,
    severity = parsed_fields -> severity
| alter // extract dynamic fields from the syslog message description 
    change_state = arrayindex(regextract(msg, "\,\s(changed\sstate\sto[a-zA-Z\s]+)"), 0),
    client_mac_address = coalesce(
        arrayindex(regextract(msg, "from MAC address\s+([\da-fA-F]{6}\-[\da-fA-F]{6})"), 0),
        arrayindex(regextract(msg, "client\s*\(((?:[\da-fA-F]{4}\.){2}[\da-fA-F]{4})\)"), 0),
        arrayindex(regextract(msg, "(?:Host|Client MAC|sourced by)\s+((?:[\da-fA-F]{4}\.){2}[\da-fA-F]{4})"), 0)),
    device_hostname = arrayindex(regextract(_raw_log ,"\<\d+\>\d+\:\s([\w+\-\_]+)\:\s\d+\:"), 0),
    device_product_id = arrayindex(regextract(msg ,"\[PID\:([^\,]+)\,"), 0), 
    device_serial_number = arrayindex(regextract(msg , ",SN\:([\w\-]+)"), 0),
    interface = coalesce(
        arrayindex(regextract(msg ,"Interface\s([^\/]+\/\d+\/*\d*)"), 0),
        arrayindex(regextract(msg ,"interface\sname\s([^\/]+\/\d+\/\d+)"), 0),
        arrayindex(regextract(msg , "Interface\s([\w\-]+)"), 0),
        arrayindex(regextract(msg , "on interface\s+(\S+)\s+by"), 0),
        arrayindex(regextract(msg , "(?:on|port|Unblocking|Blocking)\s+(\w+\/\w+\/\w+)"), 0),
        arrayindex(regextract(msg , "^(\w+\/\w+\/\w+):"), 0)),
    outcome_reason = coalesce(
        arrayindex(regextract(msg, "\sreason:\s*(.+?)\."), 0), 
        arrayindex(regextract(msg, "with reason\s*\(([^\)]+)\)"), 0),
        arrayindex(regextract(msg, "\[Reason:\s*([^\]]+)\]"), 0)),
    process_name = coalesce(
        arrayindex(regextract(msg ,"by\sprocess\s(.+?)\s+(?:Process|Policy\smanager)"), 0),
        arrayindex(regextract(msg ,"process\s*\=\s*([^\.]+)\."), 0)),
    server_ipv4 = arrayindex(regextract(msg, "[Ss]erver(?:\s+not\s+found)?(?:\s+at)?\s+((?:\d{1,3}\.){3}\d{1,3})"), 0),
    server_name = arrayindex(regextract(msg, "Server\s+([\w\-]+)\s+is"), 0),
    session_id = coalesce(
        arrayindex(regextract(msg, "AuditSessionID (\w+)"), 0),
        arrayindex(regextract(msg, "session (\w+)\("), 0)),
    source_ipv4 = coalesce(
        arrayindex(regextract(msg , "from\s+((?:\d{1,3}\.){3}\d{1,3})"), 0),
        arrayindex(regextract(msg , "from\s+host\s+((?:\d{1,3}\.){3}\d{1,3})"), 0),
        arrayindex(regextract(msg , "list\s\d+\spermitted\s((?:\d{1,3}\.){3}\d{1,3})"), 0),
        arrayindex(regextract(msg ,"\[Source\:\s((?:\d{1,3}\.){3}\d{1,3})\]"), 0),
        arrayindex(regextract(msg ,"session\s\d+\(((?:\d{1,3}\.){3}\d{1,3})\)"), 0),
        arrayindex(regextract(msg ,"connection\sfrom\s((?:\d{1,3}\.){3}\d{1,3})"), 0),
        arrayindex(regextract(msg ,"to\shost\s((?:\d{1,3}\.){3}\d{1,3})\s"), 0),
        arrayindex(regextract(msg ,"address\s((?:\d{1,3}\.){3}\d{1,3})\son"), 0),
        arrayindex(regextract(msg ,"neighbor\s((?:\d{1,3}\.){3}\d{1,3})"), 0),
        arrayindex(regextract(msg , "on\s+\w+\s*\(((?:\d{1,3}\.){3}\d{1,3})"), 0),
        arrayindex(regextract(msg ,"\(((?:\d{1,3}\.){3}\d{1,3})\)\)\,\suser"), 0)),
    target_ipv4 = arrayindex(regextract(msg ,"to\shost\s((?:\d{1,3}\.){3}\d{1,3})\s"), 0),
    target_port = coalesce(
        arrayindex(regextract(msg ,"\[localport\:\s(\d+)\]"), 0), 
        arrayindex(regextract(msg ,"to\shost\s\d+\.\d+\.\d+\.\d+\sport\s(\d+)"), 0)),
    username = coalesce(
        arrayindex(regextract(msg ,"user\s+name\s*:\s*([\w\-]+)"), 0),
        arrayindex(regextract(msg ,"User\s+\'([^\']+)\'\s+\w+"), 0),
        arrayindex(regextract(msg ,"User\s+(\S+)\s+has"), 0),
        arrayindex(regextract(msg ,"\[user\:\s([^\]]+)\]"), 0),
        arrayindex(regextract(msg ,"\:\sUser\s(\S+)\s"), 0),
        arrayindex(regextract(msg ,"Username:\s*()"), 0),
        arrayindex(regextract(msg ,"by\s+(\S+)\s+on\s+"), 0),
        arrayindex(regextract(msg ,"\(\d+\.\d+\.\d+\.\d+\)\)\,\suser\s(\S+)"), 0)),
    vlan = arrayindex(regextract(msg, "(?:VID|vid|VLAN|vlan|Vlan|Vlan-id|VLAN-id)\s*:?\s*(\d+)"), 0)
| alter // post-extraction formatting 
    client_mac_formatted = arraystring(regextract(client_mac_address, "[\da-fA-F]{2}"), ":"),
    seq_number = replex(seq_number, "^0+", ""),
    user_domain = arrayindex(regextract(username, "(.+)\\.+"), 0)
| alter // XDM mappings
    xdm.alert.severity = severity,
    xdm.event.description = msg,
        xdm.event.log_level = if(
        severity = "0", XDM_CONST.LOG_LEVEL_EMERGENCY, 
        severity = "1", XDM_CONST.LOG_LEVEL_ALERT , 
        severity = "2", XDM_CONST.LOG_LEVEL_CRITICAL, 
        severity = "3", XDM_CONST.LOG_LEVEL_ERROR, 
        severity = "4", XDM_CONST.LOG_LEVEL_WARNING, 
        severity = "5", XDM_CONST.LOG_LEVEL_NOTICE, 
        severity = "6", XDM_CONST.LOG_LEVEL_INFORMATIONAL, 
        severity = "7", XDM_CONST.LOG_LEVEL_DEBUG),
    xdm.event.outcome = if(
        msg ~= "(?i)ERROR|FAIL|REJECTED|UNABLE|ABORT|INCORRECT|PROBLEM|FAULT|DENY|DENIED|MISMATCH|COLLISIONS|CANNOT|UNREACHABLE|CORRUPTED|NOT FOUND|NOT SUCCEED|UNABLE TO PERMIT|NOT APPLIED|NOT MODIFIED|NOT REACHABLE|CANCELED BECAUSE|CAN\'T REACH", XDM_CONST.OUTCOME_FAILED,
        event_name ~= "SUCCESS" or msg ~= "(?i)SUCCESS|SUCCEEDED", XDM_CONST.OUTCOME_SUCCESS),
    xdm.event.outcome_reason = outcome_reason,
    xdm.event.type = if( // rename vague event names to a meaningful name if necessary 
        event_name = "FAIL" and msg ~= "(?i)Authorization failed", "AUTHORIZATION_FAILED",
        event_name = "FAIL" and msg ~= "(?i)Authentication failed", "AUTHENTICATION_FAILED",
        event_name),
    xdm.network.session_id = seq_number,
    xdm.observer.action = change_state,
    xdm.observer.name = device_hostname,
    xdm.observer.type = facility,
    xdm.observer.unique_identifier = coalesce(device_serial_number, device_hostname),
    xdm.session_context_id = session_id,
    xdm.source.host.device_id = coalesce(device_serial_number, device_hostname),
    xdm.source.host.device_model = device_product_id,
    xdm.source.host.hardware_uuid = device_serial_number,
    xdm.source.host.mac_addresses = if(client_mac_formatted != null, arraycreate(client_mac_formatted)),
    xdm.source.ipv4 = coalesce(source_ipv4, _final_reporting_device_ip),
    xdm.source.process.name = process_name,
    xdm.source.user.domain = user_domain,
    xdm.source.user.username = username,
    xdm.source.vlan = to_integer(vlan),
    xdm.target.host.hostname = server_name,
    xdm.target.interface = interface,
    xdm.target.ipv4 = coalesce(server_ipv4, target_ipv4),
    xdm.target.port = to_integer(target_port);


/* ------------------------------------------------
    Alternative Message Format:  
    origin_device_id event_id facility: description 
   -----------------------------------------------*/
filter _raw_log !~= "%\S+\-\d\-\S+:"
| alter // extract out-of-the-box parsed fields
    device_ip = parsed_fields -> device_ip,
    event_id = to_integer(parsed_fields -> event_id),
    facility = uppercase(parsed_fields -> facility), 
    msg = parsed_fields -> description,
    severity = parsed_fields -> severity
| alter // Extract the varying dynamic fields from the message payload 
    access_mode = if( 
        event_id in (2400, 2401, 2402, 2403, 2404, 2405, 2411, 3210, 3216, 3217, 3218, 3356, 3357), arrayindex(regextract(msg, "^(\S+) client"), 0),
        event_id in (3351, 3352, 3353, 3354, 3355), arrayindex(regextract(msg, "^(\S+)\s*\:"), 0), 
        event_id in (3211, 3212, 3213), arrayindex(regextract(msg, "received on port \S+ for (\S+) client"), 0),
        event_id = 3350, arrayindex(regextract(msg, "^(\S+) unable to permit client"), 0),
        event_id in (5212, 5213, 5722, 5724, 5797, 5798, 5799, 5800, 5801, 5802, 5803, 5804, 5805, 5806, 5814), arrayindex(regextract(msg, "to (\S+) client"), 0)),
    cmd = if(
        event_id in (992, 993), arrayindex(regextract(msg, "command (.+)\."), 0),
        event_id in (3393, 3394), arrayindex(regextract(msg, "[Cc]ommand (.+) is"), 0)),
    dhcp_server_ip = if(event_id = 5731, arrayindex(regextract(msg, "dhcp_server_ip ((?:\d{1,3}\.){3}\d{1,3})"), 0)),
    gateway_ip = if(event_id = 5451, arrayindex(regextract(msg, "vlan \S+ \(?(\S+)\)?"), 0)), 
    gateway_name = if(event_id in (5595, 5596, 5597, 5598, 5599, 5600), arrayindex(regextract(msg, "gateway (\S+)"), 0)), 
    ip_mask = if(
        event_id = 17, arrayindex(regextract(msg, "mask ((?:\d{1,3}\.){3}\d{1,3}\/\d{1,2})"), 0),
        event_id in (25, 26),  arrayindex(regextract(msg, "address ((?:\d{1,3}\.){3}\d{1,3}\/\d{1,2})"), 0),
        event_id = 753, arrayindex(regextract(msg, "failure\:\s*((?:\d{1,3}\.){3}\d{1,3}\/\d{1,2})"), 0)),
    mac_address = if(
        event_id = 5, arrayindex(regextract(msg, "at ((?:[a-fA-F\d]{2}[\-\:]?){5}[a-fA-F\d]{2})"), 0),
        event_id in (20, 21, 288, 334, 5681, 5682, 5683, 5684, 5731), arrayindex(regextract(msg, "(?:mac|MAC)[\s\-]+(?:address|ADDRESS) ((?:[a-fA-F\d]{2}[\-\:]?){5}[a-fA-F\d]{2})"), 0),
        event_id in (845, 952, 958, 959, 960, 961, 2400, 2401, 2402, 2403, 2404, 2405, 2411, 3210, 3273, 3274, 3281, 3283,  3350, 3356, 3357, 3822, 4987), arrayindex(regextract(msg, "(?:mac|MAC)\s*((?:[a-fA-F\d]{2}[\-\:]?){5}[a-fA-F\d]{2})"), 0),
        event_id = 2581, arrayindex(regextract(msg, "MAC address of ((?:[a-fA-F\d]{2}[\-\:]?){5}[a-fA-F\d]{2})"), 0),
        event_id in (354, 858), arrayindex(regextract(msg, "address ((?:[a-fA-F\d]{2}[\-\:]?){5}[a-fA-F\d]{2})"), 0),
        event_id = 348, arrayindex(regextract(msg, "error:\s*((?:[a-fA-F\d]{2}[\-\:]?){5}[a-fA-F\d]{2})"), 0),
        event_id = 352, arrayindex(regextract(msg, "((?:[a-fA-F\d]{2}[\-\:]?){5}[a-fA-F\d]{2}) moved from"), 0),
        event_id = 353, arrayindex(regextract(msg, "Received Update Packet from ((?:[a-fA-F\d]{2}[\-\:]?){5}[a-fA-F\d]{2})"), 0),
        event_id = 355, arrayindex(regextract(msg, "((?:[a-fA-F\d]{2}[\-\:]?){5}[a-fA-F\d]{2}) MISMATCH"), 0),
        event_id = 451, arrayindex(regextract(msg, "Upgrade ((?:[a-fA-F\d]{2}[\-\:]?){5}[a-fA-F\d]{2})"), 0),
        event_id = 452, arrayindex(regextract(msg, "config with ((?:[a-fA-F\d]{2}[\-\:]?){5}[a-fA-F\d]{2})"), 0),
        event_id in (453, 3282), arrayindex(regextract(msg, "switch ((?:[a-fA-F\d]{2}[\-\:]?){5}[a-fA-F\d]{2})"), 0),
        event_id in (592, 594), arrayindex(regextract(msg, "\S+\s*:\s*(?:Move )?((?:[a-fA-F\d]{2}[\-\:]?){5}[a-fA-F\d]{2})"), 0),
        event_id in (613, 2209), arrayindex(regextract(msg, "MAC add for ((?:[a-fA-F\d]{2}[\-\:]?){5}[a-fA-F\d]{2})"), 0),
        event_id in (5212, 5213, 5411, 5722, 5724), arrayindex(regextract(msg, "to ((?:[a-fA-F\d]{2}[\-\:]?){5}[a-fA-F\d]{2})"), 0),
        event_id in (839, 3816), arrayindex(regextract(msg, "from \S+\s*:\s*((?:[a-fA-F\d]{2}[\-\:]?){5}[a-fA-F\d]{2})"), 0),
        event_id in (870, 2690, 4548, 4556, 4565), arrayindex(regextract(msg, "from\s*((?:[a-fA-F\d]{2}[\-\:]?){5}[a-fA-F\d]{2})"), 0),
        event_id = 915, arrayindex(regextract(msg, "source:\s*((?:[a-fA-F\d]{2}[\-\:]?){5}[a-fA-F\d]{2})"), 0),
        event_id in (979, 4588, 4880), arrayindex(regextract(msg, "((?:[a-fA-F\d]{2}[\-\:]?){5}[a-fA-F\d]{2}) on port"), 0),
        event_id = 2431, arrayindex(regextract(msg, "multicast ((?:[a-fA-F\d]{2}[\-\:]?){5}[a-fA-F\d]{2})"), 0),
        event_id in (699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 714, 716, 718, 719, 720, 721, 722, 856, 2539, 2540, 2541, 3211, 3212, 3213, 3214, 3215, 3216, 3217, 3218, 3351, 3352, 3355, 3358, 4575, 5563, 5619, 5620, 5621, 5723, 5726, 5743, 5744, 5747, 5748, 5797, 5798, 5799, 5800, 5801, 5802, 5803, 5804, 5805, 5806, 5906, 5907, 5940, 5941), arrayindex(regextract(msg, "(?:client|Client):?\s*((?:[a-fA-F\d]{2}[\-\:]?){5}[a-fA-F\d]{2})"), 0),
        event_id in (2720, 3354, 4590, 5385), arrayindex(regextract(msg, "for ((?:[a-fA-F\d]{2}[\-\:]?){5}[a-fA-F\d]{2})"), 0),
        event_id = 3280, arrayindex(regextract(msg, "Member ((?:[a-fA-F\d]{2}[\-\:]?){5}[a-fA-F\d]{2})"), 0),
        event_id in (4572, 4573, 4874), arrayindex(regextract(msg, "packet ((?:[a-fA-F\d]{2}[\-\:]?){5}[a-fA-F\d]{2})"), 0),
        event_id = 4980, arrayindex(regextract(msg, "got ((?:[a-fA-F\d]{2}[\-\:]?){5}[a-fA-F\d]{2})"), 0),
        event_id in (5120, 5121, 5143, 5144, 5145, 5146), arrayindex(regextract(msg, "device ((?:[a-fA-F\d]{2}[\-\:]?){5}[a-fA-F\d]{2})"), 0),
        event_id in (5122, 5123), arrayindex(regextract(msg, "Aruba AP ((?:[a-fA-F\d]{2}[\-\:]?){5}[a-fA-F\d]{2})"), 0),
        event_id in (5406, 5407), arrayindex(regextract(msg, "user ((?:[a-fA-F\d]{2}[\-\:]?){5}[a-fA-F\d]{2})"), 0),
        coalesce( // default fallback 
            arrayindex(regextract(msg, "from MAC address\s+([\da-fA-F]{6}\-[\da-fA-F]{6})"), 0),
            arrayindex(regextract(msg, "client\s*\(((?:[\da-fA-F]{4}\.){2}[\da-fA-F]{4})\)"), 0),
            arrayindex(regextract(msg, "(?:Host|Client MAC|sourced by)\s+((?:[\da-fA-F]{4}\.){2}[\da-fA-F]{4})"), 0))),
    outcome_reason = if(
        event_id in (5076, 5230, 5240, 5244, 5246, 5261), rtrim(arrayindex(regextract(msg, "[Ee]rror:?\s*(?:\=?\s*)?(.+)"), 0), "."),
        event_id in (2204, 5254), arrayindex(regextract(msg, "error:?\s*(?:\=?\s*)?(.+) (?:occurred|on)"), 0),
        event_id = 5682, arrayindex(regextract(msg, "reason (.+)\-\s*server"), 0),
        event_id = 5222, arrayindex(regextract(msg, "server:\s*(.+)"), 0),
        event_id in (5236, 5239, 5243, 5247, 5248, 5249, 5250, 5251, 5233, 5234), arrayindex(regextract(msg, "with error (?:\=\s*)(.+)"), 0),
        event_id in (5241, 5242), arrayindex(regextract(msg, "string is (.+)"), 0),
        event_id in (132, 134, 4187, 4188), arrayindex(regextract(msg, "msg:? (.+)"), 0),
        event_id = 542, arrayindex(regextract(msg, "Skipped:\s*(.+)"), 0),
        event_id in (2614, 2218), arrayindex(regextract(msg, "failed:\s*(.+)"), 0),
        event_id = 609, arrayindex(regextract(msg, "from \S+ \(?(.+?)\)?\s*\-"), 0),
        event_id = 2419, arrayindex(regextract(msg, "Received (.+) packet"), 0),
        event_id in (5081, 5619), arrayindex(regextract(msg, " as (\.+)\."), 0),
        event_id in (5602, 5604, 5606, 5623, 5867, 5869), arrayindex(regextract(msg, "because of (.+)\."), 0),
        event_id = 158, arrayindex(regextract(msg, "line \S+\s*(.+)"), 0),
        event_id in (686, 687, 3032, 3033, 3841, 3842, 3843), msg,
        event_id in (3380, 3381), arrayindex(regextract(msg, "ERR:\s*(.+)"), 0),
        event_id in (648, 2007, 2413, 3370), arrayindex(regextract(msg, "failed:?\s*(.+)"), 0),
        event_id = 4252, arrayindex(regextract(msg, "start:\s*(.+)"), 0),
        event_id = 3258, arrayindex(regextract(msg, "failed due to \s*(.+)"), 0),
        event_id = 655, arrayindex(regextract(msg, "VLAN\.\s*(.+)"), 0),
        event_id = 669, arrayindex(regextract(msg, "caution (.+)"), 0),
        event_id = 5620, arrayindex(regextract(msg, "role (.+)"), 0),
        event_id in (3152, 3278, 3279, 4872, 5407, 5408), arrayindex(regextract(msg, "[Rr]eason:?\s*(.+)"), 0),
        event_id = 63, arrayindex(regextract(msg, "down:\s*(.+)"), 0),
        event_id = 273, arrayindex(regextract(msg, "\S+\s*\-\s*(.+)"), 0),
        event_id = 4892, arrayindex(regextract(msg, "Got (.+)\."), 0),
        event_id = 3006, arrayindex(regextract(msg, "reboot: (.+)"), 0),
        event_id in (4942, 4943, 4944, 4945, 4946, 4947, 4948, 4949), arrayindex(regextract(msg, "failed\s*;\s*(.+)"), 0)),
    policy_name = if(
        event_id = 5816, arrayindex(regextract(msg, "list \'(.+?)\'"), 0),
        event_id = 5817, arrayindex(regextract(msg, "class \'(.+?)\'"), 0),
        event_id in (2655, 2659, 2661),  arrayindex(regextract(msg, "apply \'(.+?)\'"), 0),
        event_id in (2637, 2638, 2652, 2653, 2654, 2656, 3025, 5215, 5745, 5746), arrayindex(regextract(msg, "[Pp]olicy (?:is\s+)?\'(.+?)\'"), 0)),
    interface_port_id = if(
        event_id in (76, 77, 324, 725, 826, 827, 828, 840, 841, 844, 848, 849, 884, 885, 886, 887, 888, 889, 927, 972, 975, 2671, 3827, 3828, 4170, 4171, 4300, 4301, 4584, 4593, 4646, 4647, 5161, 5162, 5834), arrayindex(regextract(msg, "^[Pp]ort ([\w\/]+)"), 0),
        event_id in (725, 826, 827, 848, 849, 885, 927, 2671, 3827, 3828, 4170, 4171, 4300, 4301, 4646, 4647, 5161, 5162), arrayindex(regextract(msg, "^Port ([\w\/]+) (?:with|released|changed|inhibited|blocked|unblocked|disabled|has|is|\-)"), 0), 
        event_id in (346, 347, 348, 350, 351, 353, 356, 447), arrayindex(regextract(msg, "^([\w\/]+)\s*[\-]+\s*(?:ACK|Received|detected|initialized|established|not established)"), 0), // 
        event_id in (822, 823), arrayindex(regextract(msg, "^(?:Created|Deleted) ([\w\/]+)"), 0), 
        event_id in (883, 3381, 3815), arrayindex(regextract(msg, "Port ([\w\/]+) (?:has|communications|moved)"), 0), 
        event_id in (2640, 2641, 2642, 2643, 2644), arrayindex(regextract(msg, "src I\/F ([\w\/]+) (?:is|has)"), 0), 
        event_id in (4667, 4670), arrayindex(regextract(msg, "on Interface ([\w\/]+)"), 0), 
        event_id = 357, arrayindex(regextract(msg, "^([\w\/]+) load balance version"), 0), 
        event_id = 444, arrayindex(regextract(msg, "^([\w\/]+): received"), 0), 
        event_id = 453, arrayindex(regextract(msg, "detected on ([\w\/]+)"), 0),
        event_id = 520, arrayindex(regextract(msg, "Ports ([\w\/]+):"), 0), 
        event_id = 592, arrayindex(regextract(msg, "Move \S+ to ([\w\/]+) denied"), 0), 
        event_id = 825, arrayindex(regextract(msg, "PORT-MAP (?:removed from|added to) ([\w\/]+)"), 0), 
        event_id = 2639, arrayindex(regextract(msg, "from ([\w\/]+) interface"), 0), 
        event_id = 4573, arrayindex(regextract(msg, "Invalid DHCPv6 packet \S+\.?\s*([\w\/]+)"), 0), 
        event_id = 4633, arrayindex(regextract(msg, "Mac-notify traps ([\w\/]+)"), 0), 
        event_id = 4986, arrayindex(regextract(msg, "enabled port ([\w\/]+)"), 0), 
        event_id = 5052, arrayindex(regextract(msg, "^Configuration conversion for \S+ ([\w\/]+)"), 0), 
        arrayindex(regextract(msg, "\s+[Pp]ort ([\w\/]+)"), 0)), // General fall back
    src_ip = if( 
        event_id in (3, 3087, 5328), arrayindex(regextract(msg, "to (\S+)"), 0),
        event_id in (11, 91, 97, 98, 99, 112, 236, 237, 419, 468, 469, 470, 609, 610, 611, 618, 619, 620, 621, 622, 636, 637, 639, 640, 754, 982, 983, 984, 985, 2205, 2206, 2207, 2210, 2211, 2219, 2220, 2419, 2420, 2421, 2422, 2425, 2667, 2684, 2686, 3310, 3311, 3318, 3345, 3362, 3363, 3387, 3390, 4215, 4216, 4241, 4242, 4244, 4245, 4281, 4542, 4558, 456, 4575, 4832, 4834, 4872, 4873, 5005, 5006, 5016, 5312, 5313, 5314, 5329, 5653), arrayindex(regextract(msg, "from (\S+)"), 0),
        event_id in (12, 13, 3167), arrayindex(regextract(msg, "on (\S+)"), 0),
        event_id in (16, 86, 748, 749, 2430, 2581, 2582, 3130, 4243, 4261, 4263, 4276, 4782, 4875, 5025, 5026, 5034, 5177, 5358), arrayindex(regextract(msg, "[Aa]ddress:? (\S+)"), 0),
        event_id in (612, 2208, 5017), arrayindex(regextract(msg, "from rtr (\S+)"), 0),
        event_id in (614, 623), arrayindex(regextract(msg, "flow (\S+)"), 0),
        event_id in (617, 625, 626, 628, 694, 695, 696, 806, 917, 5013), arrayindex(regextract(msg, "IP (\S+)"), 0),
        event_id in (755, 5012, 5014), arrayindex(regextract(msg, "flow g?\s*\S+\s*\-?\s*s?\s*(\S+)"), 0),
        event_id in (850, 854, 3319, 3320, 4546, 4913, 5401), arrayindex(regextract(msg, "(?:Server|server) (\S+)"), 0),
        event_id in (864, 4552), arrayindex(regextract(msg, "[Rr]eading (\S+)"), 0),
        event_id in (979, 4877, 4880), arrayindex(regextract(msg, "for (\S+),?"), 0),
        event_id in (981, 4589), arrayindex(regextract(msg, "Access denied (\S+)\s*\-\>"), 0),
        event_id in (2214, 2215, 2221, 2416, 2418, 2423, 2639, 2645, 2646, 2647), arrayindex(regextract(msg, "addr:? (\S+)"), 0),
        event_id in (2530, 2668), arrayindex(regextract(msg, "Client \'?(\S+)\'?"), 0),
        event_id in (4781, 4783), arrayindex(regextract(msg, "interface (\S+)\.?"), 0),
        event_id in (4961, 4962, 4966), arrayindex(regextract(msg, "device (\S+)"), 0),
        event_id in (5020, 5021, 5024), arrayindex(regextract(msg, "Source IPv4 \S+\:\s*(\S+)"), 0),
        event_id in (5059, 5060, 5061, 5062, 5063, 5233, 5310), arrayindex(regextract(msg, "^\s*(\S+)"), 0),
        event_id in (5304, 5305, 5306, 5307, 5308, 5309, 5315, 5316, 5317, 5318), arrayindex(regextract(msg, "peers\s*(\S+)"), 0),
        event_id in (5402, 5403), arrayindex(regextract(msg, "is (\S+)\.?"), 0),
        event_id in (5534, 5535, 5537, 5538), arrayindex(regextract(msg, "source IP:\s*(\S+)\-?"), 0),
        event_id = 5, arrayindex(regextract(msg, "^ARP:\s*(\S+)"), 0), 
        event_id = 17, arrayindex(regextract(msg, "mask (\S+)"), 0),
        event_id = 8, arrayindex(regextract(msg, "Source:\s*(\S+)"), 0),
        event_id = 805, arrayindex(regextract(msg, "block (\S+)"), 0),
        event_id = 908, arrayindex(regextract(msg, "ipAddr:\s+(\S+)"), 0),
        event_id = 911, arrayindex(regextract(msg, ",?\s*(\S+) port"), 0),
        event_id = 2669, msg, 
        event_id = 4638, arrayindex(regextract(msg, "as (\S+)\.?"), 0),
        event_id = 4878, arrayindex(regextract(msg, "binding (\S+)"), 0),
        event_id = 5226, arrayindex(regextract(msg, "Activate (\S+)"), 0)),
    tgt_ip = if( 
        event_id in (119, 411, 5181, 5182, 5183, 5184, 5845), arrayindex(regextract(msg, "server\s+(\S+)"), 0),
        event_id in (120, 122, 413, 416), arrayindex(regextract(msg, "server at\s+(\S+)"), 0),
        event_id in (747, 3340, 3341, 3342, 5226, 5649), arrayindex(regextract(msg, "to (\S+)"), 0),
        event_id in (755, 5012, 5014), arrayindex(regextract(msg, "flow g?\s*(\S+)"), 0),
        event_id in (866, 4554), arrayindex(regextract(msg, "[Ww]riting (\S+)"), 0),
        event_id in (981, 4589), arrayindex(regextract(msg, "Access denied \S+\s*\-\>(\S+)"), 0),
        event_id in (3876, 5809), arrayindex(regextract(msg, "address (\S+)"), 0),
        event_id in (5020, 5021, 5024), arrayindex(regextract(msg, "Destination IPv4 \S+\:\s*(\S+)"), 0),
        event_id in (5311, 5405, 5408, 5419, 5421, 5422), arrayindex(regextract(msg, "[Cc]ontroller (\S+)[,\.]?"), 0),
        event_id in (5404, 5406), arrayindex(regextract(msg, "Controller \S+ (\S+)\.?"), 0),
        event_id in (5534, 5535, 5537, 5538), arrayindex(regextract(msg, "destination IP:\s*(\S+)\-?"), 0),
        event_id in (5685, 5686), arrayindex(regextract(msg, "\s+ip (\S+)"), 0),
        event_id = 8, arrayindex(regextract(msg, "Target:\s*(\S+)"), 0),
        event_id = 420, arrayindex(regextract(msg, "reach (\S+) server"), 0),
        event_id = 315, arrayindex(regextract(msg, "target IP\s+(\S+)"), 0),
        event_id = 317, arrayindex(regextract(msg, "Target IP address\s+(\S+)"), 0),
        event_id = 630, arrayindex(regextract(msg, "group\s+(\S+)"), 0),
        event_id = 631, arrayindex(regextract(msg, "to SUBSYSTEM\s+(\S+)"), 0),
        event_id = 2631, arrayindex(regextract(msg, "at (\S+)\.?"), 0),
        event_id = 4541, arrayindex(regextract(msg, "configure (\S+)"), 0),
        event_id = 5451,  arrayindex(regextract(msg, "^\s*(\S+)"), 0),
        event_id = 5731, arrayindex(regextract(msg, "dhcp_server_ip (\S+)"), 0),
        event_id = 5744, arrayindex(regextract(msg, "subscriber (\S+)"), 0),
        event_id = 5812, arrayindex(regextract(msg, "Fqdn (\S+)"), 0)),
    tgt_user = if(
        event_id = 3368, arrayindex(regextract(_raw_log, "oldest user (\S+)") , 0), 
        event_id = 3386, arrayindex(regextract(_raw_log, "modified for user ([^\.]+)") , 0), 
        event_id = 4940, arrayindex(regextract(_raw_log, "^Password for user (\S+) (?:has )?expired") , 0),
        event_id in (3391, 3392), arrayindex(regextract(_raw_log, "Local user (\S+) is") , 0)), // users added/removed to/from group
    tgt_mac_address = if(event_id = 913, arrayindex(regextract(msg, "dest:\s*((?:[a-fA-F\d]{2}[\-\:]?){5}[a-fA-F\d]{2})"), 0)),
    username = if(
        event_id in(3362, 3363, 4241, 4242, 3369, 4942, 4943, 4944, 4945, 4946, 4947, 4948, 4949, 4951, 4952, 5005, 5006, 5007, 3387, 4930, 4938, 4939, 5826), arrayindex(regextract(msg, "^User \'?([\w\\]+)\'? (?:logged|logout|from|password|has logged|is logged|has been logged|denied access)"), 0), 
        event_id in (186, 468, 469, 470, 640, 2667, 2710, 2714, 2715, 2716, 2717, 3310, 3311, 3318, 3340, 3341, 3342, 3343, 3344, 3345, 3440, 3444, 4244, 4245, 4248, 5553, 5555, 5765, 5825, 5827, 5828, 5829), arrayindex(regextract(msg, "^User\s*\:?\s*\'?([\w\\]+)\'?\s*\:"), 0), 
        event_id in (419, 5008, 639, 992, 993, 3390, 4940, 4941), arrayindex(regextract(msg, "[Uu]ser \'?([\w\\]+)\'? (?:is (?:trying|logged|added|deleted)|command|logged|has|expired)"), 0), 
        event_id = 4950, arrayindex(regextract(msg, "History records cleared for \'?([\w\\]+)\'? user") , 0),
        event_id = 236, arrayindex(regextract(msg, "community name or user name\s*[,\:]?\s*\'?([\w\\]+)\'?"), 0), 
        event_id = 5815, arrayindex(regextract(msg, "^The user name \'?([\w\\]+\'?)"), 0), 
        event_id = 5940, arrayindex(regextract(msg, "Authentication aborted for(?: client \S+)? user \'?([\w\\]+)\'?\."), 0), 
        event_id = 5681, arrayindex(regextract(msg, "userName \'?([\w\\]+)\'?\-?\s*authType"), 0), 
        event_id = 5749, arrayindex(regextract(msg, "username \'?([\w\\]+)\'? or password"), 0), 
        event_id = 4831, arrayindex(regextract(msg, "limit is reached for \'?([\w\\]+)\'?\."), 0), 
        event_id = 2668, arrayindex(regextract(msg, "for the User \'?([\w\\]+)\'?\."), 0), 
        event_id = 5409, arrayindex(regextract(msg, "for user (\S+):") , 0)),
    user_role = if(
        event_id in (5204, 5205, 5206, 5207, 5208, 5209, 5210, 5211, 5212, 5213, 5411, 5412, 5619, 5563, 5717, 5722, 5724, 5725, 5797, 5798, 5799, 5800, 5801, 5802, 5803, 5804, 5805, 5806, 5814), arrayindex(regextract(msg, "user[\s\-]+role \'?(.+?)\'? (?:to|has|with|is|\.)"), 0),
        event_id in (3391, 3392, 3393, 3394), arrayindex(regextract(msg, "group \'?(.+?)\'?\s*\."), 0),
        event_id in (5620, 5621), arrayindex(regextract(msg, "^\'?(.+?)\'? client"), 0),
        event_id in (5715, 5716), arrayindex(regextract(msg, "^Initial role \'?(.+?)\'? is"), 0)),
    vlan_id = if(
        event_id in (1,2), arrayindex(regextract(msg, "^(\d+) virtual LAN"), 0),
        event_id = 316, arrayindex(regextract(msg, "^VLAN ID out of range \(?(\d+)"), 0), 
        event_id = 964, arrayindex(regextract(msg, "^Failed to allocate memory for (\d+)"), 0), 
        event_id = 3815, arrayindex(regextract(msg, "^(\d+) \S+ Port \S+ moved"), 0), 
        event_id = 3824, arrayindex(regextract(msg, "^GVRP could not create (\d+) because"), 0), 
        event_id = 3826, arrayindex(regextract(msg, "^GVRP could not add port \S+ to (\d+)"), 0), 
        event_id = 3828, arrayindex(regextract(msg, "^Port \S+ unblocked on (\d+)"), 0), 
        event_id = 4588, arrayindex(regextract(msg, "^Unable to add binding for (\d+)"), 0),
        arrayindex(regextract(msg, "(?:VID|vid|VLAN|vlan|Vlan|Vlan-id|VLAN-id)\s*:?\s*(\d+)"), 0)) // vlan default fallback  
| alter // Post Extraction Processing 
    formatted_mac_address = arraystring(regextract(mac_address, "[\da-fA-F]{2}"), ":"), 
    formatted_tgt_mac_address = arraystring(regextract(tgt_mac_address , "[\da-fA-F]{2}"), ":"),
    gw_ipv4 = arrayindex(regextract(gateway_ip, "((?:\d{1,3}\.){3}\d{1,3})"), 0), 
    gw_ipv6 = arrayindex(regextract(gateway_ip, "((?:[a-fA-F\d]{0,4}\:){1,7}[a-fA-F\d]{0,4})"), 0),
    src_ipv4 = arrayindex(regextract(src_ip, "((?:\d{1,3}\.){3}\d{1,3})"), 0), 
    src_ipv6 = arrayindex(regextract(src_ip, "((?:[a-fA-F\d]{0,4}\:){1,7}[a-fA-F\d]{0,4})"), 0), 
    tgt_ipv4 = arrayindex(regextract(tgt_ip, "((?:\d{1,3}\.){3}\d{1,3})"), 0), 
    tgt_ipv6 = arrayindex(regextract(tgt_ip, "((?:[a-fA-F\d]{0,4}\:){1,7}[a-fA-F\d]{0,4})"), 0),
    tgt_user_domain = arrayindex(regextract(tgt_user, "(.+)\\.+"), 0),
    user_domain = arrayindex(regextract(username, "(.+)\\.+"), 0)
| alter // XDM Mappings 
    xdm.alert.severity = severity,
    xdm.auth.auth_method = access_mode,
    xdm.event.description = msg, 
    xdm.event.id = to_string(event_id),
    xdm.event.log_level = if(
        severity = "0", XDM_CONST.LOG_LEVEL_EMERGENCY, 
        severity = "1", XDM_CONST.LOG_LEVEL_ALERT , 
        severity = "2", XDM_CONST.LOG_LEVEL_CRITICAL, 
        severity = "3", XDM_CONST.LOG_LEVEL_ERROR, 
        severity = "4", XDM_CONST.LOG_LEVEL_WARNING, 
        severity = "5", XDM_CONST.LOG_LEVEL_NOTICE, 
        severity = "6", XDM_CONST.LOG_LEVEL_INFORMATIONAL, 
        severity = "7", XDM_CONST.LOG_LEVEL_DEBUG),
    xdm.event.outcome = if(
        msg ~= "(?i)ERROR|FAIL|REJECTED|UNABLE|ABORT|INCORRECT|PROBLEM|FAULT|DENY|DENIED|MISMATCH|COLLISIONS|CANNOT|UNREACHABLE|CORRUPTED|NOT FOUND|NOT SUCCEED|UNABLE TO PERMIT|NOT APPLIED|NOT MODIFIED|NOT REACHABLE|CANCELED BECAUSE|CAN\'T REACH", XDM_CONST.OUTCOME_FAILED,
        msg ~= "(?i)SUCCESS|SUCCEEDED", XDM_CONST.OUTCOME_SUCCESS),
    xdm.event.outcome_reason = outcome_reason,
    xdm.event.type = facility,
    xdm.intermediate.host.hostname = gateway_name,
    xdm.intermediate.ipv4 = device_ip,
    xdm.intermediate.ipv6 = gw_ipv6,
    xdm.intermediate.host.ipv4_addresses = arraycreate(device_ip, gw_ipv4),
    xdm.intermediate.host.ipv6_addresses = arraycreate(gw_ipv6),
    xdm.network.dhcp.siaddr = dhcp_server_ip,
    xdm.network.rule = policy_name,
    xdm.observer.type = facility,
    xdm.observer.unique_identifier = device_ip,
    xdm.source.host.mac_addresses = if(formatted_mac_address != null, arraycreate(formatted_mac_address)),
    xdm.source.ipv4 = src_ipv4,
    xdm.source.ipv6 = src_ipv6,
    xdm.source.subnet = ip_mask,
    xdm.source.user.domain = user_domain,
    xdm.source.user.groups = if(user_role != null, arraycreate(user_role)),
    xdm.source.user.username = username,
    xdm.source.vlan = to_integer(vlan_id),
    xdm.target.host.mac_addresses = if(formatted_tgt_mac_address != null, arraycreate(formatted_tgt_mac_address)),
    xdm.target.process.command_line = cmd,
    xdm.target.interface = to_string(interface_port_id),
    xdm.target.ipv4 = tgt_ipv4,
    xdm.target.ipv6 = tgt_ipv6,
    xdm.target.user.domain = tgt_user_domain,
    xdm.target.user.username = tgt_user;


[MODEL: dataset="cisco_firepower_raw", content_id="CiscoFirepower"]
alter 
xdm.target.port=to_integer(dpt),
xdm.source.port=to_integer(spt),
xdm.target.sent_bytes=to_integer(bytesIn),
xdm.source.sent_bytes=to_integer(bytesOut),
xdm.observer.action=act,
xdm.network.application_protocol=app,
xdm.network.rule=cs2,
xdm.source.zone=cs3,
xdm.target.zone=cs4,
xdm.alert.category=cs5,
xdm.source.ipv4=src,
xdm.target.ipv4=dst,
xdm.source.user.username=suser,
xdm.target.user.username=duser,
xdm.source.process.pid=to_integer(dvcpid),
xdm.event.outcome_reason=reason,
xdm.source.application.name=requestClientApplication,
xdm.source.interface=deviceOutboundInterface,
xdm.target.interface=deviceInboundInterface,
xdm.observer.unique_identifier=deviceExternalId,
xdm.alert.severity=cefSeverity,
xdm.event.id=externalId,
xdm.network.http.url=request,
xdm.observer.name=dvchost,
xdm.event.outcome=outcome,
xdm.event.type=cefName,
xdm.observer.vendor=cefDeviceVendor,
xdm.observer.product=cefDeviceProduct,
xdm.target.file.filename=fname,
xdm.target.file.md5=fileHash,
xdm.target.file.file_type=fileType;


[MODEL: dataset="cisco_isr_raw", content_id="CiscoISR"]
alter
        sourceIP1ipv4 = arrayindex(regextract(_raw_log , "\:\s[A-Za-z\%\-0-9]+\:\s\w+\s\d+\s\w+\s\w+\s(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\("),0),
        sourceIP2ipv4 = arrayindex(regextract(_raw_log ,"\[Source\:\s(\d+\.\d+\.\d+\.\d+)\]"),0),
        sourceIP1ipv6 = arrayindex(regextract(_raw_log , "\:\s[A-Za-z\%\-0-9]+\:\s\w+\s\d+\s\w+\s\w+\s([a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5})\("),0),
        sourceIP2ipv6 = arrayindex(regextract(_raw_log ,"\[Source\:\s([a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5})\]"),0),
        sourcePort1 = arrayindex(regextract(_raw_log ,"\:\s[A-Za-z\%\-0-9]+\:\s\w+\s\d+\s\w+\s\w+\s\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\((\d+)\)"),0),
        sourcePort2 = arrayindex(regextract(_raw_log ,"localport:\s(\d+)"),0),
        destinationIPipv4 = arrayindex(regextract(_raw_log ,"\s\-\>\s(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})"),0),
        destinationIPipv6 = arrayindex(regextract(_raw_log ,"\s\-\>\s([a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5})"),0),
        destinationPort = arrayindex(regextract(_raw_log ,"\s\-\>\s\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\((\d+)\)"),0),
        protocol = uppercase(arrayindex(regextract(_raw_log ,"\:\s[A-Za-z\%\-0-9]+\:\s\w+\s\d+\s\w+\s(\w+)\s"),0)),
        severity = arrayindex(regextract(_raw_log ,"%[\-\_\w]+[\-\_\w]*\-(\d+)\-"),0),
        sourceVlan = arrayindex(regextract(_raw_log ,"from\svlan=([0-9\-\,]+)"),0),
        targetVlan = arrayindex(regextract(_raw_log ,"to\svlan=([0-9\-\,]+)"),0),
        outcomeOptional = lowercase(arrayindex(regextract(_raw_log ,"\s(\w+)$"),0)),
        lower_eventType = lowercase(arrayindex(regextract(_raw_log, "[\-\_\w]+[\-\_\w]*\-\d+\-([\w\-\_]+)"),0))
| alter
        xdm.source.sent_packets = to_integer(arrayindex(regextract(_raw_log ,"\s(\d+)\spacket"),0)),
        xdm.source.port = to_integer(coalesce(sourcePort1,sourcePort2)),
        xdm.source.user.username = arrayindex(regextract(_raw_log ,"[Uu]ser[\:\s\']+(\w+)"),0),
        xdm.target.ipv4 = destinationIPipv4,
        xdm.target.ipv6 = destinationIPipv6,
        xdm.target.port = to_integer(destinationPort),
        xdm.observer.action = arrayindex(regextract(_raw_log ,"\:\s[A-Za-z\%\-0-9]+\:\slist\s\w+\s(\w+)\s"),0),
        xdm.network.ip_protocol = if(protocol = "HOPOPT", XDM_CONST.IP_PROTOCOL_HOPOPT, protocol="ICMP",XDM_CONST.IP_PROTOCOL_ICMP, protocol="IGMP",XDM_CONST.IP_PROTOCOL_IGMP, protocol="GGP",XDM_CONST.IP_PROTOCOL_GGP, protocol="IP",XDM_CONST.IP_PROTOCOL_IP, protocol="ST",XDM_CONST.IP_PROTOCOL_ST, protocol="TCP",XDM_CONST.IP_PROTOCOL_TCP, protocol="CBT",XDM_CONST.IP_PROTOCOL_CBT, protocol="EGP",XDM_CONST.IP_PROTOCOL_EGP, protocol="IGP",XDM_CONST.IP_PROTOCOL_IGP, protocol="BBN_RCC_MON",XDM_CONST.IP_PROTOCOL_BBN_RCC_MON, protocol="NVP_II",XDM_CONST.IP_PROTOCOL_NVP_II, protocol="PUP",XDM_CONST.IP_PROTOCOL_PUP, protocol="ARGUS",XDM_CONST.IP_PROTOCOL_ARGUS, protocol="EMCON",XDM_CONST.IP_PROTOCOL_EMCON, protocol="XNET",XDM_CONST.IP_PROTOCOL_XNET, protocol="CHAOS",XDM_CONST.IP_PROTOCOL_CHAOS, protocol="UDP",XDM_CONST.IP_PROTOCOL_UDP, protocol="MUX",XDM_CONST.IP_PROTOCOL_MUX, protocol="DCN_MEAS",XDM_CONST.IP_PROTOCOL_DCN_MEAS, protocol="HMP",XDM_CONST.IP_PROTOCOL_HMP, protocol="PRM",XDM_CONST.IP_PROTOCOL_PRM, protocol="XNS_IDP",XDM_CONST.IP_PROTOCOL_XNS_IDP, protocol="TRUNK_1",XDM_CONST.IP_PROTOCOL_TRUNK_1, protocol="TRUNK_2",XDM_CONST.IP_PROTOCOL_TRUNK_2, protocol="LEAF_1",XDM_CONST.IP_PROTOCOL_LEAF_1, protocol="LEAF_2",XDM_CONST.IP_PROTOCOL_LEAF_2, protocol="RDP",XDM_CONST.IP_PROTOCOL_RDP, protocol="IRTP",XDM_CONST.IP_PROTOCOL_IRTP, protocol="ISO_TP4",XDM_CONST.IP_PROTOCOL_ISO_TP4, protocol="NETBLT",XDM_CONST.IP_PROTOCOL_NETBLT, protocol="MFE_NSP",XDM_CONST.IP_PROTOCOL_MFE_NSP, protocol="MERIT_INP",XDM_CONST.IP_PROTOCOL_MERIT_INP, protocol="DCCP",XDM_CONST.IP_PROTOCOL_DCCP, protocol="3PC",XDM_CONST.IP_PROTOCOL_3PC, protocol="IDPR",XDM_CONST.IP_PROTOCOL_IDPR, protocol="XTP",XDM_CONST.IP_PROTOCOL_XTP, protocol="DDP",XDM_CONST.IP_PROTOCOL_DDP, protocol="IDPR_CMTP",XDM_CONST.IP_PROTOCOL_IDPR_CMTP, protocol="TP",XDM_CONST.IP_PROTOCOL_TP, protocol="IL",XDM_CONST.IP_PROTOCOL_IL, protocol="IPV6",XDM_CONST.IP_PROTOCOL_IPV6, protocol="SDRP",XDM_CONST.IP_PROTOCOL_SDRP, protocol="IPV6_ROUTE",XDM_CONST.IP_PROTOCOL_IPV6_ROUTE, protocol="IPV6_FRAG",XDM_CONST.IP_PROTOCOL_IPV6_FRAG, protocol="IDRP",XDM_CONST.IP_PROTOCOL_IDRP, protocol="RSVP",XDM_CONST.IP_PROTOCOL_RSVP, protocol="GRE",XDM_CONST.IP_PROTOCOL_GRE, protocol="DSR",XDM_CONST.IP_PROTOCOL_DSR, protocol="BNA",XDM_CONST.IP_PROTOCOL_BNA, protocol="ESP",XDM_CONST.IP_PROTOCOL_ESP, protocol="AH",XDM_CONST.IP_PROTOCOL_AH, protocol="I_NLSP",XDM_CONST.IP_PROTOCOL_I_NLSP, protocol="SWIPE",XDM_CONST.IP_PROTOCOL_SWIPE, protocol="NARP",XDM_CONST.IP_PROTOCOL_NARP, protocol="MOBILE",XDM_CONST.IP_PROTOCOL_MOBILE, protocol="TLSP",XDM_CONST.IP_PROTOCOL_TLSP, protocol="SKIP",XDM_CONST.IP_PROTOCOL_SKIP, protocol="IPV6_ICMP",XDM_CONST.IP_PROTOCOL_IPV6_ICMP, protocol="IPV6_NONXT",XDM_CONST.IP_PROTOCOL_IPV6_NONXT, protocol="IPV6_OPTS",XDM_CONST.IP_PROTOCOL_IPV6_OPTS, protocol="CFTP",XDM_CONST.IP_PROTOCOL_CFTP, protocol="SAT_EXPAK",XDM_CONST.IP_PROTOCOL_SAT_EXPAK, protocol="KRYPTOLAN",XDM_CONST.IP_PROTOCOL_KRYPTOLAN, protocol="RVD",XDM_CONST.IP_PROTOCOL_RVD, protocol="IPPC",XDM_CONST.IP_PROTOCOL_IPPC, protocol="SAT_MON",XDM_CONST.IP_PROTOCOL_SAT_MON, protocol="VISA",XDM_CONST.IP_PROTOCOL_VISA, protocol="IPCV",XDM_CONST.IP_PROTOCOL_IPCV, protocol="CPNX",XDM_CONST.IP_PROTOCOL_CPNX, protocol="CPHB",XDM_CONST.IP_PROTOCOL_CPHB, protocol="WSN",XDM_CONST.IP_PROTOCOL_WSN, protocol="PVP",XDM_CONST.IP_PROTOCOL_PVP, protocol="BR_SAT_MON",XDM_CONST.IP_PROTOCOL_BR_SAT_MON, protocol="SUN_ND",XDM_CONST.IP_PROTOCOL_SUN_ND, protocol="WB_MON",XDM_CONST.IP_PROTOCOL_WB_MON, protocol="WB_EXPAK",XDM_CONST.IP_PROTOCOL_WB_EXPAK, protocol="ISO_IP",XDM_CONST.IP_PROTOCOL_ISO_IP, protocol="VMTP",XDM_CONST.IP_PROTOCOL_VMTP, protocol="SECURE_VMTP",XDM_CONST.IP_PROTOCOL_SECURE_VMTP, protocol="VINES",XDM_CONST.IP_PROTOCOL_VINES, protocol="TTP",XDM_CONST.IP_PROTOCOL_TTP, protocol="NSFNET_IGP",XDM_CONST.IP_PROTOCOL_NSFNET_IGP, protocol="DGP",XDM_CONST.IP_PROTOCOL_DGP, protocol="TCF",XDM_CONST.IP_PROTOCOL_TCF, protocol="EIGRP",XDM_CONST.IP_PROTOCOL_EIGRP, protocol="OSPFIGP",XDM_CONST.IP_PROTOCOL_OSPFIGP, protocol="SPRITE_RPC",XDM_CONST.IP_PROTOCOL_SPRITE_RPC, protocol="LARP",XDM_CONST.IP_PROTOCOL_LARP, protocol="MTP",XDM_CONST.IP_PROTOCOL_MTP, protocol="AX25",XDM_CONST.IP_PROTOCOL_AX25, protocol="IPIP",XDM_CONST.IP_PROTOCOL_IPIP, protocol="MICP",XDM_CONST.IP_PROTOCOL_MICP, protocol="SCC_SP",XDM_CONST.IP_PROTOCOL_SCC_SP, protocol="ETHERIP",XDM_CONST.IP_PROTOCOL_ETHERIP, protocol="ENCAP",XDM_CONST.IP_PROTOCOL_ENCAP, protocol="GMTP",XDM_CONST.IP_PROTOCOL_GMTP, protocol="IFMP",XDM_CONST.IP_PROTOCOL_IFMP, protocol="PNNI",XDM_CONST.IP_PROTOCOL_PNNI, protocol="PIM",XDM_CONST.IP_PROTOCOL_PIM, protocol="ARIS",XDM_CONST.IP_PROTOCOL_ARIS, protocol="SCPS",XDM_CONST.IP_PROTOCOL_SCPS, protocol="QNX",XDM_CONST.IP_PROTOCOL_QNX, protocol="AN",XDM_CONST.IP_PROTOCOL_AN, protocol="IPCOMP",XDM_CONST.IP_PROTOCOL_IPCOMP, protocol="SNP",XDM_CONST.IP_PROTOCOL_SNP, protocol="COMPAQ_PEER",XDM_CONST.IP_PROTOCOL_COMPAQ_PEER, protocol="IPX_IN_IP",XDM_CONST.IP_PROTOCOL_IPX_IN_IP, protocol="VRRP",XDM_CONST.IP_PROTOCOL_VRRP, protocol="PGM",XDM_CONST.IP_PROTOCOL_PGM, protocol="L2TP",XDM_CONST.IP_PROTOCOL_L2TP, protocol="DDX",XDM_CONST.IP_PROTOCOL_DDX, protocol="IATP",XDM_CONST.IP_PROTOCOL_IATP, protocol="STP",XDM_CONST.IP_PROTOCOL_STP, protocol="SRP",XDM_CONST.IP_PROTOCOL_SRP, protocol="UTI",XDM_CONST.IP_PROTOCOL_UTI, protocol="SMP",XDM_CONST.IP_PROTOCOL_SMP, protocol="SM",XDM_CONST.IP_PROTOCOL_SM, protocol="PTP",XDM_CONST.IP_PROTOCOL_PTP, protocol="ISIS",XDM_CONST.IP_PROTOCOL_ISIS, protocol="FIRE",XDM_CONST.IP_PROTOCOL_FIRE, protocol="CRTP",XDM_CONST.IP_PROTOCOL_CRTP, protocol="CRUDP",XDM_CONST.IP_PROTOCOL_CRUDP, protocol="SSCOPMCE",XDM_CONST.IP_PROTOCOL_SSCOPMCE, protocol="IPLT",XDM_CONST.IP_PROTOCOL_IPLT, protocol="SPS",XDM_CONST.IP_PROTOCOL_SPS, protocol="PIPE",XDM_CONST.IP_PROTOCOL_PIPE, protocol="SCTP",XDM_CONST.IP_PROTOCOL_SCTP, protocol="FC",XDM_CONST.IP_PROTOCOL_FC, protocol="RSVP_E2E_IGNORE",XDM_CONST.IP_PROTOCOL_RSVP_E2E_IGNORE, protocol="MOBILITY",XDM_CONST.IP_PROTOCOL_MOBILITY, protocol="UDPLITE",XDM_CONST.IP_PROTOCOL_UDPLITE, protocol="MPLS_IN_IP",XDM_CONST.IP_PROTOCOL_MPLS_IN_IP, protocol="MANET",XDM_CONST.IP_PROTOCOL_MANET, protocol="HIP",XDM_CONST.IP_PROTOCOL_HIP, protocol="SHIM6",XDM_CONST.IP_PROTOCOL_SHIM6, protocol="WESP",XDM_CONST.IP_PROTOCOL_WESP, protocol="ROHC",XDM_CONST.IP_PROTOCOL_ROHC, protocol="RESERVED",XDM_CONST.IP_PROTOCOL_RESERVED,to_string(protocol)),
        xdm.observer.type = arrayindex(regextract(_raw_log, "%([\-\_\w]+[\-\_\w]*)\-\d+"),0),
        xdm.event.type = arrayindex(regextract(_raw_log, "[\-\_\w]+[\-\_\w]*\-\d+\-([\w\-\_]+)"),0),
        xdm.event.log_level = if(severity="0",XDM_CONST.LOG_LEVEL_EMERGENCY,severity="1",XDM_CONST.LOG_LEVEL_ALERT, severity="2", XDM_CONST.LOG_LEVEL_CRITICAL, severity="3", XDM_CONST.LOG_LEVEL_ERROR, severity="4", XDM_CONST.LOG_LEVEL_WARNING, severity="5", XDM_CONST.LOG_LEVEL_NOTICE, severity="6", XDM_CONST.LOG_LEVEL_INFORMATIONAL, severity="7", XDM_CONST.LOG_LEVEL_DEBUG, to_string(severity)),
        xdm.source.interface = arrayindex(regextract(_raw_log, "Interface\s([A-Za-z\-\d]+)"),0),
        xdm.event.description = arrayindex(regextract(_raw_log, "[\-\_\w]+[\-\_\w]*\-\d+\-[\w\-\_]+\:\s(.+)$"),0),
        xdm.source.ipv4 = coalesce(sourceIP1ipv4,sourceIP2ipv4),
        xdm.source.ipv6 = coalesce(sourceIP1ipv6,sourceIP2ipv6),
        xdm.source.host.mac_addresses = regextract(_raw_log, "Host\s(\w+\:\w+\:\w+\:\w+\:\w+\:\w+)\s"),
        xdm.source.process.name = arrayindex(regextract(_raw_log, "\s(\w+\[\d+\])"),0),
        xdm.network.tls.cipher = arrayindex(regextract(_raw_log, "cipher\s\'([A-Za-z0-9\-]+)\'"),0),
        xdm.source.vlan = to_integer(sourceVlan),
        xdm.target.vlan = to_integer(targetVlan),
        xdm.event.outcome_reason = arrayindex(regextract(_raw_log, "Reason\:(.+)[\]|\)]"),0),
        xdm.event.outcome = if(outcomeOptional contains "success" or lower_eventType contains "success", XDM_CONST.OUTCOME_SUCCESS, outcomeOptional contains "fail" or lower_eventType contains "fail", XDM_CONST.OUTCOME_FAILED, null);


[MODEL: dataset="cisco_nexus_raw", content_id="CiscoNexus"]
alter severity=arrayindex(regextract(_raw_log ,"%[\-\_\w]+[\-\_\w]*\-(\d+)\-"),0),
xdm.observer.type=arrayindex(regextract(_raw_log, "%([\-\_\w]+[\-\_\w]*)\-\d+"),0),
xdm.event.type=arrayindex(regextract(_raw_log, "[\-\_\w]+[\-\_\w]*\-\d+\-([\w\-\_]+)"),0),
xdm.event.description=arrayindex(regextract(_raw_log, "[\-\_\w]+[\-\_\w]*\-\d+\-[\w\-\_]+\:\s(.+)$"),0),
xdm.source.ipv4=arrayindex(regextract(_raw_log, "from\s(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\s"),0),
xdm.source.process.name=arrayindex(regextract(_raw_log, "\s(\w+\[\d+\])"),0),
xdm.source.interface=arrayindex(regextract(_raw_log, "Interface\s([A-Za-z\-\d\/]+)"),0),
xdm.event.outcome=if(_raw_log in ("*down*", "*failure*", "*fail*"), XDM_CONST.OUTCOME_FAILED , XDM_CONST.OUTCOME_SUCCESS),
xdm.source.user.username=arrayindex(regextract(_raw_log, "user\s(\w+)\s"),0)
| alter xdm.event.log_level=if(severity="0",XDM_CONST.LOG_LEVEL_EMERGENCY,severity="1",XDM_CONST.LOG_LEVEL_ALERT, severity="2", XDM_CONST.LOG_LEVEL_CRITICAL, severity="3", XDM_CONST.LOG_LEVEL_ERROR, severity="4", XDM_CONST.LOG_LEVEL_WARNING, severity="5", XDM_CONST.LOG_LEVEL_NOTICE, severity="6", XDM_CONST.LOG_LEVEL_INFORMATIONAL, severity="7", XDM_CONST.LOG_LEVEL_DEBUG, to_string(severity)),
xdm.intermediate.ipv4=arrayindex(regextract(_raw_log, "\w{3}\s+\d{1,2}\s\d{2}\:\d{2}\:\d{2}\s(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})"),0);


[MODEL: dataset ="lancope_stealthwatch_raw", content_id="CiscoStealthwatch"]
alter
        proto_string = to_string(proto)
| alter
        xdm.source.ipv4 = if(src ~= "\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}", src, null),
        xdm.source.ipv6 = if(src ~= "[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}", src, null),
        xdm.target.ipv4 = if(dst ~= "\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}", dst, null),
        xdm.target.ipv6 = if(dst ~= "[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}", dst, null),
        xdm.target.port = to_integer(dstPort),
        xdm.alert.name = eventName,
        xdm.alert.description = concat(msg, " ", fullmessage),
        xdm.alert.original_alert_id = alarmID,
        xdm.alert.severity = alarmSev,
        xdm.source.user.username = sourceUser,
        xdm.target.user.username = targetUser,
        xdm.target.host.hostname = targetHostname,
        xdm.target.domain = domain,
        xdm.network.ip_protocol = if(proto_string="0",XDM_CONST.IP_PROTOCOL_HOPOPT, proto_string="1",XDM_CONST.IP_PROTOCOL_ICMP, proto_string="2",XDM_CONST.IP_PROTOCOL_IGMP, proto_string="3",XDM_CONST.IP_PROTOCOL_GGP, proto_string="4",XDM_CONST.IP_PROTOCOL_IP, proto_string="5",XDM_CONST.IP_PROTOCOL_ST, proto_string="6",XDM_CONST.IP_PROTOCOL_TCP, proto_string="7",XDM_CONST.IP_PROTOCOL_CBT, proto_string="8",XDM_CONST.IP_PROTOCOL_EGP, proto_string="9",XDM_CONST.IP_PROTOCOL_IGP, proto_string="10",XDM_CONST.IP_PROTOCOL_BBN_RCC_MON, proto_string="11",XDM_CONST.IP_PROTOCOL_NVP_II, proto_string="12",XDM_CONST.IP_PROTOCOL_PUP, proto_string="13",XDM_CONST.IP_PROTOCOL_ARGUS, proto_string="14",XDM_CONST.IP_PROTOCOL_EMCON, proto_string="15",XDM_CONST.IP_PROTOCOL_XNET, proto_string="16",XDM_CONST.IP_PROTOCOL_CHAOS, proto_string="17",XDM_CONST.IP_PROTOCOL_UDP, proto_string="18",XDM_CONST.IP_PROTOCOL_MUX, proto_string="19",XDM_CONST.IP_PROTOCOL_DCN_MEAS, proto_string="20",XDM_CONST.IP_PROTOCOL_HMP, proto_string="21",XDM_CONST.IP_PROTOCOL_PRM, proto_string="22",XDM_CONST.IP_PROTOCOL_XNS_IDP, proto_string="23",XDM_CONST.IP_PROTOCOL_TRUNK_1, proto_string="24",XDM_CONST.IP_PROTOCOL_TRUNK_2, proto_string="25",XDM_CONST.IP_PROTOCOL_LEAF_1, proto_string="26",XDM_CONST.IP_PROTOCOL_LEAF_2, proto_string="27",XDM_CONST.IP_PROTOCOL_RDP, proto_string="28",XDM_CONST.IP_PROTOCOL_IRTP, proto_string="29",XDM_CONST.IP_PROTOCOL_ISO_TP4, proto_string="30",XDM_CONST.IP_PROTOCOL_NETBLT, proto_string="31",XDM_CONST.IP_PROTOCOL_MFE_NSP, proto_string="32",XDM_CONST.IP_PROTOCOL_MERIT_INP, proto_string="33",XDM_CONST.IP_PROTOCOL_DCCP, proto_string="34",XDM_CONST.IP_PROTOCOL_3PC, proto_string="35",XDM_CONST.IP_PROTOCOL_IDPR, proto_string="36",XDM_CONST.IP_PROTOCOL_XTP, proto_string="37",XDM_CONST.IP_PROTOCOL_DDP, proto_string="38",XDM_CONST.IP_PROTOCOL_IDPR_CMTP, proto_string="39",XDM_CONST.IP_PROTOCOL_TP, proto_string="40",XDM_CONST.IP_PROTOCOL_IL, proto_string="41",XDM_CONST.IP_PROTOCOL_IPV6, proto_string="42",XDM_CONST.IP_PROTOCOL_SDRP, proto_string="43",XDM_CONST.IP_PROTOCOL_IPV6_ROUTE, proto_string="44",XDM_CONST.IP_PROTOCOL_IPV6_FRAG, proto_string="45",XDM_CONST.IP_PROTOCOL_IDRP, proto_string="46",XDM_CONST.IP_PROTOCOL_RSVP, proto_string="47",XDM_CONST.IP_PROTOCOL_GRE, proto_string="48",XDM_CONST.IP_PROTOCOL_DSR, proto_string="49",XDM_CONST.IP_PROTOCOL_BNA, proto_string="50",XDM_CONST.IP_PROTOCOL_ESP, proto_string="51",XDM_CONST.IP_PROTOCOL_AH, proto_string="52",XDM_CONST.IP_PROTOCOL_I_NLSP, proto_string="53",XDM_CONST.IP_PROTOCOL_SWIPE, proto_string="54",XDM_CONST.IP_PROTOCOL_NARP, proto_string="55",XDM_CONST.IP_PROTOCOL_MOBILE, proto_string="56",XDM_CONST.IP_PROTOCOL_TLSP, proto_string="57",XDM_CONST.IP_PROTOCOL_SKIP, proto_string="58",XDM_CONST.IP_PROTOCOL_IPV6_ICMP, proto_string="59",XDM_CONST.IP_PROTOCOL_IPV6_NONXT, proto_string="60",XDM_CONST.IP_PROTOCOL_IPV6_OPTS, proto_string="62",XDM_CONST.IP_PROTOCOL_CFTP, proto_string="64",XDM_CONST.IP_PROTOCOL_SAT_EXPAK, proto_string="65",XDM_CONST.IP_PROTOCOL_KRYPTOLAN, proto_string="66",XDM_CONST.IP_PROTOCOL_RVD, proto_string="67",XDM_CONST.IP_PROTOCOL_IPPC, proto_string="69",XDM_CONST.IP_PROTOCOL_SAT_MON, proto_string="70",XDM_CONST.IP_PROTOCOL_VISA, proto_string="71",XDM_CONST.IP_PROTOCOL_IPCV, proto_string="72",XDM_CONST.IP_PROTOCOL_CPNX, proto_string="73",XDM_CONST.IP_PROTOCOL_CPHB, proto_string="74",XDM_CONST.IP_PROTOCOL_WSN, proto_string="75",XDM_CONST.IP_PROTOCOL_PVP, proto_string="76",XDM_CONST.IP_PROTOCOL_BR_SAT_MON, proto_string="77",XDM_CONST.IP_PROTOCOL_SUN_ND, proto_string="78",XDM_CONST.IP_PROTOCOL_WB_MON, proto_string="79",XDM_CONST.IP_PROTOCOL_WB_EXPAK, proto_string="80",XDM_CONST.IP_PROTOCOL_ISO_IP, proto_string="81",XDM_CONST.IP_PROTOCOL_VMTP, proto_string="82",XDM_CONST.IP_PROTOCOL_SECURE_VMTP, proto_string="83",XDM_CONST.IP_PROTOCOL_VINES, proto_string="84",XDM_CONST.IP_PROTOCOL_TTP, proto_string="85",XDM_CONST.IP_PROTOCOL_NSFNET_IGP, proto_string="86",XDM_CONST.IP_PROTOCOL_DGP, proto_string="87",XDM_CONST.IP_PROTOCOL_TCF, proto_string="88",XDM_CONST.IP_PROTOCOL_EIGRP, proto_string="89",XDM_CONST.IP_PROTOCOL_OSPFIGP, proto_string="90",XDM_CONST.IP_PROTOCOL_SPRITE_RPC, proto_string="91",XDM_CONST.IP_PROTOCOL_LARP, proto_string="92",XDM_CONST.IP_PROTOCOL_MTP, proto_string="93",XDM_CONST.IP_PROTOCOL_AX25, proto_string="94",XDM_CONST.IP_PROTOCOL_IPIP, proto_string="95",XDM_CONST.IP_PROTOCOL_MICP, proto_string="96",XDM_CONST.IP_PROTOCOL_SCC_SP, proto_string="97",XDM_CONST.IP_PROTOCOL_ETHERIP, proto_string="98",XDM_CONST.IP_PROTOCOL_ENCAP, proto_string="100",XDM_CONST.IP_PROTOCOL_GMTP, proto_string="101",XDM_CONST.IP_PROTOCOL_IFMP, proto_string="102",XDM_CONST.IP_PROTOCOL_PNNI, proto_string="103",XDM_CONST.IP_PROTOCOL_PIM, proto_string="104",XDM_CONST.IP_PROTOCOL_ARIS, proto_string="105",XDM_CONST.IP_PROTOCOL_SCPS, proto_string="106",XDM_CONST.IP_PROTOCOL_QNX, proto_string="107",XDM_CONST.IP_PROTOCOL_AN, proto_string="108",XDM_CONST.IP_PROTOCOL_IPCOMP, proto_string="110",XDM_CONST.IP_PROTOCOL_COMPAQ_PEER, proto_string="111",XDM_CONST.IP_PROTOCOL_IPX_IN_IP, proto_string="112",XDM_CONST.IP_PROTOCOL_VRRP, proto_string="113",XDM_CONST.IP_PROTOCOL_PGM, proto_string="115",XDM_CONST.IP_PROTOCOL_L2TP, proto_string="116",XDM_CONST.IP_PROTOCOL_DDX, proto_string="117",XDM_CONST.IP_PROTOCOL_IATP, proto_string="118",XDM_CONST.IP_PROTOCOL_STP, proto_string="119",XDM_CONST.IP_PROTOCOL_SRP, proto_string="120",XDM_CONST.IP_PROTOCOL_UTI, proto_string="121",XDM_CONST.IP_PROTOCOL_SMP, proto_string="122",XDM_CONST.IP_PROTOCOL_SM, proto_string="123",XDM_CONST.IP_PROTOCOL_PTP, proto_string="124",XDM_CONST.IP_PROTOCOL_ISIS, proto_string="125",XDM_CONST.IP_PROTOCOL_FIRE, proto_string="126",XDM_CONST.IP_PROTOCOL_CRTP, proto_string="127",XDM_CONST.IP_PROTOCOL_CRUDP, proto_string="128",XDM_CONST.IP_PROTOCOL_SSCOPMCE, proto_string="129",XDM_CONST.IP_PROTOCOL_IPLT, proto_string="130",XDM_CONST.IP_PROTOCOL_SPS, proto_string="131",XDM_CONST.IP_PROTOCOL_PIPE, proto_string="132",XDM_CONST.IP_PROTOCOL_SCTP, proto_string="133",XDM_CONST.IP_PROTOCOL_FC, proto_string="134",XDM_CONST.IP_PROTOCOL_RSVP_E2E_IGNORE, proto_string="135",XDM_CONST.IP_PROTOCOL_MOBILITY, proto_string="136",XDM_CONST.IP_PROTOCOL_UDPLITE, proto_string="137",XDM_CONST.IP_PROTOCOL_MPLS_IN_IP, proto_string);


[MODEL: dataset = "citrix_adc_raw", content_id="CitrixADC"]
alter
        http_method = arrayindex(regextract(_raw_log,"\s\:\s(\w+)\s\/"),0),
        feature = arrayindex(regextract(_raw_log,"\:\s\w+\s(\w+)\s"),0),
        message_type = arrayindex(regextract(_raw_log,"\:\s\w+\s\w+\s(\w+)\s"),0),
        Status = lowercase(arrayindex(regextract(_raw_log,"Status\s\"(\w+)\""),0)),
        message_type_lower = lowercase(arrayindex(regextract(_raw_log,"\:\s\w+\s\w+\s(\w+)\s"),0))

| alter
        xdm.observer.name = arrayindex(regextract(_raw_log,"(\S+)\s\S+-\S+-\S+\s:"),0),
        xdm.event.type = concat(feature, " - ", message_type),
        xdm.event.id = arrayindex(regextract(_raw_log,"\:\s\w+\s\w+\s\w+\s(\d+)\s"),0),
        xdm.event.description = coalesce(arrayindex(regextract(_raw_log,"\d+\s\d+\s\:\s+\"([^\"]+)\"*"),0),
                                        arrayindex(regextract(_raw_log,"<\d+\>\s\d{2}\/\d{2}\/\d{4}\:\d{2}\:\d{2}\:\d{2}.\w{3}\s.+?\:.+?\:\s+(.+)"),0)
                                        ),
        xdm.source.ipv4 = coalesce(arrayindex(regextract(_raw_log,"Source\s(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})"),0),
                                   arrayindex(regextract(_raw_log,"Client_ip\s(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\s"),0),
                                   arrayindex(regextract(_raw_log,"Context\s[\w\d]+\@(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\s"),0),
                                   arrayindex(regextract(_raw_log,"client=(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\:"),0),
                                   arrayindex(regextract(_raw_log,"ClientIP\s(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})"),0),
                                   arrayindex(regextract(_raw_log,"client\spcb\_fip\s\=\s(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})"),0),
                                   arrayindex(regextract(_raw_log,"Remote.ip\s[\=\s]*(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})"),0)
                                   ),
        xdm.source.ipv6 = coalesce(arrayindex(regextract(_raw_log,"Source\s([a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5})"),0),
                                   arrayindex(regextract(_raw_log,"Client_ip\s([a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5})\s"),0),
                                   arrayindex(regextract(_raw_log,"Context\s[\w\d]+\@([a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5})\s"),0),
                                   arrayindex(regextract(_raw_log,"client=([a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5})\:"),0),
                                   arrayindex(regextract(_raw_log,"ClientIP\s([a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5})"),0),
                                   arrayindex(regextract(_raw_log,"Remote.ip\s[\=\s]*([a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5})"),0)
                                   ),
        xdm.source.port = to_integer(coalesce(arrayindex(regextract(_raw_log,"Source\s\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\:(\d+)\s"),0),
                                              arrayindex(regextract(_raw_log,"client=\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\:(\d+)"),0),
                                              arrayindex(regextract(_raw_log,"ClientPort\s(\d+)"),0),
                                              arrayindex(regextract(_raw_log,"pcb_fport\s\=\s(\d+)"),0),
                                              arrayindex(regextract(_raw_log,"Remote.ip\s[\=\s]*\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\:(\d+).+\sto"),0)
                                              )),
        xdm.target.port = to_integer(coalesce(arrayindex(regextract(_raw_log,"Destination\s\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\:(\d+)\s"),0),
                                              arrayindex(regextract(_raw_log,"VserverServicePort\s(\d+)\s"),0),
                                              arrayindex(regextract(_raw_log,"Sending\srequest\sto.+?\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\:(\d+)"),0),
                                              arrayindex(regextract(_raw_log,"Vserver\s\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\:(\d+)"),0),
                                              arrayindex(regextract(_raw_log,"sta-server\=\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\:(\d+)"),0),
                                              arrayindex(regextract(_raw_log,"vda\=\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\:(\d+)"),0),
                                              arrayindex(regextract(_raw_log,"received\sin\sSTA\sresponse\:\s\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\:(\d+)"),0)
                                    )),
        xdm.target.ipv4 = coalesce(arrayindex(regextract(_raw_log,"Destination\s(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\:"),0),
                                   arrayindex(regextract(_raw_log,"Vserver[ServiceIP]*\s(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})"),0),
                                   arrayindex(regextract(_raw_log,"Sending\srequest\sto.+?(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})"),0),
                                   arrayindex(regextract(_raw_log,"ADldap\-(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})"),0),
                                   arrayindex(regextract(_raw_log,"sta-server\=(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})"),0),
                                   arrayindex(regextract(_raw_log,"vda\=(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})"),0),
                                   arrayindex(regextract(_raw_log,"received\sin\sSTA\sresponse\:\s(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})"),0)
                                   ),
        xdm.target.ipv6 = coalesce(arrayindex(regextract(_raw_log,"Destination\s([a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5})\:"),0),
                                   arrayindex(regextract(_raw_log,"Vserver[ServiceIP]*\s([a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5})"),0),
                                   arrayindex(regextract(_raw_log,"Sending\srequest\sto.+?([a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5})\s"),0),
                                   arrayindex(regextract(_raw_log,"ADldap\-([a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5})"),0),
                                   arrayindex(regextract(_raw_log,"sta-server\=([a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5})"),0),
                                   arrayindex(regextract(_raw_log,"vda\=([a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5})"),0),
                                   arrayindex(regextract(_raw_log,"received\sin\sSTA\sresponse\:\s([a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5})"),0)
                                   ),
        xdm.source.sent_bytes = to_integer(arrayindex(regextract(_raw_log,"Total_bytes_send\s(\d+)\s"),0)),
        xdm.target.sent_bytes = to_integer(arrayindex(regextract(_raw_log,"Total_bytes_recv\s(\d+)\s"),0)),
        xdm.source.application.name = arrayindex(regextract(_raw_log,"applicationName\s(\w+)\s"),0),
        xdm.session_context_id = arrayindex(regextract(_raw_log,"connectionId\s(\w+)\s"),0),
        xdm.source.user.username = coalesce(arrayindex(regextract(_raw_log,"username:domainname\s(\w+)\:"),0),
                                            arrayindex(regextract(_raw_log,"User\s([\w\@\.\d]+)\s\:"),0),
                                            arrayindex(regextract(_raw_log,"Context\s([\w\d]+)\@"),0),
                                            arrayindex(regextract(_raw_log,"user:\s\<([\w\d\.\_\-]+)\@"),0),
                                            arrayindex(regextract(_raw_log,"\sUser\s(\S+)"),0)
                                            ),
        xdm.source.user.domain = arrayindex(regextract(_raw_log,"username:domainname\s\w+\:(\w+)\s"),0),
        xdm.network.http.method = if(http_method="ACL", XDM_CONST.HTTP_METHOD_ACL,http_method="BASELINE_CONTROL", XDM_CONST.HTTP_METHOD_BASELINE_CONTROL,http_method="BIND", XDM_CONST.HTTP_METHOD_BIND,http_method="CHECKIN", XDM_CONST.HTTP_METHOD_CHECKIN,http_method="CHECKOUT", XDM_CONST.HTTP_METHOD_CHECKOUT,http_method="CONNECT", XDM_CONST.HTTP_METHOD_CONNECT,http_method="COPY", XDM_CONST.HTTP_METHOD_COPY,http_method="DELETE", XDM_CONST.HTTP_METHOD_DELETE,http_method="GET", XDM_CONST.HTTP_METHOD_GET,http_method="HEAD", XDM_CONST.HTTP_METHOD_HEAD,http_method="LABEL", XDM_CONST.HTTP_METHOD_LABEL,http_method="LINK", XDM_CONST.HTTP_METHOD_LINK,http_method="LOCK", XDM_CONST.HTTP_METHOD_LOCK,http_method="MERGE", XDM_CONST.HTTP_METHOD_MERGE,http_method="MKACTIVITY", XDM_CONST.HTTP_METHOD_MKACTIVITY,http_method="MKCALENDAR", XDM_CONST.HTTP_METHOD_MKCALENDAR,http_method="MKCOL", XDM_CONST.HTTP_METHOD_MKCOL,http_method="MKREDIRECTREF", XDM_CONST.HTTP_METHOD_MKREDIRECTREF,http_method="MKWORKSPACE", XDM_CONST.HTTP_METHOD_MKWORKSPACE,http_method="MOVE", XDM_CONST.HTTP_METHOD_MOVE,http_method="OPTIONS", XDM_CONST.HTTP_METHOD_OPTIONS,http_method="ORDERPATCH", XDM_CONST.HTTP_METHOD_ORDERPATCH,http_method="PATCH", XDM_CONST.HTTP_METHOD_PATCH,http_method="POST", XDM_CONST.HTTP_METHOD_POST,http_method="PRI", XDM_CONST.HTTP_METHOD_PRI,http_method="PROPFIND", XDM_CONST.HTTP_METHOD_PROPFIND,http_method="PROPPATCH", XDM_CONST.HTTP_METHOD_PROPPATCH,http_method="PUT", XDM_CONST.HTTP_METHOD_PUT,http_method="REBIND", XDM_CONST.HTTP_METHOD_REBIND,http_method="REPORT", XDM_CONST.HTTP_METHOD_REPORT,http_method="SEARCH", XDM_CONST.HTTP_METHOD_SEARCH,http_method="TRACE", XDM_CONST.HTTP_METHOD_TRACE,http_method="UNBIND", XDM_CONST.HTTP_METHOD_UNBIND,http_method="UNCHECKOUT", XDM_CONST.HTTP_METHOD_UNCHECKOUT,http_method="UNLINK", XDM_CONST.HTTP_METHOD_UNLINK,http_method="UNLOCK", XDM_CONST.HTTP_METHOD_UNLOCK,http_method="UPDATE", XDM_CONST.HTTP_METHOD_UPDATE,http_method="UPDATEREDIRECTREF", XDM_CONST.HTTP_METHOD_UPDATEREDIRECTREF,http_method="VERSION_CONTROL", XDM_CONST.HTTP_METHOD_VERSION_CONTROL, http_method),
        xdm.network.http.url = arrayindex(regextract(_raw_log,"GET\s([\w\/\.]+)\s"),0),
        xdm.intermediate.host.hostname = arrayindex(regextract(_raw_log,"\:\d{2}\s\w+\s([\w\-\_\.\d\:]+)\s"),0),
        xdm.network.session_id = arrayindex(regextract(_raw_log,"SessionId:\s(\d+)\s"),0),
        xdm.event.outcome = if(Status = "SUCCESS", XDM_CONST.OUTCOME_SUCCESS, Status = "FAILURE", XDM_CONST.OUTCOME_FAILED, message_type_lower contains "success", XDM_CONST.OUTCOME_SUCCESS, message_type_lower contains "failure", XDM_CONST.OUTCOME_FAILED, Status),
        xdm.source.user_agent = arrayindex(regextract(_raw_log,"Browser_type\s\"([^\"]+)\""),0),
        xdm.intermediate.ipv4 = arrayindex(regextract(_raw_log,"Vserver\s(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\:"),0),
        xdm.intermediate.port = to_integer(arrayindex(regextract(_raw_log,"Vserver\s\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\:(\d+)\s"),0)),
        xdm.network.tls.client_certificate.issuer = arrayindex(regextract(_raw_log, "IssuerName\s\"?\s?([^\"]+)\"?$"), 0),
        xdm.network.tls.client_certificate.subject = arrayindex(regextract(_raw_log, "SubjectName\s\"?\s?([^\"]+)\"?$"), 0),
        xdm.network.tls.client_certificate.version = coalesce(arrayindex(regextract(_raw_log, "ClientVersion\s([^\s]+)"), 0),
                                                              arrayindex(regextract(_raw_log, "ProtocolVersion\s([^\s]+)"), 0)),
        xdm.network.tls.cipher = arrayindex(regextract(_raw_log, "CipherSuite\s\"([^\"]+)\""), 0),
        xdm.event.outcome_reason = arrayindex(regextract(_raw_log, "Reason\s\"([^\"]+)\""), 0);


[MODEL: dataset=cloudflare_waf_raw, content_id="CloudflareWAF"]
alter
        eventType = if(edgeresponsebytes != null, "HTTP_requests", "")
// Modeling for http requests events
| filter
        eventType = "HTTP_requests"
| alter

		edgepathingop2 = if(edgepathingop = "wl", "passed", edgepathingop = "errHost", "error", edgepathingop = "ban", "blocked", edgepathingop),

		securityaction2 = if(securityaction != "" and securityaction != null, securityaction, null),

		edgeserverip4 = arrayindex(regextract(edgeserverip, "(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})"),0),

		edgeserverip6 = arrayindex(regextract(edgeserverip, "([a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5})"),0),

		originip4 = arrayindex(regextract(originip, "(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})"),0),

		originip6 = arrayindex(regextract(originip, "([a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5})"),0),

		response_status = to_string(coalesce(edgeresponsestatus, originresponsestatus)),

		clientrequestmethod_upper = uppercase(clientrequestmethod)

| alter
        xdm.event.type = eventType,
        xdm.source.asn.as_number = clientasn,
        xdm.source.location.country = clientcountry,
        xdm.source.host.device_category = clientdevicetype,
        xdm.source.ipv4 = arrayindex(regextract(clientip, "(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})"),0),
        xdm.source.ipv6 = arrayindex(regextract(clientip, "([a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5})"),0),
        xdm.source.location.region = clientregioncode,
        xdm.source.sent_bytes = clientrequestbytes,
        xdm.network.http.domain = clientrequesthost,
        xdm.network.http.method = if(clientrequestmethod_upper = "ACL", XDM_CONST.HTTP_METHOD_ACL, clientrequestmethod_upper = "BASELINE_CONTROL", XDM_CONST.HTTP_METHOD_BASELINE_CONTROL, clientrequestmethod_upper = "BIND", XDM_CONST.HTTP_METHOD_BIND, clientrequestmethod_upper = "CHECKIN", XDM_CONST.HTTP_METHOD_CHECKIN, clientrequestmethod_upper = "CHECKOUT", XDM_CONST.HTTP_METHOD_CHECKOUT, clientrequestmethod_upper = "CONNECT", XDM_CONST.HTTP_METHOD_CONNECT, clientrequestmethod_upper = "COPY", XDM_CONST.HTTP_METHOD_COPY, clientrequestmethod_upper = "DELETE", XDM_CONST.HTTP_METHOD_DELETE, clientrequestmethod_upper = "GET", XDM_CONST.HTTP_METHOD_GET, clientrequestmethod_upper = "HEAD", XDM_CONST.HTTP_METHOD_HEAD, clientrequestmethod_upper = "LABEL", XDM_CONST.HTTP_METHOD_LABEL, clientrequestmethod_upper = "LINK", XDM_CONST.HTTP_METHOD_LINK, clientrequestmethod_upper = "LOCK", XDM_CONST.HTTP_METHOD_LOCK, clientrequestmethod_upper = "MERGE", XDM_CONST.HTTP_METHOD_MERGE, clientrequestmethod_upper = "MKACTIVITY", XDM_CONST.HTTP_METHOD_MKACTIVITY, clientrequestmethod_upper = "MKCALENDAR", XDM_CONST.HTTP_METHOD_MKCALENDAR, clientrequestmethod_upper = "MKCOL", XDM_CONST.HTTP_METHOD_MKCOL, clientrequestmethod_upper = "MKREDIRECTREF", XDM_CONST.HTTP_METHOD_MKREDIRECTREF, clientrequestmethod_upper = "MKWORKSPACE", XDM_CONST.HTTP_METHOD_MKWORKSPACE, clientrequestmethod_upper = "MOVE", XDM_CONST.HTTP_METHOD_MOVE, clientrequestmethod_upper = "OPTIONS", XDM_CONST.HTTP_METHOD_OPTIONS, clientrequestmethod_upper = "ORDERPATCH", XDM_CONST.HTTP_METHOD_ORDERPATCH, clientrequestmethod_upper = "PATCH", XDM_CONST.HTTP_METHOD_PATCH, clientrequestmethod_upper = "POST", XDM_CONST.HTTP_METHOD_POST, clientrequestmethod_upper = "PRI", XDM_CONST.HTTP_METHOD_PRI, clientrequestmethod_upper = "PROPFIND", XDM_CONST.HTTP_METHOD_PROPFIND, clientrequestmethod_upper = "PROPPATCH", XDM_CONST.HTTP_METHOD_PROPPATCH, clientrequestmethod_upper = "PUT", XDM_CONST.HTTP_METHOD_PUT, clientrequestmethod_upper = "REBIND", XDM_CONST.HTTP_METHOD_REBIND, clientrequestmethod_upper = "REPORT", XDM_CONST.HTTP_METHOD_REPORT, clientrequestmethod_upper = "SEARCH", XDM_CONST.HTTP_METHOD_SEARCH, clientrequestmethod_upper = "TRACE", XDM_CONST.HTTP_METHOD_TRACE, clientrequestmethod_upper = "UNBIND", XDM_CONST.HTTP_METHOD_UNBIND, clientrequestmethod_upper = "UNCHECKOUT", XDM_CONST.HTTP_METHOD_UNCHECKOUT, clientrequestmethod_upper = "UNLINK", XDM_CONST.HTTP_METHOD_UNLINK, clientrequestmethod_upper = "UNLOCK", XDM_CONST.HTTP_METHOD_UNLOCK, clientrequestmethod_upper = "UPDATE", XDM_CONST.HTTP_METHOD_UPDATE, clientrequestmethod_upper = "UPDATEREDIRECTREF", XDM_CONST.HTTP_METHOD_UPDATEREDIRECTREF, clientrequestmethod_upper = "VERSION_CONTROL", XDM_CONST.HTTP_METHOD_VERSION_CONTROL, to_string(clientrequestmethod_upper)),
        xdm.network.http.url = concat(clientrequestscheme, "://", clientrequesthost, clientrequesturi),
        xdm.network.http.referrer = clientrequestreferer,
        xdm.source.user_agent = clientrequestuseragent,
        xdm.network.tls.cipher = clientsslcipher,
        xdm.network.tls.protocol_version = clientsslprotocol,
        xdm.source.port = clientsrcport,
        xdm.observer.action = coalesce(securityaction2, edgepathingop2),
        xdm.target.sent_bytes = edgeresponsebytes,
        xdm.network.http.response_code = if(response_status = "100", XDM_CONST.HTTP_RSP_CODE_CONTINUE, response_status = "101", XDM_CONST.HTTP_RSP_CODE_SWITCHING_PROTOCOLS, response_status = "102", XDM_CONST.HTTP_RSP_CODE_PROCESSING, response_status = "103", XDM_CONST.HTTP_RSP_CODE_EARLY_HINTS, response_status = "200", XDM_CONST.HTTP_RSP_CODE_OK, response_status = "201", XDM_CONST.HTTP_RSP_CODE_CREATED, response_status = "202", XDM_CONST.HTTP_RSP_CODE_ACCEPTED, response_status = "203", XDM_CONST.HTTP_RSP_CODE_NON__AUTHORITATIVE_INFORMATION, response_status = "204", XDM_CONST.HTTP_RSP_CODE_NO_CONTENT, response_status = "205", XDM_CONST.HTTP_RSP_CODE_RESET_CONTENT, response_status = "206", XDM_CONST.HTTP_RSP_CODE_PARTIAL_CONTENT, response_status = "207", XDM_CONST.HTTP_RSP_CODE_MULTI__STATUS, response_status = "208", XDM_CONST.HTTP_RSP_CODE_ALREADY_REPORTED, response_status = "226", XDM_CONST.HTTP_RSP_CODE_IM_USED, response_status = "300", XDM_CONST.HTTP_RSP_CODE_MULTIPLE_CHOICES, response_status = "301", XDM_CONST.HTTP_RSP_CODE_MOVED_PERMANENTLY, response_status = "302", XDM_CONST.HTTP_RSP_CODE_FOUND, response_status = "303", XDM_CONST.HTTP_RSP_CODE_SEE_OTHER, response_status = "304", XDM_CONST.HTTP_RSP_CODE_NOT_MODIFIED, response_status = "305", XDM_CONST.HTTP_RSP_CODE_USE_PROXY, response_status = "307", XDM_CONST.HTTP_RSP_CODE_TEMPORARY_REDIRECT, response_status = "308", XDM_CONST.HTTP_RSP_CODE_PERMANENT_REDIRECT, response_status = "400", XDM_CONST.HTTP_RSP_CODE_BAD_REQUEST, response_status = "401", XDM_CONST.HTTP_RSP_CODE_UNAUTHORIZED, response_status = "402", XDM_CONST.HTTP_RSP_CODE_PAYMENT_REQUIRED, response_status = "403", XDM_CONST.HTTP_RSP_CODE_FORBIDDEN, response_status = "404", XDM_CONST.HTTP_RSP_CODE_NOT_FOUND, response_status = "405", XDM_CONST.HTTP_RSP_CODE_METHOD_NOT_ALLOWED, response_status = "406", XDM_CONST.HTTP_RSP_CODE_NOT_ACCEPTABLE, response_status = "407", XDM_CONST.HTTP_RSP_CODE_PROXY_AUTHENTICATION_REQUIRED, response_status = "408", XDM_CONST.HTTP_RSP_CODE_REQUEST_TIMEOUT, response_status = "409", XDM_CONST.HTTP_RSP_CODE_CONFLICT, response_status = "410", XDM_CONST.HTTP_RSP_CODE_GONE, response_status = "411", XDM_CONST.HTTP_RSP_CODE_LENGTH_REQUIRED, response_status = "412", XDM_CONST.HTTP_RSP_CODE_PRECONDITION_FAILED, response_status = "413", XDM_CONST.HTTP_RSP_CODE_CONTENT_TOO_LARGE, response_status = "414", XDM_CONST.HTTP_RSP_CODE_URI_TOO_LONG, response_status = "415", XDM_CONST.HTTP_RSP_CODE_UNSUPPORTED_MEDIA_TYPE, response_status = "416", XDM_CONST.HTTP_RSP_CODE_RANGE_NOT_SATISFIABLE, response_status = "417", XDM_CONST.HTTP_RSP_CODE_EXPECTATION_FAILED, response_status = "421", XDM_CONST.HTTP_RSP_CODE_MISDIRECTED_REQUEST, response_status = "422", XDM_CONST.HTTP_RSP_CODE_UNPROCESSABLE_CONTENT, response_status = "423", XDM_CONST.HTTP_RSP_CODE_LOCKED, response_status = "424", XDM_CONST.HTTP_RSP_CODE_FAILED_DEPENDENCY, response_status = "425", XDM_CONST.HTTP_RSP_CODE_TOO_EARLY, response_status = "426", XDM_CONST.HTTP_RSP_CODE_UPGRADE_REQUIRED, response_status = "428", XDM_CONST.HTTP_RSP_CODE_PRECONDITION_REQUIRED, response_status = "429", XDM_CONST.HTTP_RSP_CODE_TOO_MANY_REQUESTS, response_status = "431", XDM_CONST.HTTP_RSP_CODE_REQUEST_HEADER_FIELDS_TOO_LARGE, response_status = "451", XDM_CONST.HTTP_RSP_CODE_UNAVAILABLE_FOR_LEGAL_REASONS, response_status = "500", XDM_CONST.HTTP_RSP_CODE_INTERNAL_SERVER_ERROR, response_status = "501", XDM_CONST.HTTP_RSP_CODE_NOT_IMPLEMENTED, response_status = "502", XDM_CONST.HTTP_RSP_CODE_BAD_GATEWAY, response_status = "503", XDM_CONST.HTTP_RSP_CODE_SERVICE_UNAVAILABLE, response_status = "504", XDM_CONST.HTTP_RSP_CODE_GATEWAY_TIMEOUT, response_status = "505", XDM_CONST.HTTP_RSP_CODE_HTTP_VERSION_NOT_SUPPORTED, response_status = "506", XDM_CONST.HTTP_RSP_CODE_VARIANT_ALSO_NEGOTIATES, response_status = "507", XDM_CONST.HTTP_RSP_CODE_INSUFFICIENT_STORAGE, response_status = "508", XDM_CONST.HTTP_RSP_CODE_LOOP_DETECTED, response_status = "511", XDM_CONST.HTTP_RSP_CODE_NETWORK_AUTHENTICATION_REQUIRED, response_status = null, null, to_string(response_status)),
        xdm.target.ipv4 = coalesce(edgeserverip4, originip4),
        xdm.target.ipv6 = coalesce(edgeserverip6, originip6),
        xdm.event.id = rayid,
        xdm.network.http.http_header.value = requestheaders,
        xdm.event.description = securityruledescription,
        xdm.network.rule = securityruleid,
        xdm.alert.severity = to_string(wafattackscore),
        xdm.target.zone = zonename;


[MODEL: dataset = reliaquest_greymatter_drp_raw, content_id="DigitalShadows"]
alter
    set_asset_json = assets -> [0]{},
    set_mitre_tactics = mitre_tactics -> [],
    set_mitre_techniques = mitre_techniques -> []
| alter

	get_approval_state = set_asset_json -> ["approval-state"],

	get_display_value = set_asset_json -> ["display-value"],

	get_labels = to_string(json_extract_scalar_array(set_asset_json, "$.labels")),

	check_state = if(state = "unread", "FALSE", state = "open", "FALSE", state = "rejected", "TRUE", state = "resolved", "TRUE", state = "closed", "TRUE"),

	get_alert_id = if(alert = null, null, alert -> id),
    get_assets_id = if(alert = null, null, set_asset_json -> id),
    get_incident_id = if(alert = null, null, incident -> id),
    get_triage_id = if(alert = null, null, triage_item_id),
    get_alert_risk_factors = if(alert = null, null, json_extract_scalar_array(alert, "$.risk-factors")),
    get_incident_risk_factors = if(incident = null, null, json_extract_scalar_array(incident, "$.risk-factors")),
    get_triage_title = triage_item -> title,
    get_alert_title = alert -> title,
    get_incident_title = incident -> title,
    get_alert_description = alert -> description,
    get_incident_description = incident -> description,
    get_triage_portal_shortcode = triage_item -> ["portal-shortcode"],
    get_triage_portal_id = triage_item -> ["portal-id"],
    get_alert_asset = if(alert = null, null, alert -> assets[]),
    get_incident_asset = if(incident = null, null, incident -> assets[]),
    get_mitre_tactics = arraymap(set_mitre_tactics, replex(uppercase(replex("@element", "\s", "_")), "\"", "")),
    get_mitre_techniques = arraymap(set_mitre_techniques, replex(uppercase(replex("@element", "\s", "_")), "\"", ""))
| alter

	ids_object = object_create("alert_id", get_alert_id, "assets_id", get_assets_id, "incident_id", get_incident_id, "triage_id", get_triage_id)   

| alter
    xdm.event.id = to_string(event_num),
    xdm.event.is_completed = to_boolean(check_state),
	xdm.observer.action = coalesce(get_triage_portal_shortcode, get_triage_portal_id, alert -> ["portal-id"]), 

	xdm.event.type = coalesce(risk_type, classification),

	xdm.alert.severity = risk_level,

	xdm.observer.type = state,

	xdm.source.host.device_category = assets -> [0].type,

	xdm.event.outcome = if(get_approval_state = "pending", XDM_CONST.OUTCOME_UNKNOWN, get_approval_state = "accepted", XDM_CONST.OUTCOME_SUCCESS, get_approval_state = "rejected", XDM_CONST.OUTCOME_FAILED, null),

	xdm.event.outcome_reason = get_approval_state,

	xdm.source.host.hostname = get_display_value,

	xdm.alert.subcategory = if(get_labels = null, null, get_labels ~= "null|\[\]", null, to_string(get_labels)),

	xdm.event.operation_sub_type = event_action,

	xdm.observer.unique_identifier = to_string(ids_object),

	xdm.alert.risks = coalesce(get_alert_risk_factors, get_incident_risk_factors),

	xdm.event.original_event_type = coalesce(get_triage_title, get_alert_title, get_incident_title),

	xdm.event.description = coalesce(get_alert_description, get_incident_description),

	xdm.alert.description = object_create("asset_ids", coalesce(get_alert_asset, get_incident_asset), "assets_data", assets),

	xdm.alert.mitre_tactics = arraymap(get_mitre_tactics, if( "@element" = "COLLECTION", XDM_CONST.MITRE_TACTIC_COLLECTION, "@element" = "COMMAND_AND_CONTROL", XDM_CONST.MITRE_TACTIC_COMMAND_AND_CONTROL, "@element" = "CREDENTIAL_ACCESS", XDM_CONST.MITRE_TACTIC_CREDENTIAL_ACCESS, "@element" = "DEFENSE_EVASION", XDM_CONST.MITRE_TACTIC_DEFENSE_EVASION, "@element" = "DISCOVERY", XDM_CONST.MITRE_TACTIC_DISCOVERY, "@element" = "EXECUTION", XDM_CONST.MITRE_TACTIC_EXECUTION, "@element" = "EXFILTRATION", XDM_CONST.MITRE_TACTIC_EXFILTRATION, "@element" = "IMPACT", XDM_CONST.MITRE_TACTIC_IMPACT, "@element" = "INITIAL_ACCESS", XDM_CONST.MITRE_TACTIC_INITIAL_ACCESS, "@element" = "LATERAL_MOVEMENT", XDM_CONST.MITRE_TACTIC_LATERAL_MOVEMENT, "@element" = "PERSISTENCE", XDM_CONST.MITRE_TACTIC_PERSISTENCE, "@element" = "PRIVILEGE_ESCALATION", XDM_CONST.MITRE_TACTIC_PRIVILEGE_ESCALATION, "@element" = "RECONNAISSANCE", XDM_CONST.MITRE_TACTIC_RECONNAISSANCE, "@element" = "RESOURCE_DEVELOPMENT", XDM_CONST.MITRE_TACTIC_RESOURCE_DEVELOPMENT, null)),

	xdm.alert.mitre_techniques = arraymap(get_mitre_techniques, if( "@element" = "ABUSE_ELEVATION_CONTROL_MECHANISM", XDM_CONST.MITRE_TECHNIQUE_ABUSE_ELEVATION_CONTROL_MECHANISM, "@element" = "ABUSE_ELEVATION_CONTROL_MECHANISM_BYPASS_USER_ACCOUNT_CONTROL", XDM_CONST.MITRE_TECHNIQUE_ABUSE_ELEVATION_CONTROL_MECHANISM_BYPASS_USER_ACCOUNT_CONTROL, "@element" = "ABUSE_ELEVATION_CONTROL_MECHANISM_ELEVATED_EXECUTION_WITH_PROMPT", XDM_CONST.MITRE_TECHNIQUE_ABUSE_ELEVATION_CONTROL_MECHANISM_ELEVATED_EXECUTION_WITH_PROMPT, "@element" = "ABUSE_ELEVATION_CONTROL_MECHANISM_SETUID_AND_SETGID", XDM_CONST.MITRE_TECHNIQUE_ABUSE_ELEVATION_CONTROL_MECHANISM_SETUID_AND_SETGID, "@element" = "ABUSE_ELEVATION_CONTROL_MECHANISM_SUDO_AND_SUDO_CACHING", XDM_CONST.MITRE_TECHNIQUE_ABUSE_ELEVATION_CONTROL_MECHANISM_SUDO_AND_SUDO_CACHING, "@element" = "ACCESS_TOKEN_MANIPULATION", XDM_CONST.MITRE_TECHNIQUE_ACCESS_TOKEN_MANIPULATION, "@element" = "ACCESS_TOKEN_MANIPULATION_CREATE_PROCESS_WITH_TOKEN", XDM_CONST.MITRE_TECHNIQUE_ACCESS_TOKEN_MANIPULATION_CREATE_PROCESS_WITH_TOKEN, "@element" = "ACCESS_TOKEN_MANIPULATION_MAKE_AND_IMPERSONATE_TOKEN", XDM_CONST.MITRE_TECHNIQUE_ACCESS_TOKEN_MANIPULATION_MAKE_AND_IMPERSONATE_TOKEN, "@element" = "ACCESS_TOKEN_MANIPULATION_PARENT_PID_SPOOFING", XDM_CONST.MITRE_TECHNIQUE_ACCESS_TOKEN_MANIPULATION_PARENT_PID_SPOOFING, "@element" = "ACCESS_TOKEN_MANIPULATION_SID_HISTORY_INJECTION", XDM_CONST.MITRE_TECHNIQUE_ACCESS_TOKEN_MANIPULATION_SID_HISTORY_INJECTION, "@element" = "ACCESS_TOKEN_MANIPULATION_TOKEN_IMPERSONATION_OR_THEFT", XDM_CONST.MITRE_TECHNIQUE_ACCESS_TOKEN_MANIPULATION_TOKEN_IMPERSONATION_OR_THEFT, "@element" = "ACCOUNT_ACCESS_REMOVAL", XDM_CONST.MITRE_TECHNIQUE_ACCOUNT_ACCESS_REMOVAL, "@element" = "ACCOUNT_DISCOVERY", XDM_CONST.MITRE_TECHNIQUE_ACCOUNT_DISCOVERY, "@element" = "ACCOUNT_DISCOVERY_CLOUD_ACCOUNT", XDM_CONST.MITRE_TECHNIQUE_ACCOUNT_DISCOVERY_CLOUD_ACCOUNT, "@element" = "ACCOUNT_DISCOVERY_DOMAIN_ACCOUNT", XDM_CONST.MITRE_TECHNIQUE_ACCOUNT_DISCOVERY_DOMAIN_ACCOUNT, "@element" = "ACCOUNT_DISCOVERY_EMAIL_ACCOUNT", XDM_CONST.MITRE_TECHNIQUE_ACCOUNT_DISCOVERY_EMAIL_ACCOUNT, "@element" = "ACCOUNT_DISCOVERY_LOCAL_ACCOUNT", XDM_CONST.MITRE_TECHNIQUE_ACCOUNT_DISCOVERY_LOCAL_ACCOUNT, "@element" = "ACCOUNT_MANIPULATION", XDM_CONST.MITRE_TECHNIQUE_ACCOUNT_MANIPULATION, "@element" = "ACCOUNT_MANIPULATION_ADD_OFFICE_365_GLOBAL_ADMINISTRATOR_ROLE", XDM_CONST.MITRE_TECHNIQUE_ACCOUNT_MANIPULATION_ADD_OFFICE_365_GLOBAL_ADMINISTRATOR_ROLE, "@element" = "ACCOUNT_MANIPULATION_ADDITIONAL_CLOUD_CREDENTIALS", XDM_CONST.MITRE_TECHNIQUE_ACCOUNT_MANIPULATION_ADDITIONAL_CLOUD_CREDENTIALS, "@element" = "ACCOUNT_MANIPULATION_EXCHANGE_EMAIL_DELEGATE_PERMISSIONS", XDM_CONST.MITRE_TECHNIQUE_ACCOUNT_MANIPULATION_EXCHANGE_EMAIL_DELEGATE_PERMISSIONS, "@element" = "ACCOUNT_MANIPULATION_SSH_AUTHORIZED_KEYS", XDM_CONST.MITRE_TECHNIQUE_ACCOUNT_MANIPULATION_SSH_AUTHORIZED_KEYS, "@element" = "ACQUIRE_INFRASTRUCTURE", XDM_CONST.MITRE_TECHNIQUE_ACQUIRE_INFRASTRUCTURE, "@element" = "ACQUIRE_INFRASTRUCTURE_BOTNET", XDM_CONST.MITRE_TECHNIQUE_ACQUIRE_INFRASTRUCTURE_BOTNET, "@element" = "ACQUIRE_INFRASTRUCTURE_DNS_SERVER", XDM_CONST.MITRE_TECHNIQUE_ACQUIRE_INFRASTRUCTURE_DNS_SERVER, "@element" = "ACQUIRE_INFRASTRUCTURE_DOMAINS", XDM_CONST.MITRE_TECHNIQUE_ACQUIRE_INFRASTRUCTURE_DOMAINS, "@element" = "ACQUIRE_INFRASTRUCTURE_SERVER", XDM_CONST.MITRE_TECHNIQUE_ACQUIRE_INFRASTRUCTURE_SERVER, "@element" = "ACQUIRE_INFRASTRUCTURE_VIRTUAL_PRIVATE_SERVER", XDM_CONST.MITRE_TECHNIQUE_ACQUIRE_INFRASTRUCTURE_VIRTUAL_PRIVATE_SERVER, "@element" = "ACQUIRE_INFRASTRUCTURE_WEB_SERVICES", XDM_CONST.MITRE_TECHNIQUE_ACQUIRE_INFRASTRUCTURE_WEB_SERVICES, "@element" = "ACTIVE_SCANNING", XDM_CONST.MITRE_TECHNIQUE_ACTIVE_SCANNING, "@element" = "ACTIVE_SCANNING_SCANNING_IP_BLOCKS", XDM_CONST.MITRE_TECHNIQUE_ACTIVE_SCANNING_SCANNING_IP_BLOCKS, "@element" = "ACTIVE_SCANNING_VULNERABILITY_SCANNING", XDM_CONST.MITRE_TECHNIQUE_ACTIVE_SCANNING_VULNERABILITY_SCANNING, "@element" = "ADVERSARY_IN_THE_MIDDLE", XDM_CONST.MITRE_TECHNIQUE_ADVERSARY_IN_THE_MIDDLE, "@element" = "ADVERSARY_IN_THE_MIDDLE_ARP_CACHE_POISONING", XDM_CONST.MITRE_TECHNIQUE_ADVERSARY_IN_THE_MIDDLE_ARP_CACHE_POISONING, "@element" = "ADVERSARY_IN_THE_MIDDLE_LLMNR_NBT_NS_POISONING_AND_SMB_RELAY", XDM_CONST.MITRE_TECHNIQUE_ADVERSARY_IN_THE_MIDDLE_LLMNR_NBT_NS_POISONING_AND_SMB_RELAY, "@element" = "APPLICATION_LAYER_PROTOCOL", XDM_CONST.MITRE_TECHNIQUE_APPLICATION_LAYER_PROTOCOL, "@element" = "APPLICATION_LAYER_PROTOCOL_DNS", XDM_CONST.MITRE_TECHNIQUE_APPLICATION_LAYER_PROTOCOL_DNS, "@element" = "APPLICATION_LAYER_PROTOCOL_FILE_TRANSFER_PROTOCOLS", XDM_CONST.MITRE_TECHNIQUE_APPLICATION_LAYER_PROTOCOL_FILE_TRANSFER_PROTOCOLS, "@element" = "APPLICATION_LAYER_PROTOCOL_MAIL_PROTOCOLS", XDM_CONST.MITRE_TECHNIQUE_APPLICATION_LAYER_PROTOCOL_MAIL_PROTOCOLS, "@element" = "APPLICATION_LAYER_PROTOCOL_WEB_PROTOCOLS", XDM_CONST.MITRE_TECHNIQUE_APPLICATION_LAYER_PROTOCOL_WEB_PROTOCOLS, "@element" = "APPLICATION_WINDOW_DISCOVERY", XDM_CONST.MITRE_TECHNIQUE_APPLICATION_WINDOW_DISCOVERY, "@element" = "ARCHIVE_COLLECTED_DATA", XDM_CONST.MITRE_TECHNIQUE_ARCHIVE_COLLECTED_DATA, "@element" = "ARCHIVE_COLLECTED_DATA_ARCHIVE_VIA_CUSTOM_METHOD", XDM_CONST.MITRE_TECHNIQUE_ARCHIVE_COLLECTED_DATA_ARCHIVE_VIA_CUSTOM_METHOD, "@element" = "ARCHIVE_COLLECTED_DATA_ARCHIVE_VIA_LIBRARY", XDM_CONST.MITRE_TECHNIQUE_ARCHIVE_COLLECTED_DATA_ARCHIVE_VIA_LIBRARY, "@element" = "ARCHIVE_COLLECTED_DATA_ARCHIVE_VIA_UTILITY", XDM_CONST.MITRE_TECHNIQUE_ARCHIVE_COLLECTED_DATA_ARCHIVE_VIA_UTILITY, "@element" = "AUDIO_CAPTURE", XDM_CONST.MITRE_TECHNIQUE_AUDIO_CAPTURE, "@element" = "AUTOMATED_COLLECTION", XDM_CONST.MITRE_TECHNIQUE_AUTOMATED_COLLECTION, "@element" = "AUTOMATED_EXFILTRATION", XDM_CONST.MITRE_TECHNIQUE_AUTOMATED_EXFILTRATION, "@element" = "AUTOMATED_EXFILTRATION_TRAFFIC_DUPLICATION", XDM_CONST.MITRE_TECHNIQUE_AUTOMATED_EXFILTRATION_TRAFFIC_DUPLICATION, "@element" = "BITS_JOBS", XDM_CONST.MITRE_TECHNIQUE_BITS_JOBS, "@element" = "BOOT_OR_LOGON_AUTOSTART_EXECUTION", XDM_CONST.MITRE_TECHNIQUE_BOOT_OR_LOGON_AUTOSTART_EXECUTION, "@element" = "BOOT_OR_LOGON_AUTOSTART_EXECUTION_ACTIVE_SETUP", XDM_CONST.MITRE_TECHNIQUE_BOOT_OR_LOGON_AUTOSTART_EXECUTION_ACTIVE_SETUP, "@element" = "BOOT_OR_LOGON_AUTOSTART_EXECUTION_AUTHENTICATION_PACKAGE", XDM_CONST.MITRE_TECHNIQUE_BOOT_OR_LOGON_AUTOSTART_EXECUTION_AUTHENTICATION_PACKAGE, "@element" = "BOOT_OR_LOGON_AUTOSTART_EXECUTION_KERNEL_MODULES_AND_EXTENSIONS", XDM_CONST.MITRE_TECHNIQUE_BOOT_OR_LOGON_AUTOSTART_EXECUTION_KERNEL_MODULES_AND_EXTENSIONS, "@element" = "BOOT_OR_LOGON_AUTOSTART_EXECUTION_LSASS_DRIVER", XDM_CONST.MITRE_TECHNIQUE_BOOT_OR_LOGON_AUTOSTART_EXECUTION_LSASS_DRIVER, "@element" = "BOOT_OR_LOGON_AUTOSTART_EXECUTION_LOGIN_ITEMS", XDM_CONST.MITRE_TECHNIQUE_BOOT_OR_LOGON_AUTOSTART_EXECUTION_LOGIN_ITEMS, "@element" = "BOOT_OR_LOGON_AUTOSTART_EXECUTION_PLIST_MODIFICATION", XDM_CONST.MITRE_TECHNIQUE_BOOT_OR_LOGON_AUTOSTART_EXECUTION_PLIST_MODIFICATION, "@element" = "BOOT_OR_LOGON_AUTOSTART_EXECUTION_PORT_MONITORS", XDM_CONST.MITRE_TECHNIQUE_BOOT_OR_LOGON_AUTOSTART_EXECUTION_PORT_MONITORS, "@element" = "BOOT_OR_LOGON_AUTOSTART_EXECUTION_PRINT_PROCESSORS", XDM_CONST.MITRE_TECHNIQUE_BOOT_OR_LOGON_AUTOSTART_EXECUTION_PRINT_PROCESSORS, "@element" = "BOOT_OR_LOGON_AUTOSTART_EXECUTION_RE_OPENED_APPLICATIONS", XDM_CONST.MITRE_TECHNIQUE_BOOT_OR_LOGON_AUTOSTART_EXECUTION_RE_OPENED_APPLICATIONS, "@element" = "BOOT_OR_LOGON_AUTOSTART_EXECUTION_REGISTRY_RUN_KEYS_OR_STARTUP_FOLDER", XDM_CONST.MITRE_TECHNIQUE_BOOT_OR_LOGON_AUTOSTART_EXECUTION_REGISTRY_RUN_KEYS_OR_STARTUP_FOLDER, "@element" = "BOOT_OR_LOGON_AUTOSTART_EXECUTION_SECURITY_SUPPORT_PROVIDER", XDM_CONST.MITRE_TECHNIQUE_BOOT_OR_LOGON_AUTOSTART_EXECUTION_SECURITY_SUPPORT_PROVIDER, "@element" = "BOOT_OR_LOGON_AUTOSTART_EXECUTION_SHORTCUT_MODIFICATION", XDM_CONST.MITRE_TECHNIQUE_BOOT_OR_LOGON_AUTOSTART_EXECUTION_SHORTCUT_MODIFICATION, "@element" = "BOOT_OR_LOGON_AUTOSTART_EXECUTION_TIME_PROVIDERS", XDM_CONST.MITRE_TECHNIQUE_BOOT_OR_LOGON_AUTOSTART_EXECUTION_TIME_PROVIDERS, "@element" = "BOOT_OR_LOGON_AUTOSTART_EXECUTION_WINLOGON_HELPER_DLL", XDM_CONST.MITRE_TECHNIQUE_BOOT_OR_LOGON_AUTOSTART_EXECUTION_WINLOGON_HELPER_DLL, "@element" = "BOOT_OR_LOGON_AUTOSTART_EXECUTION_XDG_AUTOSTART_ENTRIES", XDM_CONST.MITRE_TECHNIQUE_BOOT_OR_LOGON_AUTOSTART_EXECUTION_XDG_AUTOSTART_ENTRIES, "@element" = "BOOT_OR_LOGON_INITIALIZATION_SCRIPTS", XDM_CONST.MITRE_TECHNIQUE_BOOT_OR_LOGON_INITIALIZATION_SCRIPTS, "@element" = "BOOT_OR_LOGON_INITIALIZATION_SCRIPTS_LOGON_SCRIPT_MAC", XDM_CONST.MITRE_TECHNIQUE_BOOT_OR_LOGON_INITIALIZATION_SCRIPTS_LOGON_SCRIPT_MAC, "@element" = "BOOT_OR_LOGON_INITIALIZATION_SCRIPTS_LOGON_SCRIPT_WINDOWS", XDM_CONST.MITRE_TECHNIQUE_BOOT_OR_LOGON_INITIALIZATION_SCRIPTS_LOGON_SCRIPT_WINDOWS, "@element" = "BOOT_OR_LOGON_INITIALIZATION_SCRIPTS_NETWORK_LOGON_SCRIPT", XDM_CONST.MITRE_TECHNIQUE_BOOT_OR_LOGON_INITIALIZATION_SCRIPTS_NETWORK_LOGON_SCRIPT, "@element" = "BOOT_OR_LOGON_INITIALIZATION_SCRIPTS_RC_SCRIPTS", XDM_CONST.MITRE_TECHNIQUE_BOOT_OR_LOGON_INITIALIZATION_SCRIPTS_RC_SCRIPTS, "@element" = "BOOT_OR_LOGON_INITIALIZATION_SCRIPTS_STARTUP_ITEMS", XDM_CONST.MITRE_TECHNIQUE_BOOT_OR_LOGON_INITIALIZATION_SCRIPTS_STARTUP_ITEMS, "@element" = "BROWSER_BOOKMARK_DISCOVERY", XDM_CONST.MITRE_TECHNIQUE_BROWSER_BOOKMARK_DISCOVERY, "@element" = "BROWSER_EXTENSIONS", XDM_CONST.MITRE_TECHNIQUE_BROWSER_EXTENSIONS, "@element" = "BROWSER_SESSION_HIJACKING", XDM_CONST.MITRE_TECHNIQUE_BROWSER_SESSION_HIJACKING, "@element" = "BRUTE_FORCE", XDM_CONST.MITRE_TECHNIQUE_BRUTE_FORCE, "@element" = "BRUTE_FORCE_CREDENTIAL_STUFFING", XDM_CONST.MITRE_TECHNIQUE_BRUTE_FORCE_CREDENTIAL_STUFFING, "@element" = "BRUTE_FORCE_PASSWORD_CRACKING", XDM_CONST.MITRE_TECHNIQUE_BRUTE_FORCE_PASSWORD_CRACKING, "@element" = "BRUTE_FORCE_PASSWORD_GUESSING", XDM_CONST.MITRE_TECHNIQUE_BRUTE_FORCE_PASSWORD_GUESSING, "@element" = "BRUTE_FORCE_PASSWORD_SPRAYING", XDM_CONST.MITRE_TECHNIQUE_BRUTE_FORCE_PASSWORD_SPRAYING, "@element" = "BUILD_IMAGE_ON_HOST", XDM_CONST.MITRE_TECHNIQUE_BUILD_IMAGE_ON_HOST, "@element" = "CLIPBOARD_DATA", XDM_CONST.MITRE_TECHNIQUE_CLIPBOARD_DATA, "@element" = "CLOUD_INFRASTRUCTURE_DISCOVERY", XDM_CONST.MITRE_TECHNIQUE_CLOUD_INFRASTRUCTURE_DISCOVERY, "@element" = "CLOUD_SERVICE_DASHBOARD", XDM_CONST.MITRE_TECHNIQUE_CLOUD_SERVICE_DASHBOARD, "@element" = "CLOUD_SERVICE_DISCOVERY", XDM_CONST.MITRE_TECHNIQUE_CLOUD_SERVICE_DISCOVERY, "@element" = "CLOUD_STORAGE_OBJECT_DISCOVERY", XDM_CONST.MITRE_TECHNIQUE_CLOUD_STORAGE_OBJECT_DISCOVERY, "@element" = "COMMAND_AND_SCRIPTING_INTERPRETER", XDM_CONST.MITRE_TECHNIQUE_COMMAND_AND_SCRIPTING_INTERPRETER, "@element" = "COMMAND_AND_SCRIPTING_INTERPRETER_APPLESCRIPT", XDM_CONST.MITRE_TECHNIQUE_COMMAND_AND_SCRIPTING_INTERPRETER_APPLESCRIPT, "@element" = "COMMAND_AND_SCRIPTING_INTERPRETER_JAVASCRIPT", XDM_CONST.MITRE_TECHNIQUE_COMMAND_AND_SCRIPTING_INTERPRETER_JAVASCRIPT, "@element" = "COMMAND_AND_SCRIPTING_INTERPRETER_NETWORK_DEVICE_CLI", XDM_CONST.MITRE_TECHNIQUE_COMMAND_AND_SCRIPTING_INTERPRETER_NETWORK_DEVICE_CLI, "@element" = "COMMAND_AND_SCRIPTING_INTERPRETER_POWERSHELL", XDM_CONST.MITRE_TECHNIQUE_COMMAND_AND_SCRIPTING_INTERPRETER_POWERSHELL, "@element" = "COMMAND_AND_SCRIPTING_INTERPRETER_PYTHON", XDM_CONST.MITRE_TECHNIQUE_COMMAND_AND_SCRIPTING_INTERPRETER_PYTHON, "@element" = "COMMAND_AND_SCRIPTING_INTERPRETER_UNIX_SHELL", XDM_CONST.MITRE_TECHNIQUE_COMMAND_AND_SCRIPTING_INTERPRETER_UNIX_SHELL, "@element" = "COMMAND_AND_SCRIPTING_INTERPRETER_VISUAL_BASIC", XDM_CONST.MITRE_TECHNIQUE_COMMAND_AND_SCRIPTING_INTERPRETER_VISUAL_BASIC, "@element" = "COMMAND_AND_SCRIPTING_INTERPRETER_WINDOWS_COMMAND_SHELL", XDM_CONST.MITRE_TECHNIQUE_COMMAND_AND_SCRIPTING_INTERPRETER_WINDOWS_COMMAND_SHELL, "@element" = "COMMUNICATION_THROUGH_REMOVABLE_MEDIA", XDM_CONST.MITRE_TECHNIQUE_COMMUNICATION_THROUGH_REMOVABLE_MEDIA, "@element" = "COMPROMISE_ACCOUNTS", XDM_CONST.MITRE_TECHNIQUE_COMPROMISE_ACCOUNTS, "@element" = "COMPROMISE_ACCOUNTS_EMAIL_ACCOUNTS", XDM_CONST.MITRE_TECHNIQUE_COMPROMISE_ACCOUNTS_EMAIL_ACCOUNTS, "@element" = "COMPROMISE_ACCOUNTS_SOCIAL_MEDIA_ACCOUNTS", XDM_CONST.MITRE_TECHNIQUE_COMPROMISE_ACCOUNTS_SOCIAL_MEDIA_ACCOUNTS, "@element" = "COMPROMISE_CLIENT_SOFTWARE_BINARY", XDM_CONST.MITRE_TECHNIQUE_COMPROMISE_CLIENT_SOFTWARE_BINARY, "@element" = "COMPROMISE_INFRASTRUCTURE", XDM_CONST.MITRE_TECHNIQUE_COMPROMISE_INFRASTRUCTURE, "@element" = "COMPROMISE_INFRASTRUCTURE_BOTNET", XDM_CONST.MITRE_TECHNIQUE_COMPROMISE_INFRASTRUCTURE_BOTNET, "@element" = "COMPROMISE_INFRASTRUCTURE_DNS_SERVER", XDM_CONST.MITRE_TECHNIQUE_COMPROMISE_INFRASTRUCTURE_DNS_SERVER, "@element" = "COMPROMISE_INFRASTRUCTURE_DOMAINS", XDM_CONST.MITRE_TECHNIQUE_COMPROMISE_INFRASTRUCTURE_DOMAINS, "@element" = "COMPROMISE_INFRASTRUCTURE_SERVER", XDM_CONST.MITRE_TECHNIQUE_COMPROMISE_INFRASTRUCTURE_SERVER, "@element" = "COMPROMISE_INFRASTRUCTURE_VIRTUAL_PRIVATE_SERVER", XDM_CONST.MITRE_TECHNIQUE_COMPROMISE_INFRASTRUCTURE_VIRTUAL_PRIVATE_SERVER, "@element" = "COMPROMISE_INFRASTRUCTURE_WEB_SERVICES", XDM_CONST.MITRE_TECHNIQUE_COMPROMISE_INFRASTRUCTURE_WEB_SERVICES, "@element" = "CONTAINER_ADMINISTRATION_COMMAND", XDM_CONST.MITRE_TECHNIQUE_CONTAINER_ADMINISTRATION_COMMAND, "@element" = "CONTAINER_AND_RESOURCE_DISCOVERY", XDM_CONST.MITRE_TECHNIQUE_CONTAINER_AND_RESOURCE_DISCOVERY, "@element" = "CREATE_ACCOUNT", XDM_CONST.MITRE_TECHNIQUE_CREATE_ACCOUNT, "@element" = "CREATE_ACCOUNT_CLOUD_ACCOUNT", XDM_CONST.MITRE_TECHNIQUE_CREATE_ACCOUNT_CLOUD_ACCOUNT, "@element" = "CREATE_ACCOUNT_DOMAIN_ACCOUNT", XDM_CONST.MITRE_TECHNIQUE_CREATE_ACCOUNT_DOMAIN_ACCOUNT, "@element" = "CREATE_ACCOUNT_LOCAL_ACCOUNT", XDM_CONST.MITRE_TECHNIQUE_CREATE_ACCOUNT_LOCAL_ACCOUNT, "@element" = "CREATE_OR_MODIFY_SYSTEM_PROCESS", XDM_CONST.MITRE_TECHNIQUE_CREATE_OR_MODIFY_SYSTEM_PROCESS, "@element" = "CREATE_OR_MODIFY_SYSTEM_PROCESS_LAUNCH_AGENT", XDM_CONST.MITRE_TECHNIQUE_CREATE_OR_MODIFY_SYSTEM_PROCESS_LAUNCH_AGENT, "@element" = "CREATE_OR_MODIFY_SYSTEM_PROCESS_LAUNCH_DAEMON", XDM_CONST.MITRE_TECHNIQUE_CREATE_OR_MODIFY_SYSTEM_PROCESS_LAUNCH_DAEMON, "@element" = "CREATE_OR_MODIFY_SYSTEM_PROCESS_SYSTEMD_SERVICE", XDM_CONST.MITRE_TECHNIQUE_CREATE_OR_MODIFY_SYSTEM_PROCESS_SYSTEMD_SERVICE, "@element" = "CREATE_OR_MODIFY_SYSTEM_PROCESS_WINDOWS_SERVICE", XDM_CONST.MITRE_TECHNIQUE_CREATE_OR_MODIFY_SYSTEM_PROCESS_WINDOWS_SERVICE, "@element" = "CREDENTIALS_FROM_PASSWORD_STORES", XDM_CONST.MITRE_TECHNIQUE_CREDENTIALS_FROM_PASSWORD_STORES, "@element" = "CREDENTIALS_FROM_PASSWORD_STORES_CREDENTIALS_FROM_WEB_BROWSERS", XDM_CONST.MITRE_TECHNIQUE_CREDENTIALS_FROM_PASSWORD_STORES_CREDENTIALS_FROM_WEB_BROWSERS, "@element" = "CREDENTIALS_FROM_PASSWORD_STORES_KEYCHAIN", XDM_CONST.MITRE_TECHNIQUE_CREDENTIALS_FROM_PASSWORD_STORES_KEYCHAIN, "@element" = "CREDENTIALS_FROM_PASSWORD_STORES_PASSWORD_MANAGERS", XDM_CONST.MITRE_TECHNIQUE_CREDENTIALS_FROM_PASSWORD_STORES_PASSWORD_MANAGERS, "@element" = "CREDENTIALS_FROM_PASSWORD_STORES_SECURITYD_MEMORY", XDM_CONST.MITRE_TECHNIQUE_CREDENTIALS_FROM_PASSWORD_STORES_SECURITYD_MEMORY, "@element" = "CREDENTIALS_FROM_PASSWORD_STORES_WINDOWS_CREDENTIAL_MANAGER", XDM_CONST.MITRE_TECHNIQUE_CREDENTIALS_FROM_PASSWORD_STORES_WINDOWS_CREDENTIAL_MANAGER, "@element" = "DATA_DESTRUCTION", XDM_CONST.MITRE_TECHNIQUE_DATA_DESTRUCTION, "@element" = "DATA_ENCODING", XDM_CONST.MITRE_TECHNIQUE_DATA_ENCODING, "@element" = "DATA_ENCODING_NON_STANDARD_ENCODING", XDM_CONST.MITRE_TECHNIQUE_DATA_ENCODING_NON_STANDARD_ENCODING, "@element" = "DATA_ENCODING_STANDARD_ENCODING", XDM_CONST.MITRE_TECHNIQUE_DATA_ENCODING_STANDARD_ENCODING, "@element" = "DATA_ENCRYPTED_FOR_IMPACT", XDM_CONST.MITRE_TECHNIQUE_DATA_ENCRYPTED_FOR_IMPACT, "@element" = "DATA_MANIPULATION", XDM_CONST.MITRE_TECHNIQUE_DATA_MANIPULATION, "@element" = "DATA_MANIPULATION_RUNTIME_DATA_MANIPULATION", XDM_CONST.MITRE_TECHNIQUE_DATA_MANIPULATION_RUNTIME_DATA_MANIPULATION, "@element" = "DATA_MANIPULATION_STORED_DATA_MANIPULATION", XDM_CONST.MITRE_TECHNIQUE_DATA_MANIPULATION_STORED_DATA_MANIPULATION, "@element" = "DATA_MANIPULATION_TRANSMITTED_DATA_MANIPULATION", XDM_CONST.MITRE_TECHNIQUE_DATA_MANIPULATION_TRANSMITTED_DATA_MANIPULATION, "@element" = "DATA_OBFUSCATION", XDM_CONST.MITRE_TECHNIQUE_DATA_OBFUSCATION, "@element" = "DATA_OBFUSCATION_JUNK_DATA", XDM_CONST.MITRE_TECHNIQUE_DATA_OBFUSCATION_JUNK_DATA, "@element" = "DATA_OBFUSCATION_PROTOCOL_IMPERSONATION", XDM_CONST.MITRE_TECHNIQUE_DATA_OBFUSCATION_PROTOCOL_IMPERSONATION, "@element" = "DATA_OBFUSCATION_STEGANOGRAPHY", XDM_CONST.MITRE_TECHNIQUE_DATA_OBFUSCATION_STEGANOGRAPHY, "@element" = "DATA_STAGED", XDM_CONST.MITRE_TECHNIQUE_DATA_STAGED, "@element" = "DATA_STAGED_LOCAL_DATA_STAGING", XDM_CONST.MITRE_TECHNIQUE_DATA_STAGED_LOCAL_DATA_STAGING, "@element" = "DATA_STAGED_REMOTE_DATA_STAGING", XDM_CONST.MITRE_TECHNIQUE_DATA_STAGED_REMOTE_DATA_STAGING, "@element" = "DATA_TRANSFER_SIZE_LIMITS", XDM_CONST.MITRE_TECHNIQUE_DATA_TRANSFER_SIZE_LIMITS, "@element" = "DATA_FROM_CLOUD_STORAGE_OBJECT", XDM_CONST.MITRE_TECHNIQUE_DATA_FROM_CLOUD_STORAGE_OBJECT, "@element" = "DATA_FROM_CONFIGURATION_REPOSITORY", XDM_CONST.MITRE_TECHNIQUE_DATA_FROM_CONFIGURATION_REPOSITORY, "@element" = "DATA_FROM_CONFIGURATION_REPOSITORY_NETWORK_DEVICE_CONFIGURATION_DUMP", XDM_CONST.MITRE_TECHNIQUE_DATA_FROM_CONFIGURATION_REPOSITORY_NETWORK_DEVICE_CONFIGURATION_DUMP, "@element" = "DATA_FROM_CONFIGURATION_REPOSITORY_SNMP", XDM_CONST.MITRE_TECHNIQUE_DATA_FROM_CONFIGURATION_REPOSITORY_SNMP, "@element" = "DATA_FROM_INFORMATION_REPOSITORIES", XDM_CONST.MITRE_TECHNIQUE_DATA_FROM_INFORMATION_REPOSITORIES, "@element" = "DATA_FROM_INFORMATION_REPOSITORIES_CODE_REPOSITORIES", XDM_CONST.MITRE_TECHNIQUE_DATA_FROM_INFORMATION_REPOSITORIES_CODE_REPOSITORIES, "@element" = "DATA_FROM_INFORMATION_REPOSITORIES_CONFLUENCE", XDM_CONST.MITRE_TECHNIQUE_DATA_FROM_INFORMATION_REPOSITORIES_CONFLUENCE, "@element" = "DATA_FROM_INFORMATION_REPOSITORIES_SHAREPOINT", XDM_CONST.MITRE_TECHNIQUE_DATA_FROM_INFORMATION_REPOSITORIES_SHAREPOINT, "@element" = "DATA_FROM_LOCAL_SYSTEM", XDM_CONST.MITRE_TECHNIQUE_DATA_FROM_LOCAL_SYSTEM, "@element" = "DATA_FROM_NETWORK_SHARED_DRIVE", XDM_CONST.MITRE_TECHNIQUE_DATA_FROM_NETWORK_SHARED_DRIVE, "@element" = "DATA_FROM_REMOVABLE_MEDIA", XDM_CONST.MITRE_TECHNIQUE_DATA_FROM_REMOVABLE_MEDIA, "@element" = "DEFACEMENT", XDM_CONST.MITRE_TECHNIQUE_DEFACEMENT, "@element" = "DEFACEMENT_EXTERNAL_DEFACEMENT", XDM_CONST.MITRE_TECHNIQUE_DEFACEMENT_EXTERNAL_DEFACEMENT, "@element" = "DEFACEMENT_INTERNAL_DEFACEMENT", XDM_CONST.MITRE_TECHNIQUE_DEFACEMENT_INTERNAL_DEFACEMENT, "@element" = "DEOBFUSCATE_DECODE_FILES_OR_INFORMATION", XDM_CONST.MITRE_TECHNIQUE_DEOBFUSCATE_DECODE_FILES_OR_INFORMATION, "@element" = "DEPLOY_CONTAINER", XDM_CONST.MITRE_TECHNIQUE_DEPLOY_CONTAINER, "@element" = "DEVELOP_CAPABILITIES", XDM_CONST.MITRE_TECHNIQUE_DEVELOP_CAPABILITIES, "@element" = "DEVELOP_CAPABILITIES_CODE_SIGNING_CERTIFICATES", XDM_CONST.MITRE_TECHNIQUE_DEVELOP_CAPABILITIES_CODE_SIGNING_CERTIFICATES, "@element" = "DEVELOP_CAPABILITIES_DIGITAL_CERTIFICATES", XDM_CONST.MITRE_TECHNIQUE_DEVELOP_CAPABILITIES_DIGITAL_CERTIFICATES, "@element" = "DEVELOP_CAPABILITIES_EXPLOITS", XDM_CONST.MITRE_TECHNIQUE_DEVELOP_CAPABILITIES_EXPLOITS, "@element" = "DEVELOP_CAPABILITIES_MALWARE", XDM_CONST.MITRE_TECHNIQUE_DEVELOP_CAPABILITIES_MALWARE, "@element" = "DIRECT_VOLUME_ACCESS", XDM_CONST.MITRE_TECHNIQUE_DIRECT_VOLUME_ACCESS, "@element" = "DISK_WIPE", XDM_CONST.MITRE_TECHNIQUE_DISK_WIPE, "@element" = "DISK_WIPE_DISK_CONTENT_WIPE", XDM_CONST.MITRE_TECHNIQUE_DISK_WIPE_DISK_CONTENT_WIPE, "@element" = "DISK_WIPE_DISK_STRUCTURE_WIPE", XDM_CONST.MITRE_TECHNIQUE_DISK_WIPE_DISK_STRUCTURE_WIPE, "@element" = "DOMAIN_POLICY_MODIFICATION", XDM_CONST.MITRE_TECHNIQUE_DOMAIN_POLICY_MODIFICATION, "@element" = "DOMAIN_POLICY_MODIFICATION_DOMAIN_TRUST_MODIFICATION", XDM_CONST.MITRE_TECHNIQUE_DOMAIN_POLICY_MODIFICATION_DOMAIN_TRUST_MODIFICATION, "@element" = "DOMAIN_POLICY_MODIFICATION_GROUP_POLICY_MODIFICATION", XDM_CONST.MITRE_TECHNIQUE_DOMAIN_POLICY_MODIFICATION_GROUP_POLICY_MODIFICATION, "@element" = "DOMAIN_TRUST_DISCOVERY", XDM_CONST.MITRE_TECHNIQUE_DOMAIN_TRUST_DISCOVERY, "@element" = "DRIVE_BY_COMPROMISE", XDM_CONST.MITRE_TECHNIQUE_DRIVE_BY_COMPROMISE, "@element" = "DYNAMIC_RESOLUTION", XDM_CONST.MITRE_TECHNIQUE_DYNAMIC_RESOLUTION, "@element" = "DYNAMIC_RESOLUTION_DNS_CALCULATION", XDM_CONST.MITRE_TECHNIQUE_DYNAMIC_RESOLUTION_DNS_CALCULATION, "@element" = "DYNAMIC_RESOLUTION_DOMAIN_GENERATION_ALGORITHMS", XDM_CONST.MITRE_TECHNIQUE_DYNAMIC_RESOLUTION_DOMAIN_GENERATION_ALGORITHMS, "@element" = "DYNAMIC_RESOLUTION_FAST_FLUX_DNS", XDM_CONST.MITRE_TECHNIQUE_DYNAMIC_RESOLUTION_FAST_FLUX_DNS, "@element" = "EMAIL_COLLECTION", XDM_CONST.MITRE_TECHNIQUE_EMAIL_COLLECTION, "@element" = "EMAIL_COLLECTION_EMAIL_FORWARDING_RULE", XDM_CONST.MITRE_TECHNIQUE_EMAIL_COLLECTION_EMAIL_FORWARDING_RULE, "@element" = "EMAIL_COLLECTION_LOCAL_EMAIL_COLLECTION", XDM_CONST.MITRE_TECHNIQUE_EMAIL_COLLECTION_LOCAL_EMAIL_COLLECTION, "@element" = "EMAIL_COLLECTION_REMOTE_EMAIL_COLLECTION", XDM_CONST.MITRE_TECHNIQUE_EMAIL_COLLECTION_REMOTE_EMAIL_COLLECTION, "@element" = "ENCRYPTED_CHANNEL", XDM_CONST.MITRE_TECHNIQUE_ENCRYPTED_CHANNEL, "@element" = "ENCRYPTED_CHANNEL_ASYMMETRIC_CRYPTOGRAPHY", XDM_CONST.MITRE_TECHNIQUE_ENCRYPTED_CHANNEL_ASYMMETRIC_CRYPTOGRAPHY, "@element" = "ENCRYPTED_CHANNEL_SYMMETRIC_CRYPTOGRAPHY", XDM_CONST.MITRE_TECHNIQUE_ENCRYPTED_CHANNEL_SYMMETRIC_CRYPTOGRAPHY, "@element" = "ENDPOINT_DENIAL_OF_SERVICE", XDM_CONST.MITRE_TECHNIQUE_ENDPOINT_DENIAL_OF_SERVICE, "@element" = "ENDPOINT_DENIAL_OF_SERVICE_APPLICATION_EXHAUSTION_FLOOD", XDM_CONST.MITRE_TECHNIQUE_ENDPOINT_DENIAL_OF_SERVICE_APPLICATION_EXHAUSTION_FLOOD, "@element" = "ENDPOINT_DENIAL_OF_SERVICE_APPLICATION_OR_SYSTEM_EXPLOITATION", XDM_CONST.MITRE_TECHNIQUE_ENDPOINT_DENIAL_OF_SERVICE_APPLICATION_OR_SYSTEM_EXPLOITATION, "@element" = "ENDPOINT_DENIAL_OF_SERVICE_OS_EXHAUSTION_FLOOD", XDM_CONST.MITRE_TECHNIQUE_ENDPOINT_DENIAL_OF_SERVICE_OS_EXHAUSTION_FLOOD, "@element" = "ENDPOINT_DENIAL_OF_SERVICE_SERVICE_EXHAUSTION_FLOOD", XDM_CONST.MITRE_TECHNIQUE_ENDPOINT_DENIAL_OF_SERVICE_SERVICE_EXHAUSTION_FLOOD, "@element" = "ESCAPE_TO_HOST", XDM_CONST.MITRE_TECHNIQUE_ESCAPE_TO_HOST, "@element" = "ESTABLISH_ACCOUNTS", XDM_CONST.MITRE_TECHNIQUE_ESTABLISH_ACCOUNTS, "@element" = "ESTABLISH_ACCOUNTS_EMAIL_ACCOUNTS", XDM_CONST.MITRE_TECHNIQUE_ESTABLISH_ACCOUNTS_EMAIL_ACCOUNTS, "@element" = "ESTABLISH_ACCOUNTS_SOCIAL_MEDIA_ACCOUNTS", XDM_CONST.MITRE_TECHNIQUE_ESTABLISH_ACCOUNTS_SOCIAL_MEDIA_ACCOUNTS, "@element" = "EVENT_TRIGGERED_EXECUTION", XDM_CONST.MITRE_TECHNIQUE_EVENT_TRIGGERED_EXECUTION, "@element" = "EVENT_TRIGGERED_EXECUTION_ACCESSIBILITY_FEATURES", XDM_CONST.MITRE_TECHNIQUE_EVENT_TRIGGERED_EXECUTION_ACCESSIBILITY_FEATURES, "@element" = "EVENT_TRIGGERED_EXECUTION_APPCERT_DLLS", XDM_CONST.MITRE_TECHNIQUE_EVENT_TRIGGERED_EXECUTION_APPCERT_DLLS, "@element" = "EVENT_TRIGGERED_EXECUTION_APPINIT_DLLS", XDM_CONST.MITRE_TECHNIQUE_EVENT_TRIGGERED_EXECUTION_APPINIT_DLLS, "@element" = "EVENT_TRIGGERED_EXECUTION_APPLICATION_SHIMMING", XDM_CONST.MITRE_TECHNIQUE_EVENT_TRIGGERED_EXECUTION_APPLICATION_SHIMMING, "@element" = "EVENT_TRIGGERED_EXECUTION_CHANGE_DEFAULT_FILE_ASSOCIATION", XDM_CONST.MITRE_TECHNIQUE_EVENT_TRIGGERED_EXECUTION_CHANGE_DEFAULT_FILE_ASSOCIATION, "@element" = "EVENT_TRIGGERED_EXECUTION_COMPONENT_OBJECT_MODEL_HIJACKING", XDM_CONST.MITRE_TECHNIQUE_EVENT_TRIGGERED_EXECUTION_COMPONENT_OBJECT_MODEL_HIJACKING, "@element" = "EVENT_TRIGGERED_EXECUTION_EMOND", XDM_CONST.MITRE_TECHNIQUE_EVENT_TRIGGERED_EXECUTION_EMOND, "@element" = "EVENT_TRIGGERED_EXECUTION_IMAGE_FILE_EXECUTION_OPTIONS_INJECTION", XDM_CONST.MITRE_TECHNIQUE_EVENT_TRIGGERED_EXECUTION_IMAGE_FILE_EXECUTION_OPTIONS_INJECTION, "@element" = "EVENT_TRIGGERED_EXECUTION_LC_LOAD_DYLIB_ADDITION", XDM_CONST.MITRE_TECHNIQUE_EVENT_TRIGGERED_EXECUTION_LC_LOAD_DYLIB_ADDITION, "@element" = "EVENT_TRIGGERED_EXECUTION_NETSH_HELPER_DLL", XDM_CONST.MITRE_TECHNIQUE_EVENT_TRIGGERED_EXECUTION_NETSH_HELPER_DLL, "@element" = "EVENT_TRIGGERED_EXECUTION_POWERSHELL_PROFILE", XDM_CONST.MITRE_TECHNIQUE_EVENT_TRIGGERED_EXECUTION_POWERSHELL_PROFILE, "@element" = "EVENT_TRIGGERED_EXECUTION_SCREENSAVER", XDM_CONST.MITRE_TECHNIQUE_EVENT_TRIGGERED_EXECUTION_SCREENSAVER, "@element" = "EVENT_TRIGGERED_EXECUTION_TRAP", XDM_CONST.MITRE_TECHNIQUE_EVENT_TRIGGERED_EXECUTION_TRAP, "@element" = "EVENT_TRIGGERED_EXECUTION_UNIX_SHELL_CONFIGURATION_MODIFICATION", XDM_CONST.MITRE_TECHNIQUE_EVENT_TRIGGERED_EXECUTION_UNIX_SHELL_CONFIGURATION_MODIFICATION, "@element" = "MITRE_TECHNIQUE_EVENT_TRIGGERED_EXECUTION_WINDOWS_MANAGEMENT_INSTRUMENTATION_EVENT_SUBSCRIPTION", XDM_CONST.MITRE_TECHNIQUE_MITRE_TECHNIQUE_EVENT_TRIGGERED_EXECUTION_WINDOWS_MANAGEMENT_INSTRUMENTATION_EVENT_SUBSCRIPTION, "@element" = "EXECUTION_GUARDRAILS", XDM_CONST.MITRE_TECHNIQUE_EXECUTION_GUARDRAILS, "@element" = "EXECUTION_GUARDRAILS_ENVIRONMENTAL_KEYING", XDM_CONST.MITRE_TECHNIQUE_EXECUTION_GUARDRAILS_ENVIRONMENTAL_KEYING, "@element" = "EXFILTRATION_OVER_ALTERNATIVE_PROTOCOL", XDM_CONST.MITRE_TECHNIQUE_EXFILTRATION_OVER_ALTERNATIVE_PROTOCOL, "@element" = "MITRE_TECHNIQUE_EXFILTRATION_OVER_ALTERNATIVE_PROTOCOL_EXFILTRATION_OVER_ASYMMETRIC_ENCRYPTED_NON_C2_PROTOCOL", XDM_CONST.MITRE_TECHNIQUE_MITRE_TECHNIQUE_EXFILTRATION_OVER_ALTERNATIVE_PROTOCOL_EXFILTRATION_OVER_ASYMMETRIC_ENCRYPTED_NON_C2_PROTOCOL, "@element" = "MITRE_TECHNIQUE_EXFILTRATION_OVER_ALTERNATIVE_PROTOCOL_EXFILTRATION_OVER_SYMMETRIC_ENCRYPTED_NON_C2_PROTOCOL", XDM_CONST.MITRE_TECHNIQUE_MITRE_TECHNIQUE_EXFILTRATION_OVER_ALTERNATIVE_PROTOCOL_EXFILTRATION_OVER_SYMMETRIC_ENCRYPTED_NON_C2_PROTOCOL, "@element" = "MITRE_TECHNIQUE_EXFILTRATION_OVER_ALTERNATIVE_PROTOCOL_EXFILTRATION_OVER_UNENCRYPTED_OBFUSCATED_NON_C2_PROTOCOL", XDM_CONST.MITRE_TECHNIQUE_MITRE_TECHNIQUE_EXFILTRATION_OVER_ALTERNATIVE_PROTOCOL_EXFILTRATION_OVER_UNENCRYPTED_OBFUSCATED_NON_C2_PROTOCOL, "@element" = "EXFILTRATION_OVER_C2_CHANNEL", XDM_CONST.MITRE_TECHNIQUE_EXFILTRATION_OVER_C2_CHANNEL, "@element" = "EXFILTRATION_OVER_OTHER_NETWORK_MEDIUM", XDM_CONST.MITRE_TECHNIQUE_EXFILTRATION_OVER_OTHER_NETWORK_MEDIUM, "@element" = "EXFILTRATION_OVER_OTHER_NETWORK_MEDIUM_EXFILTRATION_OVER_BLUETOOTH", XDM_CONST.MITRE_TECHNIQUE_EXFILTRATION_OVER_OTHER_NETWORK_MEDIUM_EXFILTRATION_OVER_BLUETOOTH, "@element" = "EXFILTRATION_OVER_PHYSICAL_MEDIUM", XDM_CONST.MITRE_TECHNIQUE_EXFILTRATION_OVER_PHYSICAL_MEDIUM, "@element" = "EXFILTRATION_OVER_PHYSICAL_MEDIUM_EXFILTRATION_OVER_USB", XDM_CONST.MITRE_TECHNIQUE_EXFILTRATION_OVER_PHYSICAL_MEDIUM_EXFILTRATION_OVER_USB, "@element" = "EXFILTRATION_OVER_WEB_SERVICE", XDM_CONST.MITRE_TECHNIQUE_EXFILTRATION_OVER_WEB_SERVICE, "@element" = "EXFILTRATION_OVER_WEB_SERVICE_EXFILTRATION_TO_CLOUD_STORAGE", XDM_CONST.MITRE_TECHNIQUE_EXFILTRATION_OVER_WEB_SERVICE_EXFILTRATION_TO_CLOUD_STORAGE, "@element" = "EXFILTRATION_OVER_WEB_SERVICE_EXFILTRATION_TO_CODE_REPOSITORY", XDM_CONST.MITRE_TECHNIQUE_EXFILTRATION_OVER_WEB_SERVICE_EXFILTRATION_TO_CODE_REPOSITORY, "@element" = "EXPLOIT_PUBLIC_FACING_APPLICATION", XDM_CONST.MITRE_TECHNIQUE_EXPLOIT_PUBLIC_FACING_APPLICATION, "@element" = "EXPLOITATION_FOR_CLIENT_EXECUTION", XDM_CONST.MITRE_TECHNIQUE_EXPLOITATION_FOR_CLIENT_EXECUTION, "@element" = "EXPLOITATION_FOR_CREDENTIAL_ACCESS", XDM_CONST.MITRE_TECHNIQUE_EXPLOITATION_FOR_CREDENTIAL_ACCESS, "@element" = "EXPLOITATION_FOR_DEFENSE_EVASION", XDM_CONST.MITRE_TECHNIQUE_EXPLOITATION_FOR_DEFENSE_EVASION, "@element" = "EXPLOITATION_FOR_PRIVILEGE_ESCALATION", XDM_CONST.MITRE_TECHNIQUE_EXPLOITATION_FOR_PRIVILEGE_ESCALATION, "@element" = "EXPLOITATION_OF_REMOTE_SERVICES", XDM_CONST.MITRE_TECHNIQUE_EXPLOITATION_OF_REMOTE_SERVICES, "@element" = "EXTERNAL_REMOTE_SERVICES", XDM_CONST.MITRE_TECHNIQUE_EXTERNAL_REMOTE_SERVICES, "@element" = "FALLBACK_CHANNELS", XDM_CONST.MITRE_TECHNIQUE_FALLBACK_CHANNELS, "@element" = "FILE_AND_DIRECTORY_DISCOVERY", XDM_CONST.MITRE_TECHNIQUE_FILE_AND_DIRECTORY_DISCOVERY, "@element" = "FILE_AND_DIRECTORY_PERMISSIONS_MODIFICATION", XDM_CONST.MITRE_TECHNIQUE_FILE_AND_DIRECTORY_PERMISSIONS_MODIFICATION, "@element" = "MITRE_TECHNIQUE_FILE_AND_DIRECTORY_PERMISSIONS_MODIFICATION_LINUX_AND_MAC_FILE_AND_DIRECTORY_PERMISSIONS_MODIFICATION", XDM_CONST.MITRE_TECHNIQUE_MITRE_TECHNIQUE_FILE_AND_DIRECTORY_PERMISSIONS_MODIFICATION_LINUX_AND_MAC_FILE_AND_DIRECTORY_PERMISSIONS_MODIFICATION, "@element" = "MITRE_TECHNIQUE_FILE_AND_DIRECTORY_PERMISSIONS_MODIFICATION_WINDOWS_FILE_AND_DIRECTORY_PERMISSIONS_MODIFICATION", XDM_CONST.MITRE_TECHNIQUE_MITRE_TECHNIQUE_FILE_AND_DIRECTORY_PERMISSIONS_MODIFICATION_WINDOWS_FILE_AND_DIRECTORY_PERMISSIONS_MODIFICATION, "@element" = "FIRMWARE_CORRUPTION", XDM_CONST.MITRE_TECHNIQUE_FIRMWARE_CORRUPTION, "@element" = "FORCED_AUTHENTICATION", XDM_CONST.MITRE_TECHNIQUE_FORCED_AUTHENTICATION, "@element" = "FORGE_WEB_CREDENTIALS", XDM_CONST.MITRE_TECHNIQUE_FORGE_WEB_CREDENTIALS, "@element" = "FORGE_WEB_CREDENTIALS_SAML_TOKENS", XDM_CONST.MITRE_TECHNIQUE_FORGE_WEB_CREDENTIALS_SAML_TOKENS, "@element" = "FORGE_WEB_CREDENTIALS_WEB_COOKIES", XDM_CONST.MITRE_TECHNIQUE_FORGE_WEB_CREDENTIALS_WEB_COOKIES, "@element" = "GATHER_VICTIM_HOST_INFORMATION", XDM_CONST.MITRE_TECHNIQUE_GATHER_VICTIM_HOST_INFORMATION, "@element" = "GATHER_VICTIM_HOST_INFORMATION_CLIENT_CONFIGURATIONS", XDM_CONST.MITRE_TECHNIQUE_GATHER_VICTIM_HOST_INFORMATION_CLIENT_CONFIGURATIONS, "@element" = "GATHER_VICTIM_HOST_INFORMATION_FIRMWARE", XDM_CONST.MITRE_TECHNIQUE_GATHER_VICTIM_HOST_INFORMATION_FIRMWARE, "@element" = "GATHER_VICTIM_HOST_INFORMATION_HARDWARE", XDM_CONST.MITRE_TECHNIQUE_GATHER_VICTIM_HOST_INFORMATION_HARDWARE, "@element" = "GATHER_VICTIM_HOST_INFORMATION_SOFTWARE", XDM_CONST.MITRE_TECHNIQUE_GATHER_VICTIM_HOST_INFORMATION_SOFTWARE, "@element" = "GATHER_VICTIM_IDENTITY_INFORMATION", XDM_CONST.MITRE_TECHNIQUE_GATHER_VICTIM_IDENTITY_INFORMATION, "@element" = "GATHER_VICTIM_IDENTITY_INFORMATION_CREDENTIALS", XDM_CONST.MITRE_TECHNIQUE_GATHER_VICTIM_IDENTITY_INFORMATION_CREDENTIALS, "@element" = "GATHER_VICTIM_IDENTITY_INFORMATION_EMAIL_ADDRESSES", XDM_CONST.MITRE_TECHNIQUE_GATHER_VICTIM_IDENTITY_INFORMATION_EMAIL_ADDRESSES, "@element" = "GATHER_VICTIM_IDENTITY_INFORMATION_EMPLOYEE_NAMES", XDM_CONST.MITRE_TECHNIQUE_GATHER_VICTIM_IDENTITY_INFORMATION_EMPLOYEE_NAMES, "@element" = "GATHER_VICTIM_NETWORK_INFORMATION", XDM_CONST.MITRE_TECHNIQUE_GATHER_VICTIM_NETWORK_INFORMATION, "@element" = "GATHER_VICTIM_NETWORK_INFORMATION_DNS", XDM_CONST.MITRE_TECHNIQUE_GATHER_VICTIM_NETWORK_INFORMATION_DNS, "@element" = "GATHER_VICTIM_NETWORK_INFORMATION_DOMAIN_PROPERTIES", XDM_CONST.MITRE_TECHNIQUE_GATHER_VICTIM_NETWORK_INFORMATION_DOMAIN_PROPERTIES, "@element" = "GATHER_VICTIM_NETWORK_INFORMATION_IP_ADDRESSES", XDM_CONST.MITRE_TECHNIQUE_GATHER_VICTIM_NETWORK_INFORMATION_IP_ADDRESSES, "@element" = "GATHER_VICTIM_NETWORK_INFORMATION_NETWORK_SECURITY_APPLIANCES", XDM_CONST.MITRE_TECHNIQUE_GATHER_VICTIM_NETWORK_INFORMATION_NETWORK_SECURITY_APPLIANCES, "@element" = "GATHER_VICTIM_NETWORK_INFORMATION_NETWORK_TOPOLOGY", XDM_CONST.MITRE_TECHNIQUE_GATHER_VICTIM_NETWORK_INFORMATION_NETWORK_TOPOLOGY, "@element" = "GATHER_VICTIM_NETWORK_INFORMATION_NETWORK_TRUST_DEPENDENCIES", XDM_CONST.MITRE_TECHNIQUE_GATHER_VICTIM_NETWORK_INFORMATION_NETWORK_TRUST_DEPENDENCIES, "@element" = "GATHER_VICTIM_ORG_INFORMATION", XDM_CONST.MITRE_TECHNIQUE_GATHER_VICTIM_ORG_INFORMATION, "@element" = "GATHER_VICTIM_ORG_INFORMATION_BUSINESS_RELATIONSHIPS", XDM_CONST.MITRE_TECHNIQUE_GATHER_VICTIM_ORG_INFORMATION_BUSINESS_RELATIONSHIPS, "@element" = "GATHER_VICTIM_ORG_INFORMATION_DETERMINE_PHYSICAL_LOCATIONS", XDM_CONST.MITRE_TECHNIQUE_GATHER_VICTIM_ORG_INFORMATION_DETERMINE_PHYSICAL_LOCATIONS, "@element" = "GATHER_VICTIM_ORG_INFORMATION_IDENTIFY_BUSINESS_TEMPO", XDM_CONST.MITRE_TECHNIQUE_GATHER_VICTIM_ORG_INFORMATION_IDENTIFY_BUSINESS_TEMPO, "@element" = "GATHER_VICTIM_ORG_INFORMATION_IDENTIFY_ROLES", XDM_CONST.MITRE_TECHNIQUE_GATHER_VICTIM_ORG_INFORMATION_IDENTIFY_ROLES, "@element" = "GROUP_POLICY_DISCOVERY", XDM_CONST.MITRE_TECHNIQUE_GROUP_POLICY_DISCOVERY, "@element" = "HARDWARE_ADDITIONS", XDM_CONST.MITRE_TECHNIQUE_HARDWARE_ADDITIONS, "@element" = "HIDE_ARTIFACTS", XDM_CONST.MITRE_TECHNIQUE_HIDE_ARTIFACTS, "@element" = "HIDE_ARTIFACTS_EMAIL_HIDING_RULES", XDM_CONST.MITRE_TECHNIQUE_HIDE_ARTIFACTS_EMAIL_HIDING_RULES, "@element" = "HIDE_ARTIFACTS_HIDDEN_FILE_SYSTEM", XDM_CONST.MITRE_TECHNIQUE_HIDE_ARTIFACTS_HIDDEN_FILE_SYSTEM, "@element" = "HIDE_ARTIFACTS_HIDDEN_FILES_AND_DIRECTORIES", XDM_CONST.MITRE_TECHNIQUE_HIDE_ARTIFACTS_HIDDEN_FILES_AND_DIRECTORIES, "@element" = "HIDE_ARTIFACTS_HIDDEN_USERS", XDM_CONST.MITRE_TECHNIQUE_HIDE_ARTIFACTS_HIDDEN_USERS, "@element" = "HIDE_ARTIFACTS_HIDDEN_WINDOW", XDM_CONST.MITRE_TECHNIQUE_HIDE_ARTIFACTS_HIDDEN_WINDOW, "@element" = "HIDE_ARTIFACTS_NTFS_FILE_ATTRIBUTES", XDM_CONST.MITRE_TECHNIQUE_HIDE_ARTIFACTS_NTFS_FILE_ATTRIBUTES, "@element" = "HIDE_ARTIFACTS_RESOURCE_FORKING", XDM_CONST.MITRE_TECHNIQUE_HIDE_ARTIFACTS_RESOURCE_FORKING, "@element" = "HIDE_ARTIFACTS_RUN_VIRTUAL_INSTANCE", XDM_CONST.MITRE_TECHNIQUE_HIDE_ARTIFACTS_RUN_VIRTUAL_INSTANCE, "@element" = "HIDE_ARTIFACTS_VBA_STOMPING", XDM_CONST.MITRE_TECHNIQUE_HIDE_ARTIFACTS_VBA_STOMPING, "@element" = "HIJACK_EXECUTION_FLOW", XDM_CONST.MITRE_TECHNIQUE_HIJACK_EXECUTION_FLOW, "@element" = "HIJACK_EXECUTION_FLOW_COR_PROFILER", XDM_CONST.MITRE_TECHNIQUE_HIJACK_EXECUTION_FLOW_COR_PROFILER, "@element" = "HIJACK_EXECUTION_FLOW_DLL_SEARCH_ORDER_HIJACKING", XDM_CONST.MITRE_TECHNIQUE_HIJACK_EXECUTION_FLOW_DLL_SEARCH_ORDER_HIJACKING, "@element" = "HIJACK_EXECUTION_FLOW_DLL_SIDE_LOADING", XDM_CONST.MITRE_TECHNIQUE_HIJACK_EXECUTION_FLOW_DLL_SIDE_LOADING, "@element" = "HIJACK_EXECUTION_FLOW_DYLIB_HIJACKING", XDM_CONST.MITRE_TECHNIQUE_HIJACK_EXECUTION_FLOW_DYLIB_HIJACKING, "@element" = "HIJACK_EXECUTION_FLOW_DYNAMIC_LINKER_HIJACKING", XDM_CONST.MITRE_TECHNIQUE_HIJACK_EXECUTION_FLOW_DYNAMIC_LINKER_HIJACKING, "@element" = "HIJACK_EXECUTION_FLOW_EXECUTABLE_INSTALLER_FILE_PERMISSIONS_WEAKNESS", XDM_CONST.MITRE_TECHNIQUE_HIJACK_EXECUTION_FLOW_EXECUTABLE_INSTALLER_FILE_PERMISSIONS_WEAKNESS, "@element" = "HIJACK_EXECUTION_FLOW_PATH_INTERCEPTION_BY_PATH_ENVIRONMENT_VARIABLE", XDM_CONST.MITRE_TECHNIQUE_HIJACK_EXECUTION_FLOW_PATH_INTERCEPTION_BY_PATH_ENVIRONMENT_VARIABLE, "@element" = "HIJACK_EXECUTION_FLOW_PATH_INTERCEPTION_BY_SEARCH_ORDER_HIJACKING", XDM_CONST.MITRE_TECHNIQUE_HIJACK_EXECUTION_FLOW_PATH_INTERCEPTION_BY_SEARCH_ORDER_HIJACKING, "@element" = "HIJACK_EXECUTION_FLOW_PATH_INTERCEPTION_BY_UNQUOTED_PATH", XDM_CONST.MITRE_TECHNIQUE_HIJACK_EXECUTION_FLOW_PATH_INTERCEPTION_BY_UNQUOTED_PATH, "@element" = "HIJACK_EXECUTION_FLOW_SERVICES_FILE_PERMISSIONS_WEAKNESS", XDM_CONST.MITRE_TECHNIQUE_HIJACK_EXECUTION_FLOW_SERVICES_FILE_PERMISSIONS_WEAKNESS, "@element" = "HIJACK_EXECUTION_FLOW_SERVICES_REGISTRY_PERMISSIONS_WEAKNESS", XDM_CONST.MITRE_TECHNIQUE_HIJACK_EXECUTION_FLOW_SERVICES_REGISTRY_PERMISSIONS_WEAKNESS, "@element" = "IMPAIR_DEFENSES", XDM_CONST.MITRE_TECHNIQUE_IMPAIR_DEFENSES, "@element" = "IMPAIR_DEFENSES_DISABLE_CLOUD_LOGS", XDM_CONST.MITRE_TECHNIQUE_IMPAIR_DEFENSES_DISABLE_CLOUD_LOGS, "@element" = "IMPAIR_DEFENSES_DISABLE_WINDOWS_EVENT_LOGGING", XDM_CONST.MITRE_TECHNIQUE_IMPAIR_DEFENSES_DISABLE_WINDOWS_EVENT_LOGGING, "@element" = "IMPAIR_DEFENSES_DISABLE_OR_MODIFY_CLOUD_FIREWALL", XDM_CONST.MITRE_TECHNIQUE_IMPAIR_DEFENSES_DISABLE_OR_MODIFY_CLOUD_FIREWALL, "@element" = "IMPAIR_DEFENSES_DISABLE_OR_MODIFY_SYSTEM_FIREWALL", XDM_CONST.MITRE_TECHNIQUE_IMPAIR_DEFENSES_DISABLE_OR_MODIFY_SYSTEM_FIREWALL, "@element" = "IMPAIR_DEFENSES_DISABLE_OR_MODIFY_TOOLS", XDM_CONST.MITRE_TECHNIQUE_IMPAIR_DEFENSES_DISABLE_OR_MODIFY_TOOLS, "@element" = "IMPAIR_DEFENSES_DOWNGRADE_ATTACK", XDM_CONST.MITRE_TECHNIQUE_IMPAIR_DEFENSES_DOWNGRADE_ATTACK, "@element" = "IMPAIR_DEFENSES_IMPAIR_COMMAND_HISTORY_LOGGING", XDM_CONST.MITRE_TECHNIQUE_IMPAIR_DEFENSES_IMPAIR_COMMAND_HISTORY_LOGGING, "@element" = "IMPAIR_DEFENSES_INDICATOR_BLOCKING", XDM_CONST.MITRE_TECHNIQUE_IMPAIR_DEFENSES_INDICATOR_BLOCKING, "@element" = "IMPAIR_DEFENSES_SAFE_MODE_BOOT", XDM_CONST.MITRE_TECHNIQUE_IMPAIR_DEFENSES_SAFE_MODE_BOOT, "@element" = "IMPLANT_INTERNAL_IMAGE", XDM_CONST.MITRE_TECHNIQUE_IMPLANT_INTERNAL_IMAGE, "@element" = "INDICATOR_REMOVAL_ON_HOST", XDM_CONST.MITRE_TECHNIQUE_INDICATOR_REMOVAL_ON_HOST, "@element" = "INDICATOR_REMOVAL_ON_HOST_CLEAR_COMMAND_HISTORY", XDM_CONST.MITRE_TECHNIQUE_INDICATOR_REMOVAL_ON_HOST_CLEAR_COMMAND_HISTORY, "@element" = "INDICATOR_REMOVAL_ON_HOST_CLEAR_LINUX_OR_MAC_SYSTEM_LOGS", XDM_CONST.MITRE_TECHNIQUE_INDICATOR_REMOVAL_ON_HOST_CLEAR_LINUX_OR_MAC_SYSTEM_LOGS, "@element" = "INDICATOR_REMOVAL_ON_HOST_CLEAR_WINDOWS_EVENT_LOGS", XDM_CONST.MITRE_TECHNIQUE_INDICATOR_REMOVAL_ON_HOST_CLEAR_WINDOWS_EVENT_LOGS, "@element" = "INDICATOR_REMOVAL_ON_HOST_FILE_DELETION", XDM_CONST.MITRE_TECHNIQUE_INDICATOR_REMOVAL_ON_HOST_FILE_DELETION, "@element" = "INDICATOR_REMOVAL_ON_HOST_NETWORK_SHARE_CONNECTION_REMOVAL", XDM_CONST.MITRE_TECHNIQUE_INDICATOR_REMOVAL_ON_HOST_NETWORK_SHARE_CONNECTION_REMOVAL, "@element" = "INDICATOR_REMOVAL_ON_HOST_TIMESTOMP", XDM_CONST.MITRE_TECHNIQUE_INDICATOR_REMOVAL_ON_HOST_TIMESTOMP, "@element" = "INDIRECT_COMMAND_EXECUTION", XDM_CONST.MITRE_TECHNIQUE_INDIRECT_COMMAND_EXECUTION, "@element" = "INGRESS_TOOL_TRANSFER", XDM_CONST.MITRE_TECHNIQUE_INGRESS_TOOL_TRANSFER, "@element" = "INHIBIT_SYSTEM_RECOVERY", XDM_CONST.MITRE_TECHNIQUE_INHIBIT_SYSTEM_RECOVERY, "@element" = "INPUT_CAPTURE", XDM_CONST.MITRE_TECHNIQUE_INPUT_CAPTURE, "@element" = "INPUT_CAPTURE_CREDENTIAL_API_HOOKING", XDM_CONST.MITRE_TECHNIQUE_INPUT_CAPTURE_CREDENTIAL_API_HOOKING, "@element" = "INPUT_CAPTURE_GUI_INPUT_CAPTURE", XDM_CONST.MITRE_TECHNIQUE_INPUT_CAPTURE_GUI_INPUT_CAPTURE, "@element" = "INPUT_CAPTURE_KEYLOGGING", XDM_CONST.MITRE_TECHNIQUE_INPUT_CAPTURE_KEYLOGGING, "@element" = "INPUT_CAPTURE_WEB_PORTAL_CAPTURE", XDM_CONST.MITRE_TECHNIQUE_INPUT_CAPTURE_WEB_PORTAL_CAPTURE, "@element" = "INTER_PROCESS_COMMUNICATION", XDM_CONST.MITRE_TECHNIQUE_INTER_PROCESS_COMMUNICATION, "@element" = "INTER_PROCESS_COMMUNICATION_COMPONENT_OBJECT_MODEL", XDM_CONST.MITRE_TECHNIQUE_INTER_PROCESS_COMMUNICATION_COMPONENT_OBJECT_MODEL, "@element" = "INTER_PROCESS_COMMUNICATION_DYNAMIC_DATA_EXCHANGE", XDM_CONST.MITRE_TECHNIQUE_INTER_PROCESS_COMMUNICATION_DYNAMIC_DATA_EXCHANGE, "@element" = "INTERNAL_SPEARPHISHING", XDM_CONST.MITRE_TECHNIQUE_INTERNAL_SPEARPHISHING, "@element" = "LATERAL_TOOL_TRANSFER", XDM_CONST.MITRE_TECHNIQUE_LATERAL_TOOL_TRANSFER, "@element" = "MASQUERADING", XDM_CONST.MITRE_TECHNIQUE_MASQUERADING, "@element" = "MASQUERADING_DOUBLE_FILE_EXTENSION", XDM_CONST.MITRE_TECHNIQUE_MASQUERADING_DOUBLE_FILE_EXTENSION, "@element" = "MASQUERADING_INVALID_CODE_SIGNATURE", XDM_CONST.MITRE_TECHNIQUE_MASQUERADING_INVALID_CODE_SIGNATURE, "@element" = "MASQUERADING_MASQUERADE_TASK_OR_SERVICE", XDM_CONST.MITRE_TECHNIQUE_MASQUERADING_MASQUERADE_TASK_OR_SERVICE, "@element" = "MASQUERADING_MATCH_LEGITIMATE_NAME_OR_LOCATION", XDM_CONST.MITRE_TECHNIQUE_MASQUERADING_MATCH_LEGITIMATE_NAME_OR_LOCATION, "@element" = "MASQUERADING_RENAME_SYSTEM_UTILITIES", XDM_CONST.MITRE_TECHNIQUE_MASQUERADING_RENAME_SYSTEM_UTILITIES, "@element" = "MASQUERADING_RIGHT_TO_LEFT_OVERRIDE", XDM_CONST.MITRE_TECHNIQUE_MASQUERADING_RIGHT_TO_LEFT_OVERRIDE, "@element" = "MASQUERADING_SPACE_AFTER_FILENAME", XDM_CONST.MITRE_TECHNIQUE_MASQUERADING_SPACE_AFTER_FILENAME, "@element" = "MODIFY_AUTHENTICATION_PROCESS", XDM_CONST.MITRE_TECHNIQUE_MODIFY_AUTHENTICATION_PROCESS, "@element" = "MODIFY_AUTHENTICATION_PROCESS_DOMAIN_CONTROLLER_AUTHENTICATION", XDM_CONST.MITRE_TECHNIQUE_MODIFY_AUTHENTICATION_PROCESS_DOMAIN_CONTROLLER_AUTHENTICATION, "@element" = "MODIFY_AUTHENTICATION_PROCESS_NETWORK_DEVICE_AUTHENTICATION", XDM_CONST.MITRE_TECHNIQUE_MODIFY_AUTHENTICATION_PROCESS_NETWORK_DEVICE_AUTHENTICATION, "@element" = "MODIFY_AUTHENTICATION_PROCESS_PASSWORD_FILTER_DLL", XDM_CONST.MITRE_TECHNIQUE_MODIFY_AUTHENTICATION_PROCESS_PASSWORD_FILTER_DLL, "@element" = "MODIFY_AUTHENTICATION_PROCESS_PLUGGABLE_AUTHENTICATION_MODULES", XDM_CONST.MITRE_TECHNIQUE_MODIFY_AUTHENTICATION_PROCESS_PLUGGABLE_AUTHENTICATION_MODULES, "@element" = "MODIFY_CLOUD_COMPUTE_INFRASTRUCTURE", XDM_CONST.MITRE_TECHNIQUE_MODIFY_CLOUD_COMPUTE_INFRASTRUCTURE, "@element" = "MODIFY_CLOUD_COMPUTE_INFRASTRUCTURE_CREATE_CLOUD_INSTANCE", XDM_CONST.MITRE_TECHNIQUE_MODIFY_CLOUD_COMPUTE_INFRASTRUCTURE_CREATE_CLOUD_INSTANCE, "@element" = "MODIFY_CLOUD_COMPUTE_INFRASTRUCTURE_CREATE_SNAPSHOT", XDM_CONST.MITRE_TECHNIQUE_MODIFY_CLOUD_COMPUTE_INFRASTRUCTURE_CREATE_SNAPSHOT, "@element" = "MODIFY_CLOUD_COMPUTE_INFRASTRUCTURE_DELETE_CLOUD_INSTANCE", XDM_CONST.MITRE_TECHNIQUE_MODIFY_CLOUD_COMPUTE_INFRASTRUCTURE_DELETE_CLOUD_INSTANCE, "@element" = "MODIFY_CLOUD_COMPUTE_INFRASTRUCTURE_REVERT_CLOUD_INSTANCE", XDM_CONST.MITRE_TECHNIQUE_MODIFY_CLOUD_COMPUTE_INFRASTRUCTURE_REVERT_CLOUD_INSTANCE, "@element" = "MODIFY_REGISTRY", XDM_CONST.MITRE_TECHNIQUE_MODIFY_REGISTRY, "@element" = "MODIFY_SYSTEM_IMAGE", XDM_CONST.MITRE_TECHNIQUE_MODIFY_SYSTEM_IMAGE, "@element" = "MODIFY_SYSTEM_IMAGE_DOWNGRADE_SYSTEM_IMAGE", XDM_CONST.MITRE_TECHNIQUE_MODIFY_SYSTEM_IMAGE_DOWNGRADE_SYSTEM_IMAGE, "@element" = "MODIFY_SYSTEM_IMAGE_PATCH_SYSTEM_IMAGE", XDM_CONST.MITRE_TECHNIQUE_MODIFY_SYSTEM_IMAGE_PATCH_SYSTEM_IMAGE, "@element" = "MULTI_STAGE_CHANNELS", XDM_CONST.MITRE_TECHNIQUE_MULTI_STAGE_CHANNELS, "@element" = "NATIVE_API", XDM_CONST.MITRE_TECHNIQUE_NATIVE_API, "@element" = "NETWORK_BOUNDARY_BRIDGING", XDM_CONST.MITRE_TECHNIQUE_NETWORK_BOUNDARY_BRIDGING, "@element" = "NETWORK_BOUNDARY_BRIDGING_NETWORK_ADDRESS_TRANSLATION_TRAVERSAL", XDM_CONST.MITRE_TECHNIQUE_NETWORK_BOUNDARY_BRIDGING_NETWORK_ADDRESS_TRANSLATION_TRAVERSAL, "@element" = "NETWORK_DENIAL_OF_SERVICE", XDM_CONST.MITRE_TECHNIQUE_NETWORK_DENIAL_OF_SERVICE, "@element" = "NETWORK_DENIAL_OF_SERVICE_DIRECT_NETWORK_FLOOD", XDM_CONST.MITRE_TECHNIQUE_NETWORK_DENIAL_OF_SERVICE_DIRECT_NETWORK_FLOOD, "@element" = "NETWORK_DENIAL_OF_SERVICE_REFLECTION_AMPLIFICATION", XDM_CONST.MITRE_TECHNIQUE_NETWORK_DENIAL_OF_SERVICE_REFLECTION_AMPLIFICATION, "@element" = "NETWORK_SERVICE_SCANNING", XDM_CONST.MITRE_TECHNIQUE_NETWORK_SERVICE_SCANNING, "@element" = "NETWORK_SHARE_DISCOVERY", XDM_CONST.MITRE_TECHNIQUE_NETWORK_SHARE_DISCOVERY, "@element" = "NETWORK_SNIFFING", XDM_CONST.MITRE_TECHNIQUE_NETWORK_SNIFFING, "@element" = "NON_APPLICATION_LAYER_PROTOCOL", XDM_CONST.MITRE_TECHNIQUE_NON_APPLICATION_LAYER_PROTOCOL, "@element" = "NON_STANDARD_PORT", XDM_CONST.MITRE_TECHNIQUE_NON_STANDARD_PORT, "@element" = "OS_CREDENTIAL_DUMPING", XDM_CONST.MITRE_TECHNIQUE_OS_CREDENTIAL_DUMPING, "@element" = "OS_CREDENTIAL_DUMPING_PASSWD_AND_SHADOW", XDM_CONST.MITRE_TECHNIQUE_OS_CREDENTIAL_DUMPING_PASSWD_AND_SHADOW, "@element" = "OS_CREDENTIAL_DUMPING_CACHED_DOMAIN_CREDENTIALS", XDM_CONST.MITRE_TECHNIQUE_OS_CREDENTIAL_DUMPING_CACHED_DOMAIN_CREDENTIALS, "@element" = "OS_CREDENTIAL_DUMPING_DCSYNC", XDM_CONST.MITRE_TECHNIQUE_OS_CREDENTIAL_DUMPING_DCSYNC, "@element" = "OS_CREDENTIAL_DUMPING_LSA_SECRETS", XDM_CONST.MITRE_TECHNIQUE_OS_CREDENTIAL_DUMPING_LSA_SECRETS, "@element" = "OS_CREDENTIAL_DUMPING_LSASS_MEMORY", XDM_CONST.MITRE_TECHNIQUE_OS_CREDENTIAL_DUMPING_LSASS_MEMORY, "@element" = "OS_CREDENTIAL_DUMPING_NTDS", XDM_CONST.MITRE_TECHNIQUE_OS_CREDENTIAL_DUMPING_NTDS, "@element" = "OS_CREDENTIAL_DUMPING_PROC_FILESYSTEM", XDM_CONST.MITRE_TECHNIQUE_OS_CREDENTIAL_DUMPING_PROC_FILESYSTEM, "@element" = "OS_CREDENTIAL_DUMPING_SECURITY_ACCOUNT_MANAGER", XDM_CONST.MITRE_TECHNIQUE_OS_CREDENTIAL_DUMPING_SECURITY_ACCOUNT_MANAGER, "@element" = "OBFUSCATED_FILES_OR_INFORMATION", XDM_CONST.MITRE_TECHNIQUE_OBFUSCATED_FILES_OR_INFORMATION, "@element" = "OBFUSCATED_FILES_OR_INFORMATION_BINARY_PADDING", XDM_CONST.MITRE_TECHNIQUE_OBFUSCATED_FILES_OR_INFORMATION_BINARY_PADDING, "@element" = "OBFUSCATED_FILES_OR_INFORMATION_COMPILE_AFTER_DELIVERY", XDM_CONST.MITRE_TECHNIQUE_OBFUSCATED_FILES_OR_INFORMATION_COMPILE_AFTER_DELIVERY, "@element" = "OBFUSCATED_FILES_OR_INFORMATION_HTML_SMUGGLING", XDM_CONST.MITRE_TECHNIQUE_OBFUSCATED_FILES_OR_INFORMATION_HTML_SMUGGLING, "@element" = "OBFUSCATED_FILES_OR_INFORMATION_INDICATOR_REMOVAL_FROM_TOOLS", XDM_CONST.MITRE_TECHNIQUE_OBFUSCATED_FILES_OR_INFORMATION_INDICATOR_REMOVAL_FROM_TOOLS, "@element" = "OBFUSCATED_FILES_OR_INFORMATION_SOFTWARE_PACKING", XDM_CONST.MITRE_TECHNIQUE_OBFUSCATED_FILES_OR_INFORMATION_SOFTWARE_PACKING, "@element" = "OBFUSCATED_FILES_OR_INFORMATION_STEGANOGRAPHY", XDM_CONST.MITRE_TECHNIQUE_OBFUSCATED_FILES_OR_INFORMATION_STEGANOGRAPHY, "@element" = "OBTAIN_CAPABILITIES", XDM_CONST.MITRE_TECHNIQUE_OBTAIN_CAPABILITIES, "@element" = "OBTAIN_CAPABILITIES_CODE_SIGNING_CERTIFICATES", XDM_CONST.MITRE_TECHNIQUE_OBTAIN_CAPABILITIES_CODE_SIGNING_CERTIFICATES, "@element" = "OBTAIN_CAPABILITIES_DIGITAL_CERTIFICATES", XDM_CONST.MITRE_TECHNIQUE_OBTAIN_CAPABILITIES_DIGITAL_CERTIFICATES, "@element" = "OBTAIN_CAPABILITIES_EXPLOITS", XDM_CONST.MITRE_TECHNIQUE_OBTAIN_CAPABILITIES_EXPLOITS, "@element" = "OBTAIN_CAPABILITIES_MALWARE", XDM_CONST.MITRE_TECHNIQUE_OBTAIN_CAPABILITIES_MALWARE, "@element" = "OBTAIN_CAPABILITIES_TOOL", XDM_CONST.MITRE_TECHNIQUE_OBTAIN_CAPABILITIES_TOOL, "@element" = "OBTAIN_CAPABILITIES_VULNERABILITIES", XDM_CONST.MITRE_TECHNIQUE_OBTAIN_CAPABILITIES_VULNERABILITIES, "@element" = "OFFICE_APPLICATION_STARTUP", XDM_CONST.MITRE_TECHNIQUE_OFFICE_APPLICATION_STARTUP, "@element" = "OFFICE_APPLICATION_STARTUP_ADD_INS", XDM_CONST.MITRE_TECHNIQUE_OFFICE_APPLICATION_STARTUP_ADD_INS, "@element" = "OFFICE_APPLICATION_STARTUP_OFFICE_TEMPLATE_MACROS", XDM_CONST.MITRE_TECHNIQUE_OFFICE_APPLICATION_STARTUP_OFFICE_TEMPLATE_MACROS, "@element" = "OFFICE_APPLICATION_STARTUP_OFFICE_TEST", XDM_CONST.MITRE_TECHNIQUE_OFFICE_APPLICATION_STARTUP_OFFICE_TEST, "@element" = "OFFICE_APPLICATION_STARTUP_OUTLOOK_FORMS", XDM_CONST.MITRE_TECHNIQUE_OFFICE_APPLICATION_STARTUP_OUTLOOK_FORMS, "@element" = "OFFICE_APPLICATION_STARTUP_OUTLOOK_HOME_PAGE", XDM_CONST.MITRE_TECHNIQUE_OFFICE_APPLICATION_STARTUP_OUTLOOK_HOME_PAGE, "@element" = "OFFICE_APPLICATION_STARTUP_OUTLOOK_RULES", XDM_CONST.MITRE_TECHNIQUE_OFFICE_APPLICATION_STARTUP_OUTLOOK_RULES, "@element" = "PASSWORD_POLICY_DISCOVERY", XDM_CONST.MITRE_TECHNIQUE_PASSWORD_POLICY_DISCOVERY, "@element" = "PERIPHERAL_DEVICE_DISCOVERY", XDM_CONST.MITRE_TECHNIQUE_PERIPHERAL_DEVICE_DISCOVERY, "@element" = "PERMISSION_GROUPS_DISCOVERY", XDM_CONST.MITRE_TECHNIQUE_PERMISSION_GROUPS_DISCOVERY, "@element" = "PERMISSION_GROUPS_DISCOVERY_CLOUD_GROUPS", XDM_CONST.MITRE_TECHNIQUE_PERMISSION_GROUPS_DISCOVERY_CLOUD_GROUPS, "@element" = "PERMISSION_GROUPS_DISCOVERY_DOMAIN_GROUPS", XDM_CONST.MITRE_TECHNIQUE_PERMISSION_GROUPS_DISCOVERY_DOMAIN_GROUPS, "@element" = "PERMISSION_GROUPS_DISCOVERY_LOCAL_GROUPS", XDM_CONST.MITRE_TECHNIQUE_PERMISSION_GROUPS_DISCOVERY_LOCAL_GROUPS, "@element" = "PHISHING", XDM_CONST.MITRE_TECHNIQUE_PHISHING, "@element" = "PHISHING_FOR_INFORMATION", XDM_CONST.MITRE_TECHNIQUE_PHISHING_FOR_INFORMATION, "@element" = "PHISHING_FOR_INFORMATION_SPEARPHISHING_ATTACHMENT", XDM_CONST.MITRE_TECHNIQUE_PHISHING_FOR_INFORMATION_SPEARPHISHING_ATTACHMENT, "@element" = "PHISHING_FOR_INFORMATION_SPEARPHISHING_LINK", XDM_CONST.MITRE_TECHNIQUE_PHISHING_FOR_INFORMATION_SPEARPHISHING_LINK, "@element" = "PHISHING_FOR_INFORMATION_SPEARPHISHING_SERVICE", XDM_CONST.MITRE_TECHNIQUE_PHISHING_FOR_INFORMATION_SPEARPHISHING_SERVICE, "@element" = "PHISHING_SPEARPHISHING_ATTACHMENT", XDM_CONST.MITRE_TECHNIQUE_PHISHING_SPEARPHISHING_ATTACHMENT, "@element" = "PHISHING_SPEARPHISHING_LINK", XDM_CONST.MITRE_TECHNIQUE_PHISHING_SPEARPHISHING_LINK, "@element" = "PHISHING_SPEARPHISHING_VIA_SERVICE", XDM_CONST.MITRE_TECHNIQUE_PHISHING_SPEARPHISHING_VIA_SERVICE, "@element" = "PRE_OS_BOOT", XDM_CONST.MITRE_TECHNIQUE_PRE_OS_BOOT, "@element" = "PRE_OS_BOOT_BOOTKIT", XDM_CONST.MITRE_TECHNIQUE_PRE_OS_BOOT_BOOTKIT, "@element" = "PRE_OS_BOOT_COMPONENT_FIRMWARE", XDM_CONST.MITRE_TECHNIQUE_PRE_OS_BOOT_COMPONENT_FIRMWARE, "@element" = "PRE_OS_BOOT_ROMMONKIT", XDM_CONST.MITRE_TECHNIQUE_PRE_OS_BOOT_ROMMONKIT, "@element" = "PRE_OS_BOOT_SYSTEM_FIRMWARE", XDM_CONST.MITRE_TECHNIQUE_PRE_OS_BOOT_SYSTEM_FIRMWARE, "@element" = "PRE_OS_BOOT_TFTP_BOOT", XDM_CONST.MITRE_TECHNIQUE_PRE_OS_BOOT_TFTP_BOOT, "@element" = "PROCESS_DISCOVERY", XDM_CONST.MITRE_TECHNIQUE_PROCESS_DISCOVERY, "@element" = "PROCESS_INJECTION", XDM_CONST.MITRE_TECHNIQUE_PROCESS_INJECTION, "@element" = "PROCESS_INJECTION_ASYNCHRONOUS_PROCEDURE_CALL", XDM_CONST.MITRE_TECHNIQUE_PROCESS_INJECTION_ASYNCHRONOUS_PROCEDURE_CALL, "@element" = "PROCESS_INJECTION_DYNAMIC_LINK_LIBRARY_INJECTION", XDM_CONST.MITRE_TECHNIQUE_PROCESS_INJECTION_DYNAMIC_LINK_LIBRARY_INJECTION, "@element" = "PROCESS_INJECTION_EXTRA_WINDOW_MEMORY_INJECTION", XDM_CONST.MITRE_TECHNIQUE_PROCESS_INJECTION_EXTRA_WINDOW_MEMORY_INJECTION, "@element" = "PROCESS_INJECTION_PORTABLE_EXECUTABLE_INJECTION", XDM_CONST.MITRE_TECHNIQUE_PROCESS_INJECTION_PORTABLE_EXECUTABLE_INJECTION, "@element" = "PROCESS_INJECTION_PROC_MEMORY", XDM_CONST.MITRE_TECHNIQUE_PROCESS_INJECTION_PROC_MEMORY, "@element" = "PROCESS_INJECTION_PROCESS_DOPPELGANGING", XDM_CONST.MITRE_TECHNIQUE_PROCESS_INJECTION_PROCESS_DOPPELGANGING, "@element" = "PROCESS_INJECTION_PROCESS_HOLLOWING", XDM_CONST.MITRE_TECHNIQUE_PROCESS_INJECTION_PROCESS_HOLLOWING, "@element" = "PROCESS_INJECTION_PTRACE_SYSTEM_CALLS", XDM_CONST.MITRE_TECHNIQUE_PROCESS_INJECTION_PTRACE_SYSTEM_CALLS, "@element" = "PROCESS_INJECTION_THREAD_EXECUTION_HIJACKING", XDM_CONST.MITRE_TECHNIQUE_PROCESS_INJECTION_THREAD_EXECUTION_HIJACKING, "@element" = "PROCESS_INJECTION_THREAD_LOCAL_STORAGE", XDM_CONST.MITRE_TECHNIQUE_PROCESS_INJECTION_THREAD_LOCAL_STORAGE, "@element" = "PROCESS_INJECTION_VDSO_HIJACKING", XDM_CONST.MITRE_TECHNIQUE_PROCESS_INJECTION_VDSO_HIJACKING, "@element" = "PROTOCOL_TUNNELING", XDM_CONST.MITRE_TECHNIQUE_PROTOCOL_TUNNELING, "@element" = "PROXY", XDM_CONST.MITRE_TECHNIQUE_PROXY, "@element" = "PROXY_DOMAIN_FRONTING", XDM_CONST.MITRE_TECHNIQUE_PROXY_DOMAIN_FRONTING, "@element" = "PROXY_EXTERNAL_PROXY",
XDM_CONST.MITRE_TECHNIQUE_PROXY_EXTERNAL_PROXY, "@element" = "PROXY_INTERNAL_PROXY", XDM_CONST.MITRE_TECHNIQUE_PROXY_INTERNAL_PROXY, "@element" = "PROXY_MULTI_HOP_PROXY", XDM_CONST.MITRE_TECHNIQUE_PROXY_MULTI_HOP_PROXY, "@element" = "QUERY_REGISTRY", XDM_CONST.MITRE_TECHNIQUE_QUERY_REGISTRY, "@element" = "REFLECTIVE_CODE_LOADING", XDM_CONST.MITRE_TECHNIQUE_REFLECTIVE_CODE_LOADING, "@element" = "REMOTE_ACCESS_SOFTWARE", XDM_CONST.MITRE_TECHNIQUE_REMOTE_ACCESS_SOFTWARE, "@element" = "REMOTE_SERVICE_SESSION_HIJACKING", XDM_CONST.MITRE_TECHNIQUE_REMOTE_SERVICE_SESSION_HIJACKING, "@element" = "REMOTE_SERVICE_SESSION_HIJACKING_RDP_HIJACKING", XDM_CONST.MITRE_TECHNIQUE_REMOTE_SERVICE_SESSION_HIJACKING_RDP_HIJACKING, "@element" = "REMOTE_SERVICE_SESSION_HIJACKING_SSH_HIJACKING", XDM_CONST.MITRE_TECHNIQUE_REMOTE_SERVICE_SESSION_HIJACKING_SSH_HIJACKING, "@element" = "REMOTE_SERVICES", XDM_CONST.MITRE_TECHNIQUE_REMOTE_SERVICES, "@element" = "REMOTE_SERVICES_DISTRIBUTED_COMPONENT_OBJECT_MODEL", XDM_CONST.MITRE_TECHNIQUE_REMOTE_SERVICES_DISTRIBUTED_COMPONENT_OBJECT_MODEL, "@element" = "REMOTE_SERVICES_REMOTE_DESKTOP_PROTOCOL", XDM_CONST.MITRE_TECHNIQUE_REMOTE_SERVICES_REMOTE_DESKTOP_PROTOCOL, "@element" = "REMOTE_SERVICES_SMB_OR_ADMIN_SHARES", XDM_CONST.MITRE_TECHNIQUE_REMOTE_SERVICES_SMB_OR_ADMIN_SHARES, "@element" = "REMOTE_SERVICES_SSH", XDM_CONST.MITRE_TECHNIQUE_REMOTE_SERVICES_SSH, "@element" = "REMOTE_SERVICES_VNC", XDM_CONST.MITRE_TECHNIQUE_REMOTE_SERVICES_VNC, "@element" = "REMOTE_SERVICES_WINDOWS_REMOTE_MANAGEMENT", XDM_CONST.MITRE_TECHNIQUE_REMOTE_SERVICES_WINDOWS_REMOTE_MANAGEMENT, "@element" = "REMOTE_SYSTEM_DISCOVERY", XDM_CONST.MITRE_TECHNIQUE_REMOTE_SYSTEM_DISCOVERY, "@element" = "REPLICATION_THROUGH_REMOVABLE_MEDIA", XDM_CONST.MITRE_TECHNIQUE_REPLICATION_THROUGH_REMOVABLE_MEDIA, "@element" = "RESOURCE_HIJACKING", XDM_CONST.MITRE_TECHNIQUE_RESOURCE_HIJACKING, "@element" = "ROGUE_DOMAIN_CONTROLLER", XDM_CONST.MITRE_TECHNIQUE_ROGUE_DOMAIN_CONTROLLER, "@element" = "ROOTKIT", XDM_CONST.MITRE_TECHNIQUE_ROOTKIT, "@element" = "SCHEDULED_TASK", XDM_CONST.MITRE_TECHNIQUE_SCHEDULED_TASK, "@element" = "SCHEDULED_TASK_LINUX_AT_JOB", XDM_CONST.MITRE_TECHNIQUE_SCHEDULED_TASK_LINUX_AT_JOB, "@element" = "SCHEDULED_TASK_WINDOWS_AT_JOB", XDM_CONST.MITRE_TECHNIQUE_SCHEDULED_TASK_WINDOWS_AT_JOB, "@element" = "SCHEDULED_TASK_OR_CONTAINER_ORCHESTRATION_JOB", XDM_CONST.MITRE_TECHNIQUE_SCHEDULED_TASK_OR_CONTAINER_ORCHESTRATION_JOB, "@element" = "SCHEDULED_TASK_OR_CRON_JOB", XDM_CONST.MITRE_TECHNIQUE_SCHEDULED_TASK_OR_CRON_JOB, "@element" = "SCHEDULED_TASK_OR_SYSTEMD_TIMERS", XDM_CONST.MITRE_TECHNIQUE_SCHEDULED_TASK_OR_SYSTEMD_TIMERS, "@element" = "SCHEDULED_TRANSFER", XDM_CONST.MITRE_TECHNIQUE_SCHEDULED_TRANSFER, "@element" = "SCREEN_CAPTURE", XDM_CONST.MITRE_TECHNIQUE_SCREEN_CAPTURE, "@element" = "SEARCH_CLOSED_SOURCES", XDM_CONST.MITRE_TECHNIQUE_SEARCH_CLOSED_SOURCES, "@element" = "SEARCH_CLOSED_SOURCES_PURCHASE_TECHNICAL_DATA", XDM_CONST.MITRE_TECHNIQUE_SEARCH_CLOSED_SOURCES_PURCHASE_TECHNICAL_DATA, "@element" = "SEARCH_CLOSED_SOURCES_THREAT_INTEL_VENDORS", XDM_CONST.MITRE_TECHNIQUE_SEARCH_CLOSED_SOURCES_THREAT_INTEL_VENDORS, "@element" = "SEARCH_OPEN_TECHNICAL_DATABASES", XDM_CONST.MITRE_TECHNIQUE_SEARCH_OPEN_TECHNICAL_DATABASES, "@element" = "SEARCH_OPEN_TECHNICAL_DATABASES_CDNS", XDM_CONST.MITRE_TECHNIQUE_SEARCH_OPEN_TECHNICAL_DATABASES_CDNS, "@element" = "SEARCH_OPEN_TECHNICAL_DATABASES_DNS_OR_PASSIVE_DNS", XDM_CONST.MITRE_TECHNIQUE_SEARCH_OPEN_TECHNICAL_DATABASES_DNS_OR_PASSIVE_DNS, "@element" = "SEARCH_OPEN_TECHNICAL_DATABASES_DIGITAL_CERTIFICATES", XDM_CONST.MITRE_TECHNIQUE_SEARCH_OPEN_TECHNICAL_DATABASES_DIGITAL_CERTIFICATES, "@element" = "SEARCH_OPEN_TECHNICAL_DATABASES_SCAN_DATABASES", XDM_CONST.MITRE_TECHNIQUE_SEARCH_OPEN_TECHNICAL_DATABASES_SCAN_DATABASES, "@element" = "SEARCH_OPEN_TECHNICAL_DATABASES_WHOIS", XDM_CONST.MITRE_TECHNIQUE_SEARCH_OPEN_TECHNICAL_DATABASES_WHOIS, "@element" = "SEARCH_OPEN_WEBSITES_DOMAINS", XDM_CONST.MITRE_TECHNIQUE_SEARCH_OPEN_WEBSITES_DOMAINS, "@element" = "SEARCH_OPEN_WEBSITES_DOMAINS_SEARCH_ENGINES", XDM_CONST.MITRE_TECHNIQUE_SEARCH_OPEN_WEBSITES_DOMAINS_SEARCH_ENGINES, "@element" = "SEARCH_OPEN_WEBSITES_OR_DOMAINS_SOCIAL_MEDIA", XDM_CONST.MITRE_TECHNIQUE_SEARCH_OPEN_WEBSITES_OR_DOMAINS_SOCIAL_MEDIA, "@element" = "SEARCH_VICTIM_OWNED_WEBSITES", XDM_CONST.MITRE_TECHNIQUE_SEARCH_VICTIM_OWNED_WEBSITES, "@element" = "SERVER_SOFTWARE_COMPONENT", XDM_CONST.MITRE_TECHNIQUE_SERVER_SOFTWARE_COMPONENT, "@element" = "SERVER_SOFTWARE_COMPONENT_IIS_COMPONENTS", XDM_CONST.MITRE_TECHNIQUE_SERVER_SOFTWARE_COMPONENT_IIS_COMPONENTS, "@element" = "SERVER_SOFTWARE_COMPONENT_SQL_STORED_PROCEDURES", XDM_CONST.MITRE_TECHNIQUE_SERVER_SOFTWARE_COMPONENT_SQL_STORED_PROCEDURES, "@element" = "SERVER_SOFTWARE_COMPONENT_TRANSPORT_AGENT", XDM_CONST.MITRE_TECHNIQUE_SERVER_SOFTWARE_COMPONENT_TRANSPORT_AGENT, "@element" = "SERVER_SOFTWARE_COMPONENT_WEB_SHELL", XDM_CONST.MITRE_TECHNIQUE_SERVER_SOFTWARE_COMPONENT_WEB_SHELL, "@element" = "SERVICE_STOP", XDM_CONST.MITRE_TECHNIQUE_SERVICE_STOP, "@element" = "SHARED_MODULES", XDM_CONST.MITRE_TECHNIQUE_SHARED_MODULES, "@element" = "SIGNED_BINARY_PROXY_EXECUTION", XDM_CONST.MITRE_TECHNIQUE_SIGNED_BINARY_PROXY_EXECUTION, "@element" = "SIGNED_BINARY_PROXY_EXECUTION_CMSTP", XDM_CONST.MITRE_TECHNIQUE_SIGNED_BINARY_PROXY_EXECUTION_CMSTP, "@element" = "SIGNED_BINARY_PROXY_EXECUTION_COMPILED_HTML_FILE", XDM_CONST.MITRE_TECHNIQUE_SIGNED_BINARY_PROXY_EXECUTION_COMPILED_HTML_FILE, "@element" = "SIGNED_BINARY_PROXY_EXECUTION_CONTROL_PANEL", XDM_CONST.MITRE_TECHNIQUE_SIGNED_BINARY_PROXY_EXECUTION_CONTROL_PANEL, "@element" = "SIGNED_BINARY_PROXY_EXECUTION_INSTALLUTIL", XDM_CONST.MITRE_TECHNIQUE_SIGNED_BINARY_PROXY_EXECUTION_INSTALLUTIL, "@element" = "SIGNED_BINARY_PROXY_EXECUTION_MMC", XDM_CONST.MITRE_TECHNIQUE_SIGNED_BINARY_PROXY_EXECUTION_MMC, "@element" = "SIGNED_BINARY_PROXY_EXECUTION_MAVINJECT", XDM_CONST.MITRE_TECHNIQUE_SIGNED_BINARY_PROXY_EXECUTION_MAVINJECT, "@element" = "SIGNED_BINARY_PROXY_EXECUTION_MSHTA", XDM_CONST.MITRE_TECHNIQUE_SIGNED_BINARY_PROXY_EXECUTION_MSHTA, "@element" = "SIGNED_BINARY_PROXY_EXECUTION_MSIEXEC", XDM_CONST.MITRE_TECHNIQUE_SIGNED_BINARY_PROXY_EXECUTION_MSIEXEC, "@element" = "SIGNED_BINARY_PROXY_EXECUTION_ODBCCONF", XDM_CONST.MITRE_TECHNIQUE_SIGNED_BINARY_PROXY_EXECUTION_ODBCCONF, "@element" = "SIGNED_BINARY_PROXY_EXECUTION_REGSVCS_OR_REGASM", XDM_CONST.MITRE_TECHNIQUE_SIGNED_BINARY_PROXY_EXECUTION_REGSVCS_OR_REGASM, "@element" = "SIGNED_BINARY_PROXY_EXECUTION_REGSVR32", XDM_CONST.MITRE_TECHNIQUE_SIGNED_BINARY_PROXY_EXECUTION_REGSVR32, "@element" = "SIGNED_BINARY_PROXY_EXECUTION_RUNDLL32", XDM_CONST.MITRE_TECHNIQUE_SIGNED_BINARY_PROXY_EXECUTION_RUNDLL32, "@element" = "SIGNED_BINARY_PROXY_EXECUTION_VERCLSID", XDM_CONST.MITRE_TECHNIQUE_SIGNED_BINARY_PROXY_EXECUTION_VERCLSID, "@element" = "SIGNED_SCRIPT_PROXY_EXECUTION", XDM_CONST.MITRE_TECHNIQUE_SIGNED_SCRIPT_PROXY_EXECUTION, "@element" = "SIGNED_SCRIPT_PROXY_EXECUTION_PUBPRN", XDM_CONST.MITRE_TECHNIQUE_SIGNED_SCRIPT_PROXY_EXECUTION_PUBPRN, "@element" = "SOFTWARE_DEPLOYMENT_TOOLS", XDM_CONST.MITRE_TECHNIQUE_SOFTWARE_DEPLOYMENT_TOOLS, "@element" = "SOFTWARE_DISCOVERY", XDM_CONST.MITRE_TECHNIQUE_SOFTWARE_DISCOVERY, "@element" = "SOFTWARE_DISCOVERY_SECURITY_SOFTWARE_DISCOVERY", XDM_CONST.MITRE_TECHNIQUE_SOFTWARE_DISCOVERY_SECURITY_SOFTWARE_DISCOVERY, "@element" = "STAGE_CAPABILITIES", XDM_CONST.MITRE_TECHNIQUE_STAGE_CAPABILITIES, "@element" = "STAGE_CAPABILITIES_DRIVE_BY_TARGET", XDM_CONST.MITRE_TECHNIQUE_STAGE_CAPABILITIES_DRIVE_BY_TARGET, "@element" = "STAGE_CAPABILITIES_INSTALL_DIGITAL_CERTIFICATE", XDM_CONST.MITRE_TECHNIQUE_STAGE_CAPABILITIES_INSTALL_DIGITAL_CERTIFICATE, "@element" = "STAGE_CAPABILITIES_LINK_TARGET", XDM_CONST.MITRE_TECHNIQUE_STAGE_CAPABILITIES_LINK_TARGET, "@element" = "STAGE_CAPABILITIES_UPLOAD_MALWARE", XDM_CONST.MITRE_TECHNIQUE_STAGE_CAPABILITIES_UPLOAD_MALWARE, "@element" = "STAGE_CAPABILITIES_UPLOAD_TOOL", XDM_CONST.MITRE_TECHNIQUE_STAGE_CAPABILITIES_UPLOAD_TOOL, "@element" = "STEAL_APPLICATION_ACCESS_TOKEN", XDM_CONST.MITRE_TECHNIQUE_STEAL_APPLICATION_ACCESS_TOKEN, "@element" = "STEAL_WEB_SESSION_COOKIE", XDM_CONST.MITRE_TECHNIQUE_STEAL_WEB_SESSION_COOKIE, "@element" = "STEAL_OR_FORGE_KERBEROS_TICKETS", XDM_CONST.MITRE_TECHNIQUE_STEAL_OR_FORGE_KERBEROS_TICKETS, "@element" = "STEAL_OR_FORGE_KERBEROS_TICKETS_AS_REP_ROASTING", XDM_CONST.MITRE_TECHNIQUE_STEAL_OR_FORGE_KERBEROS_TICKETS_AS_REP_ROASTING, "@element" = "STEAL_OR_FORGE_KERBEROS_TICKETS_GOLDEN_TICKET", XDM_CONST.MITRE_TECHNIQUE_STEAL_OR_FORGE_KERBEROS_TICKETS_GOLDEN_TICKET, "@element" = "STEAL_OR_FORGE_KERBEROS_TICKETS_KERBEROASTING", XDM_CONST.MITRE_TECHNIQUE_STEAL_OR_FORGE_KERBEROS_TICKETS_KERBEROASTING, "@element" = "STEAL_OR_FORGE_KERBEROS_TICKETS_SILVER_TICKET", XDM_CONST.MITRE_TECHNIQUE_STEAL_OR_FORGE_KERBEROS_TICKETS_SILVER_TICKET, "@element" = "SUBVERT_TRUST_CONTROLS", XDM_CONST.MITRE_TECHNIQUE_SUBVERT_TRUST_CONTROLS, "@element" = "SUBVERT_TRUST_CONTROLS_CODE_SIGNING", XDM_CONST.MITRE_TECHNIQUE_SUBVERT_TRUST_CONTROLS_CODE_SIGNING, "@element" = "SUBVERT_TRUST_CONTROLS_CODE_SIGNING_POLICY_MODIFICATION", XDM_CONST.MITRE_TECHNIQUE_SUBVERT_TRUST_CONTROLS_CODE_SIGNING_POLICY_MODIFICATION, "@element" = "SUBVERT_TRUST_CONTROLS_GATEKEEPER_BYPASS", XDM_CONST.MITRE_TECHNIQUE_SUBVERT_TRUST_CONTROLS_GATEKEEPER_BYPASS, "@element" = "SUBVERT_TRUST_CONTROLS_INSTALL_ROOT_CERTIFICATE", XDM_CONST.MITRE_TECHNIQUE_SUBVERT_TRUST_CONTROLS_INSTALL_ROOT_CERTIFICATE, "@element" = "SUBVERT_TRUST_CONTROLS_MARK_OF_THE_WEB_BYPASS", XDM_CONST.MITRE_TECHNIQUE_SUBVERT_TRUST_CONTROLS_MARK_OF_THE_WEB_BYPASS, "@element" = "SUBVERT_TRUST_CONTROLS_SIP_AND_TRUST_PROVIDER_HIJACKING", XDM_CONST.MITRE_TECHNIQUE_SUBVERT_TRUST_CONTROLS_SIP_AND_TRUST_PROVIDER_HIJACKING, "@element" = "SUPPLY_CHAIN_COMPROMISE", XDM_CONST.MITRE_TECHNIQUE_SUPPLY_CHAIN_COMPROMISE, "@element" = "SUPPLY_CHAIN_COMPROMISE_COMPROMISE_HARDWARE_SUPPLY_CHAIN", XDM_CONST.MITRE_TECHNIQUE_SUPPLY_CHAIN_COMPROMISE_COMPROMISE_HARDWARE_SUPPLY_CHAIN, "@element" = "MITRE_TECHNIQUE_SUPPLY_CHAIN_COMPROMISE_COMPROMISE_SOFTWARE_DEPENDENCIES_AND_DEVELOPMENT_TOOLS", XDM_CONST.MITRE_TECHNIQUE_MITRE_TECHNIQUE_SUPPLY_CHAIN_COMPROMISE_COMPROMISE_SOFTWARE_DEPENDENCIES_AND_DEVELOPMENT_TOOLS, "@element" = "SUPPLY_CHAIN_COMPROMISE_COMPROMISE_SOFTWARE_SUPPLY_CHAIN", XDM_CONST.MITRE_TECHNIQUE_SUPPLY_CHAIN_COMPROMISE_COMPROMISE_SOFTWARE_SUPPLY_CHAIN, "@element" = "SYSTEM_INFORMATION_DISCOVERY", XDM_CONST.MITRE_TECHNIQUE_SYSTEM_INFORMATION_DISCOVERY, "@element" = "SYSTEM_LOCATION_DISCOVERY", XDM_CONST.MITRE_TECHNIQUE_SYSTEM_LOCATION_DISCOVERY, "@element" = "SYSTEM_LOCATION_DISCOVERY_SYSTEM_LANGUAGE_DISCOVERY", XDM_CONST.MITRE_TECHNIQUE_SYSTEM_LOCATION_DISCOVERY_SYSTEM_LANGUAGE_DISCOVERY, "@element" = "SYSTEM_NETWORK_CONFIGURATION_DISCOVERY", XDM_CONST.MITRE_TECHNIQUE_SYSTEM_NETWORK_CONFIGURATION_DISCOVERY, "@element" = "SYSTEM_NETWORK_CONFIGURATION_DISCOVERY_INTERNET_CONNECTION_DISCOVERY", XDM_CONST.MITRE_TECHNIQUE_SYSTEM_NETWORK_CONFIGURATION_DISCOVERY_INTERNET_CONNECTION_DISCOVERY, "@element" = "SYSTEM_NETWORK_CONNECTIONS_DISCOVERY", XDM_CONST.MITRE_TECHNIQUE_SYSTEM_NETWORK_CONNECTIONS_DISCOVERY, "@element" = "SYSTEM_OWNER_USER_DISCOVERY", XDM_CONST.MITRE_TECHNIQUE_SYSTEM_OWNER_USER_DISCOVERY, "@element" = "SYSTEM_SERVICE_DISCOVERY", XDM_CONST.MITRE_TECHNIQUE_SYSTEM_SERVICE_DISCOVERY, "@element" = "SYSTEM_SERVICES", XDM_CONST.MITRE_TECHNIQUE_SYSTEM_SERVICES, "@element" = "SYSTEM_SERVICES_LAUNCHCTL", XDM_CONST.MITRE_TECHNIQUE_SYSTEM_SERVICES_LAUNCHCTL, "@element" = "SYSTEM_SERVICES_SERVICE_EXECUTION", XDM_CONST.MITRE_TECHNIQUE_SYSTEM_SERVICES_SERVICE_EXECUTION, "@element" = "SYSTEM_SHUTDOWN_OR_REBOOT", XDM_CONST.MITRE_TECHNIQUE_SYSTEM_SHUTDOWN_OR_REBOOT, "@element" = "SYSTEM_TIME_DISCOVERY", XDM_CONST.MITRE_TECHNIQUE_SYSTEM_TIME_DISCOVERY, "@element" = "TAINT_SHARED_CONTENT", XDM_CONST.MITRE_TECHNIQUE_TAINT_SHARED_CONTENT, "@element" = "TEMPLATE_INJECTION", XDM_CONST.MITRE_TECHNIQUE_TEMPLATE_INJECTION, "@element" = "TRAFFIC_SIGNALING", XDM_CONST.MITRE_TECHNIQUE_TRAFFIC_SIGNALING, "@element" = "TRAFFIC_SIGNALING_PORT_KNOCKING", XDM_CONST.MITRE_TECHNIQUE_TRAFFIC_SIGNALING_PORT_KNOCKING, "@element" = "TRANSFER_DATA_TO_CLOUD_ACCOUNT", XDM_CONST.MITRE_TECHNIQUE_TRANSFER_DATA_TO_CLOUD_ACCOUNT, "@element" = "TRUSTED_DEVELOPER_UTILITIES_PROXY_EXECUTION", XDM_CONST.MITRE_TECHNIQUE_TRUSTED_DEVELOPER_UTILITIES_PROXY_EXECUTION, "@element" = "TRUSTED_DEVELOPER_UTILITIES_PROXY_EXECUTION_MSBUILD", XDM_CONST.MITRE_TECHNIQUE_TRUSTED_DEVELOPER_UTILITIES_PROXY_EXECUTION_MSBUILD, "@element" = "TRUSTED_RELATIONSHIP", XDM_CONST.MITRE_TECHNIQUE_TRUSTED_RELATIONSHIP, "@element" = "TWO_FACTOR_AUTHENTICATION_INTERCEPTION", XDM_CONST.MITRE_TECHNIQUE_TWO_FACTOR_AUTHENTICATION_INTERCEPTION, "@element" = "UNSECURED_CREDENTIALS", XDM_CONST.MITRE_TECHNIQUE_UNSECURED_CREDENTIALS, "@element" = "UNSECURED_CREDENTIALS_BASH_HISTORY", XDM_CONST.MITRE_TECHNIQUE_UNSECURED_CREDENTIALS_BASH_HISTORY, "@element" = "UNSECURED_CREDENTIALS_CLOUD_INSTANCE_METADATA_API", XDM_CONST.MITRE_TECHNIQUE_UNSECURED_CREDENTIALS_CLOUD_INSTANCE_METADATA_API, "@element" = "UNSECURED_CREDENTIALS_CONTAINER_API", XDM_CONST.MITRE_TECHNIQUE_UNSECURED_CREDENTIALS_CONTAINER_API, "@element" = "UNSECURED_CREDENTIALS_CREDENTIALS_IN_FILES", XDM_CONST.MITRE_TECHNIQUE_UNSECURED_CREDENTIALS_CREDENTIALS_IN_FILES, "@element" = "UNSECURED_CREDENTIALS_CREDENTIALS_IN_REGISTRY", XDM_CONST.MITRE_TECHNIQUE_UNSECURED_CREDENTIALS_CREDENTIALS_IN_REGISTRY, "@element" = "UNSECURED_CREDENTIALS_GROUP_POLICY_PREFERENCES", XDM_CONST.MITRE_TECHNIQUE_UNSECURED_CREDENTIALS_GROUP_POLICY_PREFERENCES, "@element" = "UNSECURED_CREDENTIALS_PRIVATE_KEYS", XDM_CONST.MITRE_TECHNIQUE_UNSECURED_CREDENTIALS_PRIVATE_KEYS, "@element" = "UNSUPPORTED_CLOUD_REGIONS", XDM_CONST.MITRE_TECHNIQUE_UNSUPPORTED_CLOUD_REGIONS, "@element" = "USE_ALTERNATE_AUTHENTICATION_MATERIAL", XDM_CONST.MITRE_TECHNIQUE_USE_ALTERNATE_AUTHENTICATION_MATERIAL, "@element" = "USE_ALTERNATE_AUTHENTICATION_MATERIAL_APPLICATION_ACCESS_TOKEN", XDM_CONST.MITRE_TECHNIQUE_USE_ALTERNATE_AUTHENTICATION_MATERIAL_APPLICATION_ACCESS_TOKEN, "@element" = "USE_ALTERNATE_AUTHENTICATION_MATERIAL_PASS_THE_HASH", XDM_CONST.MITRE_TECHNIQUE_USE_ALTERNATE_AUTHENTICATION_MATERIAL_PASS_THE_HASH, "@element" = "USE_ALTERNATE_AUTHENTICATION_MATERIAL_PASS_THE_TICKET", XDM_CONST.MITRE_TECHNIQUE_USE_ALTERNATE_AUTHENTICATION_MATERIAL_PASS_THE_TICKET, "@element" = "USE_ALTERNATE_AUTHENTICATION_MATERIAL_WEB_SESSION_COOKIE", XDM_CONST.MITRE_TECHNIQUE_USE_ALTERNATE_AUTHENTICATION_MATERIAL_WEB_SESSION_COOKIE, "@element" = "USER_EXECUTION", XDM_CONST.MITRE_TECHNIQUE_USER_EXECUTION, "@element" = "USER_EXECUTION_MALICIOUS_FILE", XDM_CONST.MITRE_TECHNIQUE_USER_EXECUTION_MALICIOUS_FILE, "@element" = "USER_EXECUTION_MALICIOUS_IMAGE", XDM_CONST.MITRE_TECHNIQUE_USER_EXECUTION_MALICIOUS_IMAGE, "@element" = "USER_EXECUTION_MALICIOUS_LINK", XDM_CONST.MITRE_TECHNIQUE_USER_EXECUTION_MALICIOUS_LINK, "@element" = "VALID_ACCOUNTS", XDM_CONST.MITRE_TECHNIQUE_VALID_ACCOUNTS, "@element" = "VALID_ACCOUNTS_CLOUD_ACCOUNTS", XDM_CONST.MITRE_TECHNIQUE_VALID_ACCOUNTS_CLOUD_ACCOUNTS, "@element" = "VALID_ACCOUNTS_DEFAULT_ACCOUNTS", XDM_CONST.MITRE_TECHNIQUE_VALID_ACCOUNTS_DEFAULT_ACCOUNTS, "@element" = "VALID_ACCOUNTS_DOMAIN_ACCOUNTS", XDM_CONST.MITRE_TECHNIQUE_VALID_ACCOUNTS_DOMAIN_ACCOUNTS, "@element" = "VALID_ACCOUNTS_LOCAL_ACCOUNTS", XDM_CONST.MITRE_TECHNIQUE_VALID_ACCOUNTS_LOCAL_ACCOUNTS, "@element" = "VIDEO_CAPTURE", XDM_CONST.MITRE_TECHNIQUE_VIDEO_CAPTURE, "@element" = "SANDBOX_EVASION", XDM_CONST.MITRE_TECHNIQUE_SANDBOX_EVASION, "@element" = "SANDBOX_EVASION_SYSTEM_CHECKS", XDM_CONST.MITRE_TECHNIQUE_SANDBOX_EVASION_SYSTEM_CHECKS, "@element" = "SANDBOX_EVASION_TIME_BASED_EVASION", XDM_CONST.MITRE_TECHNIQUE_SANDBOX_EVASION_TIME_BASED_EVASION, "@element" = "SANDBOX_EVASION_USER_ACTIVITY_BASED_CHECKS", XDM_CONST.MITRE_TECHNIQUE_SANDBOX_EVASION_USER_ACTIVITY_BASED_CHECKS, "@element" = "WEAKEN_ENCRYPTION", XDM_CONST.MITRE_TECHNIQUE_WEAKEN_ENCRYPTION, "@element" = "WEAKEN_ENCRYPTION_DISABLE_CRYPTO_HARDWARE", XDM_CONST.MITRE_TECHNIQUE_WEAKEN_ENCRYPTION_DISABLE_CRYPTO_HARDWARE, "@element" = "WEAKEN_ENCRYPTION_REDUCE_KEY_SPACE", XDM_CONST.MITRE_TECHNIQUE_WEAKEN_ENCRYPTION_REDUCE_KEY_SPACE, "@element" = "WEB_SERVICE", XDM_CONST.MITRE_TECHNIQUE_WEB_SERVICE, "@element" = "WEB_SERVICE_BIDIRECTIONAL_COMMUNICATION", XDM_CONST.MITRE_TECHNIQUE_WEB_SERVICE_BIDIRECTIONAL_COMMUNICATION, "@element" = "WEB_SERVICE_DEAD_DROP_RESOLVER", XDM_CONST.MITRE_TECHNIQUE_WEB_SERVICE_DEAD_DROP_RESOLVER, "@element" = "WEB_SERVICE_ONE_WAY_COMMUNICATION", XDM_CONST.MITRE_TECHNIQUE_WEB_SERVICE_ONE_WAY_COMMUNICATION, "@element" = "WINDOWS_MANAGEMENT_INSTRUMENTATION", XDM_CONST.MITRE_TECHNIQUE_WINDOWS_MANAGEMENT_INSTRUMENTATION, "@element" = "XSL_SCRIPT_PROCESSING", XDM_CONST.MITRE_TECHNIQUE_XSL_SCRIPT_PROCESSING, null)),

	xdm.alert.original_threat_id = to_string(mitre_ids);


[MODEL: dataset=duo_duo_raw, content_id="DuoAdminApi"]
filter
    eventtype = "authentication"
| alter
    os_version = json_extract_scalar(access_device, "$.os_version"),
    os = lowercase(json_extract_scalar(access_device, "$.os")),
    browser = json_extract_scalar(access_device, "$.browser"),
    browser_version = json_extract_scalar(access_device, "$.browser_version"),
    access_device_ip = json_extract_scalar(access_device, "$.ip"),
    result_enum = lowercase(result),
    establish_factor = if(factor = "phone_call", "voice", factor = "sms_refresh", "sms", factor = "sms_passcode", "sms", factor = "duo_mobile_passcode", "application", factor = "duo_push", "application", factor = "duo_mobile_passcode", "application", factor = "bypass_code", "temp_token", factor = "hardware_token", "hardware_token", factor = "yubikey_code", "hardware_token", factor = "yubikey_passcode", "hardware_token", factor = "WebAuthn Security Key ", "hardware_token", factor = "WebAuthn Credential", "hardware_token", factor = "WebAuthn Chrome Touch ID", "hardware_token", factor = "utf_token", "hardware_token", factor = "digipass_go_7_token", "hardware_token", factor = "remembered_device", "trusted_login", factor = "trusted_mobile_authenticator", "trusted_login", reason = "trusted_network", "trusted_login", reason = "allowed_by_policy", "trusted_login", reason = "authentication_trusted_by_risk_based_remembered_devices", "trusted_login", reason = "allow_unenrolled_user_on_trusted_network", "trusted_login", reason = "trusted_location", "trusted_login", reason = "bypass_user", "trusted_login", factor = "not_available", "Generic SSO", factor = "passcode", "Generic SSO", null),
    establish_reason = if(reason = "invalid_management_certificate_collection_state", "malformed_request", reason = "user_provided_invalid_certificate", "malformed_request", reason = "invalid_referring_hostname_provided", "malformed_request", reason = "no_web_referer_match", "malformed_request", reason = "no_referring_hostname_provided", "malformed_request", reason = "no_duo_certificate_present", "malformed_request", reason = "no_activated_duo_mobile_account", "user_does_not_exist", reason = "deny_unenrolled_user", "user_does_not_exist", reason = "user_disabled", "account_expired_or_disabled", reason = "locked_out", "account_locked", reason = "factor_restricted", "auth_policy_access_violation", reason = "user_not_in_permitted_group", "auth_login_restrictions", reason = "endpoint_health_data_missing", "device_security_issues", reason = "invalid_device", "device_security_issues", reason = "platform_restricted", "device_security_issues", reason = "endpoint_is_not_healthy", "device_security_issues", reason = "no_screen_lock", "device_security_issues", reason = "endpoint_is_not_in_management_system", "device_security_issues", reason = "endpoint_is_not_trusted", "device_security_issues", reason = "could_not_determine_if_endpoint_was_trusted", "device_security_issues", reason = "version_restricted", "device_security_issues", reason = "touchid_disabled", "device_security_issues", reason = "no_disk_encryption", "device_security_issues", reason = "endpoint_failed_google_verification", "device_security_issues", reason = "verification_code_missing", "mfa_failure", reason = "invalid_passcode", "mfa_failure", reason = "no_response", "mfa_expired", reason = "no_keys_pressed", "mfa_expired", reason = "call_timed_out", "mfa_expired", reason = "user_deny", "user_reject", reason = "user_cancelled", "user_cancelled", reason = "user_mistake", "user_cancelled", reason = "error", "failed_login", reason = null, null, to_string(reason)),
    first_last_name = split(to_string(regextract(email, "(.*)@")), "."),
    auth_device_ip = json_extract_scalar(auth_device, "$.ip")
| alter
    source_ipv4 = if(access_device_ip !~= ":", access_device_ip, null),
    source_ipv6 = if(access_device_ip ~= ":", access_device_ip, null), 
    intermediate_ipv4 = if(auth_device_ip !~= ":", auth_device_ip, null),
    intermediate_ipv6 = if(auth_device_ip ~= ":", auth_device_ip, null),
    establish_os_category = if(os ~= "fedora|ubuntu|chrome|mac|windows|linux|debian", "Computer", os ~= "ios|blackberry|android|phone", "Mobile", os ~= "tizen", "IOT", os = null, null, to_string(os)),
    alert_risks_check = if(reason = "location_restricted", "risky_signin", reason = "anomalous_push", "risky_signin", reason = "anonymous_ip", "risky_signin", result = "fraud", "risky_signin", null)
| alter
    xdm.target.ipv4 = "",
    xdm.target.ipv6 = "",
    xdm.source.port = if(source_ipv4 = "0.0.0.0", null, to_integer(0)),
    xdm.target.port = if(source_ipv4 = "0.0.0.0", null, to_integer(0)),
    xdm.source.user.user_type = XDM_CONST.USER_TYPE_REGULAR,
    xdm.logon.type = XDM_CONST.LOGON_TYPE_INTERACTIVE,
    xdm.event.id = _id,
    xdm.source.host.device_id = json_extract_scalar(access_device, "$.epkey"),
    xdm.event.operation = if(reason in ("remembered_device", "trusted_network", "authentication_trusted_by_risk_based_remembered_devices"), "Login", "MFA"),
    xdm.event.original_event_type = event_type,
    xdm.event.operation_sub_type = establish_factor,
    xdm.event.outcome_reason = establish_reason,
    xdm.source.host.device_category = establish_os_category,
    xdm.source.application.name = coalesce(browser, ood_software),
    xdm.source.application.version = browser_version,
    xdm.source.user.first_name = to_string(replex(arrayindex(first_last_name, 0), "\[\"", "")),
    xdm.source.user.last_name = to_string(replex(arrayindex(first_last_name, 1), "\"\]", "")),
    xdm.target.resource.id = json_extract_scalar(application, "$.key"),
    xdm.target.resource.name = json_extract_scalar(application, "$.name"),
    xdm.event.tags = arraycreate(XDM_CONST.EVENT_TAG_AUTHENTICATION),
    xdm.alert.risks = if(alert_risks_check = null, null, arraycreate(alert_risks_check)),
    xdm.session_context_id = txid,
    xdm.auth.mfa.client_details = adaptive_trust_assessments,
    xdm.source.user.groups = user -> groups[],
    xdm.source.user.sam_account_name = alias,
    xdm.intermediate.ipv4 = intermediate_ipv4,
    xdm.intermediate.ipv6 = intermediate_ipv6,
    xdm.source.user.identifier = json_extract_scalar(user, "$.key"),
    xdm.source.host.hostname = json_extract_scalar(access_device, "$.hostname"),
    xdm.source.ipv4 = source_ipv4,
    xdm.source.ipv6 = source_ipv6,
    xdm.source.location.city = json_extract_scalar(access_device, "$.location.city"),
    xdm.source.location.country = json_extract_scalar(access_device, "$.location.country"),
    xdm.source.location.region = json_extract_scalar(access_device, "$.location.state"),
    xdm.source.host.os_family = if(os contains "windows", XDM_CONST.OS_FAMILY_WINDOWS, os contains "mac", XDM_CONST.OS_FAMILY_MACOS, os contains "linux", XDM_CONST.OS_FAMILY_LINUX, os contains "android", XDM_CONST.OS_FAMILY_ANDROID, os contains "ios", XDM_CONST.OS_FAMILY_IOS, os contains "ubuntu", XDM_CONST.OS_FAMILY_UBUNTU, os contains "debian", XDM_CONST.OS_FAMILY_DEBIAN, os contains "fedora", XDM_CONST.OS_FAMILY_FEDORA, os contains "centos", XDM_CONST.OS_FAMILY_CENTOS, os contains "chrome", XDM_CONST.OS_FAMILY_CHROMEOS, os contains "solaris", XDM_CONST.OS_FAMILY_SOLARIS, os contains "scada", XDM_CONST.OS_FAMILY_SCADA, os = null, null, to_string(os)),
    xdm.source.host.os = concat(os, " ", os_version),
    xdm.event.type = if(source_ipv4 = "0.0.0.0", null, eventtype),
    xdm.observer.name = host,
    xdm.source.user.username = json_extract_scalar(user, "$.name"),
    xdm.source.user.upn = email,
    xdm.event.outcome = if(result_enum contains "failure", XDM_CONST.OUTCOME_FAILED, result_enum contains "success", XDM_CONST.OUTCOME_SUCCESS, result_enum contains "denied", XDM_CONST.OUTCOME_FAILED, result_enum contains "fraud", XDM_CONST.OUTCOME_FAILED, result_enum = null, null, to_string(result)),
    xdm.observer.action = result_enum,
    xdm.network.http.browser = concat(browser, " ", browser_version),
    xdm.intermediate.host.hostname = json_extract_scalar(auth_device, "$.name"),
    xdm.intermediate.location.country = json_extract_scalar(auth_device, "$.location.country"),
    xdm.intermediate.location.city = json_extract_scalar(auth_device, "$.location.city"),
    xdm.intermediate.location.region = json_extract_scalar(auth_device, "$.location.state"),
    xdm.auth.mfa.method = factor,
    xdm.auth.service = "IDP";
filter
    eventtype = "administrator"
| alter
        source_ipv4 = arrayindex(regextract(json_extract_scalar(description, "$.ip_address"), "(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})"),0),
        source_ipv6 = arrayindex(regextract(json_extract_scalar(description, "$.ip_address"), "([a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5})"),0)
| alter
    xdm.event.operation = action,
    xdm.event.description = description,
    xdm.target.resource.name = object,
    xdm.source.user.username = username,
    xdm.event.type = eventtype,
    xdm.observer.name = HOST,
    xdm.target.user.upn = json_extract_scalar(description, "$.email"),
    xdm.auth.auth_method = json_extract_scalar(description, "$.factor"),
    xdm.source.ipv4 =  source_ipv4,
    xdm.source.ipv6 = if(source_ipv4 = null, source_ipv6, null),
    xdm.target.user.groups  = arraycreate(coalesce(json_extract_scalar(description, "$.role"),""));
filter
    eventtype = "telephony"
| alter
        xdm.observer.name = HOST,
        xdm.event.type = eventtype,
        xdm.auth.mfa.method = type,
        xdm.event.description = context,
        xdm.event.id = telephony_id,
        xdm.source.host.hostname = phone;


[RULE: f5_APM_General_Fields content_id="F5APM"]
alter
        log_level = arrayindex(regextract(_raw_log, "\d+\:\d+\:\d+[\S]*\s[\S]+\s([\S]+)\s"), 0),
        process_name = arrayindex(regextract(_raw_log, "\s([^\s\[]+)\[\d+\]:"), 0)
| alter
        xdm.observer.name = arrayindex(regextract(_raw_log, "\d+\:\d+\:\d+[\S]*\s([\S]+)\s"), 0),
        xdm.event.log_level = if(log_level contains "debug", XDM_CONST.LOG_LEVEL_DEBUG, log_level contains "info", XDM_CONST.LOG_LEVEL_INFORMATIONAL, log_level contains "notice", XDM_CONST.LOG_LEVEL_NOTICE, log_level contains "warn", XDM_CONST.LOG_LEVEL_WARNING, log_level contains "err", XDM_CONST.LOG_LEVEL_ERROR, log_level contains "crit", XDM_CONST.LOG_LEVEL_CRITICAL, log_level contains "alert", XDM_CONST.LOG_LEVEL_ALERT, log_level contains "emer", XDM_CONST.LOG_LEVEL_EMERGENCY, to_string(log_level)),
        xdm.source.process.name = arrayindex(regextract(_raw_log, "\s([^\s\[]+)\[\d+\]:"), 0),
        xdm.source.process.pid = to_integer(arrayindex(regextract(_raw_log, "\s[^\s\[]+\[(\d+)\]:"), 0)),
        xdm.event.description = arrayindex(regextract(_raw_log, "\s[^\s\[]+\[\d+\]:\s*(.*)$"), 0);
[MODEL: dataset = "f5_apm_raw", content_id="F5APM"]
// Mapping for tmm logs
call f5_APM_General_Fields
| filter process_name contains "tmm"
// Extractions
| alter
        // ACL log format 1
        action_F1 = arrayindex(regextract(_raw_log, "\: (\S+)\sACL"), 0),
        protocol_F1 = uppercase(arrayindex(regextract(_raw_log, "packet\: (\S+)\s"), 0)),
        event_type_F1 = if(_raw_log ~= "allow ACL", "ACL Allow", _raw_log ~= "deny ACL", "ACL Deny"),
        source_ipv4_F1 = arrayindex(regextract(_raw_log, "(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\:\d+\s->\s"), 0),
        source_ipv6_F1 = arrayindex(regextract(_raw_log, "\[?([a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5})\]?\:\d+\s->\s"), 0),
        source_port_F1 = to_integer(arrayindex(regextract(_raw_log, "\]?\:(\d+)\s->"), 0)),
        target_ipv4_F1 = arrayindex(regextract(_raw_log, "->\s(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\:\d+"), 0),
        target_ipv6_F1 = arrayindex(regextract(_raw_log, "->\s\[?([a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5})\]?\:\d+"), 0),
        target_port_F1 = to_integer(arrayindex(regextract(_raw_log, "->\s\S+\]?\:(\d+)"), 0)),
        // ACL log format 2
        event_type_F2 = arrayindex(regextract(_raw_log, "\d+\:\d+\:\d+\s\|\s([^\|]+)\s\|"), 0),
        policy_F2 = arrayindex(regextract(_raw_log, "[Pp]olicy:\s([\S]+)"), 0),
        session_id_F2 = arrayindex(regextract(_raw_log, "\|\s[Ss]ession\s([\w]+)\s\|"), 0),
        source_user_F2 = arrayindex(regextract(_raw_log, "\|\s[Uu]ser\s([\w]+)\s\|"), 0),
        source_ipv4_F2 = arrayindex(regextract(_raw_log, "\|\sIP:?\s(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\s"), 0),
        source_ipv6_F2 = arrayindex(regextract(_raw_log, "\|\sIP:?\s([a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5})"), 0),
        // ACL log format 3
        event_type_F3 = arrayindex(regextract(_raw_log, ":\w+:\s(\w+\s?\w*)"), 0),
        source_ipv4_F3 = arrayindex(regextract(_raw_log, "client\sIP:?\s(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\s"), 0),
        source_ipv6_F3 = arrayindex(regextract(_raw_log, "client\sIP:?\s([a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5})"), 0),
        intermediate_ipv4_F3 = arrayindex(regextract(_raw_log, "VIP:?\s(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\s"), 0),
        intermediate_ipv6_F3 = arrayindex(regextract(_raw_log, "VIP:?\s([a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5})"), 0),
        session_id_F3 = arrayindex(regextract(_raw_log, "\/[^:]+:[^:]+:(\w+):"), 0)
// Unify fields for enums
| alter
        protocol = coalesce(protocol_F1)
// Modeling
| alter
        xdm.observer.action = coalesce(action_F1),
        xdm.event.type = coalesce(event_type_F1, event_type_F2, event_type_F3),
        xdm.source.ipv4 = coalesce(source_ipv4_F1, source_ipv4_F2, source_ipv4_F3),
        xdm.source.ipv6 = coalesce(source_ipv6_F1, source_ipv6_F2, source_ipv6_F3),
        xdm.source.port = coalesce(source_port_F1),
        xdm.target.ipv4 = coalesce(target_ipv4_F1),
        xdm.target.ipv6 = coalesce(target_ipv6_F1),
        xdm.target.port = coalesce(target_port_F1),
        xdm.intermediate.ipv4 = coalesce(intermediate_ipv4_F3),
        xdm.intermediate.ipv6 = coalesce(intermediate_ipv6_F3),
        xdm.network.rule = coalesce(policy_F2),
        xdm.network.session_id = coalesce(session_id_F2, session_id_F3),
        xdm.source.user.username = coalesce(source_user_F2),
        xdm.network.ip_protocol = if(protocol = "HOPOPT", XDM_CONST.IP_PROTOCOL_HOPOPT, protocol = "ICMP", XDM_CONST.IP_PROTOCOL_ICMP, protocol = "IGMP", XDM_CONST.IP_PROTOCOL_IGMP, protocol = "GGP", XDM_CONST.IP_PROTOCOL_GGP, protocol = "IP", XDM_CONST.IP_PROTOCOL_IP, protocol = "ST", XDM_CONST.IP_PROTOCOL_ST, protocol = "TCP", XDM_CONST.IP_PROTOCOL_TCP, protocol = "CBT", XDM_CONST.IP_PROTOCOL_CBT, protocol = "EGP", XDM_CONST.IP_PROTOCOL_EGP, protocol = "IGP", XDM_CONST.IP_PROTOCOL_IGP, protocol = "BBN_RCC_MON", XDM_CONST.IP_PROTOCOL_BBN_RCC_MON, protocol = "NVP_II", XDM_CONST.IP_PROTOCOL_NVP_II, protocol = "PUP", XDM_CONST.IP_PROTOCOL_PUP, protocol = "ARGUS", XDM_CONST.IP_PROTOCOL_ARGUS, protocol = "EMCON", XDM_CONST.IP_PROTOCOL_EMCON, protocol = "XNET", XDM_CONST.IP_PROTOCOL_XNET, protocol = "CHAOS", XDM_CONST.IP_PROTOCOL_CHAOS, protocol = "UDP", XDM_CONST.IP_PROTOCOL_UDP, protocol = "MUX", XDM_CONST.IP_PROTOCOL_MUX, protocol = "DCN_MEAS", XDM_CONST.IP_PROTOCOL_DCN_MEAS, protocol = "HMP", XDM_CONST.IP_PROTOCOL_HMP, protocol = "PRM", XDM_CONST.IP_PROTOCOL_PRM, protocol = "XNS_IDP", XDM_CONST.IP_PROTOCOL_XNS_IDP, protocol = "TRUNK_1", XDM_CONST.IP_PROTOCOL_TRUNK_1, protocol = "TRUNK_2", XDM_CONST.IP_PROTOCOL_TRUNK_2, protocol = "LEAF_1", XDM_CONST.IP_PROTOCOL_LEAF_1, protocol = "LEAF_2", XDM_CONST.IP_PROTOCOL_LEAF_2, protocol = "RDP", XDM_CONST.IP_PROTOCOL_RDP, protocol = "IRTP", XDM_CONST.IP_PROTOCOL_IRTP, protocol = "ISO_TP4", XDM_CONST.IP_PROTOCOL_ISO_TP4, protocol = "NETBLT", XDM_CONST.IP_PROTOCOL_NETBLT, protocol = "MFE_NSP", XDM_CONST.IP_PROTOCOL_MFE_NSP, protocol = "MERIT_INP", XDM_CONST.IP_PROTOCOL_MERIT_INP, protocol = "DCCP", XDM_CONST.IP_PROTOCOL_DCCP, protocol = "3PC", XDM_CONST.IP_PROTOCOL_3PC, protocol = "IDPR", XDM_CONST.IP_PROTOCOL_IDPR, protocol = "XTP", XDM_CONST.IP_PROTOCOL_XTP, protocol = "DDP", XDM_CONST.IP_PROTOCOL_DDP, protocol = "IDPR_CMTP", XDM_CONST.IP_PROTOCOL_IDPR_CMTP, protocol = "TP", XDM_CONST.IP_PROTOCOL_TP, protocol = "IL", XDM_CONST.IP_PROTOCOL_IL, protocol = "IPV6", XDM_CONST.IP_PROTOCOL_IPV6, protocol = "SDRP", XDM_CONST.IP_PROTOCOL_SDRP, protocol = "IPV6_ROUTE", XDM_CONST.IP_PROTOCOL_IPV6_ROUTE, protocol = "IPV6_FRAG", XDM_CONST.IP_PROTOCOL_IPV6_FRAG, protocol = "IDRP", XDM_CONST.IP_PROTOCOL_IDRP, protocol = "RSVP", XDM_CONST.IP_PROTOCOL_RSVP, protocol = "GRE", XDM_CONST.IP_PROTOCOL_GRE, protocol = "DSR", XDM_CONST.IP_PROTOCOL_DSR, protocol = "BNA", XDM_CONST.IP_PROTOCOL_BNA, protocol = "ESP", XDM_CONST.IP_PROTOCOL_ESP, protocol = "AH", XDM_CONST.IP_PROTOCOL_AH, protocol = "I_NLSP", XDM_CONST.IP_PROTOCOL_I_NLSP, protocol = "SWIPE", XDM_CONST.IP_PROTOCOL_SWIPE, protocol = "NARP", XDM_CONST.IP_PROTOCOL_NARP, protocol = "MOBILE", XDM_CONST.IP_PROTOCOL_MOBILE, protocol = "TLSP", XDM_CONST.IP_PROTOCOL_TLSP, protocol = "SKIP", XDM_CONST.IP_PROTOCOL_SKIP, protocol = "IPV6_ICMP", XDM_CONST.IP_PROTOCOL_IPV6_ICMP, protocol = "IPV6_NONXT", XDM_CONST.IP_PROTOCOL_IPV6_NONXT, protocol = "IPV6_OPTS", XDM_CONST.IP_PROTOCOL_IPV6_OPTS, protocol = "CFTP", XDM_CONST.IP_PROTOCOL_CFTP, protocol = "SAT_EXPAK", XDM_CONST.IP_PROTOCOL_SAT_EXPAK, protocol = "KRYPTOLAN", XDM_CONST.IP_PROTOCOL_KRYPTOLAN, protocol = "RVD", XDM_CONST.IP_PROTOCOL_RVD, protocol = "IPPC", XDM_CONST.IP_PROTOCOL_IPPC, protocol = "SAT_MON", XDM_CONST.IP_PROTOCOL_SAT_MON, protocol = "VISA", XDM_CONST.IP_PROTOCOL_VISA, protocol = "IPCV", XDM_CONST.IP_PROTOCOL_IPCV, protocol = "CPNX", XDM_CONST.IP_PROTOCOL_CPNX, protocol = "CPHB", XDM_CONST.IP_PROTOCOL_CPHB, protocol = "WSN", XDM_CONST.IP_PROTOCOL_WSN, protocol = "PVP", XDM_CONST.IP_PROTOCOL_PVP, protocol = "BR_SAT_MON", XDM_CONST.IP_PROTOCOL_BR_SAT_MON, protocol = "SUN_ND", XDM_CONST.IP_PROTOCOL_SUN_ND, protocol = "WB_MON", XDM_CONST.IP_PROTOCOL_WB_MON, protocol = "WB_EXPAK", XDM_CONST.IP_PROTOCOL_WB_EXPAK, protocol = "ISO_IP", XDM_CONST.IP_PROTOCOL_ISO_IP, protocol = "VMTP", XDM_CONST.IP_PROTOCOL_VMTP, protocol = "SECURE_VMTP", XDM_CONST.IP_PROTOCOL_SECURE_VMTP, protocol = "VINES", XDM_CONST.IP_PROTOCOL_VINES, protocol = "TTP", XDM_CONST.IP_PROTOCOL_TTP, protocol = "NSFNET_IGP", XDM_CONST.IP_PROTOCOL_NSFNET_IGP, protocol = "DGP", XDM_CONST.IP_PROTOCOL_DGP, protocol = "TCF", XDM_CONST.IP_PROTOCOL_TCF, protocol = "EIGRP", XDM_CONST.IP_PROTOCOL_EIGRP, protocol = "OSPFIGP", XDM_CONST.IP_PROTOCOL_OSPFIGP, protocol = "SPRITE_RPC", XDM_CONST.IP_PROTOCOL_SPRITE_RPC, protocol = "LARP", XDM_CONST.IP_PROTOCOL_LARP, protocol = "MTP", XDM_CONST.IP_PROTOCOL_MTP, protocol = "AX25", XDM_CONST.IP_PROTOCOL_AX25, protocol = "IPIP", XDM_CONST.IP_PROTOCOL_IPIP, protocol = "MICP", XDM_CONST.IP_PROTOCOL_MICP, protocol = "SCC_SP", XDM_CONST.IP_PROTOCOL_SCC_SP, protocol = "ETHERIP", XDM_CONST.IP_PROTOCOL_ETHERIP, protocol = "ENCAP", XDM_CONST.IP_PROTOCOL_ENCAP, protocol = "GMTP", XDM_CONST.IP_PROTOCOL_GMTP, protocol = "IFMP", XDM_CONST.IP_PROTOCOL_IFMP, protocol = "PNNI", XDM_CONST.IP_PROTOCOL_PNNI, protocol = "PIM", XDM_CONST.IP_PROTOCOL_PIM, protocol = "ARIS", XDM_CONST.IP_PROTOCOL_ARIS, protocol = "SCPS", XDM_CONST.IP_PROTOCOL_SCPS, protocol = "QNX", XDM_CONST.IP_PROTOCOL_QNX, protocol = "AN", XDM_CONST.IP_PROTOCOL_AN, protocol = "IPCOMP", XDM_CONST.IP_PROTOCOL_IPCOMP, protocol = "SNP", XDM_CONST.IP_PROTOCOL_SNP, protocol = "COMPAQ_PEER", XDM_CONST.IP_PROTOCOL_COMPAQ_PEER, protocol = "IPX_IN_IP", XDM_CONST.IP_PROTOCOL_IPX_IN_IP, protocol = "VRRP", XDM_CONST.IP_PROTOCOL_VRRP, protocol = "PGM", XDM_CONST.IP_PROTOCOL_PGM, protocol = "L2TP", XDM_CONST.IP_PROTOCOL_L2TP, protocol = "DDX", XDM_CONST.IP_PROTOCOL_DDX, protocol = "IATP", XDM_CONST.IP_PROTOCOL_IATP, protocol = "STP", XDM_CONST.IP_PROTOCOL_STP, protocol = "SRP", XDM_CONST.IP_PROTOCOL_SRP, protocol = "UTI", XDM_CONST.IP_PROTOCOL_UTI, protocol = "SMP", XDM_CONST.IP_PROTOCOL_SMP, protocol = "SM", XDM_CONST.IP_PROTOCOL_SM, protocol = "PTP", XDM_CONST.IP_PROTOCOL_PTP, protocol = "ISIS", XDM_CONST.IP_PROTOCOL_ISIS, protocol = "FIRE", XDM_CONST.IP_PROTOCOL_FIRE, protocol = "CRTP", XDM_CONST.IP_PROTOCOL_CRTP, protocol = "CRUDP", XDM_CONST.IP_PROTOCOL_CRUDP, protocol = "SSCOPMCE", XDM_CONST.IP_PROTOCOL_SSCOPMCE, protocol = "IPLT", XDM_CONST.IP_PROTOCOL_IPLT, protocol = "SPS", XDM_CONST.IP_PROTOCOL_SPS, protocol = "PIPE", XDM_CONST.IP_PROTOCOL_PIPE, protocol = "SCTP", XDM_CONST.IP_PROTOCOL_SCTP, protocol = "FC", XDM_CONST.IP_PROTOCOL_FC, protocol = "RSVP_E2E_IGNORE", XDM_CONST.IP_PROTOCOL_RSVP_E2E_IGNORE, protocol = "MOBILITY", XDM_CONST.IP_PROTOCOL_MOBILITY, protocol = "UDPLITE", XDM_CONST.IP_PROTOCOL_UDPLITE, protocol = "MPLS_IN_IP", XDM_CONST.IP_PROTOCOL_MPLS_IN_IP, protocol = "MANET", XDM_CONST.IP_PROTOCOL_MANET, protocol = "HIP", XDM_CONST.IP_PROTOCOL_HIP, protocol = "SHIM6", XDM_CONST.IP_PROTOCOL_SHIM6, protocol = "WESP", XDM_CONST.IP_PROTOCOL_WESP, protocol = "ROHC", XDM_CONST.IP_PROTOCOL_ROHC, protocol = "RESERVED", XDM_CONST.IP_PROTOCOL_RESERVED, protocol = null, null, to_string(protocol));

// Mapping for tmsh logs
call f5_APM_General_Fields
| filter process_name contains "tmsh"
// Extractions
| alter
        // tmsh log format 1
        user_F1 = arrayindex(regextract(_raw_log, "user=(\w+)"), 0),
        module_F1 = arrayindex(regextract(_raw_log, "module=(\S+)"), 0),
        cmd_line_F1 = arrayindex(regextract(_raw_log, "cmd_data=(.*)$"), 0)
// Modeling
| alter
        xdm.event.type = "Audit",
        xdm.source.user.username = coalesce(user_F1),
        xdm.target.module.filename = coalesce(module_F1),
        xdm.source.process.command_line = coalesce(cmd_line_F1);

// Mapping for httpd logs
call f5_APM_General_Fields
| filter process_name contains "httpd"
// Extractions
| alter
        // httpd log format 1
        source_port_ipv4_F1 = to_integer(arrayindex(regextract(_raw_log, "client\s\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}:(\d+)"), 0)),
        source_port_ipv6_F1 = to_integer(arrayindex(regextract(_raw_log, "client\s\[?[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}\]:(\d+)"), 0)),
        user_F1 = arrayindex(regextract(_raw_log, "user[\s=\:]([\w@\.]+)"), 0),
        host_F1 = arrayindex(regextract(_raw_log, "host[\s=\:]([\w@\.]+)"), 0),
        referrer_F1 = arrayindex(regextract(_raw_log, "referer: (\S+)"), 0),
        event_type_F1 = arrayindex(regextract(_raw_log, "\s[^\s\[]+\[\d+\]:\s\[([^\s\:\]]+)"), 0),
        source_ipv4_F1 = arrayindex(regextract(_raw_log, "client\s(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})"), 0),
        source_ipv6_F1 = arrayindex(regextract(_raw_log, "client\s\[?([a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5})"), 0)
// Modeling
| alter
        xdm.source.port = coalesce(source_port_ipv4_F1, source_port_ipv6_F1),
        xdm.source.ipv4 = coalesce(source_ipv4_F1),
        xdm.source.ipv6 = coalesce(source_ipv6_F1),
        xdm.event.type = coalesce(event_type_F1),
        xdm.network.http.referrer = coalesce(referrer_F1),
        xdm.source.user.username = coalesce(user_F1),
        xdm.source.host.hostname = coalesce(host_F1);

// Mapping for snmpd logs
call f5_APM_General_Fields
| filter process_name contains "snmpd"
// Extractions
| alter
        // snmpd log format 1
        source_port_ipv4_F1 = to_integer(arrayindex(regextract(_raw_log, "Connection\sfrom\s[\S]+\s\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}:(\d+)"), 0)),
        source_port_ipv6_F1 = to_integer(arrayindex(regextract(_raw_log, "\]:(\d+)"), 0)),
        source_ipv4_F1 = arrayindex(regextract(_raw_log, "Connection\sfrom\s[\S]+\s(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}):"), 0),
        action_F1 = arrayindex(regextract(_raw_log, "\s(\w+)\s?$"), 0),
        protocol_F1 = arrayindex(regextract(_raw_log, "Connection\sfrom\s(\w+)\/"), 0),
        source_ipv6_F1 = arrayindex(regextract(_raw_log, "Connection\sfrom\s[\S]+\s\[?([a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5})"), 0)
// Unify fields for enums
| alter
        protocol = coalesce(protocol_F1)
// Modeling
| alter
        xdm.source.ipv4 = coalesce(source_ipv4_F1),
        xdm.source.ipv6 = coalesce(source_ipv6_F1),
        xdm.source.port = coalesce(source_port_ipv4_F1, source_port_ipv6_F1),
        xdm.observer.action = coalesce(action_F1),
        xdm.network.ip_protocol = if(protocol = "HOPOPT", XDM_CONST.IP_PROTOCOL_HOPOPT, protocol = "ICMP", XDM_CONST.IP_PROTOCOL_ICMP, protocol = "IGMP", XDM_CONST.IP_PROTOCOL_IGMP, protocol = "GGP", XDM_CONST.IP_PROTOCOL_GGP, protocol = "IP", XDM_CONST.IP_PROTOCOL_IP, protocol = "ST", XDM_CONST.IP_PROTOCOL_ST, protocol = "TCP", XDM_CONST.IP_PROTOCOL_TCP, protocol = "CBT", XDM_CONST.IP_PROTOCOL_CBT, protocol = "EGP", XDM_CONST.IP_PROTOCOL_EGP, protocol = "IGP", XDM_CONST.IP_PROTOCOL_IGP, protocol = "BBN_RCC_MON", XDM_CONST.IP_PROTOCOL_BBN_RCC_MON, protocol = "NVP_II", XDM_CONST.IP_PROTOCOL_NVP_II, protocol = "PUP", XDM_CONST.IP_PROTOCOL_PUP, protocol = "ARGUS", XDM_CONST.IP_PROTOCOL_ARGUS, protocol = "EMCON", XDM_CONST.IP_PROTOCOL_EMCON, protocol = "XNET", XDM_CONST.IP_PROTOCOL_XNET, protocol = "CHAOS", XDM_CONST.IP_PROTOCOL_CHAOS, protocol = "UDP", XDM_CONST.IP_PROTOCOL_UDP, protocol = "MUX", XDM_CONST.IP_PROTOCOL_MUX, protocol = "DCN_MEAS", XDM_CONST.IP_PROTOCOL_DCN_MEAS, protocol = "HMP", XDM_CONST.IP_PROTOCOL_HMP, protocol = "PRM", XDM_CONST.IP_PROTOCOL_PRM, protocol = "XNS_IDP", XDM_CONST.IP_PROTOCOL_XNS_IDP, protocol = "TRUNK_1", XDM_CONST.IP_PROTOCOL_TRUNK_1, protocol = "TRUNK_2", XDM_CONST.IP_PROTOCOL_TRUNK_2, protocol = "LEAF_1", XDM_CONST.IP_PROTOCOL_LEAF_1, protocol = "LEAF_2", XDM_CONST.IP_PROTOCOL_LEAF_2, protocol = "RDP", XDM_CONST.IP_PROTOCOL_RDP, protocol = "IRTP", XDM_CONST.IP_PROTOCOL_IRTP, protocol = "ISO_TP4", XDM_CONST.IP_PROTOCOL_ISO_TP4, protocol = "NETBLT", XDM_CONST.IP_PROTOCOL_NETBLT, protocol = "MFE_NSP", XDM_CONST.IP_PROTOCOL_MFE_NSP, protocol = "MERIT_INP", XDM_CONST.IP_PROTOCOL_MERIT_INP, protocol = "DCCP", XDM_CONST.IP_PROTOCOL_DCCP, protocol = "3PC", XDM_CONST.IP_PROTOCOL_3PC, protocol = "IDPR", XDM_CONST.IP_PROTOCOL_IDPR, protocol = "XTP", XDM_CONST.IP_PROTOCOL_XTP, protocol = "DDP", XDM_CONST.IP_PROTOCOL_DDP, protocol = "IDPR_CMTP", XDM_CONST.IP_PROTOCOL_IDPR_CMTP, protocol = "TP", XDM_CONST.IP_PROTOCOL_TP, protocol = "IL", XDM_CONST.IP_PROTOCOL_IL, protocol = "IPV6", XDM_CONST.IP_PROTOCOL_IPV6, protocol = "SDRP", XDM_CONST.IP_PROTOCOL_SDRP, protocol = "IPV6_ROUTE", XDM_CONST.IP_PROTOCOL_IPV6_ROUTE, protocol = "IPV6_FRAG", XDM_CONST.IP_PROTOCOL_IPV6_FRAG, protocol = "IDRP", XDM_CONST.IP_PROTOCOL_IDRP, protocol = "RSVP", XDM_CONST.IP_PROTOCOL_RSVP, protocol = "GRE", XDM_CONST.IP_PROTOCOL_GRE, protocol = "DSR", XDM_CONST.IP_PROTOCOL_DSR, protocol = "BNA", XDM_CONST.IP_PROTOCOL_BNA, protocol = "ESP", XDM_CONST.IP_PROTOCOL_ESP, protocol = "AH", XDM_CONST.IP_PROTOCOL_AH, protocol = "I_NLSP", XDM_CONST.IP_PROTOCOL_I_NLSP, protocol = "SWIPE", XDM_CONST.IP_PROTOCOL_SWIPE, protocol = "NARP", XDM_CONST.IP_PROTOCOL_NARP, protocol = "MOBILE", XDM_CONST.IP_PROTOCOL_MOBILE, protocol = "TLSP", XDM_CONST.IP_PROTOCOL_TLSP, protocol = "SKIP", XDM_CONST.IP_PROTOCOL_SKIP, protocol = "IPV6_ICMP", XDM_CONST.IP_PROTOCOL_IPV6_ICMP, protocol = "IPV6_NONXT", XDM_CONST.IP_PROTOCOL_IPV6_NONXT, protocol = "IPV6_OPTS", XDM_CONST.IP_PROTOCOL_IPV6_OPTS, protocol = "CFTP", XDM_CONST.IP_PROTOCOL_CFTP, protocol = "SAT_EXPAK", XDM_CONST.IP_PROTOCOL_SAT_EXPAK, protocol = "KRYPTOLAN", XDM_CONST.IP_PROTOCOL_KRYPTOLAN, protocol = "RVD", XDM_CONST.IP_PROTOCOL_RVD, protocol = "IPPC", XDM_CONST.IP_PROTOCOL_IPPC, protocol = "SAT_MON", XDM_CONST.IP_PROTOCOL_SAT_MON, protocol = "VISA", XDM_CONST.IP_PROTOCOL_VISA, protocol = "IPCV", XDM_CONST.IP_PROTOCOL_IPCV, protocol = "CPNX", XDM_CONST.IP_PROTOCOL_CPNX, protocol = "CPHB", XDM_CONST.IP_PROTOCOL_CPHB, protocol = "WSN", XDM_CONST.IP_PROTOCOL_WSN, protocol = "PVP", XDM_CONST.IP_PROTOCOL_PVP, protocol = "BR_SAT_MON", XDM_CONST.IP_PROTOCOL_BR_SAT_MON, protocol = "SUN_ND", XDM_CONST.IP_PROTOCOL_SUN_ND, protocol = "WB_MON", XDM_CONST.IP_PROTOCOL_WB_MON, protocol = "WB_EXPAK", XDM_CONST.IP_PROTOCOL_WB_EXPAK, protocol = "ISO_IP", XDM_CONST.IP_PROTOCOL_ISO_IP, protocol = "VMTP", XDM_CONST.IP_PROTOCOL_VMTP, protocol = "SECURE_VMTP", XDM_CONST.IP_PROTOCOL_SECURE_VMTP, protocol = "VINES", XDM_CONST.IP_PROTOCOL_VINES, protocol = "TTP", XDM_CONST.IP_PROTOCOL_TTP, protocol = "NSFNET_IGP", XDM_CONST.IP_PROTOCOL_NSFNET_IGP, protocol = "DGP", XDM_CONST.IP_PROTOCOL_DGP, protocol = "TCF", XDM_CONST.IP_PROTOCOL_TCF, protocol = "EIGRP", XDM_CONST.IP_PROTOCOL_EIGRP, protocol = "OSPFIGP", XDM_CONST.IP_PROTOCOL_OSPFIGP, protocol = "SPRITE_RPC", XDM_CONST.IP_PROTOCOL_SPRITE_RPC, protocol = "LARP", XDM_CONST.IP_PROTOCOL_LARP, protocol = "MTP", XDM_CONST.IP_PROTOCOL_MTP, protocol = "AX25", XDM_CONST.IP_PROTOCOL_AX25, protocol = "IPIP", XDM_CONST.IP_PROTOCOL_IPIP, protocol = "MICP", XDM_CONST.IP_PROTOCOL_MICP, protocol = "SCC_SP", XDM_CONST.IP_PROTOCOL_SCC_SP, protocol = "ETHERIP", XDM_CONST.IP_PROTOCOL_ETHERIP, protocol = "ENCAP", XDM_CONST.IP_PROTOCOL_ENCAP, protocol = "GMTP", XDM_CONST.IP_PROTOCOL_GMTP, protocol = "IFMP", XDM_CONST.IP_PROTOCOL_IFMP, protocol = "PNNI", XDM_CONST.IP_PROTOCOL_PNNI, protocol = "PIM", XDM_CONST.IP_PROTOCOL_PIM, protocol = "ARIS", XDM_CONST.IP_PROTOCOL_ARIS, protocol = "SCPS", XDM_CONST.IP_PROTOCOL_SCPS, protocol = "QNX", XDM_CONST.IP_PROTOCOL_QNX, protocol = "AN", XDM_CONST.IP_PROTOCOL_AN, protocol = "IPCOMP", XDM_CONST.IP_PROTOCOL_IPCOMP, protocol = "SNP", XDM_CONST.IP_PROTOCOL_SNP, protocol = "COMPAQ_PEER", XDM_CONST.IP_PROTOCOL_COMPAQ_PEER, protocol = "IPX_IN_IP", XDM_CONST.IP_PROTOCOL_IPX_IN_IP, protocol = "VRRP", XDM_CONST.IP_PROTOCOL_VRRP, protocol = "PGM", XDM_CONST.IP_PROTOCOL_PGM, protocol = "L2TP", XDM_CONST.IP_PROTOCOL_L2TP, protocol = "DDX", XDM_CONST.IP_PROTOCOL_DDX, protocol = "IATP", XDM_CONST.IP_PROTOCOL_IATP, protocol = "STP", XDM_CONST.IP_PROTOCOL_STP, protocol = "SRP", XDM_CONST.IP_PROTOCOL_SRP, protocol = "UTI", XDM_CONST.IP_PROTOCOL_UTI, protocol = "SMP", XDM_CONST.IP_PROTOCOL_SMP, protocol = "SM", XDM_CONST.IP_PROTOCOL_SM, protocol = "PTP", XDM_CONST.IP_PROTOCOL_PTP, protocol = "ISIS", XDM_CONST.IP_PROTOCOL_ISIS, protocol = "FIRE", XDM_CONST.IP_PROTOCOL_FIRE, protocol = "CRTP", XDM_CONST.IP_PROTOCOL_CRTP, protocol = "CRUDP", XDM_CONST.IP_PROTOCOL_CRUDP, protocol = "SSCOPMCE", XDM_CONST.IP_PROTOCOL_SSCOPMCE, protocol = "IPLT", XDM_CONST.IP_PROTOCOL_IPLT, protocol = "SPS", XDM_CONST.IP_PROTOCOL_SPS, protocol = "PIPE", XDM_CONST.IP_PROTOCOL_PIPE, protocol = "SCTP", XDM_CONST.IP_PROTOCOL_SCTP, protocol = "FC", XDM_CONST.IP_PROTOCOL_FC, protocol = "RSVP_E2E_IGNORE", XDM_CONST.IP_PROTOCOL_RSVP_E2E_IGNORE, protocol = "MOBILITY", XDM_CONST.IP_PROTOCOL_MOBILITY, protocol = "UDPLITE", XDM_CONST.IP_PROTOCOL_UDPLITE, protocol = "MPLS_IN_IP", XDM_CONST.IP_PROTOCOL_MPLS_IN_IP, protocol = "MANET", XDM_CONST.IP_PROTOCOL_MANET, protocol = "HIP", XDM_CONST.IP_PROTOCOL_HIP, protocol = "SHIM6", XDM_CONST.IP_PROTOCOL_SHIM6, protocol = "WESP", XDM_CONST.IP_PROTOCOL_WESP, protocol = "ROHC", XDM_CONST.IP_PROTOCOL_ROHC, protocol = "RESERVED", XDM_CONST.IP_PROTOCOL_RESERVED, protocol = null, null, to_string(protocol));

// Mapping for apmd logs
call f5_APM_General_Fields
| filter process_name contains "apmd"
// Extractions
| alter
        // apmd log format 1
        policy_F1 = arrayindex(regextract(_raw_log, "\d+\:\d\:\s\/?.*?\/([^\:\.]+)[\:\.]"), 0),
        session_id_F1 =  arrayindex(regextract(_raw_log, "\/[\S]+\:(\w+)\:\s"), 0),
        userName_F1 = arrayindex(regextract(_raw_log, "Username \'(\w+)\'"), 0),
        hostname_F1 = arrayindex(regextract(_raw_log, "Hostname:\s(\w+)"), 0),
        platform_F1 = arrayindex(regextract(_raw_log, "Platform:\s(\w+)"), 0),
        application_F1 = arrayindex(regextract(_raw_log, ",name=([^,]+)"), 0)
// Unify fields for enums
| alter
        platform_os = uppercase(coalesce(platform_F1))
// Modeling
| alter
        xdm.network.rule = coalesce(policy_F1),
        xdm.network.session_id = coalesce(session_id_F1),
        xdm.source.host.hostname = coalesce(hostname_F1),
        xdm.source.user.username = coalesce(userName_F1),
        xdm.source.application.name = coalesce(application_F1),
        xdm.source.host.os = coalesce(platform_F1),
        xdm.source.host.os_family = if(platform_os contains "WIN", XDM_CONST.OS_FAMILY_WINDOWS, platform_os contains "MAC", XDM_CONST.OS_FAMILY_MACOS, platform_os contains "LINUX", XDM_CONST.OS_FAMILY_LINUX, platform_os contains "ANDROID", XDM_CONST.OS_FAMILY_ANDROID, platform_os contains "IOS", XDM_CONST.OS_FAMILY_IOS, platform_os contains "UBUNTU", XDM_CONST.OS_FAMILY_UBUNTU, platform_os contains "DEBIAN", XDM_CONST.OS_FAMILY_DEBIAN, platform_os contains "FEDORA", XDM_CONST.OS_FAMILY_FEDORA, platform_os contains "CENTOS", XDM_CONST.OS_FAMILY_CENTOS, platform_os contains "CHROME", XDM_CONST.OS_FAMILY_CHROMEOS, platform_os contains "SOLARIS", XDM_CONST.OS_FAMILY_SOLARIS, platform_os contains "SCADA", XDM_CONST.OS_FAMILY_SCADA, platform_os);

// Mapping for websso logs
call f5_APM_General_Fields
| filter process_name contains "websso"
| alter
        user = arrayindex(regextract(_raw_log, "[Uu]ser:\s\'?([^\'\s,]+)\'?"), 0)
| alter
        xdm.source.user.username = user;

// Fallback Mapping for other log types
call f5_APM_General_Fields
| filter process_name not contains "tmm" and process_name not contains "tmsh" and process_name not contains "httpd" and process_name not contains "snmpd" and process_name not contains "apmd" and process_name not contains "websso";


[RULE: f5_waf_generic_fields content_id="F5BigIPAWAF"]
alter
    get_log_level = arrayindex(regextract(_raw_log, "\<\d+\>[^\>]+\s+\S+\s+(\S+)\s+\S+\[\d+\]\:"), 0),
    get_description = arrayindex(regextract(_raw_log, "\<\d+\>[^\>]+\s+\S+\s+\S+\s+\S+\[\d+\]\:\s+(.*)"), 0)
| alter    
    get_event_id = arrayindex(regextract(get_description, "^\s*(\d+):\d+:"), 0)
| alter
    xdm.source.host.hostname = arrayindex(regextract(_raw_log, "\<\d+\>[^\>]+\s+(\S+)\s+\S+\s+\S+\[\d+\]\:"), 0),
    xdm.event.log_level = if(get_log_level = "notice", XDM_CONST.LOG_LEVEL_NOTICE, get_log_level = "warning", XDM_CONST.LOG_LEVEL_WARNING, get_log_level = "err", XDM_CONST.LOG_LEVEL_ERROR, get_log_level = "info", XDM_CONST.LOG_LEVEL_INFORMATIONAL, get_log_level = "emerg", XDM_CONST.LOG_LEVEL_EMERGENCY, get_log_level = "emerg", XDM_CONST.LOG_LEVEL_EMERGENCY, get_log_level = "debug", XDM_CONST.LOG_LEVEL_DEBUG, get_log_level ~= "ale", XDM_CONST.LOG_LEVEL_ALERT, get_log_level ~= "crit", XDM_CONST.LOG_LEVEL_CRITICAL),
    xdm.source.process.name = arrayindex(regextract(_raw_log, "\<\d+\>[^\>]+\s+\S+\s+\S+\s+(\S+)\[\d+\]\:"), 0),
    xdm.source.process.pid = to_integer(arrayindex(regextract(_raw_log, "\<\d+\>[^\>]+\s+\S+\s+\S+\s+\S+\[(\d+)\]\:"), 0)),    
    xdm.event.description = get_description,
    xdm.event.id = get_event_id;
[MODEL: dataset="f5_waf_raw", content_id="F5BigIPAWAF"]
call f5_waf_generic_fields
// Event ID 01420002
| filter _raw_log ~= "01420002"
| alter
    get_01420002_user = arrayindex(regextract(_raw_log, "user=([^\=]+)\s+\S+="), 0),
    get_01420002_folder = arrayindex(regextract(_raw_log, "folder=([^\=]+)\s+\S+="), 0),
    get_01420002_module = arrayindex(regextract(_raw_log, "module=\(([^\)]+)\)\#\s+\S+="), 0),
    get_01420002_status = arrayindex(regextract(_raw_log, "status=\s*\[([^\]]+)\]"), 0),
    get_01420002_cmd_data = arrayindex(regextract(_raw_log, "cmd_data=\s*([^\;]+)"), 0)
| alter
    xdm.source.user.username = get_01420002_user,
    xdm.source.process.executable.directory = get_01420002_folder,
    xdm.observer.type = get_01420002_module,
    xdm.source.process.command_line = get_01420002_cmd_data,
    xdm.event.outcome = if(get_01420002_status = "Command OK", XDM_CONST.OUTCOME_SUCCESS, get_01420002_status = null, null, to_string(get_01420002_status));


call f5_waf_generic_fields    
// Event ID 01260009
| filter _raw_log ~= "01260009"
| alter
    get_01260009_source_ip = arrayindex(regextract(_raw_log, "01260009\:\d+\:\s+(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}):\d+\s+\-\>\s+\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}:\d+"), 0),
    get_01260009_source_port = to_integer(arrayindex(regextract(_raw_log, "01260009\:\d+\:\s+\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}:(\d+)\s+\-\>\s+\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}:\d+"), 0)),
    get_01260009_target_ip =  arrayindex(regextract(_raw_log, "01260009\:\d+\:\s+\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}:\d+\s+\-\>\s+(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}):\d+"), 0),
    get_01260009_target_port = to_integer(arrayindex(regextract(_raw_log, "01260009\:\d+\:\s+\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}:\d+\s+\-\>\s+\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}:(\d+)"), 0)),
    get_01260009_alert_des = arrayindex(regextract(_raw_log, "01260009\:\d+\:.*Connection\s+error:\s+(.*)"), 0)
| alter
    xdm.source.ipv4 = get_01260009_source_ip,
    xdm.source.port = get_01260009_source_port,
    xdm.target.ipv4 = get_01260009_target_ip,
    xdm.target.port = get_01260009_target_port,
    xdm.alert.description = get_01260009_alert_des;

call f5_waf_generic_fields   
// Event ID 0107142f
| filter _raw_log ~= "0107142f"
| alter
    get_0107142f_source_ip = arrayindex(regextract(_raw_log, "0107142f\:\d+\:.*\s+(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})"), 0)
| alter
    xdm.source.ipv4 = get_0107142f_source_ip;

call f5_waf_generic_fields
// Event ID 0107143c
| filter _raw_log ~= "0107143c"
| alter    
    get_0107143c_source_ip = arrayindex(regextract(_raw_log, "0107143c:\d+\:.*\s+(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})"), 0)
| alter
    xdm.source.ipv4 = get_0107143c_source_ip;

call f5_waf_generic_fields
// Event ID 01230140
| filter _raw_log ~= "01230140"
| alter
    get_01230140_source_ip = arrayindex(regextract(_raw_log, "01230140\:\d+\:.*from\s+(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\:\d+\s+to\s+\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\:\d+\,\s+.*"), 0),
    get_01230140_source_port = to_integer(arrayindex(regextract(_raw_log, "01230140\:\d+\:.*from\s+\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\:(\d+)\s+to\s+\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\:\d+\,\s+.*"), 0)),
    get_01230140_target_ip =  arrayindex(regextract(_raw_log, "01230140\:\d+\:.*from\s+\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\:\d+\s+to\s+(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\:\d+\,\s+.*"), 0),
    get_01230140_target_port = to_integer(arrayindex(regextract(_raw_log, "01230140\:\d+\:.*from\s+\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\:\d+\s+to\s+\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\:(\d+)\,\s+.*"), 0)),
    get_01230140_alert_des = arrayindex(regextract(_raw_log, "01230140\:\d+\:.*from\s+\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\:\d+\s+to\s+\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\:\d+\,\s+(.*)"), 0)
| alter
    xdm.source.ipv4 = get_01230140_source_ip,
    xdm.source.port = get_01230140_source_port,
    xdm.target.ipv4 = get_01230140_target_ip,
    xdm.target.port = get_01230140_target_port,
    xdm.alert.description = get_01230140_alert_des;

call f5_waf_generic_fields
// Event ID 01260013
| filter _raw_log ~= "01260013"
| alter
    get_01260013_source_ip = arrayindex(regextract(_raw_log, "01260013\:\d+\:.*\s+(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\:\d+\s+\-\>\s+\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\:\d+"), 0),
    get_01260013_source_port = to_integer(arrayindex(regextract(_raw_log, "01260013\:\d+\:.*\s+\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\:(\d+)\s+\-\>\s+\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\:\d+"), 0)),
    get_01260013_target_ip =  arrayindex(regextract(_raw_log, "01260013\:\d+\:.*\s+\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\:\d+\s+\-\>\s+(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\:\d+"), 0),
    get_01260013_target_port = to_integer(arrayindex(regextract(_raw_log, "01260013\:\d+\:.*\s+\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\:\d+\s+\-\>\s+\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\:(\d+)"), 0))
| alter
    xdm.source.ipv4 = get_01260013_source_ip,
    xdm.source.port = get_01260013_source_port,
    xdm.target.ipv4 = get_01260013_target_ip,
    xdm.target.port = get_01260013_target_port;    

call f5_waf_generic_fields
// Event ID 01071681, 01071682
| filter _raw_log ~= "01071681|01071682"
| alter
    get_01071681_01071682_virtualHost = arrayindex(regextract(_raw_log, "SNMP_TRAP\:\s+Virtual\s+(\S+)\s+has\s+become\s+\S+"), 0)
| alter
    xdm.source.agent.identifier = get_01071681_01071682_virtualHost;

call f5_waf_generic_fields
// Event ID 014f0005
| filter _raw_log ~= "014f0005"
| alter
    get_014f0005_user = arrayindex(regextract(_raw_log, "014f0005\:\d+\:.*\s+user=(\S+)"), 0),
    get_014f0005_action = arrayindex(regextract(_raw_log, "014f0005\:\d+\:.*\suser=\S+\s+action=\"+([^\"]+)"), 0),
    get_014f0005_status = arrayindex(regextract(_raw_log, "014f0005\:\d+\:.*\suser=\S+\s+action=\"+[^\"]+\"+\s+status=\"+([^\"]+)"), 0)
| alter
    xdm.source.user.username = get_014f0005_user,
    xdm.event.operation_sub_type = get_014f0005_action,
    xdm.event.outcome_reason = get_014f0005_status;

call f5_waf_generic_fields
// Event ID 01071432
| filter _raw_log ~= "01071432"
| alter
    get_01071432_target_ip =  arrayindex(regextract(_raw_log, "01071432\:\d+\:.*\s+(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\s+port\s+\d+"), 0),
    get_01071432_target_port = to_integer(arrayindex(regextract(_raw_log, "01071432\:\d+\:.*\s+\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\s+port\s+(\d+)"), 0))
| alter
    xdm.target.ipv4 = get_01071432_target_ip,
    xdm.target.port = get_01071432_target_port;

call f5_waf_generic_fields
// Event ID 01260006
| filter _raw_log ~= "01260006"
| alter
    get_01260006_alert_des = arrayindex(regextract(_raw_log, "01260006\:\d+\:\s+Peer\s+cert\s+verify\s+error\:\s+(.*)"), 0),
    get_01260006_cert_O = arrayindex(regextract(_raw_log, "01260006\:\d+\:\s+Peer\s+cert\s+verify\s+error\:\s+.*\/O\=([^\/]+)"), 0),
    get_01260006_cert_CN = arrayindex(regextract(_raw_log, "01260006\:\d+\:\s+Peer\s+cert\s+verify\s+error\:\s+.*\/CN\=([^\/]+)\)"), 0)
| alter
    xdm.alert.description = get_01260006_alert_des,
    xdm.network.tls.server_certificate.issuer = get_01260006_cert_O,
    xdm.network.tls.server_certificate.subject = get_01260006_cert_CN;

call f5_waf_generic_fields
// ssl_req
| filter _raw_log ~= "\[ssl_req\]"
| alter
    ssl_req_target_ip = arrayindex(regextract(_raw_log, "\[ssl_req\]\[[^\]]+\]\s+(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})"), 0),
    ssl_req_tls_version = arrayindex(regextract(_raw_log, "\[ssl_req\]\[[^\]]+\]\s+\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\s+(\S+)\s\S+\s"), 0),
    ssl_req_tls_alg = arrayindex(regextract(_raw_log, "\[ssl_req\]\[[^\]]+\]\s+\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\s+\S+\s(\S+)\s"), 0),
    ssl_req_path = arrayindex(regextract(_raw_log, "\[ssl_req\]\[[^\]]+\]\s+\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\s+\S+\s\S+\s+\"+([^\"]+)"), 0),
    ssl_req_port = to_integer(arrayindex(regextract(_raw_log, "\[ssl_req\]\[[^\]]+\]\s+\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\s+\S+\s\S+\s+\"+[^\"]+\"+\s+(\d+)"), 0))
| alter
    xdm.target.ipv4 = ssl_req_target_ip,
    xdm.network.tls.client_certificate.version = ssl_req_tls_version,
    xdm.network.tls.client_certificate.algorithm = ssl_req_tls_alg,    
    xdm.target.file.path = ssl_req_path,
    xdm.target.port = ssl_req_port;

call f5_waf_generic_fields
// ssl_acc
| filter _raw_log ~= "\[ssl_acc\]"
| alter
    ssl_acc_target_ip = arrayindex(regextract(_raw_log, "\[ssl_acc\]\s+(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})"), 0),
    ssl_acc_user = arrayindex(regextract(_raw_log, "\[ssl_acc\]\s+\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\s+\S+\s+(\S+)"), 0),
    ssl_acc_path = arrayindex(regextract(_raw_log, "\[ssl_acc\]\s+\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\s+\S+\s+\S+\s+[^\]]+\]\s+\"+([^\"]+)"), 0),
    ssl_acc_port = to_integer(arrayindex(regextract(_raw_log, "\[ssl_acc\]\s+\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\s+\S+\s+\S+\s+[^\]]+\]\s+\"+[^\"]+\"+\s+\d+\s+(\d+)"), 0)),
    ssl_acc_response_code = arrayindex(regextract(_raw_log, "\[ssl_acc\]\s+\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\s+\S+\s+\S+\s+[^\]]+\]\s+\"+[^\"]+\"+\s+(\d+)"), 0)
| alter
    xdm.target.ipv4 = ssl_acc_target_ip,
    xdm.target.user.username = ssl_acc_user,
    xdm.target.file.path = ssl_acc_path,
    xdm.target.port = ssl_acc_port,
    xdm.network.http.response_code = if(ssl_acc_response_code = "100", HTTP_RSP_CODE_CONTINUE, ssl_acc_response_code = "101", HTTP_RSP_CODE_SWITCHING_PROTOCOLS, ssl_acc_response_code = "102", HTTP_RSP_CODE_PROCESSING, ssl_acc_response_code = "103", HTTP_RSP_CODE_EARLY_HINTS, ssl_acc_response_code = "200", HTTP_RSP_CODE_OK, ssl_acc_response_code = "201", HTTP_RSP_CODE_CREATED, ssl_acc_response_code = "202", HTTP_RSP_CODE_ACCEPTED, ssl_acc_response_code = "203", HTTP_RSP_CODE_NON__AUTHORITATIVE_INFORMATION, ssl_acc_response_code = "204", HTTP_RSP_CODE_NO_CONTENT, ssl_acc_response_code = "205", HTTP_RSP_CODE_RESET_CONTENT, ssl_acc_response_code = "206", HTTP_RSP_CODE_PARTIAL_CONTENT, ssl_acc_response_code = "207", HTTP_RSP_CODE_MULTI__STATUS, ssl_acc_response_code = "208", HTTP_RSP_CODE_ALREADY_REPORTED, ssl_acc_response_code = "226", HTTP_RSP_CODE_IM_USED, ssl_acc_response_code = "300", HTTP_RSP_CODE_MULTIPLE_CHOICES, ssl_acc_response_code = "301", HTTP_RSP_CODE_MOVED_PERMANENTLY, ssl_acc_response_code = "302", HTTP_RSP_CODE_FOUND, ssl_acc_response_code = "303", HTTP_RSP_CODE_SEE_OTHER, ssl_acc_response_code = "304", HTTP_RSP_CODE_NOT_MODIFIED, ssl_acc_response_code = "305", HTTP_RSP_CODE_USE_PROXY, ssl_acc_response_code = "307", HTTP_RSP_CODE_TEMPORARY_REDIRECT, ssl_acc_response_code = "308", HTTP_RSP_CODE_PERMANENT_REDIRECT, ssl_acc_response_code = "400", HTTP_RSP_CODE_BAD_REQUEST, ssl_acc_response_code = "401", HTTP_RSP_CODE_UNAUTHORIZED, ssl_acc_response_code = "402", HTTP_RSP_CODE_PAYMENT_REQUIRED, ssl_acc_response_code = "403", HTTP_RSP_CODE_FORBIDDEN, ssl_acc_response_code = "404", HTTP_RSP_CODE_NOT_FOUND, ssl_acc_response_code = "405", HTTP_RSP_CODE_METHOD_NOT_ALLOWED, ssl_acc_response_code = "406", HTTP_RSP_CODE_NOT_ACCEPTABLE, ssl_acc_response_code = "407", HTTP_RSP_CODE_PROXY_AUTHENTICATION_REQUIRED, ssl_acc_response_code = "408", HTTP_RSP_CODE_REQUEST_TIMEOUT, ssl_acc_response_code = "409", HTTP_RSP_CODE_CONFLICT, ssl_acc_response_code = "410", HTTP_RSP_CODE_GONE, ssl_acc_response_code = "411", HTTP_RSP_CODE_LENGTH_REQUIRED, ssl_acc_response_code = "412", HTTP_RSP_CODE_PRECONDITION_FAILED, ssl_acc_response_code = "413", HTTP_RSP_CODE_CONTENT_TOO_LARGE, ssl_acc_response_code = "414", HTTP_RSP_CODE_URI_TOO_LONG, ssl_acc_response_code = "415", HTTP_RSP_CODE_UNSUPPORTED_MEDIA_TYPE, ssl_acc_response_code = "416", HTTP_RSP_CODE_RANGE_NOT_SATISFIABLE, ssl_acc_response_code = "417", HTTP_RSP_CODE_EXPECTATION_FAILED, ssl_acc_response_code = "421", HTTP_RSP_CODE_MISDIRECTED_REQUEST, ssl_acc_response_code = "422", HTTP_RSP_CODE_UNPROCESSABLE_CONTENT, ssl_acc_response_code = "423", HTTP_RSP_CODE_LOCKED, ssl_acc_response_code = "424", HTTP_RSP_CODE_FAILED_DEPENDENCY, ssl_acc_response_code = "425", HTTP_RSP_CODE_TOO_EARLY, ssl_acc_response_code = "426", HTTP_RSP_CODE_UPGRADE_REQUIRED, ssl_acc_response_code = "428", HTTP_RSP_CODE_PRECONDITION_REQUIRED, ssl_acc_response_code = "429", HTTP_RSP_CODE_TOO_MANY_REQUESTS, ssl_acc_response_code = "431", HTTP_RSP_CODE_REQUEST_HEADER_FIELDS_TOO_LARGE, ssl_acc_response_code = "451", HTTP_RSP_CODE_UNAVAILABLE_FOR_LEGAL_REASONS, ssl_acc_response_code = "500", HTTP_RSP_CODE_INTERNAL_SERVER_ERROR, ssl_acc_response_code = "501", HTTP_RSP_CODE_NOT_IMPLEMENTED, ssl_acc_response_code = "502", HTTP_RSP_CODE_BAD_GATEWAY, ssl_acc_response_code = "503", HTTP_RSP_CODE_SERVICE_UNAVAILABLE, ssl_acc_response_code = "504", HTTP_RSP_CODE_GATEWAY_TIMEOUT, ssl_acc_response_code = "505", HTTP_RSP_CODE_HTTP_VERSION_NOT_SUPPORTED, ssl_acc_response_code = "506", HTTP_RSP_CODE_VARIANT_ALSO_NEGOTIATES, ssl_acc_response_code = "507", HTTP_RSP_CODE_INSUFFICIENT_STORAGE, ssl_acc_response_code = "508", HTTP_RSP_CODE_LOOP_DETECTED, ssl_acc_response_code = "511", HTTP_RSP_CODE_NETWORK_AUTHENTICATION_REQUIRED, ssl_acc_response_code = null, null, to_string(ssl_acc_response_code));

call f5_waf_generic_fields
// Rule
| filter _raw_log ~= "Rule"
| alter
    // General Rule info
    rule_name = arrayindex(regextract(_raw_log, "Rule\s+(\S+)\s+\<\S+\>:"), 0),
    rule_operation = arrayindex(regextract(_raw_log, "Rule\s+\S+\s+\<(\S+)\>:"), 0),
    // CLIENTSSL_HANDSHAKE
    rule_clientSSLhandshake_source_ip = arrayindex(regextract(_raw_log, "Rule\s+\S+\s+\<\S+\>\:\s+(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\:\S+\:\S+"), 0),
    rule_clientSSLhandshake_tls_alg = arrayindex(regextract(_raw_log, "Rule\s+\S+\s+\<\S+\>\:\s+\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\:(\S+)\:\S+"), 0),
    rule_clientSSLhandshake_tls_version = arrayindex(regextract(_raw_log, "Rule\s+\S+\s+\<\S+\>\:\s+\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\:\S+\:(\S+)"), 0),
    // HTTP_REQUEST
    rule_httpRequest_target_host = arrayindex(regextract(_raw_log, "Rule\s+\S+\s+\<\S+\>\:.*Requested\s+Host\s+=\s+(\S+)"), 0),
    rule_httpRequest_uri = arrayindex(regextract(_raw_log, "Rule\s+\S+\s+\<\S+\>\:.*Request\s+URI\s+\=\s+(\S+)"), 0)
| alter
    rule_httpRequest_target_host_ip = if(rule_httpRequest_target_host ~= "\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\:\d+", arrayindex(regextract(rule_httpRequest_target_host, "(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\:\d+"), 0), null),
    rule_httpRequest_target_host_port = if(rule_httpRequest_target_host ~= "\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\:\d+", to_integer(arrayindex(regextract(rule_httpRequest_target_host, "\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\:(\d+)"), 0)), null),
    rule_httpRequest_target_host_name = if(rule_httpRequest_target_host !~= "\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\:\d+", rule_httpRequest_target_host, null)
| alter
    xdm.network.rule = rule_name,
    xdm.event.operation_sub_type = rule_operation,
    xdm.source.ipv4 = rule_clientSSLhandshake_source_ip,
    xdm.network.tls.client_certificate.algorithm = rule_clientSSLhandshake_tls_alg,
    xdm.network.tls.client_certificate.version = rule_clientSSLhandshake_tls_version,
    xdm.target.ipv4 = rule_httpRequest_target_host_ip,
    xdm.target.port = rule_httpRequest_target_host_port,
    xdm.target.url = rule_httpRequest_uri,
    xdm.target.host.hostname = rule_httpRequest_target_host_name;


call f5_waf_generic_fields
// General OR Not mentioned Event IDs Logs
| filter _raw_log !~= "Rule|\[ssl_acc\]|\[ssl_req\]|01260006|01071432|014f0005|01071681|01071682|01260013|01230140|0107143c|0107142f|01260009|01420002"
| alter
    get_description_session = arrayindex(regextract(_raw_log, "Start\S+\s+Session\s+(\d+)\s+of\s+user\s\S+\."), 0),
    get_description_user_session = arrayindex(regextract(_raw_log, "Start\S+\s+Session\s+\d+\s+of\s+user\s(\S+)\."), 0),
    get_description_user_cmd = arrayindex(regextract(_raw_log, "\((\S+)\)\sCMD\s\([^\)]+"), 0),
    get_description_cmd_command = arrayindex(regextract(_raw_log, "\(\S+\)\sCMD\s\(([^\)]+)"), 0),
    get_description_error_source_ip = arrayindex(regextract(_raw_log, "Did\s+not\s+receive\s+identification\s+string\s+from\s+(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\s+port\s+\d+"), 0),
    get_description_error_source_port = to_integer(arrayindex(regextract(_raw_log, "Did\s+not\s+receive\s+identification\s+string\s+from\s+\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\s+port\s+(\d+)"), 0))
| alter
    xdm.session_context_id = get_description_session,
    xdm.source.user.username = coalesce(get_description_user_session, get_description_user_cmd),
    xdm.source.process.command_line = get_description_cmd_command,
    xdm.source.ipv4 = get_description_error_source_ip,
    xdm.source.port = get_description_error_source_port;


[MODEL: dataset = f5_ltm_raw, content_id="F5LTM"]
alter 
httpMethod1=arrayindex(regextract(_raw_log,"http_method\=\"([^=]+)\"\,"),0),
httpMethod2=arrayindex(regextract(_raw_log,"method\=\"([^=]+)\"\,"),0),
OS=arrayindex(regextract(_raw_log,"os_name\=\"([^=]+)\"\,"),0),
responseCode=arrayindex(regextract(_raw_log,"response_code\=\"([^=]+)\"\,"),0),
logLevel=arrayindex(regextract(_raw_log,"\d{2}\:\d{2}\s[\w\.\-\_\@\$]+\s([a-z]+)"),0)
|alter 
xdm.intermediate.ipv4=coalesce(arrayindex(regextract(_raw_log,"bigip_mgmt_ip\=\"([^=]+)\"\,"),0),arrayindex(regextract(_raw_log,"bigip_mgmt_ip2\=\"([^=]+)\"\,"),0)),
xdm.source.ipv4=coalesce(arrayindex(regextract(_raw_log,"client_ip\=\"([^=]+)\"\,"),0),arrayindex(regextract(_raw_log,"ip_client\=\"([^=]+)\"\,"),0)),
xdm.source.location.country=coalesce(arrayindex(regextract(_raw_log,"client_ip_geo_location\=\"([^=]+)\"\,"),0),arrayindex(regextract(_raw_log,"geo_location\=\"([^=]+)\"\,"),0)),
xdm.source.port=to_integer(coalesce(arrayindex(regextract(_raw_log,"client_port\=\"([^=]+)\"\,"),0),arrayindex(regextract(_raw_log,"src_port\=\"([^=]+)\"\,"),0))),
xdm.target.url=coalesce(arrayindex(regextract(_raw_log,"client_request_uri\=\"([^=]+)\"\,"),0),arrayindex(regextract(_raw_log,"uri\=\"([^=]+)\"\,"),0),
arrayindex(regextract(_raw_log,"context_name\=\"([^=]+)\"\,"),0)),
xdm.target.ipv4=arrayindex(regextract(_raw_log,"dest_ip\=\"([^=]+)\"\,"),0),
xdm.target.port=to_integer(arrayindex(regextract(_raw_log,"dest_port\=\"([^=]+)\"\,"),0)),
xdm.intermediate.agent.version=arrayindex(regextract(_raw_log,"device_version\=\"([^=]+)\"\,"),0),
xdm.network.http.method=coalesce(if(httpMethod1 = "ACL", XDM_CONST.HTTP_METHOD_ACL, httpMethod1 = "BASELINE_CONTROL", XDM_CONST.HTTP_METHOD_BASELINE_CONTROL, httpMethod1 = "BIND", XDM_CONST.HTTP_METHOD_BIND, httpMethod1 = "CHECKIN", XDM_CONST.HTTP_METHOD_CHECKIN, httpMethod1 = "CHECKOUT", XDM_CONST.HTTP_METHOD_CHECKOUT, httpMethod1 = "CONNECT", XDM_CONST.HTTP_METHOD_CONNECT, httpMethod1 = "COPY", XDM_CONST.HTTP_METHOD_COPY, httpMethod1 = "DELETE", XDM_CONST.HTTP_METHOD_DELETE, httpMethod1 = "GET", XDM_CONST.HTTP_METHOD_GET, httpMethod1 = "HEAD", XDM_CONST.HTTP_METHOD_HEAD, httpMethod1 = "LABEL", XDM_CONST.HTTP_METHOD_LABEL, httpMethod1 = "LINK", XDM_CONST.HTTP_METHOD_LINK, httpMethod1 = "LOCK", XDM_CONST.HTTP_METHOD_LOCK, httpMethod1 = "MERGE", XDM_CONST.HTTP_METHOD_MERGE, httpMethod1 = "MKACTIVITY", XDM_CONST.HTTP_METHOD_MKACTIVITY, httpMethod1 = "MKCALENDAR", XDM_CONST.HTTP_METHOD_MKCALENDAR, httpMethod1 = "MKCOL", XDM_CONST.HTTP_METHOD_MKCOL, httpMethod1 = "MKREDIRECTREF", XDM_CONST.HTTP_METHOD_MKREDIRECTREF, httpMethod1 = "MKWORKSPACE", XDM_CONST.HTTP_METHOD_MKWORKSPACE, httpMethod1 = "MOVE", XDM_CONST.HTTP_METHOD_MOVE, httpMethod1 = "OPTIONS", XDM_CONST.HTTP_METHOD_OPTIONS, httpMethod1 = "ORDERPATCH", XDM_CONST.HTTP_METHOD_ORDERPATCH, httpMethod1 = "PATCH", XDM_CONST.HTTP_METHOD_PATCH, httpMethod1 = "POST", XDM_CONST.HTTP_METHOD_POST, httpMethod1 = "PRI", XDM_CONST.HTTP_METHOD_PRI, httpMethod1 = "PROPFIND", XDM_CONST.HTTP_METHOD_PROPFIND, httpMethod1 = "PROPPATCH", XDM_CONST.HTTP_METHOD_PROPPATCH, httpMethod1 = "PUT", XDM_CONST.HTTP_METHOD_PUT, httpMethod1 = "REBIND", XDM_CONST.HTTP_METHOD_REBIND, httpMethod1 = "REPORT", XDM_CONST.HTTP_METHOD_REPORT, httpMethod1 = "SEARCH", XDM_CONST.HTTP_METHOD_SEARCH, httpMethod1 = "TRACE", XDM_CONST.HTTP_METHOD_TRACE, httpMethod1 = "UNBIND", XDM_CONST.HTTP_METHOD_UNBIND, httpMethod1 = "UNCHECKOUT", XDM_CONST.HTTP_METHOD_UNCHECKOUT, httpMethod1 = "UNLINK", XDM_CONST.HTTP_METHOD_UNLINK, httpMethod1 = "UNLOCK", XDM_CONST.HTTP_METHOD_UNLOCK, httpMethod1 = "UPDATE", XDM_CONST.HTTP_METHOD_UPDATE, httpMethod1 = "UPDATEREDIRECTREF", XDM_CONST.HTTP_METHOD_UPDATEREDIRECTREF, httpMethod1 = "VERSION_CONTROL", XDM_CONST.HTTP_METHOD_VERSION_CONTROL, to_string(httpMethod1)),
if(httpMethod2 = "ACL", XDM_CONST.HTTP_METHOD_ACL, httpMethod2 = "BASELINE_CONTROL", XDM_CONST.HTTP_METHOD_BASELINE_CONTROL, httpMethod2 = "BIND", XDM_CONST.HTTP_METHOD_BIND, httpMethod2 = "CHECKIN", XDM_CONST.HTTP_METHOD_CHECKIN, httpMethod2 = "CHECKOUT", XDM_CONST.HTTP_METHOD_CHECKOUT, httpMethod2 = "CONNECT", XDM_CONST.HTTP_METHOD_CONNECT, httpMethod2 = "COPY", XDM_CONST.HTTP_METHOD_COPY, httpMethod2 = "DELETE", XDM_CONST.HTTP_METHOD_DELETE, httpMethod2 = "GET", XDM_CONST.HTTP_METHOD_GET, httpMethod2 = "HEAD", XDM_CONST.HTTP_METHOD_HEAD, httpMethod2 = "LABEL", XDM_CONST.HTTP_METHOD_LABEL, httpMethod2 = "LINK", XDM_CONST.HTTP_METHOD_LINK, httpMethod2 = "LOCK", XDM_CONST.HTTP_METHOD_LOCK, httpMethod2 = "MERGE", XDM_CONST.HTTP_METHOD_MERGE, httpMethod2 = "MKACTIVITY", XDM_CONST.HTTP_METHOD_MKACTIVITY, httpMethod2 = "MKCALENDAR", XDM_CONST.HTTP_METHOD_MKCALENDAR, httpMethod2 = "MKCOL", XDM_CONST.HTTP_METHOD_MKCOL, httpMethod2 = "MKREDIRECTREF", XDM_CONST.HTTP_METHOD_MKREDIRECTREF, httpMethod2 = "MKWORKSPACE", XDM_CONST.HTTP_METHOD_MKWORKSPACE, httpMethod2 = "MOVE", XDM_CONST.HTTP_METHOD_MOVE, httpMethod2 = "OPTIONS", XDM_CONST.HTTP_METHOD_OPTIONS, httpMethod2 = "ORDERPATCH", XDM_CONST.HTTP_METHOD_ORDERPATCH, httpMethod2 = "PATCH", XDM_CONST.HTTP_METHOD_PATCH, httpMethod2 = "POST", XDM_CONST.HTTP_METHOD_POST, httpMethod2 = "PRI", XDM_CONST.HTTP_METHOD_PRI, httpMethod2 = "PROPFIND", XDM_CONST.HTTP_METHOD_PROPFIND, httpMethod2 = "PROPPATCH", XDM_CONST.HTTP_METHOD_PROPPATCH, httpMethod2 = "PUT", XDM_CONST.HTTP_METHOD_PUT, httpMethod2 = "REBIND", XDM_CONST.HTTP_METHOD_REBIND, httpMethod2 = "REPORT", XDM_CONST.HTTP_METHOD_REPORT, httpMethod2 = "SEARCH", XDM_CONST.HTTP_METHOD_SEARCH, httpMethod2 = "TRACE", XDM_CONST.HTTP_METHOD_TRACE, httpMethod2 = "UNBIND", XDM_CONST.HTTP_METHOD_UNBIND, httpMethod2 = "UNCHECKOUT", XDM_CONST.HTTP_METHOD_UNCHECKOUT, httpMethod2 = "UNLINK", XDM_CONST.HTTP_METHOD_UNLINK, httpMethod2 = "UNLOCK", XDM_CONST.HTTP_METHOD_UNLOCK, httpMethod2 = "UPDATE", XDM_CONST.HTTP_METHOD_UPDATE, httpMethod2 = "UPDATEREDIRECTREF", XDM_CONST.HTTP_METHOD_UPDATEREDIRECTREF, httpMethod2 = "VERSION_CONTROL", XDM_CONST.HTTP_METHOD_VERSION_CONTROL, to_string(httpMethod2))),
xdm.intermediate.host.device_id=arrayindex(regextract(_raw_log,"device_id\=\"([^=]+)\"\,"),0),
xdm.source.host.hostname=arrayindex(regextract(_raw_log,"host\=\"([^=]+)\"\,"),0),
xdm.event.outcome_reason=arrayindex(regextract(_raw_log,"request_status\=\"([^=]+)\"\,"),0),
xdm.observer.action=arrayindex(regextract(_raw_log,"action\=\"([^=]+)\"\,"),0),
xdm.session_context_id=arrayindex(regextract(_raw_log,"session_id\=\"([^=]+)\"\,"),0),
xdm.event.type=arrayindex(regextract(_raw_log,"class\=\"([^=]+)\"\,"),0),
xdm.event.original_event_type=arrayindex(regextract(_raw_log,"client_type\=\"([^=]+)\"\,"),0),
xdm.source.application.name=arrayindex(regextract(_raw_log,"application_display_name\=\"([^=]+)\"\,"),0),
xdm.source.application.version=arrayindex(regextract(_raw_log,"application_version\=\"([^=]+)\"\,"),0),
xdm.source.host.os_family=if(lowercase(OS) contains "windows", XDM_CONST.OS_FAMILY_WINDOWS, lowercase(OS) contains "mac", XDM_CONST.OS_FAMILY_MACOS, lowercase(OS) contains "linux", XDM_CONST.OS_FAMILY_LINUX, lowercase(OS) contains "android", XDM_CONST.OS_FAMILY_ANDROID, lowercase(OS) contains "ios", XDM_CONST.OS_FAMILY_IOS, lowercase(OS) contains "ubuntu", XDM_CONST.OS_FAMILY_UBUNTU, lowercase(OS) contains "debian", XDM_CONST.OS_FAMILY_DEBIAN, lowercase(OS) contains "fedora", XDM_CONST.OS_FAMILY_FEDORA, lowercase(OS) contains "centos", XDM_CONST.OS_FAMILY_CENTOS, lowercase(OS) contains "chrome", XDM_CONST.OS_FAMILY_CHROMEOS, lowercase(OS) contains "solaris", XDM_CONST.OS_FAMILY_SOLARIS, lowercase(OS) contains "scada", XDM_CONST.OS_FAMILY_SCADA, to_string(OS)),
xdm.network.http.url=arrayindex(regextract(_raw_log,"http_request\=\"([^,]+)\"\,"),0),
xdm.network.http.response_code=if(responseCode = "100", XDM_CONST.HTTP_RSP_CODE_CONTINUE, responseCode = "101", XDM_CONST.HTTP_RSP_CODE_SWITCHING_PROTOCOLS, responseCode = "102", XDM_CONST.HTTP_RSP_CODE_PROCESSING, responseCode = "103", XDM_CONST.HTTP_RSP_CODE_EARLY_HINTS, responseCode = "200", XDM_CONST.HTTP_RSP_CODE_OK, responseCode = "201", XDM_CONST.HTTP_RSP_CODE_CREATED, responseCode = "202", XDM_CONST.HTTP_RSP_CODE_ACCEPTED, responseCode = "203", XDM_CONST.HTTP_RSP_CODE_NON__AUTHORITATIVE_INFORMATION, responseCode = "204", XDM_CONST.HTTP_RSP_CODE_NO_CONTENT, responseCode = "205", XDM_CONST.HTTP_RSP_CODE_RESET_CONTENT, responseCode = "206", XDM_CONST.HTTP_RSP_CODE_PARTIAL_CONTENT, responseCode = "207", XDM_CONST.HTTP_RSP_CODE_MULTI__STATUS, responseCode = "208", XDM_CONST.HTTP_RSP_CODE_ALREADY_REPORTED, responseCode = "226", XDM_CONST.HTTP_RSP_CODE_IM_USED, responseCode = "300", XDM_CONST.HTTP_RSP_CODE_MULTIPLE_CHOICES, responseCode = "301", XDM_CONST.HTTP_RSP_CODE_MOVED_PERMANENTLY, responseCode = "302", XDM_CONST.HTTP_RSP_CODE_FOUND, responseCode = "303", XDM_CONST.HTTP_RSP_CODE_SEE_OTHER, responseCode = "304", XDM_CONST.HTTP_RSP_CODE_NOT_MODIFIED, responseCode = "305", XDM_CONST.HTTP_RSP_CODE_USE_PROXY, responseCode = "307", XDM_CONST.HTTP_RSP_CODE_TEMPORARY_REDIRECT, responseCode = "308", XDM_CONST.HTTP_RSP_CODE_PERMANENT_REDIRECT, responseCode = "400", XDM_CONST.HTTP_RSP_CODE_BAD_REQUEST, responseCode = "401", XDM_CONST.HTTP_RSP_CODE_UNAUTHORIZED, responseCode = "402", XDM_CONST.HTTP_RSP_CODE_PAYMENT_REQUIRED, responseCode = "403", XDM_CONST.HTTP_RSP_CODE_FORBIDDEN, responseCode = "404", XDM_CONST.HTTP_RSP_CODE_NOT_FOUND, responseCode = "405", XDM_CONST.HTTP_RSP_CODE_METHOD_NOT_ALLOWED, responseCode = "406", XDM_CONST.HTTP_RSP_CODE_NOT_ACCEPTABLE, responseCode = "407", XDM_CONST.HTTP_RSP_CODE_PROXY_AUTHENTICATION_REQUIRED, responseCode = "408", XDM_CONST.HTTP_RSP_CODE_REQUEST_TIMEOUT, responseCode = "409", XDM_CONST.HTTP_RSP_CODE_CONFLICT, responseCode = "410", XDM_CONST.HTTP_RSP_CODE_GONE, responseCode = "411", XDM_CONST.HTTP_RSP_CODE_LENGTH_REQUIRED, responseCode = "412", XDM_CONST.HTTP_RSP_CODE_PRECONDITION_FAILED, responseCode = "413", XDM_CONST.HTTP_RSP_CODE_CONTENT_TOO_LARGE, responseCode = "414", XDM_CONST.HTTP_RSP_CODE_URI_TOO_LONG, responseCode = "415", XDM_CONST.HTTP_RSP_CODE_UNSUPPORTED_MEDIA_TYPE, responseCode = "416", XDM_CONST.HTTP_RSP_CODE_RANGE_NOT_SATISFIABLE, responseCode = "417", XDM_CONST.HTTP_RSP_CODE_EXPECTATION_FAILED, responseCode = "421", XDM_CONST.HTTP_RSP_CODE_MISDIRECTED_REQUEST, responseCode = "422", XDM_CONST.HTTP_RSP_CODE_UNPROCESSABLE_CONTENT, responseCode = "423", XDM_CONST.HTTP_RSP_CODE_LOCKED, responseCode = "424", XDM_CONST.HTTP_RSP_CODE_FAILED_DEPENDENCY, responseCode = "425", XDM_CONST.HTTP_RSP_CODE_TOO_EARLY, responseCode = "426", XDM_CONST.HTTP_RSP_CODE_UPGRADE_REQUIRED, responseCode = "428", XDM_CONST.HTTP_RSP_CODE_PRECONDITION_REQUIRED, responseCode = "429", XDM_CONST.HTTP_RSP_CODE_TOO_MANY_REQUESTS, responseCode = "431", XDM_CONST.HTTP_RSP_CODE_REQUEST_HEADER_FIELDS_TOO_LARGE, responseCode = "451", XDM_CONST.HTTP_RSP_CODE_UNAVAILABLE_FOR_LEGAL_REASONS, responseCode = "500", XDM_CONST.HTTP_RSP_CODE_INTERNAL_SERVER_ERROR, responseCode = "501", XDM_CONST.HTTP_RSP_CODE_NOT_IMPLEMENTED, responseCode = "502", XDM_CONST.HTTP_RSP_CODE_BAD_GATEWAY, responseCode = "503", XDM_CONST.HTTP_RSP_CODE_SERVICE_UNAVAILABLE, responseCode = "504", XDM_CONST.HTTP_RSP_CODE_GATEWAY_TIMEOUT, responseCode = "505", XDM_CONST.HTTP_RSP_CODE_HTTP_VERSION_NOT_SUPPORTED, responseCode = "506", XDM_CONST.HTTP_RSP_CODE_VARIANT_ALSO_NEGOTIATES, responseCode = "507", XDM_CONST.HTTP_RSP_CODE_INSUFFICIENT_STORAGE, responseCode = "508", XDM_CONST.HTTP_RSP_CODE_LOOP_DETECTED, responseCode = "511", XDM_CONST.HTTP_RSP_CODE_NETWORK_AUTHENTICATION_REQUIRED, responseCode = null, null, to_string(responseCode)), 
xdm.alert.name=arrayindex(regextract(_raw_log,"attack_type\=\"([^=]+)\"\,"),0),
xdm.source.user.username=coalesce(arrayindex(regextract(_raw_log,"username\=\"([^=]+)\"\,"),0),arrayindex(regextract(_raw_log,"user\=([^=]+)\s"),0)),
xdm.alert.original_threat_name=arrayindex(regextract(_raw_log,"virus_name\=\"([^=]+)\"\,"),0),
xdm.observer.name=arrayindex(regextract(_raw_log,"hostname\=\"([^=]+)\"\,"),0),
xdm.event.log_level=if(logLevel in ("info","notice","err","debug","alert","warning","crit","critcal","emerg","emergancy"), logLevel, null),
xdm.event.description=if(logLevel in ("info","notice","err","debug","alert","warning","crit","critcal","emerg","emergancy"), arrayindex(regextract(_raw_log, "\d{2}\:\d{2}\s[\w\.\-\_\@\$]+\s[a-z]+\s(.*)"),0), null);



[MODEL: dataset ="fireeye_etp_raw", content_id="FireEyeETP"]
filter event_type in ("alert")

| alter
    sender_headres_check = json_extract_scalar(attributes, "$.email.headers.from"),
    sender_smtp_check = json_extract_scalar(attributes, "$.email.smtp.mail_from"),
    recipient_headers_check = json_extract_scalar(attributes, "$.email.headers.to"),
    recipient_smtp_check = json_extract_scalar(attributes, "$.email.smtp.rcpt_to"),
    extract_ip = to_string(json_extract_scalar(attributes, "$.email.source_ip")),
    outcome_status = json_extract_scalar(attributes, "$.email.status")
| alter
    parsed_status = if(outcome_status in ("accepted", "deleted","delivered", "delivered (retroactive)", "dropped", "dropped oob", "dropped (oob retroactive)"), XDM_CONST.OUTCOME_SUCCESS, outcome_status in ("permanent failure", "rejected"), XDM_CONST.OUTCOME_FAILED, outcome_status in ("permanent failure", "processing"), XDM_CONST.OUTCOME_UNKNOWN, outcome_status = null, null, to_string(outcome_status)),
    src_ip_v4 = if(extract_ip !~= ":", extract_ip, null),
    src_ip_v6 = if(extract_ip ~= ":", extract_ip, null)
| alter
    xdm.alert.description = attributes ->ati,
    xdm.event.type = json_extract_scalar(attributes, "$.meta.alert_type"),
    xdm.alert.original_threat_name = json_extract_scalar(attributes, "$.meta.last_malware"),
    xdm.event.id = json_extract_scalar(attributes, "$.meta.legacy_id"),
    xdm.event.original_event_type = to_string(attributes -> alert.alert_type[]),
    xdm.target.module.md5 = json_extract_scalar(attributes, "$.alert.malware_md5"),
    xdm.observer.type = json_extract_scalar(attributes, "$.alert.product"),
    xdm.target.module.sha256 = json_extract_scalar(attributes, "$.alert.sha256"),
    xdm.email.attachment.filename = json_extract_scalar(attributes, "$.email.attachment"),
    xdm.email.message_id = json_extract_scalar(attributes, "$.email.etp_message_id"),
    xdm.email.cc = arraycreate(json_extract_scalar(attributes, "$.email.headers.cc")),
    xdm.email.sender = coalesce(sender_headres_check, sender_smtp_check),
    xdm.email.subject = json_extract_scalar(attributes, "$.email.headers.subject"),
    xdm.email.recipients = arraycreate(coalesce(recipient_headers_check, recipient_smtp_check)),
    xdm.source.ipv4 = src_ip_v4,
    xdm.source.ipv6 = src_ip_v6,
    xdm.event.outcome = parsed_status,
    xdm.event.outcome_reason = outcome_status,
    xdm.email.delivery_timestamp = parse_timestamp("%Y-%m-%dT%H:%M:%S", json_extract_scalar(attributes, "$.email.timestamp.accepted")),
    xdm.network.http.url = links ->detail;

filter event_type in ("trace")

| alter
    extract_ip_v4 = regextract(attributes -> senderIP, "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"),
    reason_reject_check =  attributes -> rejectionReason,
    reason_remediate_action_check = attributes->remediateAction,
    reason_yara_check = attributes->yaraRulesAction,
    outcome_status = attributes->status
| alter
    has_attachment = if(json_extract_scalar(attributes, "$.hasAttachment") != null,"Existing Attachment", "No Attachment"),
    parsed_status = if(outcome_status in ("accepted", "deleted","delivered", "delivered (retroactive)", "dropped", "dropped oob", "dropped (oob retroactive)"), XDM_CONST.OUTCOME_SUCCESS, outcome_status in ("permanent failure", "rejected"), XDM_CONST.OUTCOME_FAILED, outcome_status in ("permanent failure", "processing"), XDM_CONST.OUTCOME_UNKNOWN, outcome_status = null, null, to_string(outcome_status))
| alter
    xdm.event.type = event_type,
	xdm.email.sender = attributes -> senderHeader,

	xdm.email.recipients = attributes -> recipientHeader[],

	xdm.email.subject = attributes -> subject,

	xdm.email.attachment.filename = has_attachment,

	xdm.email.attachment.size = to_integer(attributes -> messageSize),

	xdm.source.host.ipv4_addresses = extract_ip_v4,

	xdm.network.http.url = attributes -> domain,

	xdm.event.tags = attributes->tags[],

	xdm.network.rule = attributes->riskwareRules,

	xdm.event.operation = coalesce(parsed_status, reason_remediate_action_check, reason_yara_check, reason_reject_check);


filter event_type in ("activity")

| alter
    extract_ip_v4 = arrayindex(regextract(attributes -> user_ip, "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"), 0)
| alter
    xdm.event.type = event_type,
    xdm.source.user.identifier = attributes->user_email_id,
    xdm.source.ipv4 = extract_ip_v4,
    xdm.event.operation_sub_type = attributes->details_values.Verify_Envelope_From_Equal,
    xdm.source.user_agent = attributes->user_agent,
    xdm.event.outcome = attributes->user_action,
    xdm.event.outcome_reason = attributes->user_action_text,
    xdm.event.description = attributes->details;


[MODEL: dataset = fireeye_hx_raw, content_id="FireEyeHX"]
// API logs
filter cefVersion = null
| alter
        // addressNotificationEvent fields
        addressNotificationEvent_address = json_extract_scalar(event_values, "$['addressNotificationEvent/address']"),
        // dnsLookupEvent fields
        dnsLookupEvent_hostname = json_extract_scalar(event_values, "$['dnsLookupEvent/hostname']"),
        dnsLookupEvent_pid = json_extract_scalar(event_values, "$['dnsLookupEvent/pid']"),
        dnsLookupEvent_ppath = json_extract_scalar(event_values, "$['dnsLookupEvent/ppath']"),
        dnsLookupEvent_process = json_extract_scalar(event_values, "$['dnsLookupEvent/process']"),
        dnsLookupEvent_processPath = json_extract_scalar(event_values, "$['dnsLookupEvent/processPath']"),
        dnsLookupEvent_username = json_extract_scalar(event_values, "$['dnsLookupEvent/username']"),
        // fileWriteEvent fields
        fileWriteEvent_eventReason = json_extract_scalar(event_values, "$['fileWriteEvent/eventReason']"),
        fileWriteEvent_fileExtension = json_extract_scalar(event_values, "$['fileWriteEvent/fileExtension']"),
        fileWriteEvent_fileName = json_extract_scalar(event_values, "$['fileWriteEvent/fileName']"),
        fileWriteEvent_filePath = json_extract_scalar(event_values, "$['fileWriteEvent/filePath']"),
        fileWriteEvent_parentPid = json_extract_scalar(event_values, "$['fileWriteEvent/parentPid']"),
        fileWriteEvent_size = json_extract_scalar(event_values, "$['fileWriteEvent/size']"),
        fileWriteEvent_pid = json_extract_scalar(event_values, "$['fileWriteEvent/pid']"),
        fileWriteEvent_username = json_extract_scalar(event_values, "$['fileWriteEvent/username']"),
        fileWriteEvent_md5 = json_extract_scalar(event_values, "$['fileWriteEvent/md5']"),
        fileWriteEvent_process = json_extract_scalar(event_values, "$['fileWriteEvent/process']"),
        fileWriteEvent_processPath = json_extract_scalar(event_values, "$['fileWriteEvent/processPath']"),
        fileWriteEvent_devicePath = json_extract_scalar(event_values, "$['fileWriteEvent/devicePath']"),
        fileWriteEvent_ppath = json_extract_scalar(event_values, "$['fileWriteEvent/ppath']"),
        // imageLoadEvent fields
        imageLoadEvent_fileExtension = json_extract_scalar(event_values, "$['imageLoadEvent/fileExtension']"),
        imageLoadEvent_filename = json_extract_scalar(event_values, "$['imageLoadEvent/filename']"),
        imageLoadEvent_filePath = json_extract_scalar(event_values, "$['imageLoadEvent/filePath']"),
        imageLoadEvent_fullPath = json_extract_scalar(event_values, "$['imageLoadEvent/fullPath']"),
        imageLoadEvent_devicePath = json_extract_scalar(event_values, "$['imageLoadEvent/devicePath']"),
        imageLoadEvent_ppath = json_extract_scalar(event_values, "$['imageLoadEvent/ppath']"),
        imageLoadEvent_processPath = json_extract_scalar(event_values, "$['imageLoadEvent/processPath']"),
        imageLoadEvent_process = json_extract_scalar(event_values, "$['imageLoadEvent/process']"),
        imageLoadEvent_username = json_extract_scalar(event_values, "$['imageLoadEvent/username']"),
        imageLoadEvent_pid = json_extract_scalar(event_values, "$['imageLoadEvent/pid']"),
        // networkEvent fields
        networkEvent_localIP = json_extract_scalar(event_values, "$['networkEvent/localIP']"),
        networkEvent_protocol = json_extract_scalar(event_values, "$['networkEvent/protocol']"),
        networkEvent_remoteIP = json_extract_scalar(event_values, "$['networkEvent/remoteIP']"),
        networkEvent_pid = json_extract_scalar(event_values, "$['networkEvent/pid']"),
        networkEvent_remotePort = json_extract_scalar(event_values, "$['networkEvent/remotePort']"),
        networkEvent_localPort = json_extract_scalar(event_values, "$['networkEvent/localPort']"),
        networkEvent_ppath = json_extract_scalar(event_values, "$['networkEvent/ppath']"),
        networkEvent_processPath = json_extract_scalar(event_values, "$['networkEvent/processPath']"),
        networkEvent_process = json_extract_scalar(event_values, "$['networkEvent/process']"),
        // urlMonitorEvent fields
        urlMonitorEvent_requestUrl = json_extract_scalar(event_values, "$['urlMonitorEvent/requestUrl']"),
        urlMonitorEvent_urlMethod = json_extract_scalar(event_values, "$['urlMonitorEvent/urlMethod']"),
        urlMonitorEvent_userAgent = json_extract_scalar(event_values, "$['urlMonitorEvent/userAgent']"),
        urlMonitorEvent_pid = json_extract_scalar(event_values, "$['urlMonitorEvent/pid']"),
        urlMonitorEvent_username = json_extract_scalar(event_values, "$['urlMonitorEvent/username']"),
        urlMonitorEvent_process = json_extract_scalar(event_values, "$['urlMonitorEvent/process']"),
        urlMonitorEvent_processPath = json_extract_scalar(event_values, "$['urlMonitorEvent/processPath']"),
        urlMonitorEvent_ppath = json_extract_scalar(event_values, "$['urlMonitorEvent/ppath']"),
        urlMonitorEvent_localPort = json_extract_scalar(event_values, "$['urlMonitorEvent/localPort']"),
        urlMonitorEvent_remotePort = json_extract_scalar(event_values, "$['urlMonitorEvent/remotePort']"),
        // processEvent fields
        processEvent_pid = json_extract_scalar(event_values, "$['urlMonitorEvent/pid']"),
        processEvent_ppath = json_extract_scalar(event_values, "$['urlMonitorEvent/ppath']"),
        processEvent_process = json_extract_scalar(event_values, "$['urlMonitorEvent/process']"),
        // processEvent fields
        registryEvent_pid = json_extract_scalar(event_values, "$['registryEvent/pid']"),
        registryEvent_process = json_extract_scalar(event_values, "$['registryEvent/process']"),
        registryEvent_processPath = json_extract_scalar(event_values, "$['registryEvent/processPath']"),
        registryEvent_ppath = json_extract_scalar(event_values, "$['registryEvent/ppath']")
| alter md5values = arraymap(md5values -> [], trim("@element", "\""))
| alter
        xdm.event.type = coalesce(event_type, json_extract_scalar(condition, "$.event_type")),
        xdm.observer.unique_identifier = json_extract_scalar(appliance, "$._id"),
        xdm.alert.name = coalesce(json_extract_scalar(indicator, "$.display_name"), json_extract_scalar(indicator, "$.name")),
        xdm.alert.subcategory = json_extract_scalar(indicator, "$.category"),
        xdm.alert.original_alert_id = to_string(event_id),
        xdm.intermediate.host.ipv4_addresses = arraycreate(addressNotificationEvent_address),
        xdm.intermediate.host.ipv6_addresses = arraycreate(addressNotificationEvent_address),
        xdm.network.dns.dns_question.name = dnsLookupEvent_hostname,
        xdm.source.process.pid = to_integer(dnsLookupEvent_pid),
        xdm.source.process.executable.path = dnsLookupEvent_ppath,
        xdm.source.process.name = dnsLookupEvent_process,
        xdm.source.process.executable.directory = dnsLookupEvent_processPath,
        xdm.source.user.username = coalesce(dnsLookupEvent_username,imageLoadEvent_username,urlMonitorEvent_username,fileWriteEvent_username),
        xdm.event.outcome_reason = fileWriteEvent_eventReason,
        xdm.target.file.extension = fileWriteEvent_fileExtension,
        xdm.target.file.filename = fileWriteEvent_fileName,
        xdm.target.file.path = fileWriteEvent_filePath,
        xdm.target.file.directory = fileWriteEvent_filePath,
        xdm.target.process.parent_id = fileWriteEvent_parentPid,
        xdm.target.process.pid = to_number(coalesce(networkEvent_pid,processEvent_pid,registryEvent_pid,urlMonitorEvent_pid,imageLoadEvent_pid,fileWriteEvent_pid)),
        xdm.target.process.name = coalesce(fileWriteEvent_process,imageLoadEvent_process,networkEvent_process, processEvent_process,registryEvent_process,urlMonitorEvent_process),
        xdm.target.process.executable.size = to_number(fileWriteEvent_size),
        xdm.target.module.extension = imageLoadEvent_fileExtension,
        xdm.target.module.filename = imageLoadEvent_filename,
        xdm.target.module.path = imageLoadEvent_filePath,
        xdm.target.module.directory = imageLoadEvent_fullPath,
        xdm.target.process.executable.directory = coalesce(fileWriteEvent_processPath,imageLoadEvent_processPath,networkEvent_processPath,registryEvent_processPath,urlMonitorEvent_processPath),
        xdm.target.process.executable.path = coalesce(fileWriteEvent_ppath,imageLoadEvent_ppath,networkEvent_ppath,processEvent_ppath,registryEvent_ppath,urlMonitorEvent_ppath),
        xdm.target.host.fqdn = coalesce(fileWriteEvent_devicePath,imageLoadEvent_devicePath),
        xdm.source.ipv4 = networkEvent_localIP,
        xdm.source.ipv6 = networkEvent_localIP,
        xdm.source.port = to_number(coalesce(networkEvent_localPort,urlMonitorEvent_localPort)),
        xdm.network.ip_protocol = networkEvent_protocol,
        xdm.target.ipv4 = networkEvent_remoteIP,
        xdm.target.ipv6 = networkEvent_remoteIP,
        xdm.target.port = to_number(coalesce(networkEvent_remotePort,urlMonitorEvent_remotePort)),
        xdm.target.url = urlMonitorEvent_requestUrl,
        xdm.network.http.method = urlMonitorEvent_urlMethod,
        xdm.source.user_agent = urlMonitorEvent_userAgent,
        xdm.observer.name = source,
        xdm.observer.type = subtype,
        xdm.event.outcome = resolution,
        xdm.target.file.md5 = arraystring(arraydistinct(arrayconcat(md5values, arraycreate(fileWriteEvent_md5))), ",");
// Syslog CEF logs
filter cefVersion != null
| alter
        FireEye_Agent_Version = if(cs2Label = "FireEye Agent Version", cs2, null),
        containment_action = if(cs3Label = "Containment action", cs3, null),
        IOC_Name = if(cs4Label = "IOC Name", cs4, null),
        Process_Name = if(cs4Label = "Process Name", cs4, null),
        Target_OS = lowercase(if(cs6Label = "Target OS", cs6, null)),
        resolution_cs = if(cs7Label = "Resolution", cs7, null),
        Alert_Types = if(cs8Label = "Alert Types", cs8, null),
        MD5_hash = if(cs9Label = "MD5", cs9, null),
        Alert_Correlation_ID = if(cs10Label = "Alert Correlation ID", cs10, null),
        categoryOutcome = lowercase(categoryOutcome)
// Mapping fields
| alter
        xdm.source.ipv4 = arrayindex(regextract(dst, "(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})"),0),
        xdm.source.ipv6 = arrayindex(regextract(dst, "([a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5})"),0),
        xdm.source.host.hostname = dhost,
        xdm.source.host.mac_addresses = arraycreate(dmac),
        xdm.target.domain = dntdom,
        xdm.observer.name = dvchost,
        xdm.event.id = externalId,
        xdm.event.type = cefName,
        xdm.source.user.username = suser,
        xdm.target.file.filename = fname,
        xdm.target.file.path = filePath,
        xdm.target.url = request,
        xdm.event.description = coalesce(msg, categoryTupleDescription),
        xdm.event.outcome = if(categoryOutcome contains "success", XDM_CONST.OUTCOME_SUCCESS, categoryOutcome contains "failure", XDM_CONST.OUTCOME_FAILED, categoryOutcome contains "completed", XDM_CONST.OUTCOME_SUCCESS, to_string(categoryOutcome)),
        xdm.event.log_level = if(cefSeverity = "10", XDM_CONST.LOG_LEVEL_ALERT, cefSeverity = "0", XDM_CONST.LOG_LEVEL_INFORMATIONAL, cefSeverity = "4", XDM_CONST.LOG_LEVEL_WARNING, cefSeverity = "7", XDM_CONST.LOG_LEVEL_ERROR),
        xdm.alert.name = IOC_Name,
        xdm.alert.subcategory = to_string(Alert_Types),
        xdm.source.host.os = Target_OS,
        xdm.observer.action = coalesce(resolution_cs, containment_action),
        xdm.source.agent.version = FireEye_Agent_Version,
        xdm.alert.original_alert_id = Alert_Correlation_ID,
        xdm.source.process.name = Process_Name,
        xdm.source.process.executable.md5 = MD5_hash,
        xdm.source.host.os_family = if(Target_OS contains "windows", XDM_CONST.OS_FAMILY_WINDOWS, Target_OS contains "mac", XDM_CONST.OS_FAMILY_MACOS, Target_OS contains "linux", XDM_CONST.OS_FAMILY_LINUX, Target_OS contains "android", XDM_CONST.OS_FAMILY_ANDROID, Target_OS contains "ios", XDM_CONST.OS_FAMILY_IOS, Target_OS contains "ubuntu", XDM_CONST.OS_FAMILY_UBUNTU, Target_OS contains "debian", XDM_CONST.OS_FAMILY_DEBIAN, Target_OS contains "fedora", XDM_CONST.OS_FAMILY_FEDORA, Target_OS contains "centos", XDM_CONST.OS_FAMILY_CENTOS, Target_OS contains "chrome", XDM_CONST.OS_FAMILY_CHROMEOS, Target_OS contains "solaris", XDM_CONST.OS_FAMILY_SOLARIS, Target_OS contains "scada", XDM_CONST.OS_FAMILY_SCADA, to_string(Target_OS));
[MODEL: dataset = fireeye_hx_audit_raw, content_id="FireEyeHX"]
// Modeling for Action audit logs
filter _raw_log contains "Action ID"
// Extract fields
| alter
       http_request_method = arrayindex(regextract(_raw_log, "descr: ([A-Z]{2,})\s/"),0),
       http_status = lowercase(arrayindex(regextract(_raw_log, "status: ([A-Za-z].+)$"),0)),
       ip_address = arrayindex(regextract(_raw_log, "IP address: ([^\s,]+)"),0),
       log_level = lowercase(arrayindex(regextract(_raw_log, "\s\S+\s[^\[\s]+\[\d+\]:\s\[\w+\.(\w+)\]:\s"),0))
// Mapping fields
| alter
        xdm.event.type = "user actions",
        xdm.observer.name = arrayindex(regextract(_raw_log, "\s(\S+)\s[^\[\s]+\["),0),
        xdm.source.process.name = arrayindex(regextract(_raw_log, "\s\S+\s([^\[\s]+)\["),0),
        xdm.source.process.pid = to_integer(arrayindex(regextract(_raw_log, "\s\S+\s[^\[\s]+\[(\d+)\]"),0)),
        xdm.event.log_level = if(log_level contains "info", XDM_CONST.LOG_LEVEL_INFORMATIONAL, log_level contains "debug", XDM_CONST.LOG_LEVEL_DEBUG, log_level contains "alert", XDM_CONST.LOG_LEVEL_ALERT, log_level contains "crit", XDM_CONST.LOG_LEVEL_CRITICAL, log_level contains "error", XDM_CONST.LOG_LEVEL_ERROR, log_level contains "warn", XDM_CONST.LOG_LEVEL_WARNING, log_level contains "notice", XDM_CONST.LOG_LEVEL_NOTICE, to_string(log_level)),
        xdm.event.id = arrayindex(regextract(_raw_log, "Action ID (\d+)"),0),
        xdm.source.ipv4 = arrayindex(regextract(ip_address, "(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})"),0),
        xdm.source.ipv6 = arrayindex(regextract(ip_address, "([a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5})"),0),
        xdm.source.interface = arrayindex(regextract(_raw_log, "source interface name: ([^\s,]+)"),0),
        xdm.event.description = arrayindex(regextract(_raw_log, "\s\S+\s[^\[\s]+\[\d+\]:\s\[\w+\.\w+\]:\s(.*)$"),0),
        xdm.network.session_id = arrayindex(regextract(_raw_log, "session ID (\d+)"),0),
        xdm.network.http.method = if(http_request_method = "ACL", XDM_CONST.HTTP_METHOD_ACL, http_request_method = "BASELINE_CONTROL", XDM_CONST.HTTP_METHOD_BASELINE_CONTROL, http_request_method = "BIND", XDM_CONST.HTTP_METHOD_BIND, http_request_method = "CHECKIN", XDM_CONST.HTTP_METHOD_CHECKIN, http_request_method = "CHECKOUT", XDM_CONST.HTTP_METHOD_CHECKOUT, http_request_method = "CONNECT", XDM_CONST.HTTP_METHOD_CONNECT, http_request_method = "COPY", XDM_CONST.HTTP_METHOD_COPY, http_request_method = "DELETE", XDM_CONST.HTTP_METHOD_DELETE, http_request_method = "GET", XDM_CONST.HTTP_METHOD_GET, http_request_method = "HEAD", XDM_CONST.HTTP_METHOD_HEAD, http_request_method = "LABEL", XDM_CONST.HTTP_METHOD_LABEL, http_request_method = "LINK", XDM_CONST.HTTP_METHOD_LINK, http_request_method = "LOCK", XDM_CONST.HTTP_METHOD_LOCK, http_request_method = "MERGE", XDM_CONST.HTTP_METHOD_MERGE, http_request_method = "MKACTIVITY", XDM_CONST.HTTP_METHOD_MKACTIVITY, http_request_method = "MKCALENDAR", XDM_CONST.HTTP_METHOD_MKCALENDAR, http_request_method = "MKCOL", XDM_CONST.HTTP_METHOD_MKCOL, http_request_method = "MKREDIRECTREF", XDM_CONST.HTTP_METHOD_MKREDIRECTREF, http_request_method = "MKWORKSPACE", XDM_CONST.HTTP_METHOD_MKWORKSPACE, http_request_method = "MOVE", XDM_CONST.HTTP_METHOD_MOVE, http_request_method = "OPTIONS", XDM_CONST.HTTP_METHOD_OPTIONS, http_request_method = "ORDERPATCH", XDM_CONST.HTTP_METHOD_ORDERPATCH, http_request_method = "PATCH", XDM_CONST.HTTP_METHOD_PATCH, http_request_method = "POST", XDM_CONST.HTTP_METHOD_POST, http_request_method = "PRI", XDM_CONST.HTTP_METHOD_PRI, http_request_method = "PROPFIND", XDM_CONST.HTTP_METHOD_PROPFIND, http_request_method = "PROPPATCH", XDM_CONST.HTTP_METHOD_PROPPATCH, http_request_method = "PUT", XDM_CONST.HTTP_METHOD_PUT, http_request_method = "REBIND", XDM_CONST.HTTP_METHOD_REBIND, http_request_method = "REPORT", XDM_CONST.HTTP_METHOD_REPORT, http_request_method = "SEARCH", XDM_CONST.HTTP_METHOD_SEARCH, http_request_method = "TRACE", XDM_CONST.HTTP_METHOD_TRACE, http_request_method = "UNBIND", XDM_CONST.HTTP_METHOD_UNBIND, http_request_method = "UNCHECKOUT", XDM_CONST.HTTP_METHOD_UNCHECKOUT, http_request_method = "UNLINK", XDM_CONST.HTTP_METHOD_UNLINK, http_request_method = "UNLOCK", XDM_CONST.HTTP_METHOD_UNLOCK, http_request_method = "UPDATE", XDM_CONST.HTTP_METHOD_UPDATE, http_request_method = "UPDATEREDIRECTREF", XDM_CONST.HTTP_METHOD_UPDATEREDIRECTREF, http_request_method = "VERSION_CONTROL", XDM_CONST.HTTP_METHOD_VERSION_CONTROL, to_string(http_request_method)),
        xdm.network.http.url = arrayindex(regextract(_raw_log, "descr: [A-Z]{2,}\s(/[\w/]+)"),0),
        xdm.source.user.username = arrayindex(regextract(_raw_log, "requested by: user ([^\s]+)"),0),
        xdm.event.outcome = if(http_status contains "success", XDM_CONST.OUTCOME_SUCCESS, http_status contains "failure", XDM_CONST.OUTCOME_FAILED, http_status = "CHALLENGE", to_string(http_status)),
        xdm.target.domain = arrayindex(regextract(_raw_log, "domain name: ([^\s,]+)"),0);
// Modeling for authentication audit logs
filter _raw_log contains ": User log"
// Extracting fields
| alter
        eventtype = arrayindex(regextract(_raw_log, "AUDIT: ([A-Za-z\s]+):"),0),
        auth_userName = arrayindex(regextract(_raw_log, "username '([^']+)'"),0),
        auth_remote_address = arrayindex(regextract(_raw_log, "remote address '([^']+)'"),0),
        auth_auth_method = arrayindex(regextract(_raw_log, "auth method \'([^']+)\'"),0),
        auth_session_id = arrayindex(regextract(_raw_log, "session ID (\d+)"),0),
        log_level = lowercase(arrayindex(regextract(_raw_log, "\s\S+\s[^\[\s]+\[\d+\]:\s\[\w+\.(\w+)\]:\s"),0))
//Mapping fields
| alter
        xdm.event.type = eventtype,
        xdm.observer.name = arrayindex(regextract(_raw_log, "\s(\S+)\s[^\[\s]+\["),0),
        xdm.source.process.name = arrayindex(regextract(_raw_log, "\s\S+\s([^\[\s]+)\["),0),
        xdm.source.process.pid = to_integer(arrayindex(regextract(_raw_log, "\s\S+\s[^\[\s]+\[(\d+)\]"),0)),
        xdm.event.log_level = if(log_level contains "info", XDM_CONST.LOG_LEVEL_INFORMATIONAL, log_level contains "debug", XDM_CONST.LOG_LEVEL_DEBUG, log_level contains "alert", XDM_CONST.LOG_LEVEL_ALERT, log_level contains "crit", XDM_CONST.LOG_LEVEL_CRITICAL, log_level contains "error", XDM_CONST.LOG_LEVEL_ERROR, log_level contains "warn", XDM_CONST.LOG_LEVEL_WARNING, log_level contains "notice", XDM_CONST.LOG_LEVEL_NOTICE, to_string(log_level)),
        xdm.auth.auth_method = auth_auth_method,
        xdm.source.user.username = auth_userName,
        xdm.source.ipv4 = arrayindex(regextract(auth_remote_address, "(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})"),0),
        xdm.source.ipv6 = arrayindex(regextract(auth_remote_address, "([a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5})"),0),
        xdm.network.session_id = auth_session_id,
        xdm.event.description = arrayindex(regextract(_raw_log, "\s\S+\s[^\[\s]+\[\d+\]:\s\[\w+\.\w+\]:\s(.*)$"),0);
// Modeling for cli audit logs
filter _raw_log contains "[cli.NOTICE]: AUDIT:"
// Extracting fields
| alter
        log_level = lowercase(arrayindex(regextract(_raw_log, "\s\S+\s[^\[\s]+\[\d+\]:\s\[\w+\.(\w+)\]:\s"),0))
// Mapping fields
| alter
        xdm.event.type = "cli audit",
        xdm.observer.name = arrayindex(regextract(_raw_log, "\s(\S+)\s[^\[\s]+\["),0),
        xdm.source.process.name = arrayindex(regextract(_raw_log, "\s\S+\s([^\[\s]+)\["),0),
        xdm.source.process.pid = to_integer(arrayindex(regextract(_raw_log, "\s\S+\s[^\[\s]+\[(\d+)\]"),0)),
        xdm.event.description = arrayindex(regextract(_raw_log, "\s\S+\s[^\[\s]+\[\d+\]:\s\[\w+\.\w+\]:\s(.*)$"),0),
        xdm.event.log_level = if(log_level contains "info", XDM_CONST.LOG_LEVEL_INFORMATIONAL, log_level contains "debug", XDM_CONST.LOG_LEVEL_DEBUG, log_level contains "alert", XDM_CONST.LOG_LEVEL_ALERT, log_level contains "crit", XDM_CONST.LOG_LEVEL_CRITICAL, log_level contains "error", XDM_CONST.LOG_LEVEL_ERROR, log_level contains "warn", XDM_CONST.LOG_LEVEL_WARNING, log_level contains "notice", XDM_CONST.LOG_LEVEL_NOTICE, to_string(log_level)),
        xdm.source.user.username = arrayindex(regextract(_raw_log, "user ([^:]+):"),0),
        xdm.source.process.command_line = arrayindex(regextract(_raw_log, "command: (.*)$"),0);
// Modeling for web session audit logs
filter _raw_log contains "[wsmd.NOTICE]: AUDIT:"
// Extracting fields
| alter
        log_level = lowercase(arrayindex(regextract(_raw_log, "\s\S+\s[^\[\s]+\[\d+\]:\s\[\w+\.(\w+)\]:\s"),0))
// Mapping fields
| alter
        xdm.event.type = "web session",
        xdm.observer.name = arrayindex(regextract(_raw_log, "\s(\S+)\s[^\[\s]+\["),0),
        xdm.source.process.name = arrayindex(regextract(_raw_log, "\s\S+\s([^\[\s]+)\["),0),
        xdm.source.process.pid = to_integer(arrayindex(regextract(_raw_log, "\s\S+\s[^\[\s]+\[(\d+)\]"),0)),
        xdm.network.session_id = arrayindex(regextract(_raw_log, "Web session (\d+)"),0),
        xdm.event.description = arrayindex(regextract(_raw_log, "\s\S+\s[^\[\s]+\[\d+\]:\s\[\w+\.\w+\]:\s(.*)$"),0),
        xdm.event.log_level = if(log_level contains "info", XDM_CONST.LOG_LEVEL_INFORMATIONAL, log_level contains "debug", XDM_CONST.LOG_LEVEL_DEBUG, log_level contains "alert", XDM_CONST.LOG_LEVEL_ALERT, log_level contains "crit", XDM_CONST.LOG_LEVEL_CRITICAL, log_level contains "error", XDM_CONST.LOG_LEVEL_ERROR, log_level contains "warn", XDM_CONST.LOG_LEVEL_WARNING, log_level contains "notice", XDM_CONST.LOG_LEVEL_NOTICE, to_string(log_level));
// Modeling for change audit logs
filter _raw_log contains "Config change ID"
// Extracting fields
| alter
        log_level = lowercase(arrayindex(regextract(_raw_log, "\s\S+\s[^\[\s]+\[\d+\]:\s\[\w+\.(\w+)\]:\s"),0))
// Mapping fields
| alter
        xdm.event.type = "changes",
        xdm.observer.name = arrayindex(regextract(_raw_log, "\s(\S+)\s[^\[\s]+\["),0),
        xdm.source.process.name = arrayindex(regextract(_raw_log, "\s\S+\s([^\[\s]+)\["),0),
        xdm.source.process.pid = to_integer(arrayindex(regextract(_raw_log, "\s\S+\s[^\[\s]+\[(\d+)\]"),0)),
        xdm.network.session_id = arrayindex(regextract(_raw_log, "session ID (\d+)"),0),
        xdm.source.user.username = arrayindex(regextract(_raw_log, "requested by: user ([^\s]+)"),0),
        xdm.event.description = arrayindex(regextract(_raw_log, "\s\S+\s[^\[\s]+\[\d+\]:\s\[\w+\.\w+\]:\s(.*)$"),0),
        xdm.event.log_level = if(log_level contains "info", XDM_CONST.LOG_LEVEL_INFORMATIONAL, log_level contains "debug", XDM_CONST.LOG_LEVEL_DEBUG, log_level contains "alert", XDM_CONST.LOG_LEVEL_ALERT, log_level contains "crit", XDM_CONST.LOG_LEVEL_CRITICAL, log_level contains "error", XDM_CONST.LOG_LEVEL_ERROR, log_level contains "warn", XDM_CONST.LOG_LEVEL_WARNING, log_level contains "notice", XDM_CONST.LOG_LEVEL_NOTICE, to_string(log_level));


[MODEL: dataset="fortinet_fortigate_raw", content_id="FortiGate"]
/* Log Message Reference: 
    https://docs.fortinet.com/document/fortigate/7.4.4/fortios-log-message-reference 
    https://fortinetweb.s3.amazonaws.com/docs.fortinet.com/v2/attachments/94f9e5fe-0e30-11ef-8c42-fa163e15d75b/FortiOS_7.4.4_Log_Reference.pdf
*/
alter // format, validate & regroup relevant raw data 
    cef_pri_level = lowercase(FTNTFGTlevel),
    dns_record_class = if(FTNTFGTqclass = null, null, FTNTFGTqclass = "IN", 1, FTNTFGTqclass = "CS", 2, FTNTFGTqclass = "CH", 3, FTNTFGTqclass = "HS", 4), 
    dns_record_type = if(FTNTFGTqtype = null, null, FTNTFGTqtype = "A", XDM_CONST.DNS_RECORD_TYPE_A, FTNTFGTqtype = "AAAA", XDM_CONST.DNS_RECORD_TYPE_AAAA, FTNTFGTqtype = "AFSDB", XDM_CONST.DNS_RECORD_TYPE_AFSDB, FTNTFGTqtype = "APL", XDM_CONST.DNS_RECORD_TYPE_APL, FTNTFGTqtype = "CAA", XDM_CONST.DNS_RECORD_TYPE_CAA, FTNTFGTqtype = "CDNSKEY", XDM_CONST.DNS_RECORD_TYPE_CDNSKEY, FTNTFGTqtype = "CDS", XDM_CONST.DNS_RECORD_TYPE_CDS, FTNTFGTqtype = "CERT", XDM_CONST.DNS_RECORD_TYPE_CERT, FTNTFGTqtype = "CNAME", XDM_CONST.DNS_RECORD_TYPE_CNAME, FTNTFGTqtype = "CSYNC", XDM_CONST.DNS_RECORD_TYPE_CSYNC, FTNTFGTqtype = "DHCID", XDM_CONST.DNS_RECORD_TYPE_DHCID, FTNTFGTqtype = "DLV", XDM_CONST.DNS_RECORD_TYPE_DLV, FTNTFGTqtype = "DNAME", XDM_CONST.DNS_RECORD_TYPE_DNAME, FTNTFGTqtype = "DNSKEY", XDM_CONST.DNS_RECORD_TYPE_DNSKEY, FTNTFGTqtype = "DS", XDM_CONST.DNS_RECORD_TYPE_DS, FTNTFGTqtype = "EUI48", XDM_CONST.DNS_RECORD_TYPE_EUI48, FTNTFGTqtype = "EUI64", XDM_CONST.DNS_RECORD_TYPE_EUI64, FTNTFGTqtype = "HINFO", XDM_CONST.DNS_RECORD_TYPE_HINFO, FTNTFGTqtype = "HIP", XDM_CONST.DNS_RECORD_TYPE_HIP, FTNTFGTqtype = "HTTPS", XDM_CONST.DNS_RECORD_TYPE_HTTPS, FTNTFGTqtype = "IPSECKEY", XDM_CONST.DNS_RECORD_TYPE_IPSECKEY, FTNTFGTqtype = "KEY", XDM_CONST.DNS_RECORD_TYPE_KEY, FTNTFGTqtype = "KX", XDM_CONST.DNS_RECORD_TYPE_KX, FTNTFGTqtype = "LOC", XDM_CONST.DNS_RECORD_TYPE_LOC, FTNTFGTqtype = "MX", XDM_CONST.DNS_RECORD_TYPE_MX, FTNTFGTqtype = "NAPTR", XDM_CONST.DNS_RECORD_TYPE_NAPTR, FTNTFGTqtype = "NS", XDM_CONST.DNS_RECORD_TYPE_NS, FTNTFGTqtype = "NSEC", XDM_CONST.DNS_RECORD_TYPE_NSEC, FTNTFGTqtype = "NSEC3", XDM_CONST.DNS_RECORD_TYPE_NSEC3, FTNTFGTqtype = "NSEC3PARAM", XDM_CONST.DNS_RECORD_TYPE_NSEC3PARAM, FTNTFGTqtype = "OPENPGPKEY", XDM_CONST.DNS_RECORD_TYPE_OPENPGPKEY, FTNTFGTqtype = "PTR", XDM_CONST.DNS_RECORD_TYPE_PTR, FTNTFGTqtype = "RRSIG", XDM_CONST.DNS_RECORD_TYPE_RRSIG, FTNTFGTqtype = "RP", XDM_CONST.DNS_RECORD_TYPE_RP, FTNTFGTqtype = "SIG", XDM_CONST.DNS_RECORD_TYPE_SIG, FTNTFGTqtype = "SMIMEA", XDM_CONST.DNS_RECORD_TYPE_SMIMEA, FTNTFGTqtype = "SOA", XDM_CONST.DNS_RECORD_TYPE_SOA, FTNTFGTqtype = "SRV", XDM_CONST.DNS_RECORD_TYPE_SRV, FTNTFGTqtype = "SSHFP", XDM_CONST.DNS_RECORD_TYPE_SSHFP, FTNTFGTqtype = "SVCB", XDM_CONST.DNS_RECORD_TYPE_SVCB, FTNTFGTqtype = "TA", XDM_CONST.DNS_RECORD_TYPE_TA, FTNTFGTqtype = "TKEY", XDM_CONST.DNS_RECORD_TYPE_TKEY, FTNTFGTqtype = "TLSA", XDM_CONST.DNS_RECORD_TYPE_TLSA, FTNTFGTqtype = "TSIG", XDM_CONST.DNS_RECORD_TYPE_TSIG, FTNTFGTqtype = "TXT", XDM_CONST.DNS_RECORD_TYPE_TXT, FTNTFGTqtype = "URI", XDM_CONST.DNS_RECORD_TYPE_URI, FTNTFGTqtype = "ZONEMD", XDM_CONST.DNS_RECORD_TYPE_ZONEMD, FTNTFGTqtype),
    dhcp_msg_type = uppercase(FTNTFGTdhcp_msg),
    dst_ip_address = arraydistinct(arraycreate(dst, FTNTFGTdaddr, FTNTFGTserver, FTNTFGTremote, c6a3)),
    dst_os = lowercase(FTNTFGTdstosname),
    icmp_type_hex = lowercase(FTNTFGTicmptype), 
    icmp_code_hex = lowercase(FTNTFGTicmpcode),
    filehash_length = len(FTNTFGTfilehash),
    ppp_gateway_ipv4 = if(FTNTFGTgateway ~= "(?:\d{1,3}\.){3}\d{1,3}", FTNTFGTgateway),
    ppp_gateway_ipv6 = if(FTNTFGTgateway ~= "(?:[a-fA-F\d]{0,4}\:){1,7}[a-fA-F\d]{0,4}", FTNTFGTgateway),
    network_rules = arraycreate(FTNTFGTpolicyname, FTNTFGTprofile, FTNTFGTapplist, FTNTFGTpolicy_id, FTNTFGTpolicyid, FTNTFGTshapingpolicyid),
    src_ip_addresses = arraydistinct(arraycreate(src, sourceTranslatedAddress, FTNTFGTnat, FTNTFGTsaddr, FTNTFGTlocal, FTNTFGTtrueclntip, FTNTFGTtunnelip, FTNTFGTassigned, FTNTFGTassignip, FTNTFGTbanned_src, c6a2)),
    src_os = lowercase(FTNTFGTosname), 
    target_url = if(request ~= """^\/""", coalesce(
        concat(coalesce(dhost, dst), ":", to_string(dpt), request), 
        concat(coalesce(dhost, dst), request),
        request), request),
    url_category = coalesce(requestContext, FTNTFGTcatdesc),
    vpn_tunnel_ipv4 = if(FTNTFGTtunnelip ~= "(?:\d{1,3}\.){3}\d{1,3}", FTNTFGTtunnelip),
    vpn_tunnel_ipv6 = if(FTNTFGTtunnelip ~= "(?:[a-fA-F\d]{0,4}\:){1,7}[a-fA-F\d]{0,4}", FTNTFGTtunnelip),
    vpn_tunnel_assigned_ipv4 = if(FTNTFGTassignip ~= "(?:\d{1,3}\.){3}\d{1,3}", FTNTFGTassignip),
    vpn_tunnel_assigned_ipv6 = if(FTNTFGTassignip ~= "(?:[a-fA-F\d]{0,4}\:){1,7}[a-fA-F\d]{0,4}", FTNTFGTassignip),
    xff_ipv4_addresses = regextract(FTNTFGTforwardedfor, "((?:\d{1,3}\.){3}\d{1,3})"),
    xff_ipv6_addresses = regextract(FTNTFGTforwardedfor, "((?:[a-fA-F\d]{0,4}\:){1,7}[a-fA-F\d]{0,4})"),

    // group together risk artifacts 
    alert_risk_artifacts = object_create(
        "threat_type", FTNTFGTthreattype,
        "attack_id", FTNTFGTattackid, 
        "attack_name", FTNTFGTattack, 
        "virus_id", FTNTFGTvirusid, 
        "virus_name", FTNTFGTvirus,
        "virus_category", FTNTFGTviruscat, 
        "cve_id", FTNTFGTcveid, 
        "vulnerability_id", FTNTFGTvulnid,
        "vulnerability_name", FTNTFGTvulnname,
        "vulnerability_category", FTNTFGTvulncat)

| alter 
    // remove null artifacts from the alert_risk_artifacts object
    risks_formatted = concat("{", arraystring(arrayfilter(split(rtrim(ltrim(to_string(alert_risk_artifacts), "{"), "}"), ","), "@element" !~= "null"), ","), "}"),
    
    // validate & divide ip addresses according to the version ipv4/6
    dst_ipv4_addresses = if(array_length(dst_ip_address) > 0, arrayfilter(dst_ip_address, "@element" ~= "(?:\d{1,3}\.){3}\d{1,3}")),
    dst_ipv6_addresses = if(array_length(dst_ip_address) > 0, arrayfilter(dst_ip_address, "@element" ~= "(?:[a-fA-F\d]{0,4}\:){1,7}[a-fA-F\d]{0,4}")),
    src_ipv4_addresses = if(array_length(xff_ipv4_addresses) > 0, 
        arraydistinct(arrayconcat(arrayfilter(src_ip_addresses, "@element" ~= "(?:\d{1,3}\.){3}\d{1,3}"), xff_ipv4_addresses)),
        arrayfilter(src_ip_addresses, "@element" ~= "(?:\d{1,3}\.){3}\d{1,3}")),
    src_ipv6_addresses = if(array_length(xff_ipv6_addresses) > 0, 
        arraydistinct(arrayconcat(arrayfilter(src_ip_addresses, "@element" ~= "(?:[a-fA-F\d]{0,4}\:){1,7}[a-fA-F\d]{0,4}"), xff_ipv6_addresses)),
        arrayfilter(src_ip_addresses, "@element" ~= "(?:[a-fA-F\d]{0,4}\:){1,7}[a-fA-F\d]{0,4}")),
    intermediate_ipv4_addresses = arraydistinct(arraycreate(vpn_tunnel_ipv4, vpn_tunnel_assigned_ipv4, ppp_gateway_ipv4)),
    intermediate_ipv6_addresses = arraydistinct(arraycreate(vpn_tunnel_ipv6, vpn_tunnel_assigned_ipv6, ppp_gateway_ipv6)),

    // extract the icmp code & icmp type lsb (least significant bit) & msb (most significant bit) in their hexadecimal representation 
    icmp_code_lsb_hex = if(icmp_type_hex = null, null, arrayindex(regextract(icmp_code_hex, "(?:0x[a-f\d]|0x)([a-f\d])$"), 0)),
    icmp_code_msb_hex = if(icmp_type_hex = null, null, coalesce(arrayindex(regextract(icmp_code_hex, "0x([a-f\d])[a-f\d]$"), 0), "0")), 
    icmp_type_lsb_hex = if(icmp_type_hex = null, null, arrayindex(regextract(icmp_type_hex, "(?:0x[a-f\d]|0x)([a-f\d])$"), 0)),
    icmp_type_msb_hex = if(icmp_type_hex = null, null, coalesce(arrayindex(regextract(icmp_type_hex, "0x([a-f\d])[a-f\d]$"), 0), "0"))

| alter 
    // convert the icmp code & icmp type lsb & msb from their hexadecimal representation to decimal representation
    icmp_code_lsb_decimal = if(icmp_code_lsb_hex = "f", 15, icmp_code_lsb_hex = "e", 14, icmp_code_lsb_hex = "d", 13, icmp_code_lsb_hex = "c", 12, icmp_code_lsb_hex = "b", 11, icmp_code_lsb_hex = "a", 10, to_integer(icmp_code_lsb_hex)),
    icmp_code_msb_decimal = if(icmp_code_msb_hex = "f", 240, icmp_code_msb_hex = "e", 224, icmp_code_msb_hex = "d", 208, icmp_code_msb_hex = "c", 192, icmp_code_msb_hex = "b", 176, icmp_code_msb_hex = "a", 160, icmp_code_msb_hex = "0", 0, multiply(16,  to_integer(icmp_code_msb_hex))),
    icmp_type_lsb_decimal = if(icmp_type_lsb_hex = "f", 15, icmp_type_lsb_hex = "e", 14, icmp_type_lsb_hex = "d", 13, icmp_type_lsb_hex = "c", 12, icmp_type_lsb_hex = "b", 11, icmp_type_lsb_hex = "a", 10, to_integer(icmp_type_lsb_hex)),
    icmp_type_msb_decimal = if(icmp_type_msb_hex = "f", 240, icmp_type_msb_hex = "e", 224, icmp_type_msb_hex = "d", 208, icmp_type_msb_hex = "c", 192, icmp_type_msb_hex = "b", 176, icmp_type_msb_hex = "a", 160, icmp_type_msb_hex = "0", 0, multiply(16,  to_integer(icmp_type_msb_hex))),

    // isolate public ipv4 addresses 
    src_ipv4_public_addresses = arrayfilter(src_ipv4_addresses, not incidr("@element", "10.0.0.0/8") and not incidr("@element", "172.16.0.0/12") and not incidr("@element", "192.168.0.0/16") and not incidr("@element","127.0.0.0/8") and not incidr("@element","169.254.0.0/16")),
    dst_ipv4_public_addresses = arrayfilter(dst_ipv4_addresses, not incidr("@element", "10.0.0.0/8") and not incidr("@element", "172.16.0.0/12") and not incidr("@element", "192.168.0.0/16") and not incidr("@element","127.0.0.0/8") and not incidr("@element","169.254.0.0/16")),
    intermediate_ipv4_public_addresses = arrayfilter(intermediate_ipv4_addresses, not incidr("@element", "10.0.0.0/8") and not incidr("@element", "172.16.0.0/12") and not incidr("@element", "192.168.0.0/16") and not incidr("@element","127.0.0.0/8") and not incidr("@element","169.254.0.0/16"))

| alter // XDM Mappings
    xdm.alert.category = FTNTFGTviruscat,
    xdm.alert.description = FTNTFGTref,
    xdm.alert.original_alert_id = to_string(FTNTFGTincidentserialno),
    xdm.alert.original_threat_id = coalesce(FTNTFGTattackid, FTNTFGTvirusid, FTNTFGTvulnid, FTNTFGTcveid),
    xdm.alert.original_threat_name = coalesce(FTNTFGTattack, FTNTFGTvirus, FTNTFGTvulnname, FTNTFGTthreattype),
    xdm.alert.risks = if(risks_formatted != null and len(risks_formatted) > 2, arraycreate(to_json_string(risks_formatted))),
    xdm.alert.severity = coalesce(FTNTFGTCRlevel, FTNTFGTseverity, FTNTFGTapprisk),
    xdm.alert.subcategory = FTNTFGTlogdesc, 
    xdm.event.description = msg,
    xdm.event.duration = to_integer(multiply(to_integer(FTNTFGTduration), 1000)),
    xdm.event.id = to_string(FTNTFGTlogid),
    xdm.event.is_completed = to_boolean("TRUE"),
    xdm.event.log_level = if(
        cefSeverity = "1" or cef_pri_level = "debug", XDM_CONST.LOG_LEVEL_DEBUG, 
        cefSeverity = "2" or cef_pri_level = "information", XDM_CONST.LOG_LEVEL_INFORMATIONAL, 
        cefSeverity = "3" or cef_pri_level ~= "notice|notification", XDM_CONST.LOG_LEVEL_NOTICE, 
        cefSeverity = "4" or cef_pri_level = "warning", XDM_CONST.LOG_LEVEL_WARNING, 
        cefSeverity = "5" or cef_pri_level = "error", XDM_CONST.LOG_LEVEL_ERROR, 
        cefSeverity = "6" or cef_pri_level = "critical", XDM_CONST.LOG_LEVEL_CRITICAL, 
        cefSeverity = "7" or cef_pri_level = "alert", XDM_CONST.LOG_LEVEL_ALERT, 
        cefSeverity = "8" or cef_pri_level = "emergency", XDM_CONST.LOG_LEVEL_EMERGENCY, 
        FTNTFGTlevel),
    xdm.event.operation_sub_type = FTNTFGTsubtype,
    xdm.event.outcome = if(
        outcome in ("update", "success", "succeeded") or FTNTFGTresult in("OK", "DONE"), XDM_CONST.OUTCOME_SUCCESS,
        outcome in ("failure", "failed", "negotiate_error") or FTNTFGTresult = "ERROR", XDM_CONST.OUTCOME_FAILED,
        outcome in ("database-check", "authentication-required"), XDM_CONST.OUTCOME_PARTIAL,
        outcome in ("unregistered", "new") or FTNTFGTresult = "N/A", XDM_CONST.OUTCOME_UNKNOWN,
        coalesce(outcome, FTNTFGTresult)),
    xdm.event.outcome_reason = coalesce(reason, FTNTFGTerror, FTNTFGTerror_num),
    xdm.event.type = FTNTFGTsubtype,
    xdm.intermediate.host.device_id = to_string(FTNTFGTtunnelid),
    xdm.intermediate.host.hardware_uuid = coalesce(FTNTFGTapsn, FTNTFGTsnclosest), 
    xdm.intermediate.host.hostname = coalesce(FTNTFGTvpntunnel, FTNTFGTap),
    xdm.intermediate.host.ipv4_addresses = intermediate_ipv4_addresses,
    xdm.intermediate.host.ipv6_addresses = intermediate_ipv6_addresses,
    xdm.intermediate.host.mac_addresses = arrayfilter(arraydistinct(arraycreate(FTNTFGTbssid, FTNTFGTstamac)), "@element" ~= "(?:[\da-fA-F]{2}\:){5}[\da-fA-F]{2}"),
    xdm.intermediate.ipv4 = coalesce(vpn_tunnel_assigned_ipv4, vpn_tunnel_ipv4, ppp_gateway_ipv4),
    xdm.intermediate.host.ipv4_public_addresses = intermediate_ipv4_public_addresses,
    xdm.intermediate.ipv6 = coalesce(vpn_tunnel_assigned_ipv6, vpn_tunnel_ipv6, ppp_gateway_ipv6),
    xdm.intermediate.location.country = if(FTNTFGTopercountry != "Reserved", FTNTFGTopercountry), 
    xdm.intermediate.user.groups = if(FTNTFGTxauthgroup != "N/A", arraycreate(FTNTFGTxauthgroup)),  
    xdm.intermediate.user.username = if(FTNTFGTxauthuser = "N/A", FTNTFGTxauthuser),
    xdm.network.application_protocol = coalesce(app, FTNTFGTmethod, FTNTFGTvoip_proto),
    xdm.network.application_protocol_category = if(FTNTFGTappcat != "unknown", FTNTFGTappcat),
    xdm.network.dhcp.lease = to_integer(FTNTFGTlease), 
    xdm.network.dhcp.message_type = if(dhcp_msg_type = null, null, dhcp_msg_type = "DISCOVER", XDM_CONST.DHCP_MESSAGE_TYPE_DHCPDISCOVER, dhcp_msg_type = "OFFER", XDM_CONST.DHCP_MESSAGE_TYPE_DHCPOFFER, dhcp_msg_type = "REQUEST", XDM_CONST.DHCP_MESSAGE_TYPE_DHCPREQUEST, dhcp_msg_type = "DECLINE", XDM_CONST.DHCP_MESSAGE_TYPE_DHCPDECLINE, dhcp_msg_type = "ACK", XDM_CONST.DHCP_MESSAGE_TYPE_DHCPACK, dhcp_msg_type = "NAK", XDM_CONST.DHCP_MESSAGE_TYPE_DHCPNAK, dhcp_msg_type = "RELEASE", XDM_CONST.DHCP_MESSAGE_TYPE_DHCPRELEASE, dhcp_msg_type = "INFORM", XDM_CONST.DHCP_MESSAGE_TYPE_DHCPINFORM, dhcp_msg_type = "FORCERENEW", XDM_CONST.DHCP_MESSAGE_TYPE_DHCPFORCERENEW, dhcp_msg_type = "LEASEQUERY", XDM_CONST.DHCP_MESSAGE_TYPE_DHCPLEASEQUERY, dhcp_msg_type = "LEASEUNASSIGNED", XDM_CONST.DHCP_MESSAGE_TYPE_DHCPLEASEUNASSIGNED, dhcp_msg_type = "LEASEUNKNOWN", XDM_CONST.DHCP_MESSAGE_TYPE_DHCPLEASEUNKNOWN, dhcp_msg_type = "LEASEACTIVE", XDM_CONST.DHCP_MESSAGE_TYPE_DHCPLEASEACTIVE, dhcp_msg_type = "BULKLEASEQUERY", XDM_CONST.DHCP_MESSAGE_TYPE_DHCPBULKLEASEQUERY, dhcp_msg_type = "LEASEQUERYDONE", XDM_CONST.DHCP_MESSAGE_TYPE_DHCPLEASEQUERYDONE, dhcp_msg_type = "ACTIVELEASEQUERY", XDM_CONST.DHCP_MESSAGE_TYPE_DHCPACTIVELEASEQUERY, dhcp_msg_type = "LEASEQUERYSTATUS", XDM_CONST.DHCP_MESSAGE_TYPE_DHCPLEASEQUERYSTATUS, dhcp_msg_type = "TLS", XDM_CONST.DHCP_MESSAGE_TYPE_DHCPTLS, dhcp_msg_type),
    xdm.network.dns.dns_question.class = dns_record_class,
    xdm.network.dns.dns_question.name = FTNTFGTqname,
    xdm.network.dns.dns_question.type = dns_record_type,
    xdm.network.dns.dns_resource_record.class = dns_record_class,
    xdm.network.dns.dns_resource_record.name = FTNTFGTqname,
    xdm.network.dns.dns_resource_record.type = dns_record_type,
    xdm.network.dns.dns_resource_record.value = FTNTFGTipaddr,
    xdm.network.dns.is_response = if(FTNTFGTeventtype = "dns-response", to_boolean("TRUE"), FTNTFGTeventtype = "dns-query", to_boolean("FALSE")),
    xdm.network.http.http_header.header = if(FTNTFGTforwardedfor != null, "X-Forwarded-For"),
    xdm.network.http.http_header.value = FTNTFGTforwardedfor,
    xdm.network.http.method = if(FTNTFGThttpmethod = "GET", XDM_CONST.HTTP_METHOD_GET, FTNTFGThttpmethod = "POST", XDM_CONST.HTTP_METHOD_POST, FTNTFGThttpmethod = "PUT", XDM_CONST.HTTP_METHOD_PUT, FTNTFGThttpmethod = "OPTIONS", XDM_CONST.HTTP_METHOD_OPTIONS, FTNTFGThttpmethod = "CONNECT", XDM_CONST.HTTP_METHOD_CONNECT, FTNTFGThttpmethod = "ACL", XDM_CONST.HTTP_METHOD_ACL, FTNTFGThttpmethod = "BASELINE_CONTROL", XDM_CONST.HTTP_METHOD_BASELINE_CONTROL, FTNTFGThttpmethod = "BIND", XDM_CONST.HTTP_METHOD_BIND, FTNTFGThttpmethod = "CHECKIN", XDM_CONST.HTTP_METHOD_CHECKIN, FTNTFGThttpmethod = "CHECKOUT", XDM_CONST.HTTP_METHOD_CHECKOUT, FTNTFGThttpmethod = "COPY", XDM_CONST.HTTP_METHOD_COPY, FTNTFGThttpmethod = "DELETE", XDM_CONST.HTTP_METHOD_DELETE, FTNTFGThttpmethod = "HEAD", XDM_CONST.HTTP_METHOD_HEAD, FTNTFGThttpmethod = "LABEL", XDM_CONST.HTTP_METHOD_LABEL, FTNTFGThttpmethod = "LINK", XDM_CONST.HTTP_METHOD_LINK, FTNTFGThttpmethod = "LOCK", XDM_CONST.HTTP_METHOD_LOCK, FTNTFGThttpmethod = "MERGE", XDM_CONST.HTTP_METHOD_MERGE, FTNTFGThttpmethod = "MKACTIVITY", XDM_CONST.HTTP_METHOD_MKACTIVITY, FTNTFGThttpmethod = "MKCALENDAR", XDM_CONST.HTTP_METHOD_MKCALENDAR, FTNTFGThttpmethod = "MKCOL", XDM_CONST.HTTP_METHOD_MKCOL, FTNTFGThttpmethod = "MKREDIRECTREF", XDM_CONST.HTTP_METHOD_MKREDIRECTREF, FTNTFGThttpmethod = "MKWORKSPACE", XDM_CONST.HTTP_METHOD_MKWORKSPACE, FTNTFGThttpmethod = "MOVE", XDM_CONST.HTTP_METHOD_MOVE, FTNTFGThttpmethod = "ORDERPATCH", XDM_CONST.HTTP_METHOD_ORDERPATCH, FTNTFGThttpmethod = "PATCH", XDM_CONST.HTTP_METHOD_PATCH, FTNTFGThttpmethod = "PRI", XDM_CONST.HTTP_METHOD_PRI, FTNTFGThttpmethod = "PROPFIND", XDM_CONST.HTTP_METHOD_PROPFIND, FTNTFGThttpmethod = "PROPPATCH", XDM_CONST.HTTP_METHOD_PROPPATCH, FTNTFGThttpmethod = "REBIND", XDM_CONST.HTTP_METHOD_REBIND, FTNTFGThttpmethod = "REPORT", XDM_CONST.HTTP_METHOD_REPORT, FTNTFGThttpmethod = "SEARCH", XDM_CONST.HTTP_METHOD_SEARCH, FTNTFGThttpmethod = "TRACE", XDM_CONST.HTTP_METHOD_TRACE, FTNTFGThttpmethod = "UNBIND", XDM_CONST.HTTP_METHOD_UNBIND, FTNTFGThttpmethod = "UNCHECKOUT", XDM_CONST.HTTP_METHOD_UNCHECKOUT, FTNTFGThttpmethod = "UNLINK", XDM_CONST.HTTP_METHOD_UNLINK, FTNTFGThttpmethod = "UNLOCK", XDM_CONST.HTTP_METHOD_UNLOCK, FTNTFGThttpmethod = "UPDATE", XDM_CONST.HTTP_METHOD_UPDATE, FTNTFGThttpmethod = "UPDATEREDIRECTREF", XDM_CONST.HTTP_METHOD_UPDATEREDIRECTREF, FTNTFGThttpmethod = "VERSION_CONTROL", XDM_CONST.HTTP_METHOD_VERSION_CONTROL, FTNTFGThttpmethod),
    xdm.network.http.referrer = FTNTFGTreferralurl,
    xdm.network.http.response_code = if(FTNTFGThttpcode = null, null, FTNTFGThttpcode = "100", XDM_CONST.HTTP_RSP_CODE_CONTINUE, FTNTFGThttpcode = "101", XDM_CONST.HTTP_RSP_CODE_SWITCHING_PROTOCOLS, FTNTFGThttpcode = "102", XDM_CONST.HTTP_RSP_CODE_PROCESSING, FTNTFGThttpcode = "103", XDM_CONST.HTTP_RSP_CODE_EARLY_HINTS, FTNTFGThttpcode = "200", XDM_CONST.HTTP_RSP_CODE_OK, FTNTFGThttpcode = "201", XDM_CONST.HTTP_RSP_CODE_CREATED, FTNTFGThttpcode = "202", XDM_CONST.HTTP_RSP_CODE_ACCEPTED, FTNTFGThttpcode = "203", XDM_CONST.HTTP_RSP_CODE_NON__AUTHORITATIVE_INFORMATION, FTNTFGThttpcode = "204", XDM_CONST.HTTP_RSP_CODE_NO_CONTENT, FTNTFGThttpcode = "205", XDM_CONST.HTTP_RSP_CODE_RESET_CONTENT, FTNTFGThttpcode = "206", XDM_CONST.HTTP_RSP_CODE_PARTIAL_CONTENT, FTNTFGThttpcode = "207", XDM_CONST.HTTP_RSP_CODE_MULTI__STATUS, FTNTFGThttpcode = "208", XDM_CONST.HTTP_RSP_CODE_ALREADY_REPORTED, FTNTFGThttpcode = "226", XDM_CONST.HTTP_RSP_CODE_IM_USED, FTNTFGThttpcode = "300", XDM_CONST.HTTP_RSP_CODE_MULTIPLE_CHOICES, FTNTFGThttpcode = "301", XDM_CONST.HTTP_RSP_CODE_MOVED_PERMANENTLY, FTNTFGThttpcode = "302", XDM_CONST.HTTP_RSP_CODE_FOUND, FTNTFGThttpcode = "303", XDM_CONST.HTTP_RSP_CODE_SEE_OTHER, FTNTFGThttpcode = "304", XDM_CONST.HTTP_RSP_CODE_NOT_MODIFIED, FTNTFGThttpcode = "305", XDM_CONST.HTTP_RSP_CODE_USE_PROXY, FTNTFGThttpcode = "307", XDM_CONST.HTTP_RSP_CODE_TEMPORARY_REDIRECT, FTNTFGThttpcode = "308", XDM_CONST.HTTP_RSP_CODE_PERMANENT_REDIRECT, FTNTFGThttpcode = "400", XDM_CONST.HTTP_RSP_CODE_BAD_REQUEST, FTNTFGThttpcode = "401", XDM_CONST.HTTP_RSP_CODE_UNAUTHORIZED, FTNTFGThttpcode = "402", XDM_CONST.HTTP_RSP_CODE_PAYMENT_REQUIRED, FTNTFGThttpcode = "403", XDM_CONST.HTTP_RSP_CODE_FORBIDDEN, FTNTFGThttpcode = "404", XDM_CONST.HTTP_RSP_CODE_NOT_FOUND, FTNTFGThttpcode = "405", XDM_CONST.HTTP_RSP_CODE_METHOD_NOT_ALLOWED, FTNTFGThttpcode = "406", XDM_CONST.HTTP_RSP_CODE_NOT_ACCEPTABLE, FTNTFGThttpcode = "407", XDM_CONST.HTTP_RSP_CODE_PROXY_AUTHENTICATION_REQUIRED, FTNTFGThttpcode = "408", XDM_CONST.HTTP_RSP_CODE_REQUEST_TIMEOUT, FTNTFGThttpcode = "409", XDM_CONST.HTTP_RSP_CODE_CONFLICT, FTNTFGThttpcode = "410", XDM_CONST.HTTP_RSP_CODE_GONE, FTNTFGThttpcode = "411", XDM_CONST.HTTP_RSP_CODE_LENGTH_REQUIRED, FTNTFGThttpcode = "412", XDM_CONST.HTTP_RSP_CODE_PRECONDITION_FAILED, FTNTFGThttpcode = "413", XDM_CONST.HTTP_RSP_CODE_CONTENT_TOO_LARGE, FTNTFGThttpcode = "414", XDM_CONST.HTTP_RSP_CODE_URI_TOO_LONG, FTNTFGThttpcode = "415", XDM_CONST.HTTP_RSP_CODE_UNSUPPORTED_MEDIA_TYPE, FTNTFGThttpcode = "416", XDM_CONST.HTTP_RSP_CODE_RANGE_NOT_SATISFIABLE, FTNTFGThttpcode = "417", XDM_CONST.HTTP_RSP_CODE_EXPECTATION_FAILED, FTNTFGThttpcode = "421", XDM_CONST.HTTP_RSP_CODE_MISDIRECTED_REQUEST, FTNTFGThttpcode = "422", XDM_CONST.HTTP_RSP_CODE_UNPROCESSABLE_CONTENT, FTNTFGThttpcode = "423", XDM_CONST.HTTP_RSP_CODE_LOCKED, FTNTFGThttpcode = "424", XDM_CONST.HTTP_RSP_CODE_FAILED_DEPENDENCY, FTNTFGThttpcode = "425", XDM_CONST.HTTP_RSP_CODE_TOO_EARLY, FTNTFGThttpcode = "426", XDM_CONST.HTTP_RSP_CODE_UPGRADE_REQUIRED, FTNTFGThttpcode = "428", XDM_CONST.HTTP_RSP_CODE_PRECONDITION_REQUIRED, FTNTFGThttpcode = "429", XDM_CONST.HTTP_RSP_CODE_TOO_MANY_REQUESTS, FTNTFGThttpcode = "431", XDM_CONST.HTTP_RSP_CODE_REQUEST_HEADER_FIELDS_TOO_LARGE, FTNTFGThttpcode = "451", XDM_CONST.HTTP_RSP_CODE_UNAVAILABLE_FOR_LEGAL_REASONS, FTNTFGThttpcode = "500", XDM_CONST.HTTP_RSP_CODE_INTERNAL_SERVER_ERROR, FTNTFGThttpcode = "501", XDM_CONST.HTTP_RSP_CODE_NOT_IMPLEMENTED, FTNTFGThttpcode = "502", XDM_CONST.HTTP_RSP_CODE_BAD_GATEWAY, FTNTFGThttpcode = "503", XDM_CONST.HTTP_RSP_CODE_SERVICE_UNAVAILABLE, FTNTFGThttpcode = "504", XDM_CONST.HTTP_RSP_CODE_GATEWAY_TIMEOUT, FTNTFGThttpcode = "505", XDM_CONST.HTTP_RSP_CODE_HTTP_VERSION_NOT_SUPPORTED, FTNTFGThttpcode = "506", XDM_CONST.HTTP_RSP_CODE_VARIANT_ALSO_NEGOTIATES, FTNTFGThttpcode = "507", XDM_CONST.HTTP_RSP_CODE_INSUFFICIENT_STORAGE, FTNTFGThttpcode = "508", XDM_CONST.HTTP_RSP_CODE_LOOP_DETECTED, FTNTFGThttpcode = "511", XDM_CONST.HTTP_RSP_CODE_NETWORK_AUTHENTICATION_REQUIRED, to_string(FTNTFGThttpcode)),
    xdm.network.http.url = target_url,
    xdm.network.http.url_category = if(url_category !~= "(?i)unkown", url_category), 
    xdm.network.icmp.code = to_integer(add(icmp_type_lsb_decimal, icmp_type_msb_decimal)),
    xdm.network.icmp.type = to_integer(add(icmp_code_lsb_decimal, icmp_code_msb_decimal)),
    xdm.network.ip_protocol = if(proto="0", XDM_CONST.IP_PROTOCOL_HOPOPT, proto="1", XDM_CONST.IP_PROTOCOL_ICMP, proto="2", XDM_CONST.IP_PROTOCOL_IGMP, proto="3", XDM_CONST.IP_PROTOCOL_GGP, proto="4", XDM_CONST.IP_PROTOCOL_IP, proto="5", XDM_CONST.IP_PROTOCOL_ST, proto="6", XDM_CONST.IP_PROTOCOL_TCP, proto="7", XDM_CONST.IP_PROTOCOL_CBT, proto="8", XDM_CONST.IP_PROTOCOL_EGP, proto="9", XDM_CONST.IP_PROTOCOL_IGP, proto="10", XDM_CONST.IP_PROTOCOL_BBN_RCC_MON, proto="11", XDM_CONST.IP_PROTOCOL_NVP_II, proto="12", XDM_CONST.IP_PROTOCOL_PUP, proto="13", XDM_CONST.IP_PROTOCOL_ARGUS, proto="14", XDM_CONST.IP_PROTOCOL_EMCON, proto="15", XDM_CONST.IP_PROTOCOL_XNET, proto="16", XDM_CONST.IP_PROTOCOL_CHAOS, proto="17", XDM_CONST.IP_PROTOCOL_UDP, proto="18", XDM_CONST.IP_PROTOCOL_MUX, proto="19", XDM_CONST.IP_PROTOCOL_DCN_MEAS, proto="20", XDM_CONST.IP_PROTOCOL_HMP, proto="21", XDM_CONST.IP_PROTOCOL_PRM, proto="22", XDM_CONST.IP_PROTOCOL_XNS_IDP, proto="23", XDM_CONST.IP_PROTOCOL_TRUNK_1, proto="24", XDM_CONST.IP_PROTOCOL_TRUNK_2, proto="25", XDM_CONST.IP_PROTOCOL_LEAF_1, proto="26", XDM_CONST.IP_PROTOCOL_LEAF_2, proto="27", XDM_CONST.IP_PROTOCOL_RDP, proto="28", XDM_CONST.IP_PROTOCOL_IRTP, proto="29", XDM_CONST.IP_PROTOCOL_ISO_TP4, proto="30", XDM_CONST.IP_PROTOCOL_NETBLT, proto="31", XDM_CONST.IP_PROTOCOL_MFE_NSP, proto="32", XDM_CONST.IP_PROTOCOL_MERIT_INP, proto="33", XDM_CONST.IP_PROTOCOL_DCCP, proto="34", XDM_CONST.IP_PROTOCOL_3PC, proto="35", XDM_CONST.IP_PROTOCOL_IDPR, proto="36", XDM_CONST.IP_PROTOCOL_XTP, proto="37", XDM_CONST.IP_PROTOCOL_DDP, proto="38", XDM_CONST.IP_PROTOCOL_IDPR_CMTP, proto="39", XDM_CONST.IP_PROTOCOL_TP, proto="40", XDM_CONST.IP_PROTOCOL_IL, proto="41", XDM_CONST.IP_PROTOCOL_IPV6, proto="42", XDM_CONST.IP_PROTOCOL_SDRP, proto="43", XDM_CONST.IP_PROTOCOL_IPV6_ROUTE, proto="44", XDM_CONST.IP_PROTOCOL_IPV6_FRAG, proto="45", XDM_CONST.IP_PROTOCOL_IDRP, proto="46", XDM_CONST.IP_PROTOCOL_RSVP, proto="47", XDM_CONST.IP_PROTOCOL_GRE, proto="48", XDM_CONST.IP_PROTOCOL_DSR, proto="49", XDM_CONST.IP_PROTOCOL_BNA, proto="50", XDM_CONST.IP_PROTOCOL_ESP, proto="51", XDM_CONST.IP_PROTOCOL_AH, proto="52", XDM_CONST.IP_PROTOCOL_I_NLSP, proto="53", XDM_CONST.IP_PROTOCOL_SWIPE, proto="54", XDM_CONST.IP_PROTOCOL_NARP, proto="55", XDM_CONST.IP_PROTOCOL_MOBILE, proto="56", XDM_CONST.IP_PROTOCOL_TLSP, proto="57", XDM_CONST.IP_PROTOCOL_SKIP, proto="58", XDM_CONST.IP_PROTOCOL_IPV6_ICMP, proto="59", XDM_CONST.IP_PROTOCOL_IPV6_NONXT, proto="60", XDM_CONST.IP_PROTOCOL_IPV6_OPTS, proto="62", XDM_CONST.IP_PROTOCOL_CFTP, proto="64", XDM_CONST.IP_PROTOCOL_SAT_EXPAK, proto="65", XDM_CONST.IP_PROTOCOL_KRYPTOLAN, proto="66", XDM_CONST.IP_PROTOCOL_RVD, proto="67", XDM_CONST.IP_PROTOCOL_IPPC, proto="69", XDM_CONST.IP_PROTOCOL_SAT_MON, proto="70", XDM_CONST.IP_PROTOCOL_VISA, proto="71", XDM_CONST.IP_PROTOCOL_IPCV, proto="72", XDM_CONST.IP_PROTOCOL_CPNX, proto="73", XDM_CONST.IP_PROTOCOL_CPHB, proto="74", XDM_CONST.IP_PROTOCOL_WSN, proto="75", XDM_CONST.IP_PROTOCOL_PVP, proto="76", XDM_CONST.IP_PROTOCOL_BR_SAT_MON, proto="77", XDM_CONST.IP_PROTOCOL_SUN_ND, proto="78", XDM_CONST.IP_PROTOCOL_WB_MON, proto="79", XDM_CONST.IP_PROTOCOL_WB_EXPAK, proto="80", XDM_CONST.IP_PROTOCOL_ISO_IP, proto="81", XDM_CONST.IP_PROTOCOL_VMTP, proto="82", XDM_CONST.IP_PROTOCOL_SECURE_VMTP, proto="83", XDM_CONST.IP_PROTOCOL_VINES, proto="84", XDM_CONST.IP_PROTOCOL_TTP, proto="85", XDM_CONST.IP_PROTOCOL_NSFNET_IGP, proto="86", XDM_CONST.IP_PROTOCOL_DGP, proto="87", XDM_CONST.IP_PROTOCOL_TCF, proto="88", XDM_CONST.IP_PROTOCOL_EIGRP, proto="89", XDM_CONST.IP_PROTOCOL_OSPFIGP, proto="90", XDM_CONST.IP_PROTOCOL_SPRITE_RPC, proto="91", XDM_CONST.IP_PROTOCOL_LARP, proto="92", XDM_CONST.IP_PROTOCOL_MTP, proto="93", XDM_CONST.IP_PROTOCOL_AX25, proto="94", XDM_CONST.IP_PROTOCOL_IPIP, proto="95", XDM_CONST.IP_PROTOCOL_MICP, proto="96", XDM_CONST.IP_PROTOCOL_SCC_SP, proto="97", XDM_CONST.IP_PROTOCOL_ETHERIP, proto="98", XDM_CONST.IP_PROTOCOL_ENCAP, proto="100", XDM_CONST.IP_PROTOCOL_GMTP, proto="101", XDM_CONST.IP_PROTOCOL_IFMP, proto="102", XDM_CONST.IP_PROTOCOL_PNNI, proto="103", XDM_CONST.IP_PROTOCOL_PIM, proto="104", XDM_CONST.IP_PROTOCOL_ARIS, proto="105", XDM_CONST.IP_PROTOCOL_SCPS, proto="106", XDM_CONST.IP_PROTOCOL_QNX, proto="107", XDM_CONST.IP_PROTOCOL_AN, proto="108", XDM_CONST.IP_PROTOCOL_IPCOMP, proto="110", XDM_CONST.IP_PROTOCOL_COMPAQ_PEER, proto="111", XDM_CONST.IP_PROTOCOL_IPX_IN_IP, proto="112", XDM_CONST.IP_PROTOCOL_VRRP, proto="113", XDM_CONST.IP_PROTOCOL_PGM, proto="115", XDM_CONST.IP_PROTOCOL_L2TP, proto="116", XDM_CONST.IP_PROTOCOL_DDX, proto="117", XDM_CONST.IP_PROTOCOL_IATP, proto="118", XDM_CONST.IP_PROTOCOL_STP, proto="119", XDM_CONST.IP_PROTOCOL_SRP, proto="120", XDM_CONST.IP_PROTOCOL_UTI, proto="121", XDM_CONST.IP_PROTOCOL_SMP, proto="122", XDM_CONST.IP_PROTOCOL_SM, proto="123", XDM_CONST.IP_PROTOCOL_PTP, proto="124", XDM_CONST.IP_PROTOCOL_ISIS, proto="125", XDM_CONST.IP_PROTOCOL_FIRE, proto="126", XDM_CONST.IP_PROTOCOL_CRTP, proto="127", XDM_CONST.IP_PROTOCOL_CRUDP, proto="128", XDM_CONST.IP_PROTOCOL_SSCOPMCE, proto="129", XDM_CONST.IP_PROTOCOL_IPLT, proto="130", XDM_CONST.IP_PROTOCOL_SPS, proto="131", XDM_CONST.IP_PROTOCOL_PIPE, proto="132", XDM_CONST.IP_PROTOCOL_SCTP, proto="133", XDM_CONST.IP_PROTOCOL_FC, proto="134", XDM_CONST.IP_PROTOCOL_RSVP_E2E_IGNORE, proto="135", XDM_CONST.IP_PROTOCOL_MOBILITY, proto="136", XDM_CONST.IP_PROTOCOL_UDPLITE, proto="137", XDM_CONST.IP_PROTOCOL_MPLS_IN_IP,to_string(proto)),
    xdm.network.rule = if(array_length(network_rules) > 0, arraystring(network_rules, "; ")),
    xdm.network.session_id = externalId,
    xdm.network.tls.cipher = FTNTFGTcipher,
    xdm.network.tls.client_certificate.issuer = FTNTFGTccertissuer,
    xdm.network.tls.protocol_version = FTNTFGTtlsver,
    xdm.network.tls.server_certificate.issuer = FTNTFGTscertissuer,
    xdm.network.tls.server_name = FTNTFGTscertcname,
    xdm.network.vpn.allocated_ipv4 = coalesce(vpn_tunnel_assigned_ipv4, vpn_tunnel_ipv4),
    xdm.network.vpn.allocated_ipv6 = coalesce(vpn_tunnel_assigned_ipv6, vpn_tunnel_ipv6),
    xdm.observer.action = coalesce(act, FTNTFGTsslaction, FTNTFGTutmaction),
    xdm.observer.name = if(dvchost != null and dvchost != "" and dvchost != "N/A", dvchost, deviceExternalId),
    xdm.observer.type = cat,
    xdm.observer.unique_identifier = deviceExternalId,
    xdm.observer.version = cefDeviceVersion,
    xdm.session_context_id = externalId,
    xdm.source.host.device_category = coalesce(concat(FTNTFGTdevtype, " (", FTNTFGTsrcfamily, ")"), FTNTFGTdevtype, FTNTFGTsrcfamily),
    xdm.source.host.device_id = FTNTFGTsrcuuid,
    xdm.source.host.fqdn = shost,
    xdm.source.host.hostname = shost,
    xdm.source.host.mac_addresses = arraydistinct(arraycreate(FTNTFGTmastersrcmac, FTNTFGTsrcmac, FTNTFGTtamac)),
    xdm.source.host.manufacturer = coalesce(FTNTFGTsrchwvendor, FTNTFGTmanuf),
    xdm.source.host.os = FTNTFGTosname,
    xdm.source.host.os_family = if(src_os contains "windows", XDM_CONST.OS_FAMILY_WINDOWS, src_os contains "mac", XDM_CONST.OS_FAMILY_MACOS, src_os contains "linux", XDM_CONST.OS_FAMILY_LINUX, src_os contains "android", XDM_CONST.OS_FAMILY_ANDROID, src_os contains "ios", XDM_CONST.OS_FAMILY_IOS, src_os contains "ubuntu", XDM_CONST.OS_FAMILY_UBUNTU, src_os contains "debian", XDM_CONST.OS_FAMILY_DEBIAN, src_os contains "fedora", XDM_CONST.OS_FAMILY_FEDORA, src_os contains "centos", XDM_CONST.OS_FAMILY_CENTOS, src_os contains "chrome", XDM_CONST.OS_FAMILY_CHROMEOS, src_os contains "solaris", XDM_CONST.OS_FAMILY_SOLARIS, src_os contains "scada", XDM_CONST.OS_FAMILY_SCADA),
    xdm.source.interface = coalesce(FTNTFGTmastersrcmac, FTNTFGTsrcmac, FTNTFGTtamac),
    xdm.source.host.ipv4_addresses = if(array_length(src_ipv4_addresses) > 0, src_ipv4_addresses),
    xdm.source.host.ipv4_public_addresses = if(array_length(src_ipv4_public_addresses) > 0, src_ipv4_public_addresses),
    xdm.source.host.ipv6_addresses = if(array_length(src_ipv6_addresses) > 0, src_ipv6_addresses),
    xdm.source.ipv4 = arrayindex(src_ipv4_addresses, 0),
    xdm.source.ipv6 = if(array_length(src_ipv6_addresses) > 0, arrayindex(src_ipv6_addresses, 0)),
    xdm.source.location.city = FTNTFGTsrccity,
    xdm.source.location.country = if(FTNTFGTsrccountry != "Reserved", FTNTFGTsrccountry),
    xdm.source.location.region = FTNTFGTsrcregion,
    xdm.source.port = coalesce(to_integer(spt), to_integer(FTNTFGTpsrcport), to_integer(sourceTranslatedPort)),
    xdm.source.process.executable.filename = fname,
    xdm.source.process.name = sproc,
    xdm.source.sent_bytes = to_integer(out),
    xdm.source.sent_packets = to_integer(FTNTFGTsentpkt),
    xdm.source.user_agent = requestClientApplication,
    xdm.source.user.domain = FTNTFGTvd,
    xdm.source.user.groups = arrayfilter(arraydistinct(arraycreate(FTNTFGTgroup, FTNTFGTadgroup)), "@element" != "N/A" and "@element" != ""),
    xdm.source.user.identifier = FTNTFGTfctuid,
    xdm.source.user.username = coalesce(suser, FTNTFGTlogin, FTNTFGinitiator, FTNTFGTunauthuser),
    xdm.target.application.name = if(FTNTFGTappid != null, concat(FTNTFGTapp, " (", to_string(FTNTFGTappid), ")"), FTNTFGTapp),
    xdm.target.file.file_type = FTNTFGTfiletype,
    xdm.target.file.filename = fname,
    xdm.target.file.md5 = if(filehash_length = 32, FTNTFGTfilehash),
    xdm.target.file.sha256 = if(filehash_length = 64, FTNTFGTfilehash),
    xdm.target.file.size = to_integer(fsize),
    xdm.target.host.device_category = coalesce(concat(FTNTFGTdstdevtype, " (", FTNTFGTdstfamily, ")"), FTNTFGTdevtype, FTNTFGTdstfamily),
    xdm.target.host.device_model = FTNTFGTdsthwversion,
    xdm.target.host.fqdn = dhost,
    xdm.target.host.hardware_uuid = coalesce(FTNTFGTserialno, FTNTFGTsn),
    xdm.target.host.hostname = if(dhost != null, dhost, FTNTFGTdst_host != null and FTNTFGTdst_host != "N/A", FTNTFGTdst_host, FTNTFGTdstauthserver),
    xdm.target.host.mac_addresses = arraydistinct(arraycreate(FTNTFGTmasterdstmac, FTNTFGTdstmac, FTNTFGTinvalidmac)),
    xdm.target.host.manufacturer = FTNTFGTdsthwvendor,
    xdm.target.host.os = FTNTFGTdstosname,
    xdm.target.host.os_family = if(dst_os contains "windows", XDM_CONST.OS_FAMILY_WINDOWS, dst_os contains "mac", XDM_CONST.OS_FAMILY_MACOS, dst_os contains "linux", XDM_CONST.OS_FAMILY_LINUX, dst_os contains "android", XDM_CONST.OS_FAMILY_ANDROID, dst_os contains "ios", XDM_CONST.OS_FAMILY_IOS, dst_os contains "ubuntu", XDM_CONST.OS_FAMILY_UBUNTU, dst_os contains "debian", XDM_CONST.OS_FAMILY_DEBIAN, dst_os contains "fedora", XDM_CONST.OS_FAMILY_FEDORA, dst_os contains "centos", XDM_CONST.OS_FAMILY_CENTOS, dst_os contains "chrome", XDM_CONST.OS_FAMILY_CHROMEOS, dst_os contains "solaris", XDM_CONST.OS_FAMILY_SOLARIS, dst_os contains "scada", XDM_CONST.OS_FAMILY_SCADA),
    xdm.target.interface = coalesce(FTNTFGTmasterdstmac, FTNTFGTdstmac, FTNTFGTinvalidmac),
    xdm.target.host.ipv4_addresses = if(array_length(dst_ipv4_addresses) > 0, dst_ipv4_addresses),
    xdm.target.host.ipv4_public_addresses = if(array_length(dst_ipv4_public_addresses) > 0, dst_ipv4_public_addresses),
    xdm.target.host.ipv6_addresses = if(array_length(dst_ipv6_addresses) > 0, dst_ipv6_addresses),
    xdm.target.ipv4 = arrayindex(dst_ipv4_addresses, 0),
    xdm.target.ipv6 = arrayindex(dst_ipv6_addresses, 0),
    xdm.target.location.city = FTNTFGTdstcity,
    xdm.target.location.country = if(FTNTFGTdstcountry != "Reserved", FTNTFGTdstcountry),
    xdm.target.location.region = FTNTFGTdstregion,
    xdm.target.port = coalesce(to_integer(dpt), to_integer(FTNTFGTpdstport)), 
    xdm.target.process.command_line = FTNTFGTcommand,
    xdm.target.resource_before.value = coalesce(FTNTFGToldvalue, FTNTFGTold_value, FTNTFGTold_status, FTNTFGToldwprof),
    xdm.target.resource.name = coalesce(FTNTFGTcfgattr, FTNTFGTpoolname),
    xdm.target.resource.type = coalesce(FTNTFGTauditreporttype, FTNTFGTreporttype, FTNTFGTcfgpath),
    xdm.target.resource.value = coalesce(FTNTFGTnewvalue, FTNTFGTnew_value, FTNTFGTnew_status, FTNTFGTcfgobj),
    xdm.target.sent_bytes = to_integer(`in`),
    xdm.target.sent_packets = to_integer(FTNTFGTrcvdpkt),
    xdm.target.url = target_url,
    xdm.target.user.username = if(duser != null and duser != "N/A", duser, FTNTFGTdstuser != null and FTNTFGTdstuser != "N/A", FTNTFGTdstuser, FTNTFGTdstunauthuser != null and FTNTFGTdstunauthuser != "N/A", FTNTFGTdstunauthuser);


[MODEL:dataset="fortinet_fortimanager_raw", content_id="FortiManager"]
alter event_id = arrayindex(regextract(_raw_log, "log_id=(\d{10})" ), 0),
// extract subtype
    original_event_type = arrayindex(regextract(_raw_log, "subtype=(\w+)" ), 0),
// extract pri
    alert_severity = arrayindex(regextract(_raw_log, "pri=(\w+)" ), 0),
// extract desc
    event_type = arrayindex(regextract(_raw_log, "\Wdesc=\"([^\"]+)" ), 0),
// extract msg
    event_description = arrayindex(regextract(_raw_log, "msg=\"([^\"]+)" ), 0),
// extract user
    source_user_username = arrayindex(regextract(_raw_log, "user=\"([^\"]+)" ), 0),
// extract device
    source_host_hostname = arrayindex(regextract(_raw_log, "device=\"([^\"]+)" ), 0),
// extract adminprof
    source_user_groups = regextract(_raw_log, "adminprof=\"([^\"]+)" ),
// extract operation
    event_operation_sub_type = arrayindex(regextract(_raw_log, "operation=\"([^\"]+)" ), 0),
// extract session id
    session_context_id = arrayindex(regextract(_raw_log, "session_id=(\d{1,10})" ), 0),
// extract version
    target_resource_type = arrayindex(regextract(_raw_log, "version=\"([^\"]+)" ), 0)

// extract userfrom ->  extract IP 
| alter userfrom_ipv4 = arrayindex(regextract(_raw_log, "userfrom=\"\w+[(](\d{1,3}.\d{1,3}.\d{1,3}.\d{1,3})[)]" ), 0)
|alter userfrom_ipv6 = arrayindex(regextract(_raw_log , "userfrom=\"\w+[(]([a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5})[)]" ), 0)

| alter source_ipv4 = if( userfrom_ipv4 ~= "\d{1,3}.\d{1,3}.\d{1,3}.\d{1,3}", userfrom_ipv4)
| alter source_ipv6 = if( userfrom_ipv6 ~= "[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}", userfrom_ipv6)

// extract user type
|alter tmp_user_type = arrayindex(regextract(_raw_log, "user_type=\"(?i)(super|restrict)" ), 0)
|alter auth_privilege_level = if(tmp_user_type = "super", XDM_CONST.PRIVILEGE_LEVEL_ADMIN, tmp_user_type = "restrict", XDM_CONST.PRIVILEGE_LEVEL_USER)

// Subtype full name
| alter long_event_type = if(original_event_type = "system", "System Manager", original_event_type = "fgfm", "FortiGate-FortiManager Protocol", original_event_type = "devcfg", "Device Configuration", original_event_type = "scply","Security Console", original_event_type = "glbcfg", "Global Database", original_event_type = "scrmgr", "Script Manager", original_event_type = "webport", "Web Portal", original_event_type = "scfw", "Firewall objects", original_event_type = "scvpn", "VPN Console", original_event_type = "epmgr", "Endpoint Manager", original_event_type = "rev", "Revision History", original_event_type = "dm", "Deployment Manager", original_event_type = "rtmon", "Real-Time Monitor", original_event_type = "lrmgr", "Log And Report Manager", original_event_type = "ha", "High Availability", original_event_type = "fmwmgr", "Firmware Manager", original_event_type = "fgd", "FortiGuard Service", original_event_type = "fctmgr", "FortiClient Manager", original_event_type = "fmlmgr", "FortiMail manager", original_event_type = "iolog", "Debug IO log", original_event_type = "objcfg", "Object Changes", original_event_type = "devmgr", "Device Manager", original_event_type = "fmgws", "FortiManager Web Service", original_event_type = "logd", "Log Daemon", original_event_type = "fips", "FIPS-CC", original_event_type = "devops", "Managed Device Operations", original_event_type = "docker", "Management extension applications", original_event_type )


|alter
    xdm.event.id = event_id,
    xdm.event.original_event_type = long_event_type,
    xdm.alert.severity = alert_severity,
    xdm.event.log_level = if (alert_severity = "alert", XDM_CONST.LOG_LEVEL_ALERT, alert_severity = "error", XDM_CONST.LOG_LEVEL_ERROR, alert_severity = "warning", XDM_CONST.LOG_LEVEL_WARNING, alert_severity = "notice", XDM_CONST.LOG_LEVEL_NOTICE, alert_severity = "information", XDM_CONST.LOG_LEVEL_INFORMATIONAL, alert_severity = " emergency", XDM_CONST.LOG_LEVEL_EMERGENCY , alert_severity = "critical", XDM_CONST.LOG_LEVEL_CRITICAL, alert_severity = "debug", XDM_CONST.LOG_LEVEL_DEBUG),
    xdm.event.type = event_type,
    xdm.event.description = event_description,
    xdm.source.user.username = source_user_username,
    xdm.source.host.hostname = source_host_hostname,
    xdm.source.user.groups = source_user_groups,
    xdm.event.operation_sub_type = event_operation_sub_type,
    xdm.session_context_id = session_context_id,
    xdm.auth.privilege_level = auth_privilege_level,
    xdm.target.resource.type = target_resource_type,
    xdm.source.ipv4 = source_ipv4,
    xdm.source.ipv6 = source_ipv6;


[MODEL: dataset=github_github_audit_raw, content_id="GitHub"]
filter
    action in("oauth_application*","org_credential_authorization*")
| alter
    //_time = timestamp_seconds(to_integer(divide(created_at, 1000))),
    xdm.source.user.username = actor,
    xdm.source.location.country = json_extract_scalar(actor_location, "$.country_code"),
    xdm.event.operation = action;

filter
    action in("org*","role*","account*","advisory_credit*","billing*","business*","codespaces*","dependabot_alerts*","dependabot_alerts_new_repos*","dependabot_security_updates*","dependabot_security_updates_new_repos*","dependency_graph*","dependency_graph_new_repos*","discussion_post*","discussion_post_reply*","enterprise*","environment*","git*","hook*","integration_installation_request*","ip_allow_list*","ip_allow_list_entry*","issue*","marketplace_agreement_signature*","marketplace_listing*","members_can_create_pages*","org_secret_scanning_custom_pattern*","organization_label*","packages*","payment_method*","profile_picture*","project*","protected_branch*","pull_request*","pull_request_review*","pull_request_review_comment*","repo*","repository_advisory*","repository_content_analysis*","repository_dependency_graph*","repository_secret_scanning*","repository_secret_scanning_custom_pattern*","repository_secret_scanning_push_protection*","repository_vulnerability_alert*","repository_vulnerability_alerts*","secret_scanning*","secret_scanning_new_repos*","sponsors*","team*","team_discussions*","workflows*")
| alter
    //_time = timestamp_seconds(to_integer(divide(created_at, 1000))),
    xdm.source.location.country = json_extract_scalar(actor_location, "$.country_code"),
    xdm.target.user.username = org,
    xdm.target.cloud.project = repo,
    xdm.source.user.username = actor,
    xdm.event.operation = action;


[MODEL:dataset="google_scc_raw", content_id="GoogleCloudSCC"]

        // Finding 
alter finding_category = finding -> category,
        finding_class = finding -> findingClass,
        finding_description = finding -> description,
        finding_severity = finding -> severity,
        finding_state = if(finding -> state = "ACTIVE", false, true),
        finding_parent_display_name = finding -> parentDisplayName

| alter f_sp = finding->sourceProperties{}

        // Source Properties
| alter tmp_exposed_service = finding -> sourceProperties.ExposedService,
        tmp_recommendation = finding -> sourceProperties.Recommendation,
        tmp_exception_instruction = finding -> sourceProperties.ExceptionInstructions,
        tmp_vulnerable = finding -> sourceProperties.VulnerableNetworkInterfaceNames{},
        tmp_open_ports = finding -> sourceProperties.OpenPorts{},
        tmp_extract_roles = regextract(f_sp,"Has(\w+Roles\":\s?true)")

| alter tmp_remove_chars = split(replace(arraystring(tmp_extract_roles , ","),"\"", ""), ",")
| alter tmp_remove_has = arraycreate(replace(arraystring(tmp_remove_chars,",") , "Has", ""))


|alter finding_sp_description = to_string(object_create("Exposed Service", tmp_exposed_service , "Recommendation", tmp_recommendation , "Exception Instructions", tmp_exception_instruction )),
       finding_sp_resource_path = json_extract_scalar_array(finding,  "$.sourceProperties.ResourcePath"),
       finding_sp_command_line = arraystring(finding -> sourceProperties.gcloud_remediation[], ","),
       finding_sp_scanner_name = finding -> sourceProperties.ScannerName,

       // Defining Open Ports and Vulnerable Network Interface Names as risks
       finding_sp_risks = arraycreate(object_create("Open Ports", replex(tmp_open_ports, "[{}\\\"\[\]]", ""), "Vulnerable Network Interface Names", replex(tmp_vulnerable, "[{}\\\"\[\]]", "")))


        // Resource
| alter tmp_project_id = arrayindex(regextract(resource -> project, "projects\/(.*)"),0),
        tmp_parent_id = arrayindex(regextract(resource -> parent, "projects\/(.*)"),0)

| alter resource_cloud_provider = resource -> cloudProvider,
        resource_location = resource -> location,
        resource_project_id = tmp_project_id,
        resource_project_name = resource -> projectDisplayName,
        resource_service = resource -> service,
        resource_parent_id = tmp_parent_id ,
        resource_display_name = resource -> displayName,
        resource_type = resource -> type,
        resource_resource_path_string = resource -> resourcePathString


// XDM Mapping
| alter xdm.event.original_event_type = finding_category ,
        xdm.event.type = finding_class ,
        xdm.event.description = finding_description,
        xdm.alert.severity = finding_severity ,
        xdm.event.is_completed = finding_state ,
        xdm.alert.description = finding_sp_description ,
        xdm.target.cloud.provider = resource_cloud_provider ,
        xdm.target.cloud.zone = resource_location ,
        xdm.target.resource.sub_type= resource_service,
        xdm.target.cloud.project_hierarchy = finding_sp_resource_path ,
        xdm.target.process.command_line = finding_sp_command_line ,
        xdm.observer.name = finding_sp_scanner_name ,
        xdm.observer.product = finding_parent_display_name ,
        xdm.target.cloud.project_id = resource_project_id ,
        xdm.target.cloud.project = resource_project_name ,
        xdm.target.host.hostname = resource_project_name ,
        xdm.target.resource.parent_id = resource_parent_id,
        xdm.target.resource.name = resource_display_name ,
        xdm.target.resource.type = resource_type ,
        xdm.target.file.path = resource_resource_path_string,
        xdm.target.user.groups = tmp_remove_chars,
        xdm.alert.risks = finding_sp_risks;


[MODEL: dataset = hashicorp_vault_raw, content_id="HashiCorp-Vault"]
alter
    client_id = _raw_log -> request.client_id, 
    client_ip = _raw_log -> request.remote_address, // The IP address of the client making the request
    client_port = _raw_log -> request.remote_port, // The port used by the client
    client_token = coalesce(_raw_log -> request.client_token, _raw_log -> auth.client_token), // HMAC SHA256 of the client token id
    entity_id = _raw_log -> auth.entity_id, // The Identity entity ID attached to the token, if any
    error_msg = _raw_log -> error, // If there is an error in the request, it will be contained here
    event_type = _raw_log -> type, // Type of log entry, either request or response
    http_status_code = _raw_log -> response.data.http_status_code,
    is_access_denied = if(_raw_log -> auth.policy_results.allowed = "false"),
    mount_class = coalesce(_raw_log -> request.mount_class, _raw_log -> response.mount_class), // Authentication method used for a particular request.
    mount_point = coalesce(_raw_log -> request.mount_point, _raw_log -> response.mount_point),
    mount_type = coalesce(_raw_log -> request.mount_type, _raw_log -> response.mount_type), // Authentication method used for a particular request.
    operation = _raw_log -> request.operation, // This is the type of operation which corresponds to path capabilities and is expected to be one of: create, read, update, delete, or list
    policies = arraydistinct(arrayconcat(json_extract_scalar_array(_raw_log, "$.auth.token_policies"), json_extract_scalar_array(_raw_log, "$.auth.policies"))), // list of policies associated with the token
    request_id = _raw_log -> request.id, // Unique identifier for the request
    request_path = _raw_log -> request.path, // The requested Vault path for operation
    roles = arraycreate(_raw_log -> auth.metadata.role, _raw_log -> auth.metadata.role_name),
    service_account_name = _raw_log -> auth.metadata.service_account_name,
    service_account_uid = _raw_log -> auth.metadata.service_account_uid,
    vault_version = arraystring(arraydistinct(arraycreate(_raw_log -> request.mount_running_version, _raw_log -> response.mount_running_plugin_version)), ",")
| alter 
    client_ipv4 = if(client_ip ~= "(?:\d{1,3}\.){3}\d{1,3}", client_ip), 
    client_ipv6 = if(client_ip ~= "(?:[a-fA-F\d]{0,4}\:){1,7}[a-fA-F\d]{0,4}", client_ip)
| alter 
    xdm.auth.auth_method = if(mount_class = "auth", mount_type),
    xdm.event.id = request_id,
    xdm.event.operation_sub_type = operation,
    xdm.event.original_event_type = event_type,
    xdm.event.outcome = if(error_msg != null or is_access_denied, XDM_CONST.OUTCOME_FAILED),
    xdm.event.outcome_reason = replace(replace(error_msg, """\n""", ""), """\t""", " "),
    xdm.event.type = "AUDIT",
    xdm.network.http.response_code = if(http_status_code = null, null, http_status_code = "200", XDM_CONST.HTTP_RSP_CODE_OK, http_status_code = "201", XDM_CONST.HTTP_RSP_CODE_CREATED, http_status_code = "500", XDM_CONST.HTTP_RSP_CODE_INTERNAL_SERVER_ERROR, http_status_code = "501", XDM_CONST.HTTP_RSP_CODE_NOT_IMPLEMENTED, http_status_code = "502", XDM_CONST.HTTP_RSP_CODE_BAD_GATEWAY, http_status_code = "503", XDM_CONST.HTTP_RSP_CODE_SERVICE_UNAVAILABLE, http_status_code = "504", XDM_CONST.HTTP_RSP_CODE_GATEWAY_TIMEOUT, http_status_code = "505", XDM_CONST.HTTP_RSP_CODE_HTTP_VERSION_NOT_SUPPORTED, http_status_code = "506", XDM_CONST.HTTP_RSP_CODE_VARIANT_ALSO_NEGOTIATES, http_status_code = "507", XDM_CONST.HTTP_RSP_CODE_INSUFFICIENT_STORAGE, http_status_code = "508", XDM_CONST.HTTP_RSP_CODE_LOOP_DETECTED, http_status_code = "511", XDM_CONST.HTTP_RSP_CODE_NETWORK_AUTHENTICATION_REQUIRED, http_status_code = "400", XDM_CONST.HTTP_RSP_CODE_BAD_REQUEST, http_status_code = "401", XDM_CONST.HTTP_RSP_CODE_UNAUTHORIZED, http_status_code = "402", XDM_CONST.HTTP_RSP_CODE_PAYMENT_REQUIRED, http_status_code = "403", XDM_CONST.HTTP_RSP_CODE_FORBIDDEN, http_status_code = "404", XDM_CONST.HTTP_RSP_CODE_NOT_FOUND, http_status_code = "405", XDM_CONST.HTTP_RSP_CODE_METHOD_NOT_ALLOWED, http_status_code = "406", XDM_CONST.HTTP_RSP_CODE_NOT_ACCEPTABLE, http_status_code = "407", XDM_CONST.HTTP_RSP_CODE_PROXY_AUTHENTICATION_REQUIRED, http_status_code = "408", XDM_CONST.HTTP_RSP_CODE_REQUEST_TIMEOUT, http_status_code = "409", XDM_CONST.HTTP_RSP_CODE_CONFLICT, http_status_code = "410", XDM_CONST.HTTP_RSP_CODE_GONE, http_status_code = "411", XDM_CONST.HTTP_RSP_CODE_LENGTH_REQUIRED, http_status_code = "412", XDM_CONST.HTTP_RSP_CODE_PRECONDITION_FAILED, http_status_code = "413", XDM_CONST.HTTP_RSP_CODE_CONTENT_TOO_LARGE, http_status_code = "414", XDM_CONST.HTTP_RSP_CODE_URI_TOO_LONG, http_status_code = "415", XDM_CONST.HTTP_RSP_CODE_UNSUPPORTED_MEDIA_TYPE, http_status_code = "416", XDM_CONST.HTTP_RSP_CODE_RANGE_NOT_SATISFIABLE, http_status_code = "417", XDM_CONST.HTTP_RSP_CODE_EXPECTATION_FAILED, http_status_code = "421", XDM_CONST.HTTP_RSP_CODE_MISDIRECTED_REQUEST, http_status_code = "422", XDM_CONST.HTTP_RSP_CODE_UNPROCESSABLE_CONTENT, http_status_code = "423", XDM_CONST.HTTP_RSP_CODE_LOCKED, http_status_code = "424", XDM_CONST.HTTP_RSP_CODE_FAILED_DEPENDENCY, http_status_code = "425", XDM_CONST.HTTP_RSP_CODE_TOO_EARLY, http_status_code = "426", XDM_CONST.HTTP_RSP_CODE_UPGRADE_REQUIRED, http_status_code = "428", XDM_CONST.HTTP_RSP_CODE_PRECONDITION_REQUIRED, http_status_code = "429", XDM_CONST.HTTP_RSP_CODE_TOO_MANY_REQUESTS, http_status_code = "431", XDM_CONST.HTTP_RSP_CODE_REQUEST_HEADER_FIELDS_TOO_LARGE, http_status_code = "451", XDM_CONST.HTTP_RSP_CODE_UNAVAILABLE_FOR_LEGAL_REASONS, http_status_code = "100", XDM_CONST.HTTP_RSP_CODE_CONTINUE, http_status_code = "101", XDM_CONST.HTTP_RSP_CODE_SWITCHING_PROTOCOLS, http_status_code = "102", XDM_CONST.HTTP_RSP_CODE_PROCESSING, http_status_code = "103", XDM_CONST.HTTP_RSP_CODE_EARLY_HINTS, http_status_code = "202", XDM_CONST.HTTP_RSP_CODE_ACCEPTED, http_status_code = "203", XDM_CONST.HTTP_RSP_CODE_NON__AUTHORITATIVE_INFORMATION, http_status_code = "204", XDM_CONST.HTTP_RSP_CODE_NO_CONTENT, http_status_code = "205", XDM_CONST.HTTP_RSP_CODE_RESET_CONTENT, http_status_code = "206", XDM_CONST.HTTP_RSP_CODE_PARTIAL_CONTENT, http_status_code = "207", XDM_CONST.HTTP_RSP_CODE_MULTI__STATUS, http_status_code = "208", XDM_CONST.HTTP_RSP_CODE_ALREADY_REPORTED, http_status_code = "226", XDM_CONST.HTTP_RSP_CODE_IM_USED, http_status_code = "300", XDM_CONST.HTTP_RSP_CODE_MULTIPLE_CHOICES, http_status_code = "301", XDM_CONST.HTTP_RSP_CODE_MOVED_PERMANENTLY, http_status_code = "302", XDM_CONST.HTTP_RSP_CODE_FOUND, http_status_code = "303", XDM_CONST.HTTP_RSP_CODE_SEE_OTHER, http_status_code = "304", XDM_CONST.HTTP_RSP_CODE_NOT_MODIFIED, http_status_code = "305", XDM_CONST.HTTP_RSP_CODE_USE_PROXY, http_status_code = "307", XDM_CONST.HTTP_RSP_CODE_TEMPORARY_REDIRECT, http_status_code = "308", XDM_CONST.HTTP_RSP_CODE_PERMANENT_REDIRECT, http_status_code),
    xdm.network.rule = if(array_length(policies) > 0, arraystring(policies, ",")),
    xdm.network.session_id = client_token,
    xdm.observer.version = vault_version,
    xdm.session_context_id = client_token,
    xdm.source.host.ipv4_addresses = if(client_ipv4 != null, arraycreate(client_ipv4)),
    xdm.source.host.ipv4_public_addresses = if(
        client_ipv4 = null, null,
        incidr(client_ipv4, "10.0.0.0/8"), null, 
        incidr(client_ipv4, "192.168.0.0/16"), null,
        incidr(client_ipv4, "172.16.0.0/12"), null,
        incidr(client_ipv4, "127.0.0.0/8"), null,
        incidr(client_ipv4, "169.254.0.0/16"), null,
        incidr(client_ipv4, "100.64.0.0/10"), null, arraycreate(client_ipv4)),
    xdm.source.host.ipv6_addresses = if(client_ipv6 != null, arraycreate(client_ipv6)),
    xdm.source.ipv4 = client_ipv4,
    xdm.source.ipv6 = client_ipv6,
    xdm.source.port = to_integer(client_port),
    xdm.source.user.groups = roles,
    xdm.source.user.identifier = coalesce(client_id, entity_id),
    xdm.target.resource.id = mount_point,
    xdm.target.resource.name = request_path,
    xdm.target.resource.sub_type = mount_type,
    xdm.target.resource.type = mount_class,
    xdm.target.user.identifier = service_account_uid,
    xdm.target.user.username = service_account_name;


[MODEL: dataset=hello_world_raw, content_id="HelloWorld"]
alter
    xdm.event.id = to_string(id),
    xdm.event.description = description,
    xdm.source.user.identifier = json_extract_scalar(custom_details, "$.triggered_by_uuid"),
    xdm.target.port = t_port,
    xdm.network.protocol_layers = arraycreate(protocol);


[MODEL: dataset=aruba_networks_clearpass_raw, content_id="HPEArubaClearPass"]
filter cat ~= "[s|S]ession"
| alter

	dst_ip_v4 = if(dst !~= ":", dst, null),

	dst_ip_v6 = if(dst ~= ":", dst, null),

	dvc_ip_v4 = if(dvc !~= ":", dvc, null),

	dvc_ip_v6 = if(dvc ~= ":", dvc, null),

	src_ip_v4 = if(src !~= ":", src, null),

	src_ip_v6 = if(src ~= ":", src, null)

| alter

	xdm.target.ipv4 = dst_ip_v4,

	xdm.target.ipv6 = dst_ip_v6,

	xdm.source.host.ipv4_addresses = arraycreate(dvc_ip_v4),

	xdm.source.host.ipv6_addresses = arraycreate(dvc_ip_v6),

	xdm.source.ipv4 = src_ip_v4,

	xdm.source.ipv6 = src_ip_v6,

	xdm.event.type = cat,

	xdm.target.host.mac_addresses = arraycreate(dmac),

	xdm.event.description = dpriv,

	xdm.target.user.username = duser,

	xdm.event.original_event_type = cefName,

	xdm.alert.severity = cefSeverity,

	xdm.observer.version = cefDeviceVersion,

	xdm.event.id = cefDeviceEventClassId,

	xdm.target.process.name = destinationServiceName;


[RULE: huawei_network_devices_header_fields content_id="HuaweiNetworkDevices"]
alter 
    hostname = arrayindex(regextract(_raw_log, "\<\d+\>\S{3}\s\d{2}\s\d{4}\s\d{2}\:\d{2}\:\d{2}\s(\S+)"),0),
    module_name = arrayindex(regextract(_raw_log,"\<\d+\>\S{3}\s\d{2}\s\d{4}\s\d{2}\:\d{2}\:\d{2}\s\S+\s+\%*\d*(\w+)"),0),
    log_level = arrayindex(regextract(_raw_log,"\<\d+\>\S{3}\s\d{2}\s\d{4}\s\d{2}\:\d{2}\:\d{2}\s\S+\s+\%*\d*\w+\/(\d)"),0),
    log_des = arrayindex(regextract(_raw_log,"\<\d+\>\S{3}\s\d{2}\s\d{4}\s\d{2}\:\d{2}\:\d{2}\s\S+\s+\%*\d*\w+\/\d\/(\w+)"),0),
    log = arrayindex(regextract(_raw_log,"\<\d+\>\S{3}\s\d{2}\s\d{4}\s\d{2}\:\d{2}\:\d{2}\s\S+\s+\%*\d*\w+\/\d\/\w+.*?\:(.+)"),0)
| alter
    xdm.intermediate.host.hostname = hostname,
    xdm.observer.type = module_name,
    xdm.event.log_level = if(log_level = "0", XDM_CONST.LOG_LEVEL_EMERGENCY, log_level = "1", XDM_CONST.LOG_LEVEL_ALERT, log_level = "2", XDM_CONST.LOG_LEVEL_CRITICAL, log_level = "3", XDM_CONST.LOG_LEVEL_ERROR, log_level = "4", XDM_CONST.LOG_LEVEL_WARNING, log_level = "5", XDM_CONST.LOG_LEVEL_NOTICE, log_level = "6", XDM_CONST.LOG_LEVEL_INFORMATIONAL, log_level = "7", XDM_CONST.LOG_LEVEL_DEBUG, log_level),
    xdm.event.original_event_type = log_ref,
    xdm.event.type = log_des,
    xdm.event.description = log;

//***** SHELL/5/CMDRECORD & SHELL/5/USERCONFIRM & SHELL/6/CMDCONFIRM_UNIFORMRECORD & SHELL/6/DISPLAY_CMDRECORD *****
[MODEL: dataset="huawei_network_devices_raw", content_id="HuaweiNetworkDevices"]
alter 
    log_ref = arrayindex(regextract(_raw_log,"[^\d\s]+\/\w+\/\w+"),0)
| filter log_ref in ("SHELL/5/CMDRECORD","SHELL/5/USERCONFIRM","SHELL/6/CMDCONFIRM_UNIFORMRECORD", "SHELL/6/DISPLAY_CMDRECORD")
| call huawei_network_devices_header_fields
| alter
    des = arrayindex(regextract(_raw_log,"\[\d+\]\:(.+?)\."),0),
    task = arrayindex(regextract(_raw_log,"Task\=(\w+)"),0),
    ipv4 = arrayindex(regextract(_raw_log,"I[pP]\=(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})"),0),
    ipv6 = arrayindex(regextract(_raw_log,"I[pP]\=([a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5})"),0),
    user = arrayindex(regextract(_raw_log,"User[Name]*\=(\w+)"),0),
    auth_protocol = arrayindex(regextract(_raw_log,"AuthenticationMethod\=\"(\w+)"),0), //Relevant for SHELL/5/CMDRECORD events
    command = arrayindex(regextract(_raw_log,"Command\=\"([^\"]+)"),0), //Relevant for SHELL/5/CMDRECORD, SHELL/6/CMDCONFIRM_UNIFORMRECORD
    result = arrayindex(regextract(_raw_log,"Result\=(\w+)"),0), //Relevant for SHELL/5/CMDRECORD
    more_info = arrayindex(if( log_ref="SHELL/5/USERCONFIRM", regextract(_raw_log,"(Warning\:.+)"), log_ref="SHELL/6/CMDCONFIRM_UNIFORMRECORD", regextract(_raw_log,"(PromptInfo.+)\)")),0)    

| alter //xdm mapping
    xdm.alert.description = if(log_ref="SHELL/5/USERCONFIRM", concat(des,", ",more_info), log_ref="SHELL/6/CMDCONFIRM_UNIFORMRECORD", concat(des,", ", more_info), des),
    xdm.source.interface = task,
    xdm.source.ipv4 = ipv4,
    xdm.source.ipv6 = ipv6,
    xdm.source.user.username = user,
    xdm.auth.service =  auth_protocol,
    xdm.source.process.command_line = command,
    xdm.event.outcome = if(result="Success", XDM_CONST.OUTCOME_SUCCESS, result~="[Ff]ail.*", XDM_CONST.OUTCOME_FAILED,to_string(result));

//***** CM/5/USER_OFFLINERESULT & CM/5/USER_ACCESSRESULT *****
alter 
    log_ref = arrayindex(regextract(_raw_log,"[^\d\s]+\/\w+\/\w+"),0)
| filter log_ref in ("CM/5/USER_OFFLINERESULT","CM/5/USER_ACCESSRESULT")
| call huawei_network_devices_header_fields
| alter
    device_mac = regextract(_raw_log,"DEVICEMAC\:(\S+?)\;"),
    user = arrayindex(regextract(_raw_log,"USER\:(\S+?)\;"),0),
    mac_user = regextract(_raw_log,"\;MAC\:(\S+?)\;"),
    ipv4 = arrayindex(regextract(_raw_log,"IPADDRESS\:(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})"),0), 
    ipv6 = arrayindex(regextract(_raw_log,"IPADDRESS\:([a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5})"),0),
    result = arrayindex(regextract(_raw_log,"RESULT\:(.+?)\;"),0),
    interface = arrayindex(regextract(_raw_log,"INTERFACE\:(\S+)\;"),0),
    access_type = arrayindex(regextract(_raw_log,"ACCESS\sTYPE\:(\S+)\;"),0),
    id = arrayindex(regextract(_raw_log,"CIB\sID\:(\d+)"),0),
    vpn = arrayindex(regextract(_raw_log,"VPNNAME\:(.+?)\;"),0),
    auth_protocol = arrayindex(regextract(_raw_log,"AUTHPROTOCOL\:(.+?)\;"),0)
| alter //xdm mapping
    xdm.intermediate.host.mac_addresses = device_mac,
    xdm.source.user.username = user,
    xdm.source.host.mac_addresses = mac_user,
    xdm.source.ipv4 = if(ipv4 != "-" and ipv4 != null, ipv4),
    xdm.source.ipv6 = if(ipv6 != "-" and ipv6 != null, ipv6),
    xdm.event.outcome = if(result~="[Ss]uccess" or result~="Idle\scut",XDM_CONST.OUTCOME_SUCCESS, result~="[Ff]ail.*", XDM_CONST.OUTCOME_FAILED,result="User request to offline",XDM_CONST.OUTCOME_PARTIAL),
    xdm.event.outcome_reason = result,
    xdm.source.interface = interface,
    xdm.network.application_protocol = access_type,
    xdm.event.id = id,
    xdm.source.application.name = if(vpn!= null, concat("VPN Name: ", vpn)),
    xdm.auth.auth_method = auth_protocol;

//****** LINE/4/USERLOGOUT & LINE/4/USERLOGIN & LINE/5/VTYUSERLOGIN & LINE/5/VTYUSERLOGOUT ******
alter 
    log_ref = arrayindex(regextract(_raw_log,"[^\d\s]+\/\w+\/\w+"),0)
| filter log_ref in ("LINE/4/USERLOGOUT", "LINE/4/USERLOGIN", "LINE/5/VTYUSERLOGIN","LINE/5/VTYUSERLOGOUT")
| call huawei_network_devices_header_fields
| alter 
    id = arrayindex(regextract(_raw_log,"OID\s(1\.3\.6\.1\.4\.1\.2011\.5\.25\.207\.2\.\d)"),0),
    description = arrayindex(regextract(_raw_log,"(A\suser\s\w+)"),0),
    username = arrayindex(regextract(_raw_log,"UserName\=(\S+)\,"),0),
    ipv4 = arrayindex(regextract(_raw_log,"UserIP\=(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})"),0),
    ipv6 = arrayindex(regextract(_raw_log,"UserIP\=([a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5})"),0),
    channel = arrayindex(regextract(_raw_log,"UserChannel\=(\w+)"),0)
| alter //xdm mapping 
    xdm.event.id = id,
    xdm.event.operation_sub_type = description,
    xdm.source.user.username = username,
    xdm.source.ipv4 = ipv4,
    xdm.source.ipv6 = ipv6,
    xdm.source.interface = channel;

// ***** SSMPADP/4/AUTHENTICAL_FAIL & SNMP/4/AUTHFAIL *****
alter 
    log_ref = arrayindex(regextract(_raw_log,"[^\d\s]+\/\w+\/\w+"),0)
| filter log_ref in("SSMPADP/4/AUTHENTICAL_FAIL","SNMP/4/AUTHFAIL")
| call huawei_network_devices_header_fields
| alter 
    oid = arrayindex(regextract(_raw_log,"OID\s(1.3.6.1.6.3.1.1.5.5)"),0),
    ipv4 = arrayindex(regextract(_raw_log,"RemoteIpAddress\=(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})"),0),
    ipv6 = arrayindex(regextract(_raw_log,"RemoteIpAddress\=([a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5})"),0),
    outcome_reason = arrayindex(regextract(_raw_log,"\.\d\s(.+?)\."),0)
| alter //xdm mapping
    xdm.event.id = oid,
    xdm.source.ipv4 = ipv4,
    xdm.source.ipv6 = ipv6,
    xdm.event.outcome_reason = outcome_reason,
    xdm.event.outcome = XDM_CONST.OUTCOME_FAILED;

// ***** SNMP/5/SNMP_IP_LOCK & SNMP/5/SNMP_LOG_IP_UNLOCK & SNMP/4/SNMP_IPLOCK & SNMP/4/SNMP_IPUNLOCK *****
alter 
    log_ref = arrayindex(regextract(_raw_log,"[^\d\s]+\/\w+\/\w+"),0)
| filter log_ref in ("SNMP/5/SNMP_IP_LOCK","SNMP/5/SNMP_LOG_IP_UNLOCK","SNMP/4/SNMP_IPLOCK","SNMP/4/SNMP_IPUNLOCK")
| call huawei_network_devices_header_fields
| alter 
    des = arrayindex(regextract(_raw_log,"\[\d+\]\:(.+?)\."),0),
    ipv4 = arrayindex(regextract(_raw_log,"SourceIP\=(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})"),0),
    ipv6 = arrayindex(regextract(_raw_log,"SourceIP\=([a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5})"),0)
| alter //xdm mapping
    xdm.alert.description = des,
    xdm.source.ipv4 = ipv4,
    xdm.source.ipv6 = ipv6,
    xdm.event.outcome = XDM_CONST.OUTCOME_SUCCESS;

// ***** LLDP/4/BAD_PACKET *****
alter 
    log_ref = arrayindex(regextract(_raw_log,"[^\d\s]+\/\w+\/\w+"),0)
| filter log_ref in ("LLDP/4/BAD_PACKET")
| call huawei_network_devices_header_fields
| alter src_interface = arrayindex(regextract(_raw_log,"interface\s(\S+)\."),0)
| alter xdm.source.interface = src_interface; //xdm mapping

// ***** INFO/4/SUPPRESS_LOG *****
alter 
    log_ref = arrayindex(regextract(_raw_log,"[^\d\s]+\/\w+\/\w+"),0)
| filter log_ref in ("INFO/4/SUPPRESS_LOG")
| call huawei_network_devices_header_fields
| alter 
    des = arrayindex(regextract(_raw_log,"\[\d+\]\:(.+\.)"),0),
    id = arrayindex(regextract(_raw_log,"InfoID\=(\d+)"),0),
    alias = arrayindex(regextract(_raw_log,"InfoAlias\=(\w+)"),0)
| alter //xdm mapping
    xdm.alert.description = des,
    xdm.event.outcome_reason = alias,
    xdm.event.id = id;

// ***** ARP/4/ARP_DUPLICATE_IPADDR	*****
alter 
    log_ref = arrayindex(regextract(_raw_log,"[^\d\s]+\/\w+\/\w+"),0)
| filter log_ref in ("ARP/4/ARP_DUPLICATE_IPADDR")
| call huawei_network_devices_header_fields
| alter 
    des = arrayindex(regextract(_raw_log,"\[\d+\]\:(.+interface\.)"),0),
    ipv4 = arrayindex(regextract(_raw_log,"IpAddress\=(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})"),0),
    ipv6 = arrayindex(regextract(_raw_log,"IpAddress\=([a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5})"),0),
    interface = arrayindex(regextract(_raw_log,"InterfaceName\=(\S+)\,"),0),
    mac = regextract(_raw_log,"MacAddress\=(.+)[\)\,]"),
    pe_vlan = to_number(arrayindex(regextract(_raw_log,"PE-VLAN\=(.+)[\)\,]"),0)),
    ce_vlan = to_number(arrayindex(regextract(_raw_log,"CE-VLAN\=(.+)[\)\,]"),0))
| alter //xdm mapping
    xdm.alert.description = des,
    xdm.source.ipv4 = if(ipv4 != null, ipv4),
    xdm.source.ipv6 = if(ipv6 != null, ipv6),
    xdm.source.interface = interface,
    xdm.source.host.mac_addresses = mac,
    xdm.source.vlan = coalesce(ce_vlan, pe_vlan);

// ***** HWCM/4/CFGCHANGE && HWCM/5/TRAPLOG *****
alter 
    log_ref = arrayindex(regextract(_raw_log,"[^\d\s]+\/\w+\/\w+"),0)
| filter log_ref in ("HWCM/4/CFGCHANGE", "HWCM/5/TRAPLOG")
| call huawei_network_devices_header_fields
| alter 
    oid = arrayindex(regextract(_raw_log,"OID\s(\S+)"),0),
    des = arrayindex(regextract(_raw_log,"([Cc]onfigure.+\.)"),0),
    event_id = arrayindex(regextract(_raw_log,"EventIndex\=(\d+)"),0),
    more_info = arrayindex(regextract(_raw_log,"(Command.+)\)"),0)
| alter
    xdm.event.id = oid,
    xdm.alert.original_alert_id = event_id,
    xdm.alert.description = concat(des, " ", more_info);

//***** IFPDT/4/PKT_OUTDISCARD_ABNL & IFPDT/4/PKT_OUTDISCARD_NL *****
alter 
    log_ref = arrayindex(regextract(_raw_log,"[^\d\s]+\/\w+\/\w+"),0)
| filter log_ref in ("IFPDT/4/PKT_OUTDISCARD_ABNL","IFPDT/4/PKT_OUTDISCARD_NL")
| call huawei_network_devices_header_fields
| alter 
    interface = arrayindex(regextract(_raw_log,"Interface\=(\S+)\,"),0),
    des = arrayindex(regextract(_raw_log,"\:(Interface.+\.)"),0)
| alter
    xdm.source.interface = interface,
    xdm.alert.description = des;

//***** SECE/4/ARPMISS & SECE/4/ARPMISS_SIP_SPEEDLIMIT_ALARM *****
alter 
    log_ref = arrayindex(regextract(_raw_log,"[^\d\s]+\/\w+\/\w+"),0)
| filter log_ref in ("SECE/4/ARPMISS","SECE/4/ARPMISS_SIP_SPEEDLIMIT_ALARM")
| call huawei_network_devices_header_fields
| alter
    attack_type = arrayindex(regextract(_raw_log,"AttackType\=(.+?)\,"),0),
    interface = arrayindex(regextract(_raw_log,"SourceInterface\=(\S+)\,"),0),  //Relevant for SECE/4/ARPMISS
    ipv4_1 = arrayindex(regextract(_raw_log,"SourceIP\=(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})"),0), //Relevant for SECE/4/ARPMISS
    ipv6_1 = arrayindex(regextract(_raw_log,"SourceIP\=([a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5})"),0), //Relevant for SECE/4/ARPMISS
    des1 = arrayindex(regextract(_raw_log,"\[\d+\]\:(.+\.)\("),0), //Relevant for SECE/4/ARPMISS
    oid = arrayindex(regextract(_raw_log,"OID\s(\S+)"),0),
    des2 = arrayindex(regextract(_raw_log,"The.+"),0), //Relevant for SECE/4/ARPMISS_SIP_SPEEDLIMIT_ALARM
    ipv4_2 = arrayindex(regextract(_raw_log,"ip\s(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})"),0), //Relevant for SECE/4/ARPMISS_SIP_SPEEDLIMIT_ALARM
    ipv6_2 = arrayindex(regextract(_raw_log,"ip\s([a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5})"),0) //Relevant for SECE/4/ARPMISS_SIP_SPEEDLIMIT_ALARM
| alter
    xdm.alert.original_threat_name = if( attack_type != null, attack_type),
    xdm.source.interface = if(interface != null, interface),
    xdm.event.id = if(oid != null, oid),
    xdm.source.ipv4 = coalesce(ipv4_1,ipv4_2),
    xdm.source.ipv6 = coalesce(ipv6_1,ipv6_2),
    xdm.alert.description = if(des1 != null, des1, des2 != null, des2);
    
// ***** SHELL/5/TIMEOUT *****
alter 
    log_ref = arrayindex(regextract(_raw_log,"[^\d\s]+\/\w+\/\w+"),0)
| filter log_ref in ("SHELL/5/TIMEOUT")
| call huawei_network_devices_header_fields
| alter
    user = arrayindex(regextract(_raw_log,"\[\d+\]\:(\w+)"),0),
    ipv4 = arrayindex(regextract(_raw_log,"from\s(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})"),0),
    ipv6 = arrayindex(regextract(_raw_log,"from\s([a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5})"),0),
    des = arrayindex(regextract(_raw_log,"\[\d+\]\:(.+)"),0),
    from = arrayindex(regextract(_raw_log,"from\s([^\d]\w+)"),0)
| alter //xdm mapping
    xdm.source.user.username = user,
    xdm.source.ipv4 = ipv4,
    xdm.source.ipv6 = ipv6,
    xdm.network.application_protocol = if(from!= null, from),
    xdm.alert.description = des;

//***** SSH/4/SSH_FAIL & SNMP/4/SNMP_FAIL & SHELL/5/LOGIN & SHELL/5/LOGOUT & SSH/5/SSH_CONNECT_CLOSED *****
alter 
    log_ref = arrayindex(regextract(_raw_log,"[^\d\s]+\/\w+\/\w+"),0)
| filter log_ref in ("SSH/4/SSH_FAIL","SNMP/4/SNMP_FAIL", "SHELL/5/LOGIN","SHELL/5/LOGOUT", "SSH/5/SSH_CONNECT_CLOSED")
| call huawei_network_devices_header_fields
| alter
    des = arrayindex(regextract(_raw_log,"\[\d+\]\:(.+?)\."),0),
    ipv4 = arrayindex(regextract(_raw_log,"I[Pp]\=(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})"),0),
    ipv6 = arrayindex(regextract(_raw_log,"I[Pp]\=([a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5})"),0),
    user = arrayindex(regextract(_raw_log,"UserName\=(.+?)[\,\)]"),0),
    times = arrayindex(regextract(_raw_log,"Times\=(\d+)"),0), //Relevant for SSH/4/SSH_FAIL,SNMP/4/SNMP_FAIL events
    reason = arrayindex(regextract(_raw_log,"Reason\=(.+?)[\)\,]"),0), //Relevant for SSH/4/SSH_FAIL,SNMP/4/SNMP_FAIL events
    auth_protocol = arrayindex(regextract(_raw_log,"Type\=(\w+)"),0), //Relevant for SHELL/5/LOGIN, SHELL/5/LOGOUT events
    auth_method = arrayindex(regextract(_raw_log,"Method\=\"(\w+)"),0), //Relevant for SHELL/5/LOGIN
    interface = arrayindex(regextract(_raw_log,"(\w+)\.\s\(U"),0) //Relevant for SHELL/5/LOGIN, SHELL/5/LOGOUT events
| alter // xdm mapping
    xdm.alert.description = if(times!= null,concat(des," ", times," times"), des),
    xdm.source.ipv4 = ipv4,
    xdm.source.ipv6 = ipv6,
    xdm.source.user.username = user,
    xdm.event.outcome = if(log_ref="SSH/4/SSH_FAIL" or log_ref="SNMP/4/SNMP_FAIL",XDM_CONST.OUTCOME_FAILED, XDM_CONST.OUTCOME_SUCCESS),
    xdm.event.outcome_reason = reason,
    xdm.network.application_protocol = auth_protocol,
    xdm.auth.service = auth_method,
    xdm.source.interface = interface;

// ***** ARP/4/ARP_IPCONFLICT_TRAP events *****
alter 
    log_ref = arrayindex(regextract(_raw_log,"[^\d\s]+\/\w+\/\w+"),0)
| filter log_ref in ("ARP/4/ARP_IPCONFLICT_TRAP")
| call huawei_network_devices_header_fields
| alter
    oid = arrayindex(regextract(_raw_log,"OID\s(.+?)\s"),0),
    des = arrayindex(regextract(_raw_log,"\.\d\s(.+?)\."),0),
    ipv4 = arrayindex(regextract(_raw_log,"IP\saddress\=(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})"),0),
    ipv6 = arrayindex(regextract(_raw_log,"IP\saddress\=([a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5})"),0),
    interfaces = regextract(_raw_log,"interface\=(\w+)\,"),
    macs = regextract(_raw_log,"MAC\=(\S+)\,"),
    conflict_des = arrayindex(regextract(_raw_log,"type\=(.+?)\)"),0)
| alter //xdm mapping
    xdm.event.id = oid,
    xdm.alert.description = des,
    xdm.source.ipv4 = ipv4,
    xdm.source.ipv6 = ipv6,
    xdm.source.interface = concat(arrayindex(interfaces,0), ", ", arrayindex(interfaces,1)),
    xdm.source.host.mac_addresses = macs,
    xdm.alert.name = "IP conflict",
    xdm.event.outcome_reason = conflict_des;

// ***** L2IFPPI/4/MFLPVLANALARM *****
alter 
    log_ref = arrayindex(regextract(_raw_log,"\w+\/\w+\/\w+"),0)
| filter log_ref contains "L2IFPPI/4/MFLPVLANALARM"
| call huawei_network_devices_header_fields
| alter
    oid = arrayindex(regextract(_raw_log,"OID\s(.+?)\s"),0),
    des1 = arrayindex(regextract(_raw_log,"\.\d\s(.+?\,)"),0),
    des2 = arrayindex(regextract(_raw_log,"\.\s(.+)"),0),
    vlan_id = arrayindex(regextract(_raw_log,"VLANID\s\=\s(\d+)"),0),
    mac = regextract(_raw_log,"MacAddress\s\=\s(.+?)\,"),
    og_port = arrayindex(regextract(_raw_log,"Port\s\=\s(.+)\,"),0)
| alter //xdm mapping
    xdm.event.id = oid,
    xdm.source.vlan = to_number(vlan_id),
    xdm.source.host.mac_addresses = mac,
    xdm.source.interface = og_port,
    xdm.alert.description = concat(des1," ",des2);

// ***** SECE/4/SPECIFY_SIP_ATTACK events *****
alter 
    log_ref = arrayindex(regextract(_raw_log,"[^\d\s]+\/\w+\/\w+"),0)
| filter log_ref in ("SECE/4/SPECIFY_SIP_ATTACK")
| call huawei_network_devices_header_fields
| alter
    des = arrayindex(regextract(_raw_log,"\[\d+\]\:(.+?\.)"),0),
    ipv4 = arrayindex(regextract(_raw_log,"IP\=(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})"),0),
    ipv6 = arrayindex(regextract(_raw_log,"IP\=([a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5})"),0),
    protocol = arrayindex(regextract(_raw_log,"AttackProtocol\=(\w+)"),0)
| alter //xdm mapping
    xdm.alert.description = des,
    xdm.network.ip_protocol = if(protocol~="AH",XDM_CONST.IP_PROTOCOL_AH,protocol~="AN", XDM_CONST.IP_PROTOCOL_AN,protocol~="ARGUS" ,XDM_CONST.IP_PROTOCOL_ARGUS,protocol~="ARIS", XDM_CONST.IP_PROTOCOL_ARIS ,protocol~="AX25" ,XDM_CONST.IP_PROTOCOL_AX25 ,protocol~="BBN[\s\_]RCC[\s\_]MON" ,XDM_CONST.IP_PROTOCOL_BBN_RCC_MON , protocol~="BNA",XDM_CONST.IP_PROTOCOL_BNA , protocol~="BR[\_\s]SAT[\s\_]MON",XDM_CONST.IP_PROTOCOL_BR_SAT_MON , protocol~="CBT",XDM_CONST.IP_PROTOCOL_CBT , protocol~="CFTP",XDM_CONST.IP_PROTOCOL_CFTP , protocol~="CHAOS",XDM_CONST.IP_PROTOCOL_CHAOS,protocol~="COMPAQ[\s\_]PEER",XDM_CONST.IP_PROTOCOL_COMPAQ_PEER, protocol~="CPHB", XDM_CONST.IP_PROTOCOL_CPHB , protocol~="CPNX",XDM_CONST.IP_PROTOCOL_CPNX , protocol~="CRTP",XDM_CONST.IP_PROTOCOL_CRTP , protocol~="CRUDP",XDM_CONST.IP_PROTOCOL_CRUDP , protocol~="DCCP",XDM_CONST.IP_PROTOCOL_DCCP , protocol~="DCN[\s\_]MEAS",XDM_CONST.IP_PROTOCOL_DCN_MEAS , protocol~="DDP",XDM_CONST.IP_PROTOCOL_DDP , protocol~="DDX",XDM_CONST.IP_PROTOCOL_DDX , protocol~="DGP",XDM_CONST.IP_PROTOCOL_DGP , protocol~="DSR",XDM_CONST.IP_PROTOCOL_DSR , protocol~="EGP",XDM_CONST.IP_PROTOCOL_EGP , protocol~="EIGRP",XDM_CONST.IP_PROTOCOL_EIGRP , protocol~="EMCON", XDM_CONST.IP_PROTOCOL_EMCON , protocol~="ENCAP",XDM_CONST.IP_PROTOCOL_ENCAP , protocol~="ESP",XDM_CONST.IP_PROTOCOL_ESP , protocol~="ETHERIP",XDM_CONST.IP_PROTOCOL_ETHERIP , protocol~="FC",XDM_CONST.IP_PROTOCOL_FC , protocol~="FIRE",XDM_CONST.IP_PROTOCOL_FIRE , protocol~="GGP",XDM_CONST.IP_PROTOCOL_GGP , protocol~="GMTP",XDM_CONST.IP_PROTOCOL_GMTP , protocol~="GRE",XDM_CONST.IP_PROTOCOL_GRE , protocol~="HIP",XDM_CONST.IP_PROTOCOL_HIP , protocol~="HMP",XDM_CONST.IP_PROTOCOL_HMP , protocol~="HOPOPT", XDM_CONST.IP_PROTOCOL_HOPOPT , protocol~="IATP",XDM_CONST.IP_PROTOCOL_IATP , protocol~="ICMP",XDM_CONST.IP_PROTOCOL_ICMP , protocol~="IDPR",XDM_CONST.IP_PROTOCOL_IDPR , protocol~="IDPR[\s\_]CMTP",XDM_CONST.IP_PROTOCOL_IDPR_CMTP , protocol~="IDRP",XDM_CONST.IP_PROTOCOL_IDRP , protocol~="IFMP",XDM_CONST.IP_PROTOCOL_IFMP , protocol~="IGMP",XDM_CONST.IP_PROTOCOL_IGMP , protocol~="IGP",XDM_CONST.IP_PROTOCOL_IGP , protocol~="IL",XDM_CONST.IP_PROTOCOL_IL , protocol~="IP",XDM_CONST.IP_PROTOCOL_IP , protocol~="IPCOMP",XDM_CONST.IP_PROTOCOL_IPCOMP , protocol~="IPCV",XDM_CONST.IP_PROTOCOL_IPCV , protocol~="IPIP",XDM_CONST.IP_PROTOCOL_IPIP, protocol~="IPLT",XDM_CONST.IP_PROTOCOL_IPLT , protocol~="IPPC",XDM_CONST.IP_PROTOCOL_IPPC , protocol~="IPV6",XDM_CONST.IP_PROTOCOL_IPV6 , protocol~="IPV6[\s\_]FRAG",XDM_CONST.IP_PROTOCOL_IPV6_FRAG , protocol~="IPV6[\s\_]ICMP",XDM_CONST.IP_PROTOCOL_IPV6_ICMP , protocol~="IPV6[\s\_]NONXT", XDM_CONST.IP_PROTOCOL_IPV6_NONXT , protocol~="IPV6[\s\_]OPTS",XDM_CONST.IP_PROTOCOL_IPV6_OPTS , protocol~="IPV6[\s\_]ROUTE",XDM_CONST.IP_PROTOCOL_IPV6_ROUTE , protocol~="IPX[\s\_]IN[\s\_]IP",XDM_CONST.IP_PROTOCOL_IPX_IN_IP , protocol~="IRTP",XDM_CONST.IP_PROTOCOL_IRTP , protocol~="ISIS", XDM_CONST.IP_PROTOCOL_ISIS , protocol~="ISO[\s\_]IP",XDM_CONST.IP_PROTOCOL_ISO_IP , protocol~="ISO[\s\_]TP4",XDM_CONST.IP_PROTOCOL_ISO_TP4 , protocol~="I[\s\_]NLSP",XDM_CONST.IP_PROTOCOL_I_NLSP , protocol~="KRYPTOLAN",XDM_CONST.IP_PROTOCOL_KRYPTOLAN , protocol~="L2TP",XDM_CONST.IP_PROTOCOL_L2TP , protocol~="LARP",XDM_CONST.IP_PROTOCOL_LARP , protocol~="LEAF[\s\_]1",XDM_CONST.IP_PROTOCOL_LEAF_1 , protocol~="LEAF[\s\_]2",XDM_CONST.IP_PROTOCOL_LEAF_2 , protocol~="MANET",XDM_CONST.IP_PROTOCOL_MANET , protocol~="MERIT[\s\_]INP",XDM_CONST.IP_PROTOCOL_MERIT_INP , protocol~="MFE[\s\_]NSP",XDM_CONST.IP_PROTOCOL_MFE_NSP , protocol~="MICP",XDM_CONST.IP_PROTOCOL_MICP , protocol~="MOBILE",XDM_CONST.IP_PROTOCOL_MOBILE , protocol~="MOBILITY",XDM_CONST.IP_PROTOCOL_MOBILITY , protocol~="MPLS[\s\_]IN[\s\_]IP",XDM_CONST.IP_PROTOCOL_MPLS_IN_IP , protocol~="MTP",XDM_CONST.IP_PROTOCOL_MTP , protocol~="MUX",XDM_CONST.IP_PROTOCOL_MUX , protocol~="NARP",XDM_CONST.IP_PROTOCOL_NARP , protocol~="NETBLT",XDM_CONST.IP_PROTOCOL_NETBLT , protocol~="NSFNET[\s\_]IGP",XDM_CONST.IP_PROTOCOL_NSFNET_IGP , protocol~="NVP[\s\_]II",XDM_CONST.IP_PROTOCOL_NVP_II , protocol~="OSPFIGP",XDM_CONST.IP_PROTOCOL_OSPFIGP , protocol~="PGM",XDM_CONST.IP_PROTOCOL_PGM , protocol~="PIM",XDM_CONST.IP_PROTOCOL_PIM , protocol~="PIPE",XDM_CONST.IP_PROTOCOL_PIPE , protocol~="PNNI",XDM_CONST.IP_PROTOCOL_PNNI , protocol~="PRM",XDM_CONST.IP_PROTOCOL_PRM , protocol~="PTP",XDM_CONST.IP_PROTOCOL_PTP , protocol~="PUP",XDM_CONST.IP_PROTOCOL_PUP , protocol~="PVP",XDM_CONST.IP_PROTOCOL_PVP , protocol~="QNX",XDM_CONST.IP_PROTOCOL_QNX , protocol~="RDP",XDM_CONST.IP_PROTOCOL_RDP , protocol~="RESERVED",XDM_CONST.IP_PROTOCOL_RESERVED , protocol~="ROHC",XDM_CONST.IP_PROTOCOL_ROHC , protocol~="RSVP",XDM_CONST.IP_PROTOCOL_RSVP , protocol~="RSVP[\s\_]E2E[\s\_]IGNORE",XDM_CONST.IP_PROTOCOL_RSVP_E2E_IGNORE , protocol~="RVD",XDM_CONST.IP_PROTOCOL_RVD , protocol~="SAT[\s\_]EXPAK",XDM_CONST.IP_PROTOCOL_SAT_EXPAK , protocol~="SAT[\s\_]MON",XDM_CONST.IP_PROTOCOL_SAT_MON , protocol~="SCC[\s\_]SP",XDM_CONST.IP_PROTOCOL_SCC_SP , protocol~="SCPS",XDM_CONST.IP_PROTOCOL_SCPS , protocol~="SDRP",XDM_CONST.IP_PROTOCOL_SDRP , protocol~="SECURE[\s\_]VMTP",XDM_CONST.IP_PROTOCOL_SECURE_VMTP , protocol~="SHIM6",XDM_CONST.IP_PROTOCOL_SHIM6 , protocol~="SKIP",XDM_CONST.IP_PROTOCOL_SKIP , protocol~="SM",XDM_CONST.IP_PROTOCOL_SM , protocol~="SMP",XDM_CONST.IP_PROTOCOL_SMP , protocol~="SNP",XDM_CONST.IP_PROTOCOL_SNP , protocol~="SPRITE[\s\_]RPC",XDM_CONST.IP_PROTOCOL_SPRITE_RPC , protocol~="SPS",XDM_CONST.IP_PROTOCOL_SPS , protocol~="SRP",XDM_CONST.IP_PROTOCOL_SRP , protocol~="SSCOPMCE",XDM_CONST.IP_PROTOCOL_SSCOPMCE , protocol~="ST",XDM_CONST.IP_PROTOCOL_ST , protocol~="STP",XDM_CONST.IP_PROTOCOL_STP , protocol~="SUN[\s\_]ND",XDM_CONST.IP_PROTOCOL_SUN_ND , protocol~="SWIPE",XDM_CONST.IP_PROTOCOL_SWIPE , protocol~="TCF",XDM_CONST.IP_PROTOCOL_TCF , protocol~="TCP",XDM_CONST.IP_PROTOCOL_TCP , protocol~="TLSP",XDM_CONST.IP_PROTOCOL_TLSP , protocol~="TP",XDM_CONST.IP_PROTOCOL_TP , protocol~="TRUNK[\s\_]1",XDM_CONST.IP_PROTOCOL_TRUNK_1 , protocol~="TRUNK[\s\_]1",XDM_CONST.IP_PROTOCOL_TRUNK_1 , protocol~="TRUNK[\s\_]2",XDM_CONST.IP_PROTOCOL_TRUNK_2 , protocol~="TTP",XDM_CONST.IP_PROTOCOL_TTP , protocol~="UDP",XDM_CONST.IP_PROTOCOL_UDP , protocol~="UDPLITE", XDM_CONST.IP_PROTOCOL_UDPLITE , protocol~="UTI",XDM_CONST.IP_PROTOCOL_UTI , protocol~="VINES",XDM_CONST.IP_PROTOCOL_VINES , protocol~="VISA",XDM_CONST.IP_PROTOCOL_VISA , protocol~="VMTP",XDM_CONST.IP_PROTOCOL_VMTP , protocol~="VRRP",XDM_CONST.IP_PROTOCOL_VRRP , protocol~="WB[\s\_]EXPAK",XDM_CONST.IP_PROTOCOL_WB_EXPAK , protocol~="WB[\s\_]MON",XDM_CONST.IP_PROTOCOL_WB_MON, protocol~="WESP",XDM_CONST.IP_PROTOCOL_WESP , protocol~="WSN",XDM_CONST.IP_PROTOCOL_WSN , protocol~="XNET",XDM_CONST.IP_PROTOCOL_XNET , protocol~="XNS[\s\_]IDP",XDM_CONST.IP_PROTOCOL_XNS_IDP , protocol~="XTP",XDM_CONST.IP_PROTOCOL_XTP, protocol ),
    xdm.source.ipv4 = ipv4,
    xdm.source.ipv6 = ipv6;

// ***** INFO/4/IC_LOGFILE_AGING & INFO/6/LOGFILE_DELETED events *****
alter 
    log_ref = arrayindex(regextract(_raw_log,"[^\d\s]+\/\w+\/\w+"),0)
| filter log_ref in ("INFO/4/IC_LOGFILE_AGING","INFO/6/LOGFILE_DELETED")
| call huawei_network_devices_header_fields
| alter
    oid = arrayindex(regextract(_raw_log,"OID\s(.+?)\s"),0), //Relevant for INFO/4/IC_LOGFILE_AGING events
    des1 = arrayindex(regextract(_raw_log,"\.\d\s(.+?)\."),0), //Relevant for INFO/4/IC_LOGFILE_AGING events
    des2 = arrayindex(regextract(_raw_log,"\sis.+"),0), //Relevant for INFO/6/LOGFILE_DELETED events
    filename1 = arrayindex(regextract(_raw_log,"LogFileName\=(.+)\)"),0), //Relevant for INFO/4/IC_LOGFILE_AGING events
    filename2 = arrayindex(regextract(_raw_log,"file\s(.+?)\s"),0) //Relevant for INFO/6/LOGFILE_DELETED events
| alter //xdm mapping
    xdm.event.id = if(log_ref = "INFO/4/IC_LOGFILE_AGING",oid),
    xdm.event.outcome = if(log_ref = "INFO/6/LOGFILE_DELETED",XDM_CONST.OUTCOME_SUCCESS),
    xdm.alert.description = coalesce(des1,concat("The log file",des2)),
    xdm.target.file.filename = coalesce(filename1,filename2);

// ***** SRM/3/SFP_EXCEPTION events *****
alter 
    log_ref = arrayindex(regextract(_raw_log,"[^\d\s]+\/\w+\/\w+"),0)
| filter log_ref in ("SRM/3/SFP_EXCEPTION")
| call huawei_network_devices_header_fields
| alter
    oid = arrayindex(regextract(_raw_log,"OID\s(.+?)\s"),0),
    des = arrayindex(regextract(_raw_log,"\.\d\s(.+?\.)\s"),0),
    alarm_sev = arrayindex(regextract(_raw_log,"BaseTrapSeverity\=(\d+)"),0),
    alarm_error_code = arrayindex(regextract(_raw_log,"BaseTrapProbableCause\=(\d+)"),0),
    entity_index_p = arrayindex(regextract(_raw_log,"EntityPhysicalIndex\=(\d+)"),0),
    entity_index = arrayindex(regextract(_raw_log,"EntPhysicalContainedIn\=(\d+)"),0),
    entity_name = arrayindex(regextract(_raw_log,"EntPhysicalName\=(.+?)\,"),0),
    reason = arrayindex(regextract(_raw_log,"ReasonDescription\=(.+\.)"),0)
| alter //xdm mapping
    xdm.event.id = oid,
    xdm.alert.description = des,
    xdm.alert.severity = alarm_sev,
    xdm.alert.original_alert_id = concat("Alarm error code: ", alarm_error_code),
    xdm.target.resource.parent_id = entity_index_p,
    xdm.target.resource.id = entity_index,
    xdm.target.resource.name = entity_name,
    xdm.target.resource.type = "Interface",
    xdm.event.outcome_reason = reason;

//Genreal mapping
alter 
    log_ref = arrayindex(regextract(_raw_log,"\d{2}\:\d{2}\:\d{2}\s\S+\s[\%]*[\d]*(\w+\/\w+\/\w+)"),0)
| filter log_ref not in ("SHELL/5/CMDRECORD","CM/5/USER_OFFLINERESULT","LINE/4/USERLOGOUT","CM/5/USER_ACCESSRESULT","LINE/4/USERLOGIN","SHELL/5/USERCONFIRM","SSH/4/SSH_FAIL","INFO/4/SUPPRESS_LOG","SSMPADP/4/AUTHENTICAL_FAIL","SNMP/5/SNMP_IP_LOCK","SNMP/5/SNMP_LOG_IP_UNLOCK","LLDP/4/BAD_PACKET","ARP/4/ARP_DUPLICATE_IPADDR","ARP/4/ARP_IPCONFLICT_TRAP","HWCM/4/CFGCHANGE","HWCM/5/TRAPLOG","IFPDT/4/PKT_OUTDISCARD_ABNL","IFPDT/4/PKT_OUTDISCARD_NL","L2IFPPI/4/MFLPVLANALARM","LINE/5/VTYUSERLOGIN","LINE/5/VTYUSERLOGOUT","SECE/4/ARPMISS","SECE/4/ARPMISS_SIP_SPEEDLIMIT_ALARM","SECE/4/SPECIFY_SIP_ATTACK","SHELL/5/LOGIN","SHELL/5/LOGOUT","SHELL/5/TIMEOUT","SHELL/6/CMDCONFIRM_UNIFORMRECORD","SHELL/6/DISPLAY_CMDRECORD","SNMP/4/AUTHFAIL","SNMP/4/SNMP_FAIL","SNMP/4/SNMP_IPLOCK","SNMP/4/SNMP_IPUNLOCK","SSH/5/SSH_CONNECT_CLOSED","SRM/3/SFP_EXCEPTION","INFO/4/IC_LOGFILE_AGING","INFO/6/LOGFILE_DELETED")
| call huawei_network_devices_header_fields
| alter
    ipv4 = arrayindex(regextract(_raw_log,"I[Pp]\=(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})"),0),
    ipv6 = arrayindex(regextract(_raw_log,"I[Pp]\=([a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5})"),0),
    user = arrayindex(regextract(_raw_log,"[Uu]ser[Nn]ame\=(\w+)"),0),
    des = arrayindex(regextract(_raw_log,"\[\d+\]\:(.+?)\."),0),
    oid = arrayindex(regextract(_raw_log,"OID\s(.+?)\s"),0)
| alter
    xdm.source.ipv4 = ipv4,
    xdm.source.ipv6 = ipv6,
    xdm.source.user.username = user,
    xdm.event.id = oid,
    xdm.alert.description = des;


[MODEL: dataset="imperva_inc__securesphere_raw", content_id="Imperva_WAF"]
alter
    src_ip_v4 = if(src ~= "\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}", src, null),
    src_ip_v6 = if(src !~= "\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}", src, null),
    dst_ip_v4 = if(dst ~= "\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}", dst, null),
    dst_ip_v6 = if(dst !~= "\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}", dst, null)
| alter
    xdm.target.port = dpt,
    xdm.source.port = spt,
    xdm.observer.action = act,
    xdm.event.type = cat,
    xdm.alert.subcategory = cs1,
    xdm.source.host.device_category = cs2,
    xdm.observer.name = cs3,
    xdm.source.application.name = cs4,
    xdm.event.description = cs5,
    xdm.source.ipv4 = src_ip_v4,
    xdm.source.ipv6 = src_ip_v6,
    xdm.target.ipv4 = dst_ip_v4,
    xdm.target.ipv6 = dst_ip_v6,
    xdm.target.user.username = duser,
    xdm.network.ip_protocol = if(proto ="TCP", "TCP", proto="UDP", "UDP", proto~="lite|Lite|LITE", "UDPLITE", "UNKNOWN"),
    xdm.alert.severity = cefSeverity,
    xdm.observer.version = cefDeviceVersion,
    xdm.event.operation_sub_type = cefDeviceEventClassId;


[MODEL: dataset=incapsula_siemintegration_raw, content_id="Incapsula"]
alter

	method = requestMethod,

	status_code = to_string(cn1),

	start_int = to_integer(start),

	end_int = to_integer(end),

	xff_array = if(to_string(xff) ~= ",", split(xff, ","), null),	

	tar_ip_v4 = if(sip !~= ":", sip, null),
    tar_ip_v6 = if(sip ~= ":", sip, null),
	src_ip_v4 = if(src !~= ":", src, null),
    src_ip_v6 = if(src ~= ":", src, null),
    get_tls_version = arraystring(regextract(ver, "(^TLS\S+)\s+.*"), ""),
    get_tls_cipher = arraystring(regextract(ver, "^TLS\S+\s+(.*)"), "")
| alter

	xdm.network.http.response_code = if(status_code = "100", XDM_CONST.HTTP_RSP_CODE_CONTINUE, status_code = "101", XDM_CONST.HTTP_RSP_CODE_SWITCHING_PROTOCOLS, status_code = "102", XDM_CONST.HTTP_RSP_CODE_PROCESSING, status_code = "103", XDM_CONST.HTTP_RSP_CODE_EARLY_HINTS, status_code = "200", XDM_CONST.HTTP_RSP_CODE_OK, status_code = "201", XDM_CONST.HTTP_RSP_CODE_CREATED, status_code = "202", XDM_CONST.HTTP_RSP_CODE_ACCEPTED, status_code = "203", XDM_CONST.HTTP_RSP_CODE_NON__AUTHORITATIVE_INFORMATION, status_code = "204", XDM_CONST.HTTP_RSP_CODE_NO_CONTENT, status_code = "205", XDM_CONST.HTTP_RSP_CODE_RESET_CONTENT, status_code = "206", XDM_CONST.HTTP_RSP_CODE_PARTIAL_CONTENT, status_code = "207", XDM_CONST.HTTP_RSP_CODE_MULTI__STATUS, status_code = "208", XDM_CONST.HTTP_RSP_CODE_ALREADY_REPORTED, status_code = "226", XDM_CONST.HTTP_RSP_CODE_IM_USED, status_code = "300", XDM_CONST.HTTP_RSP_CODE_MULTIPLE_CHOICES, status_code = "301", XDM_CONST.HTTP_RSP_CODE_MOVED_PERMANENTLY, status_code = "302", XDM_CONST.HTTP_RSP_CODE_FOUND, status_code = "303", XDM_CONST.HTTP_RSP_CODE_SEE_OTHER, status_code = "304", XDM_CONST.HTTP_RSP_CODE_NOT_MODIFIED, status_code = "305", XDM_CONST.HTTP_RSP_CODE_USE_PROXY, status_code = "307", XDM_CONST.HTTP_RSP_CODE_TEMPORARY_REDIRECT, status_code = "308", XDM_CONST.HTTP_RSP_CODE_PERMANENT_REDIRECT, status_code = "400", XDM_CONST.HTTP_RSP_CODE_BAD_REQUEST, status_code = "401", XDM_CONST.HTTP_RSP_CODE_UNAUTHORIZED, status_code = "402", XDM_CONST.HTTP_RSP_CODE_PAYMENT_REQUIRED, status_code = "403", XDM_CONST.HTTP_RSP_CODE_FORBIDDEN, status_code = "404", XDM_CONST.HTTP_RSP_CODE_NOT_FOUND, status_code = "405", XDM_CONST.HTTP_RSP_CODE_METHOD_NOT_ALLOWED, status_code = "406", XDM_CONST.HTTP_RSP_CODE_NOT_ACCEPTABLE, status_code = "407", XDM_CONST.HTTP_RSP_CODE_PROXY_AUTHENTICATION_REQUIRED, status_code = "408", XDM_CONST.HTTP_RSP_CODE_REQUEST_TIMEOUT, status_code = "409", XDM_CONST.HTTP_RSP_CODE_CONFLICT, status_code = "410", XDM_CONST.HTTP_RSP_CODE_GONE, status_code = "411", XDM_CONST.HTTP_RSP_CODE_LENGTH_REQUIRED, status_code = "412", XDM_CONST.HTTP_RSP_CODE_PRECONDITION_FAILED, status_code = "413", XDM_CONST.HTTP_RSP_CODE_CONTENT_TOO_LARGE, status_code = "414", XDM_CONST.HTTP_RSP_CODE_URI_TOO_LONG, status_code = "415", XDM_CONST.HTTP_RSP_CODE_UNSUPPORTED_MEDIA_TYPE, status_code = "416", XDM_CONST.HTTP_RSP_CODE_RANGE_NOT_SATISFIABLE, status_code = "417", XDM_CONST.HTTP_RSP_CODE_EXPECTATION_FAILED, status_code = "421", XDM_CONST.HTTP_RSP_CODE_MISDIRECTED_REQUEST, status_code = "422", XDM_CONST.HTTP_RSP_CODE_UNPROCESSABLE_CONTENT, status_code = "423", XDM_CONST.HTTP_RSP_CODE_LOCKED, status_code = "424", XDM_CONST.HTTP_RSP_CODE_FAILED_DEPENDENCY, status_code = "425", XDM_CONST.HTTP_RSP_CODE_TOO_EARLY, status_code = "426", XDM_CONST.HTTP_RSP_CODE_UPGRADE_REQUIRED, status_code = "428", XDM_CONST.HTTP_RSP_CODE_PRECONDITION_REQUIRED, status_code = "429", XDM_CONST.HTTP_RSP_CODE_TOO_MANY_REQUESTS, status_code = "431", XDM_CONST.HTTP_RSP_CODE_REQUEST_HEADER_FIELDS_TOO_LARGE, status_code = "451", XDM_CONST.HTTP_RSP_CODE_UNAVAILABLE_FOR_LEGAL_REASONS, status_code = "500", XDM_CONST.HTTP_RSP_CODE_INTERNAL_SERVER_ERROR, status_code = "501", XDM_CONST.HTTP_RSP_CODE_NOT_IMPLEMENTED, status_code = "502", XDM_CONST.HTTP_RSP_CODE_BAD_GATEWAY, status_code = "503", XDM_CONST.HTTP_RSP_CODE_SERVICE_UNAVAILABLE, status_code = "504", XDM_CONST.HTTP_RSP_CODE_GATEWAY_TIMEOUT, status_code = "505", XDM_CONST.HTTP_RSP_CODE_HTTP_VERSION_NOT_SUPPORTED, status_code = "506", XDM_CONST.HTTP_RSP_CODE_VARIANT_ALSO_NEGOTIATES, status_code = "507", XDM_CONST.HTTP_RSP_CODE_INSUFFICIENT_STORAGE, status_code = "508", XDM_CONST.HTTP_RSP_CODE_LOOP_DETECTED, status_code = "511", XDM_CONST.HTTP_RSP_CODE_NETWORK_AUTHENTICATION_REQUIRED, status_code = null, null, to_string(status_code)),

	xdm.target.port = to_integer(spt),

	xdm.target.sent_bytes = to_integer(`in`),

	xdm.event.outcome = if(act ~= "REQ_PASSED", XDM_CONST.OUTCOME_SUCCESS, act ~= "REQ_CHALLENGED_", XDM_CONST.OUTCOME_PARTIAL, act ~= "REQ_BLOCKED_", XDM_CONST.OUTCOME_FAILED, act ~= "REQ_BAD_", XDM_CONST.OUTCOME_FAILED,  act = null, null, to_string(act)),

	xdm.observer.action = act,

	xdm.network.application_protocol = app,

	xdm.source.port = to_integer(cpt),

	//xdm.auth.service = "CAPTCHA: " + cs1 ,

	xdm.source.host.device_category = to_string(arraycreate("Javascript: " + cs2, "Cookie: " + cs3)),

	xdm.source.user.identifier = cs4,

	xdm.source.agent.identifier = cs5,

	xdm.source.application.name = cs6,

	xdm.source.location.latitude = to_float(cs7),

	xdm.source.location.longitude = to_float(cs8),

	xdm.alert.subcategory = to_string(split(cs9, ",")),

	xdm.event.duration = to_integer(subtract(end_int, start_int)),

	xdm.network.http.referrer = ref,

	xdm.target.ipv4 = tar_ip_v4,

	xdm.target.ipv6 = tar_ip_v6,

	xdm.source.ipv4 = src_ip_v4,

	xdm.source.ipv6 = src_ip_v6,

	xdm.source.host.ipv4_addresses = arraymap(xff_array, if("@element" !~= ":", "@element", null)),

	xdm.source.host.ipv6_addresses = arraymap(xff_array, if("@element" ~= ":", "@element", null)),

	xdm.network.http.http_header.header = if(xff_array = null, null, "X-Forwarded-For"),

	xdm.network.http.http_header.value = to_string(xff),

	xdm.network.tls.protocol_version = get_tls_version,

	xdm.network.tls.cipher = get_tls_cipher,

	xdm.event.description = cs10,

	xdm.source.location.country = ccode,

	xdm.source.agent.type = dproc,

	xdm.source.location.city = cicode,

	xdm.network.session_id = to_string(fileId),

	xdm.event.type = cefName,

	xdm.target.url = request,

	xdm.alert.description = postbody,

	xdm.alert.severity = to_string(cefSeverity),

	xdm.network.http.method = if(method = "ACL", XDM_CONST.HTTP_METHOD_ACL, method = "BASELINE_CONTROL", XDM_CONST.HTTP_METHOD_BASELINE_CONTROL , method = "BIND", XDM_CONST.HTTP_METHOD_BIND, method = "CHECKIN", XDM_CONST.HTTP_METHOD_CHECKIN, method = "CHECKOUT", XDM_CONST.HTTP_METHOD_CHECKOUT, method = "CONNECT", XDM_CONST.HTTP_METHOD_CONNECT, method = "COPY", XDM_CONST.HTTP_METHOD_COPY, method = "DELETE", XDM_CONST.HTTP_METHOD_DELETE, method = "GET", XDM_CONST.HTTP_METHOD_GET, method = "HEAD", XDM_CONST.HTTP_METHOD_HEAD, method = "LABEL", XDM_CONST.HTTP_METHOD_LABEL, method = "LINK", XDM_CONST.HTTP_METHOD_LINK, method = "LOCK", XDM_CONST.HTTP_METHOD_LOCK, method = "MERGE", XDM_CONST.HTTP_METHOD_MERGE, method = "MKACTIVITY", XDM_CONST.HTTP_METHOD_MKACTIVITY, method = "MKCALENDAR", XDM_CONST.HTTP_METHOD_MKCALENDAR, method = "MKCOL", XDM_CONST.HTTP_METHOD_MKCOL, method = "MKREDIRECTREF", XDM_CONST.HTTP_METHOD_MKREDIRECTREF, method = "MKWORKSPACE", XDM_CONST.HTTP_METHOD_MKWORKSPACE, method = "MOVE", XDM_CONST.HTTP_METHOD_MOVE, method = "OPTIONS", XDM_CONST.HTTP_METHOD_OPTIONS, method = "ORDERPATCH", XDM_CONST.HTTP_METHOD_ORDERPATCH, method = "PATCH", XDM_CONST.HTTP_METHOD_PATCH, method = "POST", XDM_CONST.HTTP_METHOD_POST, method = "PRI", XDM_CONST.HTTP_METHOD_PRI, method = "PROPFIND", XDM_CONST.HTTP_METHOD_PROPFIND, method = "PROPPATCH", XDM_CONST.HTTP_METHOD_PROPPATCH, method = "PUT", XDM_CONST.HTTP_METHOD_PUT, method = "REBIND", XDM_CONST.HTTP_METHOD_REBIND, method = "REPORT", XDM_CONST.HTTP_METHOD_REPORT, method = "SEARCH", XDM_CONST.HTTP_METHOD_SEARCH, method = "TRACE", XDM_CONST.HTTP_METHOD_TRACE, method = "UNBIND", XDM_CONST.HTTP_METHOD_UNBIND, method = "UNCHECKOUT", XDM_CONST.HTTP_METHOD_UNCHECKOUT, method = "UNLINK", XDM_CONST.HTTP_METHOD_UNLINK, method = "UNLOCK", XDM_CONST.HTTP_METHOD_UNLOCK, method = "UPDATE", XDM_CONST.HTTP_METHOD_UPDATE, method = "UPDATEREDIRECTREF", XDM_CONST.HTTP_METHOD_UPDATEREDIRECTREF, method = "VERSION_CONTROL", XDM_CONST.HTTP_METHOD_VERSION_CONTROL, method = null, null, to_string(method)),

	xdm.intermediate.location.region = deviceFacility,

	xdm.alert.original_threat_id = filePermission,

	xdm.observer.unique_identifier = to_string(deviceExternalId),

	xdm.target.domain = sourceServiceName,

	xdm.source.user_agent = requestClientApplication,

	xdm.alert.original_alert_id = cs11 -> [0].api_specification_violation_type,

	xdm.alert.original_threat_name = cs11 -> [0].parameter_name;


[MODEL: dataset="infoblox_infoblox_raw", content_id="Infoblox"]
/**************/
// DNS Queries /
/**************/
// https://docs.infoblox.com/space/nios85/35816694/Capturing+DNS+Queries+and+Responses
filter _raw_log ~= "client\s+(?:\@0x[\da-fA-F]+\s+)?[\da-fA-F\.\:]+\#\d{1,5}(?:\s+\([^\)]+\))?:\s+query"
| alter // Extract syslog headers & syslog message 
    syslog_process_id = arrayindex(regextract(_raw_log, "\s\w+\[(\d+)\]"), 0),
    syslog_process_name = arrayindex(regextract(_raw_log, "\s(\w+)\[\d+\]"), 0),
    syslog_priority = to_integer(arrayindex(regextract(_raw_log, "^\<(\d{1,3})\>\s*\w+"), 0)),
    syslog_msg = coalesce( 
        arrayindex(regextract(_raw_log, "\w+\[\d+\]:\s*(.+)"), 0), // messages that are sent directly from infoblox 
        arrayindex(regextract(_raw_log, "^\<\d+\>\w?\s+(?:\S+\s+){6}(.+)"), 0)) // messages that are downloaded to file and sent via an intermediate syslog client 
| alter syslog_facility_code = floor(divide(syslog_priority, 8))
| alter syslog_severity = to_string(subtract(syslog_priority, multiply(syslog_facility_code, 8)))
| alter // Extract the DNS query data out of the syslog messages 
    client_ip = arrayindex(regextract(_raw_log, "client\s+(?:\@0x[\da-fA-F]+\s+)?([\da-fA-F\.\:]+)\#\d{1,5}"), 0),
    client_port = arrayindex(regextract(_raw_log, "client\s+(?:\@0x[\da-fA-F]+\s+)?[\da-fA-F\.\:]+\#(\d{1,5})"), 0),
    dns_server_ip = arrayindex(regextract(_raw_log, "query\:\s+\S+\s+(?:\@0x[\da-fA-F]+\s+)?\w+\s+\w+\s+[\+\-](?:[SETDC\(\)\d]+)?\s+\(?([\da-fA-F\.\:]+)"), 0),
    query_domain_name = coalesce(arrayindex(regextract(_raw_log, "query\:\s+(\S+)"), 0), arrayindex(regextract(_raw_log, "\(([^\)]+)\):\s+query"), 0)),
    query_class = arrayindex(regextract(_raw_log, "query\:\s+\S+\s+(?:\@0x[\da-fA-F]+\s+)?(\w+)"), 0), // see https://datatracker.ietf.org/doc/html/rfc1035#section-3.2.4
    query_record_type = arrayindex(regextract(_raw_log, "query\:\s+\S+\s+(?:\@0x[\da-fA-F]+\s+)?\w+\s+(\w+)"), 0), // see https://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml#dns-parameters-4
    query_flags = arrayindex(regextract(_raw_log, "query\:\s+\S+\s+(?:\@0x[\da-fA-F]+\s+)?\w+\s+\w+\s+([\+\-](?:[SETDC\(\)\d]+)?)"), 0),
    rcode = arrayindex(regextract(_raw_log, "query failed\s*\((\w+)"), 0)
| alter // Post extraction processing 
    application_protocol = "DNS",
	client_ipv4 = if(client_ip ~= "(?:\d{1,3}\.){3}\d{1,3}", client_ip),

	client_ipv6 = if(client_ip ~= ":", client_ip),
    dns_server_ipv4 = if(dns_server_ip ~= "(?:\d{1,3}\.){3}\d{1,3}", dns_server_ip),
	dns_server_ipv6 = if(dns_server_ip ~= ":", dns_server_ip),
    ip_protocol = if(query_flags contains "T", XDM_CONST.IP_PROTOCOL_TCP)
| alter // XDM Mapping 
    xdm.alert.severity = syslog_severity,
    xdm.event.type = "DNS Query",
    xdm.event.description = syslog_msg,
    xdm.event.log_level = if(syslog_severity = "0", XDM_CONST.LOG_LEVEL_EMERGENCY, syslog_severity = "1", XDM_CONST.LOG_LEVEL_ALERT, syslog_severity = "2", XDM_CONST.LOG_LEVEL_CRITICAL, syslog_severity = "3", XDM_CONST.LOG_LEVEL_ERROR, syslog_severity = "4", XDM_CONST.LOG_LEVEL_WARNING, syslog_severity = "5", XDM_CONST.LOG_LEVEL_NOTICE, syslog_severity = "6", XDM_CONST.LOG_LEVEL_INFORMATIONAL, syslog_severity = "7", XDM_CONST.LOG_LEVEL_DEBUG, syslog_severity),
    xdm.event.outcome = if(rcode != null, XDM_CONST.OUTCOME_FAILED),
    xdm.event.outcome_reason = rcode,
    xdm.intermediate.ipv4 = dns_server_ipv4,
    xdm.intermediate.ipv6 = dns_server_ipv6,
    xdm.network.application_protocol = application_protocol,
    xdm.network.dns.dns_question.class = if(query_class = "IN", 1, query_class = "CS", 2, query_class = "CH", 3, query_class = "HS", 4), // see https://datatracker.ietf.org/doc/html/rfc1035#section-3.2.4
    xdm.network.dns.dns_question.name = query_domain_name,
    xdm.network.dns.dns_question.type = if(query_record_type = "A", XDM_CONST.DNS_RECORD_TYPE_A, query_record_type = "AAAA", XDM_CONST.DNS_RECORD_TYPE_AAAA, query_record_type = "AFSDB", XDM_CONST.DNS_RECORD_TYPE_AFSDB, query_record_type = "APL", XDM_CONST.DNS_RECORD_TYPE_APL, query_record_type = "CAA", XDM_CONST.DNS_RECORD_TYPE_CAA, query_record_type = "CDNSKEY", XDM_CONST.DNS_RECORD_TYPE_CDNSKEY, query_record_type = "CDS", XDM_CONST.DNS_RECORD_TYPE_CDS, query_record_type = "CERT", XDM_CONST.DNS_RECORD_TYPE_CERT, query_record_type = "CNAME", XDM_CONST.DNS_RECORD_TYPE_CNAME, query_record_type = "CSYNC", XDM_CONST.DNS_RECORD_TYPE_CSYNC, query_record_type = "DHCID", XDM_CONST.DNS_RECORD_TYPE_DHCID, query_record_type = "DLV", XDM_CONST.DNS_RECORD_TYPE_DLV, query_record_type = "DNAME", XDM_CONST.DNS_RECORD_TYPE_DNAME, query_record_type = "DNSKEY", XDM_CONST.DNS_RECORD_TYPE_DNSKEY, query_record_type = "DS", XDM_CONST.DNS_RECORD_TYPE_DS, query_record_type = "EUI48", XDM_CONST.DNS_RECORD_TYPE_EUI48, query_record_type = "EUI64", XDM_CONST.DNS_RECORD_TYPE_EUI64, query_record_type = "HINFO", XDM_CONST.DNS_RECORD_TYPE_HINFO, query_record_type = "HIP", XDM_CONST.DNS_RECORD_TYPE_HIP, query_record_type = "HTTPS", XDM_CONST.DNS_RECORD_TYPE_HTTPS, query_record_type = "IPSECKEY", XDM_CONST.DNS_RECORD_TYPE_IPSECKEY, query_record_type = "KEY", XDM_CONST.DNS_RECORD_TYPE_KEY, query_record_type = "KX", XDM_CONST.DNS_RECORD_TYPE_KX, query_record_type = "LOC", XDM_CONST.DNS_RECORD_TYPE_LOC, query_record_type = "MX", XDM_CONST.DNS_RECORD_TYPE_MX, query_record_type = "NAPTR", XDM_CONST.DNS_RECORD_TYPE_NAPTR, query_record_type = "NS", XDM_CONST.DNS_RECORD_TYPE_NS, query_record_type = "NSEC", XDM_CONST.DNS_RECORD_TYPE_NSEC, query_record_type = "NSEC3", XDM_CONST.DNS_RECORD_TYPE_NSEC3, query_record_type = "NSEC3PARAM", XDM_CONST.DNS_RECORD_TYPE_NSEC3PARAM, query_record_type = "OPENPGPKEY", XDM_CONST.DNS_RECORD_TYPE_OPENPGPKEY, query_record_type = "PTR", XDM_CONST.DNS_RECORD_TYPE_PTR, query_record_type = "RRSIG", XDM_CONST.DNS_RECORD_TYPE_RRSIG, query_record_type = "RP", XDM_CONST.DNS_RECORD_TYPE_RP, query_record_type = "SIG", XDM_CONST.DNS_RECORD_TYPE_SIG, query_record_type = "SMIMEA", XDM_CONST.DNS_RECORD_TYPE_SMIMEA, query_record_type = "SOA", XDM_CONST.DNS_RECORD_TYPE_SOA, query_record_type = "SRV", XDM_CONST.DNS_RECORD_TYPE_SRV, query_record_type = "SSHFP", XDM_CONST.DNS_RECORD_TYPE_SSHFP, query_record_type = "SVCB", XDM_CONST.DNS_RECORD_TYPE_SVCB, query_record_type = "TA", XDM_CONST.DNS_RECORD_TYPE_TA, query_record_type = "TKEY", XDM_CONST.DNS_RECORD_TYPE_TKEY, query_record_type = "TLSA", XDM_CONST.DNS_RECORD_TYPE_TLSA, query_record_type = "TSIG", XDM_CONST.DNS_RECORD_TYPE_TSIG, query_record_type = "TXT", XDM_CONST.DNS_RECORD_TYPE_TXT, query_record_type = "URI", XDM_CONST.DNS_RECORD_TYPE_URI, query_record_type = "ZONEMD", XDM_CONST.DNS_RECORD_TYPE_ZONEMD, query_record_type),
    xdm.network.dns.is_response = if(rcode = null, to_boolean("FALSE")),
    xdm.network.dns.response_code = if(rcode = "NOERROR", XDM_CONST.DNS_RESPONSE_CODE_NO_ERROR, rcode = "FORMERR", XDM_CONST.DNS_RESPONSE_CODE_FORMAT_ERROR, rcode = "SERVFAIL", XDM_CONST.DNS_RESPONSE_CODE_SERVER_FAILURE, rcode = "NXDOMAIN", XDM_CONST.DNS_RESPONSE_CODE_NON_EXISTENT_DOMAIN, rcode = "NOTIMP", XDM_CONST.DNS_RESPONSE_CODE_NOT_IMPLEMENTED, rcode ~= "REFUSED", XDM_CONST.DNS_RESPONSE_CODE_QUERY_REFUSED, rcode ~= "YXDOMAIN", XDM_CONST.DNS_RESPONSE_CODE_NAME_EXISTS_WHEN_IT_SHOULD_NOT, rcode = "YXRRSET", XDM_CONST.DNS_RESPONSE_CODE_RR_SET_EXISTS_WHEN_IT_SHOULD_NOT, rcode = "NXRRSET", XDM_CONST.DNS_RESPONSE_CODE_RR_SET_THAT_SHOULD_EXIST_DOES_NOT, rcode = "NOTAUTH", XDM_CONST.DNS_RESPONSE_CODE_SERVER_NOT_AUTHORITATIVE_FOR_ZONE, rcode = "NOTZONE", XDM_CONST.DNS_RESPONSE_CODE_NAME_NOT_CONTAINED_IN_ZONE, rcode = "BADVERS", XDM_CONST.DNS_RESPONSE_CODE_BAD_OPT_VERSION, rcode = "BADSIG", XDM_CONST.DNS_RESPONSE_CODE_TSIG_SIGNATURE_FAILURE, rcode = "BADKEY", XDM_CONST.DNS_RESPONSE_CODE_KEY_NOT_RECOGNIZED, rcode = "BADTIME", XDM_CONST.DNS_RESPONSE_CODE_SIGNATURE_OUT_OF_TIME_WINDOW, rcode = "BADMODE", XDM_CONST.DNS_RESPONSE_CODE_BAD_TKEY_MODE, rcode = "BADNAME", XDM_CONST.DNS_RESPONSE_CODE_DUPLICATE_KEY_NAME, rcode = "BADALG", XDM_CONST.DNS_RESPONSE_CODE_ALGORITHM_NOT_SUPPORTED, rcode = "BADTRUNC", XDM_CONST.DNS_RESPONSE_CODE_BAD_TRUNCATION, rcode),
    xdm.network.ip_protocol = ip_protocol, 
    xdm.network.protocol_layers = arraycreate(application_protocol, ip_protocol),
    xdm.source.ipv4 = client_ipv4,
    xdm.source.ipv6 = client_ipv6,
    xdm.source.port = to_number(client_port),
    xdm.source.process.name = syslog_process_name,
    xdm.source.process.pid = to_number(syslog_process_id);

/****************/
// DNS Responses /
/****************/
// https://docs.infoblox.com/space/nios85/35816694/Capturing+DNS+Queries+and+Responses
filter _raw_log ~= "(?:UDP|TCP):\s*query:\s*(?:\S+\s+){3}response:"   
| alter // Extract syslog headers & syslog message 
    syslog_process_id = arrayindex(regextract(_raw_log, "\s\w+\[(\d+)\]"), 0),
    syslog_process_name = arrayindex(regextract(_raw_log, "\s(\w+)\[\d+\]"), 0),
    syslog_priority = to_integer(arrayindex(regextract(_raw_log, "^\<(\d{1,3})\>\s*\w+"), 0)),
    syslog_msg = coalesce( 
        arrayindex(regextract(_raw_log, "\w+\[\d+\]:\s*(.+)"), 0), // messages that are sent directly from infoblox 
        arrayindex(regextract(_raw_log, "^\<\d+\>\w?\s+(?:\S+\s+){6}(.+)"), 0)) // messages that are downloaded to file and sent via an intermediate syslog client 
| alter syslog_facility_code = floor(divide(syslog_priority, 8))
| alter syslog_severity = to_string(subtract(syslog_priority, multiply(syslog_facility_code, 8)))
| alter // Extract DNS query & response data 
    client_ip = arrayindex(regextract(syslog_msg, "client\s+([\da-fA-F\.\:]+)\#\d{1,5}"), 0),
    client_port = arrayindex(regextract(syslog_msg, "client\s+[\da-fA-F\.\:]+\#(\d{1,5})"), 0),
    ip_protocol = arrayindex(regextract(syslog_msg, "client\s+[\da-fA-F\.\:]+\#\d{1,5}:\s+(TCP|UDP)"), 0),
    query_domain_name = arrayindex(regextract(syslog_msg, "query\:\s+(\S+)"), 0),
    query_class = arrayindex(regextract(syslog_msg, "query\:\s+\S+\s+(?:\@0x[\da-fA-F]+\s+)?(\w+)"), 0), // see https://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml#dns-parameters-2
    query_record_type = arrayindex(regextract(syslog_msg, "query\:\s+\S+\s+(?:\@0x[\da-fA-F]+\s+)?\w+\s+(\w+)"), 0), // https://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml#dns-parameters-4
    response_rcode = arrayindex(regextract(syslog_msg, "response\:\s+(\S+)"), 0), // see https://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml#dns-parameters-6
    response_flags = arrayindex(regextract(syslog_msg, "response\:\s+\S+\s+((?:\+|\-)*[ATEDVL]{0,6})"), 0),
    response_rr = arrayfilter(split(arrayindex(regextract(syslog_msg, "response\:\s+(?:\S+\s+){2}(.+)"), 0), ";"), len("@element") > 0) // response resource records (RR)
| alter // Extract ipv4 & ipv6 resolved addresses (A & AAAA record types, respectively)
    response_resolved_ipv4_addresses = arraymap(response_rr, arrayindex(regextract("@element", "(?:\S+\s+){3}A\s+(\S+)"), 0)), // A records 
    response_resolved_ipv6_addresses = arraymap(response_rr, arrayindex(regextract("@element", "(?:\S+\s+){3}A{4}\s+(\S+)"), 0)) // AAAA records
| alter // Isolate only the requested records types from the entire response 
    response_requested_records = if(query_record_type = "ANY", response_rr, arrayfilter(response_rr,  arrayindex(regextract("@element", "(?:\S+\s+){3}(\S+)"), 0) = query_record_type))
| alter // Extract the domain names and their associated record values from the response  
    response_domain_names = arraymap(response_requested_records, rtrim(arrayindex(regextract("@element", "(\S+)"), 0), ".")),
    response_values = arraymap(response_requested_records, arrayindex(regextract("@element", "(?:\S+\s+){4}(.+)"), 0))
| alter // reformat the domain names & values from array to semicolon separated strings
    response_distinct_domain_names = arraydistinct(response_domain_names),
    response_distinct_values = arraydistinct(response_values)
| alter 
    response_domain_names = if(array_length(response_distinct_domain_names) = 1, arraystring(response_distinct_domain_names, ";"), arraystring(response_domain_names, ";")),
    response_values = if(array_length(response_distinct_values) = 1, arraystring(response_distinct_values, ";"), arraystring(response_values, ";"))
| alter // additional processing 
    application_protocol = "DNS",
	client_ipv4 = if(client_ip ~= "(?:\d{1,3}\.){3}\d{1,3}", client_ip),

	client_ipv6 = if(client_ip ~= ":", client_ip),
    query_class_enum = if(query_class = "IN", 1, query_class = "CS", 2, query_class = "CH", 3, query_class = "HS", 4), // see https://datatracker.ietf.org/doc/html/rfc1035#section-3.2.4
    query_record_type_enum = if(query_record_type = "A", XDM_CONST.DNS_RECORD_TYPE_A, query_record_type = "AAAA", XDM_CONST.DNS_RECORD_TYPE_AAAA, query_record_type = "AFSDB", XDM_CONST.DNS_RECORD_TYPE_AFSDB, query_record_type = "APL", XDM_CONST.DNS_RECORD_TYPE_APL, query_record_type = "CAA", XDM_CONST.DNS_RECORD_TYPE_CAA, query_record_type = "CDNSKEY", XDM_CONST.DNS_RECORD_TYPE_CDNSKEY, query_record_type = "CDS", XDM_CONST.DNS_RECORD_TYPE_CDS, query_record_type = "CERT", XDM_CONST.DNS_RECORD_TYPE_CERT, query_record_type = "CNAME", XDM_CONST.DNS_RECORD_TYPE_CNAME, query_record_type = "CSYNC", XDM_CONST.DNS_RECORD_TYPE_CSYNC, query_record_type = "DHCID", XDM_CONST.DNS_RECORD_TYPE_DHCID, query_record_type = "DLV", XDM_CONST.DNS_RECORD_TYPE_DLV, query_record_type = "DNAME", XDM_CONST.DNS_RECORD_TYPE_DNAME, query_record_type = "DNSKEY", XDM_CONST.DNS_RECORD_TYPE_DNSKEY, query_record_type = "DS", XDM_CONST.DNS_RECORD_TYPE_DS, query_record_type = "EUI48", XDM_CONST.DNS_RECORD_TYPE_EUI48, query_record_type = "EUI64", XDM_CONST.DNS_RECORD_TYPE_EUI64, query_record_type = "HINFO", XDM_CONST.DNS_RECORD_TYPE_HINFO, query_record_type = "HIP", XDM_CONST.DNS_RECORD_TYPE_HIP, query_record_type = "HTTPS", XDM_CONST.DNS_RECORD_TYPE_HTTPS, query_record_type = "IPSECKEY", XDM_CONST.DNS_RECORD_TYPE_IPSECKEY, query_record_type = "KEY", XDM_CONST.DNS_RECORD_TYPE_KEY, query_record_type = "KX", XDM_CONST.DNS_RECORD_TYPE_KX, query_record_type = "LOC", XDM_CONST.DNS_RECORD_TYPE_LOC, query_record_type = "MX", XDM_CONST.DNS_RECORD_TYPE_MX, query_record_type = "NAPTR", XDM_CONST.DNS_RECORD_TYPE_NAPTR, query_record_type = "NS", XDM_CONST.DNS_RECORD_TYPE_NS, query_record_type = "NSEC", XDM_CONST.DNS_RECORD_TYPE_NSEC, query_record_type = "NSEC3", XDM_CONST.DNS_RECORD_TYPE_NSEC3, query_record_type = "NSEC3PARAM", XDM_CONST.DNS_RECORD_TYPE_NSEC3PARAM, query_record_type = "OPENPGPKEY", XDM_CONST.DNS_RECORD_TYPE_OPENPGPKEY, query_record_type = "PTR", XDM_CONST.DNS_RECORD_TYPE_PTR, query_record_type = "RRSIG", XDM_CONST.DNS_RECORD_TYPE_RRSIG, query_record_type = "RP", XDM_CONST.DNS_RECORD_TYPE_RP, query_record_type = "SIG", XDM_CONST.DNS_RECORD_TYPE_SIG, query_record_type = "SMIMEA", XDM_CONST.DNS_RECORD_TYPE_SMIMEA, query_record_type = "SOA", XDM_CONST.DNS_RECORD_TYPE_SOA, query_record_type = "SRV", XDM_CONST.DNS_RECORD_TYPE_SRV, query_record_type = "SSHFP", XDM_CONST.DNS_RECORD_TYPE_SSHFP, query_record_type = "SVCB", XDM_CONST.DNS_RECORD_TYPE_SVCB, query_record_type = "TA", XDM_CONST.DNS_RECORD_TYPE_TA, query_record_type = "TKEY", XDM_CONST.DNS_RECORD_TYPE_TKEY, query_record_type = "TLSA", XDM_CONST.DNS_RECORD_TYPE_TLSA, query_record_type = "TSIG", XDM_CONST.DNS_RECORD_TYPE_TSIG, query_record_type = "TXT", XDM_CONST.DNS_RECORD_TYPE_TXT, query_record_type = "URI", XDM_CONST.DNS_RECORD_TYPE_URI, query_record_type = "ZONEMD", XDM_CONST.DNS_RECORD_TYPE_ZONEMD, query_record_type)
| alter // XDM Mapping 
    xdm.alert.severity = syslog_severity,
    xdm.event.type = "DNS Response",
    xdm.event.description = syslog_msg,
    xdm.event.log_level = if(syslog_severity = "0", XDM_CONST.LOG_LEVEL_EMERGENCY, syslog_severity = "1", XDM_CONST.LOG_LEVEL_ALERT, syslog_severity = "2", XDM_CONST.LOG_LEVEL_CRITICAL, syslog_severity = "3", XDM_CONST.LOG_LEVEL_ERROR, syslog_severity = "4", XDM_CONST.LOG_LEVEL_WARNING, syslog_severity = "5", XDM_CONST.LOG_LEVEL_NOTICE, syslog_severity = "6", XDM_CONST.LOG_LEVEL_INFORMATIONAL, syslog_severity = "7", XDM_CONST.LOG_LEVEL_DEBUG, syslog_severity),
    xdm.event.outcome = if(response_rcode = "NOERROR", XDM_CONST.OUTCOME_SUCCESS, response_rcode != null, XDM_CONST.OUTCOME_FAILED),
    xdm.event.outcome_reason = response_rcode,
    xdm.network.application_protocol = application_protocol,
    xdm.network.dns.authoritative = if(response_flags contains "A", to_boolean("TRUE"), to_boolean("FALSE")),
    xdm.network.dns.dns_question.class = query_class_enum,
    xdm.network.dns.dns_question.name = query_domain_name,
    xdm.network.dns.dns_question.type = query_record_type_enum,
    xdm.network.dns.dns_resource_record.class = query_class_enum,
    xdm.network.dns.dns_resource_record.name = response_domain_names,
    xdm.network.dns.dns_resource_record.type = query_record_type_enum,
    xdm.network.dns.dns_resource_record.value = response_values,
    xdm.network.dns.is_response = to_boolean("TRUE"),
    xdm.network.dns.is_truncated = if(response_flags contains "t", to_boolean("TRUE"), to_boolean("FALSE")),
    xdm.network.dns.response_code = if(response_rcode = "NOERROR", XDM_CONST.DNS_RESPONSE_CODE_NO_ERROR, response_rcode = "FORMERR", XDM_CONST.DNS_RESPONSE_CODE_FORMAT_ERROR, response_rcode = "SERVFAIL", XDM_CONST.DNS_RESPONSE_CODE_SERVER_FAILURE, response_rcode = "NXDOMAIN", XDM_CONST.DNS_RESPONSE_CODE_NON_EXISTENT_DOMAIN, response_rcode = "NOTIMP", XDM_CONST.DNS_RESPONSE_CODE_NOT_IMPLEMENTED, response_rcode ~= "REFUSED", XDM_CONST.DNS_RESPONSE_CODE_QUERY_REFUSED, response_rcode ~= "YXDOMAIN", XDM_CONST.DNS_RESPONSE_CODE_NAME_EXISTS_WHEN_IT_SHOULD_NOT, response_rcode = "YXRRSET", XDM_CONST.DNS_RESPONSE_CODE_RR_SET_EXISTS_WHEN_IT_SHOULD_NOT, response_rcode = "NXRRSET", XDM_CONST.DNS_RESPONSE_CODE_RR_SET_THAT_SHOULD_EXIST_DOES_NOT, response_rcode = "NOTAUTH", XDM_CONST.DNS_RESPONSE_CODE_SERVER_NOT_AUTHORITATIVE_FOR_ZONE, response_rcode = "NOTZONE", XDM_CONST.DNS_RESPONSE_CODE_NAME_NOT_CONTAINED_IN_ZONE, response_rcode = "BADVERS", XDM_CONST.DNS_RESPONSE_CODE_BAD_OPT_VERSION, response_rcode = "BADSIG", XDM_CONST.DNS_RESPONSE_CODE_TSIG_SIGNATURE_FAILURE, response_rcode = "BADKEY", XDM_CONST.DNS_RESPONSE_CODE_KEY_NOT_RECOGNIZED, response_rcode = "BADTIME", XDM_CONST.DNS_RESPONSE_CODE_SIGNATURE_OUT_OF_TIME_WINDOW, response_rcode = "BADMODE", XDM_CONST.DNS_RESPONSE_CODE_BAD_TKEY_MODE, response_rcode = "BADNAME", XDM_CONST.DNS_RESPONSE_CODE_DUPLICATE_KEY_NAME, response_rcode = "BADALG", XDM_CONST.DNS_RESPONSE_CODE_ALGORITHM_NOT_SUPPORTED, response_rcode = "BADTRUNC", XDM_CONST.DNS_RESPONSE_CODE_BAD_TRUNCATION, response_rcode),
    xdm.network.ip_protocol = if(ip_protocol = "TCP", XDM_CONST.IP_PROTOCOL_TCP, ip_protocol = "UDP", XDM_CONST.IP_PROTOCOL_UDP),
    xdm.network.protocol_layers = arraycreate(application_protocol, ip_protocol),
    xdm.source.ipv4 = client_ipv4,
    xdm.source.ipv6 = client_ipv6,
    xdm.source.port = to_integer(client_port),
    xdm.source.process.name = syslog_process_name,
    xdm.source.process.pid = to_integer(syslog_process_id),
    xdm.target.host.ipv4_addresses = response_resolved_ipv4_addresses,
    xdm.target.host.ipv6_addresses = response_resolved_ipv6_addresses,
    xdm.target.ipv4 = arrayindex(response_resolved_ipv4_addresses, 0),
    xdm.target.ipv6 = arrayindex(response_resolved_ipv6_addresses, 0);

/**************/
// DHCP Events /
/*************/
filter _raw_log ~= "(?:dhcpd|omshell|dhcrelay|dhclient)\[\d+\]" or _raw_log ~= "DHCP\w+"
| alter // Extract syslog headers & syslog message 
    syslog_process_id = arrayindex(regextract(_raw_log, "\s\w+\[(\d+)\]"), 0),
    syslog_process_name = arrayindex(regextract(_raw_log, "\s(\w+)\[\d+\]"), 0),
    syslog_priority = to_integer(arrayindex(regextract(_raw_log, "^\<(\d{1,3})\>\s*\w+"), 0)),
    syslog_msg = coalesce( 
        arrayindex(regextract(_raw_log, "\w+\[\d+\]:\s*(.+)"), 0), // messages that are sent directly from infoblox 
        arrayindex(regextract(_raw_log, "^\<\d+\>\w?\s+(?:\S+\s+){6}(.+)"), 0)) // messages that are downloaded to a file and sent via an intermediate syslog client 
| alter syslog_facility_code = floor(divide(syslog_priority, 8))
| alter syslog_severity = to_string(subtract(syslog_priority, multiply(syslog_facility_code, 8)))
| alter // Extract the DHCP message type (https://www.iana.org/assignments/bootp-dhcp-parameters/bootp-dhcp-parameters.xhtml#message-type-53)
    dhcp_msg_type = arrayindex(regextract(syslog_msg, "(DHCP\w+)") , 0)
| alter // Extract DHCP data  
    application_protocol = "DHCP", 
    dhcp_acknowledged_ip = arrayindex(regextract(_raw_log, "DHCPACK\s+(?:on|to)\s+((?:\d{1,3}\.){3}\d{1,3})"), 0),
    dhcp_not_acknowledged_ip = arrayindex(regextract(_raw_log, "DHCPNAK\s+on\s+((?:\d{1,3}\.){3}\d{1,3})"), 0),
    dhcp_bootstrap_server_ip = arrayindex(regextract(_raw_log, "DHCPREQUEST\s+for\s+\S+\s+\(((?:\d{1,3}\.){3}\d{1,3})"), 0),
    dhcp_client_ip = coalesce(
        arrayindex(regextract(_raw_log, "(?:DHCPDECLINE|DHCPRELEASE)\s+of\s+((?:\d{1,3}\.){3}\d{1,3})"), 0),
        arrayindex(regextract(_raw_log, "(?:DHCPINFORM|DHCPLEASEQUERY)\s+from\s+((?:\d{1,3}\.){3}\d{1,3})"), 0)), 
    dhcp_client_mac_address = coalesce(
        arrayindex(regextract(syslog_msg, "from\s+((?:[a-fA-F\d]{2}:){5}[\da-fA-F]{2})"), 0),
        arrayindex(regextract(syslog_msg, "\s+on\s+\S+\s+to\s+((?:[a-fA-F\d]{2}:){5}[\da-fA-F]{2})"), 0),
        arrayindex(regextract(syslog_msg, "\s+to\s+\S+\s+\(((?:[a-fA-F\d]{2}:){5}[\da-fA-F]{2})"), 0)),
    dhcp_client_hostname = coalesce(
        arrayindex(regextract(_raw_log, "from\s+\S+\s+\(([^\)]+)"), 0), 
        arrayindex(regextract(_raw_log, "\s+on\s+\S+\s+to\s+\S+\s+\(([\w\-\.]+)"), 0)),
    dhcp_client_interface = arrayindex(regextract(_raw_log, "via\s+(\w+)(?:\s|$)"), 0), // interface port 
    dhcp_client_uid = rtrim(arrayindex(regextract(_raw_log, "uid\s+(\S+)"), 0), ":"), // client unique identifier 
    dhcp_expired_lease_ip = arrayindex(regextract(_raw_log, "DHCPEXPIRE\s+on\s+((?:\d{1,3}\.){3}\d{1,3})"), 0),
    dhcp_lease_duration = arrayindex(regextract(_raw_log, "lease\-duration\s+(\d+)"), 0), 
    dhcp_offered_ip = arrayindex(regextract(_raw_log, "DHCPOFFER\s+on\s+((?:\d{1,3}\.){3}\d{1,3})"), 0),
    dhcp_relay_agent_ip = coalesce(
        arrayindex(regextract(_raw_log, "via\s+((?:\d{1,3}\.){3}\d{1,3})"), 0),
        arrayindex(regextract(_raw_log, "relay(?:\-agent)?\s+((?:\d{1,3}\.){3}\d{1,3})"), 0)),
    dhcp_requested_ip = arrayindex(regextract(_raw_log, "DHCPREQUEST\s+for\s+((?:\d{1,3}\.){3}\d{1,3})"), 0),
    is_renewal = if(_raw_log ~= "RENEW", to_boolean("TRUE")),
    msg_suffix = coalesce(
        arrayindex(regextract(_raw_log, "via \S+(?:\s+TransID\s+\w+)?:\s+(.+)"), 0),
        arrayindex(regextract(_raw_log, "(?:uid|TransID)\s+\S+:\s+(.+)$"), 0),
        if(dhcp_msg_type = "DHCPREQUEST", arrayindex(regextract(_raw_log, "\(([^\)]+)\)$"), 0))),
    target_network = arrayindex(regextract(_raw_log, "network\s+((?:\d{1,3}\.){3}\d{1,3}\/\d+)"), 0), 
    transaction_id = arrayindex(regextract(_raw_log, "TransID\s+(\w+)"), 0)
| alter // XDM mapping 
    xdm.alert.severity = syslog_severity,
    xdm.event.description = syslog_msg,
    xdm.event.log_level = if(syslog_severity = "0", XDM_CONST.LOG_LEVEL_EMERGENCY, syslog_severity = "1", XDM_CONST.LOG_LEVEL_ALERT, syslog_severity = "2", XDM_CONST.LOG_LEVEL_CRITICAL, syslog_severity = "3", XDM_CONST.LOG_LEVEL_ERROR, syslog_severity = "4", XDM_CONST.LOG_LEVEL_WARNING, syslog_severity = "5", XDM_CONST.LOG_LEVEL_NOTICE, syslog_severity = "6", XDM_CONST.LOG_LEVEL_INFORMATIONAL, syslog_severity = "7", XDM_CONST.LOG_LEVEL_DEBUG, syslog_severity),
    xdm.event.operation_sub_type = if(msg_suffix = "RENEW", msg_suffix),
    xdm.event.outcome = if(dhcp_msg_type in ("DHCPACK", "DHCPLEASEQUERYDONE"), XDM_CONST.OUTCOME_SUCCESS, dhcp_msg_type in ("DHCPDECLINE", "DHCPNAK", "DHCPLEASEUNKNOWN") or msg_suffix ~= "failed|abandoned", XDM_CONST.OUTCOME_FAILED),
    xdm.event.outcome_reason = if(msg_suffix != "RENEW", msg_suffix),
    xdm.event.type = "DHCP",
    xdm.intermediate.ipv4 = dhcp_relay_agent_ip,
    xdm.network.application_protocol = application_protocol,
    xdm.network.dhcp.chaddr = dhcp_client_mac_address,
    xdm.network.dhcp.ciaddr = coalesce(dhcp_client_ip, dhcp_expired_lease_ip, if(is_renewal, dhcp_requested_ip)),
    xdm.network.dhcp.client_hostname = dhcp_client_hostname,
    xdm.network.dhcp.giaddr = dhcp_relay_agent_ip,
    xdm.network.dhcp.lease = to_integer(dhcp_lease_duration),
    xdm.network.dhcp.message_type = if(dhcp_msg_type = "DHCPDISCOVER", XDM_CONST.DHCP_MESSAGE_TYPE_DHCPDISCOVER, dhcp_msg_type = "DHCPOFFER", XDM_CONST.DHCP_MESSAGE_TYPE_DHCPOFFER, dhcp_msg_type = "DHCPREQUEST", XDM_CONST.DHCP_MESSAGE_TYPE_DHCPREQUEST, dhcp_msg_type = "DHCPDECLINE", XDM_CONST.DHCP_MESSAGE_TYPE_DHCPDECLINE, dhcp_msg_type = "DHCPACK", XDM_CONST.DHCP_MESSAGE_TYPE_DHCPACK, dhcp_msg_type = "DHCPNAK", XDM_CONST.DHCP_MESSAGE_TYPE_DHCPNAK, dhcp_msg_type = "DHCPRELEASE", XDM_CONST.DHCP_MESSAGE_TYPE_DHCPRELEASE, dhcp_msg_type = "DHCPINFORM", XDM_CONST.DHCP_MESSAGE_TYPE_DHCPINFORM, dhcp_msg_type = "DHCPFORCERENEW", XDM_CONST.DHCP_MESSAGE_TYPE_DHCPFORCERENEW, dhcp_msg_type = "DHCPLEASEQUERY", XDM_CONST.DHCP_MESSAGE_TYPE_DHCPLEASEQUERY, dhcp_msg_type = "DHCPLEASEUNASSIGNED", XDM_CONST.DHCP_MESSAGE_TYPE_DHCPLEASEUNASSIGNED, dhcp_msg_type = "DHCPLEASEUNKNOWN", XDM_CONST.DHCP_MESSAGE_TYPE_DHCPLEASEUNKNOWN, dhcp_msg_type = "DHCPLEASEACTIVE", XDM_CONST.DHCP_MESSAGE_TYPE_DHCPLEASEACTIVE, dhcp_msg_type = "DHCPBULKLEASEQUERY", XDM_CONST.DHCP_MESSAGE_TYPE_DHCPBULKLEASEQUERY, dhcp_msg_type = "DHCPLEASEQUERYDONE", XDM_CONST.DHCP_MESSAGE_TYPE_DHCPLEASEQUERYDONE, dhcp_msg_type = "DHCPACTIVELEASEQUERY", XDM_CONST.DHCP_MESSAGE_TYPE_DHCPACTIVELEASEQUERY, dhcp_msg_type = "DHCPLEASEQUERYSTATUS", XDM_CONST.DHCP_MESSAGE_TYPE_DHCPLEASEQUERYSTATUS, dhcp_msg_type = "DHCPTLS", XDM_CONST.DHCP_MESSAGE_TYPE_DHCPTLS, dhcp_msg_type),
    xdm.network.dhcp.requested_address = dhcp_requested_ip,
    xdm.network.dhcp.siaddr = dhcp_bootstrap_server_ip,
    xdm.network.dhcp.yiaddr = coalesce(dhcp_offered_ip, dhcp_acknowledged_ip, dhcp_not_acknowledged_ip),
    xdm.network.protocol_layers = arraycreate(application_protocol),
    xdm.session_context_id = transaction_id,
    xdm.source.host.device_id = dhcp_client_uid,
    xdm.source.host.mac_addresses = arraycreate(dhcp_client_mac_address),
    xdm.source.interface = dhcp_client_interface,
    xdm.source.ipv4 = coalesce(dhcp_client_ip, dhcp_expired_lease_ip), 
    xdm.source.process.name = syslog_process_name,
    xdm.source.process.pid = to_integer(syslog_process_id),
    xdm.target.ipv4 = dhcp_bootstrap_server_ip,
    xdm.target.subnet = target_network;

/***************/
// Audit Events /
/***************/
filter _raw_log ~= "httpd(?:\[\d+\])?:"
| alter // Extract syslog headers & syslog message 
    syslog_process_id = arrayindex(regextract(_raw_log, "\s\w+\[(\d+)\]"), 0),
    syslog_process_name = arrayindex(regextract(_raw_log, "\s(\w+)\[\d+\]"), 0),
    syslog_priority = to_integer(arrayindex(regextract(_raw_log, "^\<(\d{1,3})\>\s*\w+"), 0)),
    syslog_msg = coalesce( 
        arrayindex(regextract(_raw_log, "\w+\[\d+\]:\s*(.+)"), 0), // messages that are sent directly from infoblox 
        arrayindex(regextract(_raw_log, "^\<\d+\>\w?\s+(?:\S+\s+){6}(.+)"), 0)) // messages that are downloaded to a file and sent via an intermediate syslog client 
| alter syslog_facility_code = floor(divide(syslog_priority, 8))
| alter syslog_severity = to_string(subtract(syslog_priority, multiply(syslog_facility_code, 8)))
| alter // Extract audit data from the syslog message 
    auth_methods = arrayindex(regextract(_raw_log, "auth=(.*?)\s"), 0),
    client_ipv4 = arrayindex(regextract(_raw_log, "ip=(.*?)\s"), 0),
    client_user_groups = arrayindex(regextract(_raw_log, "group=(.*?)\s"), 0),
    client_user_username = arrayindex(regextract(_raw_log, "\s\[(.*?)\]\:"), 0),
    original_event_type = arrayindex(regextract(_raw_log, ":\s.*?:\s(.*?)\s-\s-"), 0),
    server_process_name = arrayindex(regextract(_raw_log, "to=(.*?)\s"), 0)
| alter // XDM mapping
    xdm.alert.severity = syslog_severity,
    xdm.auth.auth_method = auth_methods,
    xdm.event.description = syslog_msg,
    xdm.event.log_level = if(syslog_severity = "0", XDM_CONST.LOG_LEVEL_EMERGENCY, syslog_severity = "1", XDM_CONST.LOG_LEVEL_ALERT, syslog_severity = "2", XDM_CONST.LOG_LEVEL_CRITICAL, syslog_severity = "3", XDM_CONST.LOG_LEVEL_ERROR, syslog_severity = "4", XDM_CONST.LOG_LEVEL_WARNING, syslog_severity = "5", XDM_CONST.LOG_LEVEL_NOTICE, syslog_severity = "6", XDM_CONST.LOG_LEVEL_INFORMATIONAL, syslog_severity = "7", XDM_CONST.LOG_LEVEL_DEBUG, syslog_severity),
    xdm.event.original_event_type = original_event_type,
    xdm.event.type = "AUDIT",
    xdm.intermediate.process.name = server_process_name,
    xdm.source.ipv4 = client_ipv4,
    xdm.source.process.name = syslog_process_name,
    xdm.source.process.pid = to_integer(syslog_process_id),
    xdm.source.user.groups = arraycreate(client_user_groups),
    xdm.source.user.username = client_user_username;

/**************************/
// Fallback Mapping Events /
/**************************/
// General implicit fallback mapping for all other Infoblox events
filter // Exclude event types which are already mapped 
    _raw_log !~= "httpd\[\d+\]" // NOT Audit 
    and _raw_log !~= "client\s+(?:\@0x[\da-fA-F]+\s+)?[\da-fA-F\.\:]+\#\d{1,5}(?:\s+\([^\)]+\))?:\s+query" // NOT DNS Query
    and _raw_log !~= "(?:UDP|TCP):\s*query:\s*(?:\S+\s+){3}response:" // NOT DNS Response
    and _raw_log !~= "(?:dhcpd|omshell|dhcrelay|dhclient)\[\d+\]" and _raw_log ~= "DHCP\w+" // NOT DHCP
| alter // Extract syslog headers & syslog message 
    syslog_process_id = arrayindex(regextract(_raw_log, "\s\w+\[(\d+)\]"), 0),
    syslog_process_name = arrayindex(regextract(_raw_log, "\s(\w+)\[\d+\]"), 0),
    syslog_priority = to_integer(arrayindex(regextract(_raw_log, "^\<(\d{1,3})\>\s*\w+"), 0)),
    syslog_msg = coalesce( 
        arrayindex(regextract(_raw_log, "\w+\[\d+\]:\s*(.+)"), 0), // messages that are sent directly from infoblox 
        arrayindex(regextract(_raw_log, "^\<\d+\>\w?\s+(?:\S+\s+){6}(.+)"), 0)) // messages that are downloaded to a file and sent via an intermediate syslog client 
| alter syslog_facility_code = floor(divide(syslog_priority, 8))
| alter syslog_severity = to_string(subtract(syslog_priority, multiply(syslog_facility_code, 8)))
| alter // Extract additional fields from the syslog message 
    dns_event_type = if(_raw_log ~= "named\[\d+\]" or _raw_log ~= "(?:client|config|database|dnssec|general|lame_servers|network|notify|query|queries|query[_\-]rewrite|resolver|responses|rpz|security|update|update_security|xfer[_\-]in|xfer[_\-]out):", "DNS"),
    dns_event_subtype = arrayindex(regextract(_raw_log, "((?:client|config|database|dnssec|general|lame_servers|network|notify|query|queries|query[_\-]rewrite|resolver|responses|rpz|security|update|update_security|xfer[_\-]in|xfer[_\-]out)):"), 0),
    dnz_respone_policy_zone = coalesce(arrayindex(regextract(_raw_log, "rpz:\s+([\w\-\.]+)\:"), 0), arrayindex(regextract(_raw_log, "policy zone\s+\'([^']+)\'"), 0)), 
    resolved_domain = arrayindex(regextract(_raw_log, "resolving \'([\w\.\-]+)"), 0)
| alter event_type = if(dns_event_type != null and dns_event_subtype != null, concat(dns_event_type, " ", dns_event_subtype))
| alter // XDM Mapping
    xdm.alert.severity = syslog_severity,
    xdm.event.description = syslog_msg,
    xdm.event.log_level = if(syslog_severity = "0", XDM_CONST.LOG_LEVEL_EMERGENCY, syslog_severity = "1", XDM_CONST.LOG_LEVEL_ALERT, syslog_severity = "2", XDM_CONST.LOG_LEVEL_CRITICAL, syslog_severity = "3", XDM_CONST.LOG_LEVEL_ERROR, syslog_severity = "4", XDM_CONST.LOG_LEVEL_WARNING, syslog_severity = "5", XDM_CONST.LOG_LEVEL_NOTICE, syslog_severity = "6", XDM_CONST.LOG_LEVEL_INFORMATIONAL, syslog_severity = "7", XDM_CONST.LOG_LEVEL_DEBUG, syslog_severity),
    xdm.event.outcome = if(syslog_msg ~= "success", XDM_CONST.OUTCOME_SUCCESS),
    xdm.event.type = coalesce(event_type, dns_event_type),
    xdm.network.dns.dns_question.name = resolved_domain,
    xdm.network.dns.dns_resource_record.name = resolved_domain,
    xdm.source.process.name = syslog_process_name,
    xdm.source.process.pid = to_integer(syslog_process_id),
    xdm.target.zone = dnz_respone_policy_zone;



[MODEL: dataset = "cisco_esa_raw", content_id="IronPort"]
alter suspected_domain = arrayindex(regextract(_raw_log ,"Suspected\sDomain\(s\)\s\:\s(\S+)"),0),
    threat_category = arrayindex(regextract(_raw_log ,"Threat Category\:\s([^\,]+)\,"),0)
| alter level = arrayindex(regextract(_raw_log ,"\d+\:\d+\:\d+\s[\w\_]+\:\s([A-Za-z]+)\:"),0),
    message = arrayindex(regextract(_raw_log ,"\d+\:\d+\:\d+\s[\w\_]+\:\s[A-Za-z]+\:\s+(.*)"),0),
    mid = arrayindex(regextract(_raw_log ,"\sMID\s(\d+)"),0),
    icid = arrayindex(regextract(_raw_log , "\sICID\s(\d+)"),0),
    src_ip = arrayindex(regextract(_raw_log ,"address\s(\d+\.\d+\.\d+\.\d+)\s"),0),
    dns_host1 = arrayindex(regextract(_raw_log ,"dns\shost\s([\w\.0-9\-\_\@]+)\s"),0),
    dns_host2 = arrayindex(regextract(_raw_log ,"DNS\shost\:\s([^\,]+)\,"),0),
    dns_host3 = arrayindex(regextract(_raw_log ,"to\sIP\s\d+\.\d+\.\d+\.\d+\slooking\sup\s(\S+)"),0),
    send_bytes = arrayindex(regextract(_raw_log ,"(\d+)\sbytes\sin"),0),
    duration1 = to_integer(multiply(to_float(arrayindex(regextract(_raw_log ,"\d+\sbytes\sin\s(\d+\.*\d*)"),0)),1000)),
    duration2 = to_integer(multiply(to_float(arrayindex(regextract(_raw_log ,"total\sseconds\s\=\s(\d*\.*\d+)"),0)),1000)),
    dst_user_upn1 = arrayindex(regextract(_raw_log ,"\'to\'\,[^\<]+\<([^\>]+)\>"),0),
    dst_user_upn2 = arrayindex(regextract(_raw_log ,"To\:\s\<([^\>]+)\>"),0),
    dst_user_upn3 = arrayindex(regextract(_raw_log ,"to[^\<]+\<([^\>]+)\>"),0),
    src_user_upn1 = arrayindex(regextract(_raw_log ,"from[^\<]+\<([^\>]+)\>"),0),
    src_user_upn2 = arrayindex(regextract(_raw_log ,"mailfrom\sidentity\s(\S+)\s"),0),
    file_name = arrayindex(regextract(_raw_log ,"attachment\s\'([^\']+)\'"),0),
    target_interface1 = arrayindex(regextract(_raw_log ,"interface\s(\d+\.\d+\.\d+\.\d+)\s"),0),
    target_interface2 = arrayindex(regextract(_raw_log ,"interface\sData\s\d+\s\((\d+\.\d+\.\d+\.\d+)\)"),0),
    dst_ip1 = arrayindex(regextract(_raw_log ,"address\s(\d+\.\d+\.\d+\.\d+)\s"),0),
    dst_ip2 = arrayindex(regextract(_raw_log , "recipient\slogging\s\((\d+\.\d+\.\d+\.\d+)\)"),0),
    dst_ip3 = arrayindex(regextract(_raw_log , "to\sIP\s(\d+\.\d+\.\d+\.\d+)\s"),0),
    dst_ip4 = arrayindex(regextract(_raw_log , "\sIP\:\s(\d+\.\d+\.\d+\.\d+)\s"),0),
    dst_port = arrayindex(regextract(_raw_log ,"port\:*\s(\d+)"),0),
    threat_category = if(threat_category = "N/A",null,threat_category),
    suspected_domain = if(suspected_domain = "N/A",null,suspected_domain),
    target_domain = arrayindex(regextract(_raw_log ,"domain\:\s(\S+)"),0),
    dst_url1 = arrayindex(regextract(_raw_log ,"URL\s(http\S+)\s"),0),
    dst_url2 = arrayindex(regextract(_raw_log ,"has\sbeen\sexpanded\sto\s(http\S+)"),0),
    operation = arrayindex(regextract(_raw_log , "\:\s[A-Z]+\s\d+\s([a-z\s]+)$"),0),
    cipher = arrayindex(regextract(_raw_log ,"cipher\s([A-Za-z0-9\-]+)"),0),
    country = arrayindex(regextract(_raw_log ,"country\s(\w+)\s*$"),0),
    subject = arrayindex(regextract(_raw_log ,"Subject\s\"([^\"]+)\""),0),
    dns_response_code = arrayindex(regextract(_raw_log ,"rcode\=([\w]+)"),0)
| alter dst_user_upn = coalesce(dst_user_upn1 ,dst_user_upn2, dst_user_upn3),
    src_user_upn  = coalesce(src_user_upn1 , src_user_upn2),
    target_interface = coalesce(target_interface1, target_interface2 ),
    dst_ip = coalesce(dst_ip1 , dst_ip2, dst_ip3,dst_ip4),
    dst_url = coalesce(dst_url1, dst_url2),
    duration = coalesce(duration1,duration2)
| alter target_user_domain = arrayindex(regextract(dst_user_upn,"\@(.*)"),0),
    src_user_domain = arrayindex(regextract(src_user_upn,"\@(.*)"),0)
| alter xdm.email.message_id = mid, // Message ID
    xdm.network.session_id = icid, // Injection Connection ID
    xdm.source.ipv4 = src_ip,
    xdm.target.ipv4 = dst_ip,
    xdm.target.host.hostname = coalesce(dns_host1,dns_host2,dns_host3),
    xdm.source.sent_bytes = to_integer(send_bytes),
    xdm.target.port = to_integer(dst_port),
    xdm.event.duration = duration,
    xdm.source.user.username = src_user_upn,
    xdm.target.user.username = dst_user_upn,
    xdm.source.user.upn = src_user_upn,
    xdm.target.user.upn = dst_user_upn,
    xdm.target.zone = target_interface,
    xdm.target.interface = target_interface,
    xdm.target.user.domain = coalesce(target_domain,suspected_domain,target_user_domain),
    xdm.source.user.domain = src_user_domain,
    xdm.target.url = dst_url,
    xdm.network.http.url = dst_url,
    xdm.event.operation_sub_type = operation,
    xdm.network.tls.cipher = cipher,
    xdm.target.location.country = country,
    xdm.email.subject = subject,
    xdm.event.log_level = level,
    xdm.event.description = message,
    xdm.target.file.filename = file_name,
    xdm.alert.category = threat_category,
    xdm.network.dns.response_code = if(dns_response_code = "ServerFail",XDM_CONST.DNS_RESPONSE_CODE_SERVER_FAILURE , dns_response_code = "NoError",XDM_CONST.DNS_RESPONSE_CODE_NO_ERROR, dns_response_code = "FormErr",XDM_CONST.DNS_RESPONSE_CODE_FORMAT_ERROR, dns_response_code = "NxDomain",XDM_CONST.DNS_RESPONSE_CODE_NON_EXISTENT_DOMAIN, dns_response_code = "NoTimp",XDM_CONST.DNS_RESPONSE_CODE_NOT_IMPLEMENTED , dns_response_code = "Refused",XDM_CONST.DNS_RESPONSE_CODE_QUERY_REFUSED, dns_response_code = "YxDomain" ,XDM_CONST.DNS_RESPONSE_CODE_NAME_EXISTS_WHEN_IT_SHOULD_NOT , dns_response_code ="XrRset" ,XDM_CONST.DNS_RESPONSE_CODE_RR_SET_THAT_SHOULD_EXIST_DOES_NOT, dns_response_code = "NotAuth", XDM_CONST.DNS_RESPONSE_CODE_SERVER_NOT_AUTHORITATIVE_FOR_ZONE , dns_response_code = "NotZone" , XDM_CONST.DNS_RESPONSE_CODE_NAME_NOT_CONTAINED_IN_ZONE ,to_string(dns_response_code));


[MODEL: dataset="ivanti_connect_secure_raw", content_id="IvantiConnectSecure"]
alter
    syslog_priority = to_integer(arrayindex(regextract(_raw_log, "^\<(\d{1,3})\>\d+"), 0)),
    syslog_header = regextract(arrayindex(regextract(_raw_log, "(^\<\d{1,3}\>\d+\s+\S+\s+\S+\s+\S+\:\s+\S+\s+\S+\s+.+?)\s+\d{4}\-\d{2}\-\d{2}\s\d{2}\:\d{2}\:\d{2}\s*\-"), 0) , "(\S+)"),
    syslog_structured_data = arrayindex(regextract(_raw_log, "^\<\d{1,3}\>\d+\s+\S+\s+\S+\s+\S+\:\s+\S+\s+\S+\s+(.+?)\s+\d{4}\-\d{2}\-\d{2}\s\d{2}\:\d{2}\:\d{2}\s*\-"), 0),
    syslog_msg = arrayindex(regextract(_raw_log, "^\<\d{1,3}\>\d+\s+\S+\s+\S+\s+\S+\:\s+\S+\s+\S+\s+.+?\s+(\d{4}\-\d{2}\-\d{2}\s\d{2}\:\d{2}\:\d{2}\s*\-.+)"), 0)
| alter 
    syslog_facility = floor(divide(syslog_priority, 8)),
    //syslog_timestamp = arrayindex(syslog_header, 1),
    syslog_hostname = arrayindex(syslog_header, 2),
    syslog_app_name = rtrim(arrayindex(syslog_header, 3), ":"),
    syslog_process_id = arrayindex(syslog_header, 4),
    syslog_msg_id = arrayindex(syslog_header, 5),
    syslog_structured_data_segments = regextract(syslog_structured_data, "\[([^\]]+)\]"),
    msg_node = arrayindex(regextract(syslog_msg, "^\S+\s+\S+\s+\-\s+(\S+)"), 0),
    msg_ip = arrayindex(regextract(syslog_msg, "\[([a-fA-F\d\.\:]+)\]"), 0),
    msg_user1 = arrayindex(regextract(syslog_msg, "\]\s+Default\s*Network\:+([^\(]+)"), 0),
    msg_user2 = arrayindex(regextract(syslog_msg, "\]\s+([^\(]+)"), 0),
    msg_realm = arrayindex(regextract(syslog_msg, "\(([^\)]+)"), 0),
    msg_roles_str = arrayindex(regextract(syslog_msg, "\)\[([^\]]+)"), 0),
    msg_event_id = arrayindex(regextract(syslog_msg, "\].+?\]\s+([\w\-]+)\s+.+$"), 0),
    msg_payload = arrayindex(regextract(syslog_msg, "\].+?\]\s+[\w\-]+\s+(.+$)"), 0)
| alter
    syslog_severity = subtract(syslog_priority, multiply(syslog_facility, 8)),
    full_user_name = coalesce(msg_user1, msg_user2),
    event_id = if(msg_event_id != null and msg_event_id != "-", msg_event_id, syslog_msg_id != null and syslog_msg_id != "-", syslog_msg_id, null),
    // msg_roles = regextract(msg_roles_str, "([^,]+)"),
    msg_roles = arraymap(regextract(msg_roles_str, "([^,]+)"), ltrim("@element")),
    event_name1 = arrayindex(regextract(msg_payload, "^(.+?)\s+\\\\"), 0),
    event_name2 = arrayindex(regextract(msg_payload, "^([^\']+)\s+for\s+"), 0),
    event_name3 = arrayindex(regextract(msg_payload, "^([^\']+)\s+using"), 0),
    event_name4 = arrayindex(regextract(msg_payload, "^(.+?)\s+\'"), 0),
    event_name5 = arrayindex(regextract(msg_payload, "^(.+?)\:"), 0),
    event_name6 = arrayindex(regextract(msg_payload, "^(\S+\s*\S+\s*\S+)$"), 0),
    event_name_custom1 = if(msg_payload ~= "template.+is out of date", "Template is out of date", null),
    src_ipv4 = if(msg_ip ~= "\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}", msg_ip, null),
    src_ipv6 = if(msg_ip ~= "\:[a-fA-F\d]{1,3}", msg_ip, null),
    client_version = arrayindex(regextract(msg_payload, "from \S+ with [\w\-]+\/([\d\.]+\d)"), 0), 
    client_os = arrayindex(regextract(msg_payload, "from \S+ with [\w\-]+\/[\d\.]+\d\s+\(([^\)]+)\)"), 0), 
    session_id = arrayindex(regextract(msg_payload, "session:(\w+)"), 0), 
    reason = arrayindex(regextract(msg_payload, "Reason:\s*([\w\s\-]+)"), 0), 
    reason2 = arrayindex(regextract(msg_payload, "due to\s+(\S+)"), 0), 
    target_share_server = arrayindex(regextract(msg_payload, "\s*\\\\([a-fA-F\d\.\:]+)\\\S+\$"), 0),
    target_share_domain= arrayindex(regextract(msg_payload, "in wrkgrp\/domain\s*(\S+)"), 0),
    error_code = arrayindex(regextract(msg_payload, "with error (\w+)"), 0)
| alter
    severity = to_string(syslog_severity),
    event_name = coalesce(event_name_custom1, event_name1, event_name2, event_name3, event_name4, event_name5, event_name6),
    user_name =  arrayindex(regextract(full_user_name, "[^\\]\\\s*(\S.+)"), 0),
    user_domain = arrayindex(regextract(full_user_name, "([^\\]+)\\\s*\S.+"), 0),
    dst_ipv4 = if(target_share_server ~= "\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}", target_share_server, null),
    dst_ipv6 = if(target_share_server ~= "\:[a-fA-F\d]{1,3}", target_share_server, null),
    os = lowercase(client_os)
| alter 
    dst_hostname = if(dst_ipv4 = null and dst_ipv6 = null, target_share_server, null)
| alter 
    xdm.observer.name = syslog_hostname, 
    xdm.observer.version = client_version,
    xdm.observer.action = event_name,
    xdm.intermediate.host.device_id = msg_node,
    xdm.intermediate.host.hostname = syslog_hostname,
    xdm.intermediate.application.name = syslog_app_name,
    xdm.intermediate.process.identifier = if(syslog_process_id != "-", syslog_process_id, null),
    xdm.source.ipv4 = src_ipv4, 
    xdm.source.host.ipv4_addresses = arraycreate(src_ipv4),
    xdm.source.ipv6 = src_ipv6, 
    xdm.source.host.ipv6_addresses = arraycreate(src_ipv6),
    xdm.source.user.username = full_user_name, 
    xdm.source.user.upn = coalesce(user_name, full_user_name), 
    xdm.source.user.domain = user_domain, 
    xdm.source.user.groups = msg_roles,
    xdm.source.agent.version = client_version, 
    xdm.source.host.os = client_os, 
    xdm.source.host.os_family = if(os contains "windows", XDM_CONST.OS_FAMILY_WINDOWS, os contains "mac", XDM_CONST.OS_FAMILY_MACOS, os contains "linux", XDM_CONST.OS_FAMILY_LINUX, os contains "android", XDM_CONST.OS_FAMILY_ANDROID, os contains "ios", XDM_CONST.OS_FAMILY_IOS, os contains "ubuntu", XDM_CONST.OS_FAMILY_UBUNTU, os contains "debian", XDM_CONST.OS_FAMILY_DEBIAN, os contains "fedora", XDM_CONST.OS_FAMILY_FEDORA, os contains "centos", XDM_CONST.OS_FAMILY_CENTOS, os contains "chrome", XDM_CONST.OS_FAMILY_CHROMEOS, os contains "solaris", XDM_CONST.OS_FAMILY_SOLARIS, os contains "scada", XDM_CONST.OS_FAMILY_SCADA, to_string(client_os)),
    xdm.target.ipv4 = dst_ipv4, 
    xdm.target.host.ipv4_addresses = if(dst_ipv4 != null, arraycreate(dst_ipv4), null), 
    xdm.target.ipv6 = dst_ipv6, 
    xdm.target.host.ipv6_addresses = if(dst_ipv4 != null, arraycreate(dst_ipv6), null), 
    xdm.target.host.hostname = dst_hostname,
    xdm.target.domain = coalesce(target_share_domain, msg_realm),
    xdm.event.description = msg_payload,
    xdm.event.type = null, // System, User Access, Admin Access, Sensors & Client Logs; 
    xdm.event.id = event_id,
    xdm.event.tags = arrayconcat(if(msg_payload ~= "[Ll]ogin|[Aa]uthentication", arraycreate(XDM_CONST.EVENT_TAG_AUTHENTICATION), null), syslog_structured_data_segments), 
    xdm.event.outcome = if(msg_payload ~= "succeeded|successful", XDM_CONST.OUTCOME_SUCCESS,  msg_payload ~= "[Ff]ailed|[Rr]ejected", XDM_CONST.OUTCOME_FAILED, null),
    xdm.event.outcome_reason  = coalesce(reason, reason2, error_code), 
    xdm.event.log_level = if(severity = "0", XDM_CONST.LOG_LEVEL_EMERGENCY , severity = "1", XDM_CONST.LOG_LEVEL_ALERT , severity = "2", XDM_CONST.LOG_LEVEL_CRITICAL, severity = "3", XDM_CONST.LOG_LEVEL_ERROR, severity = "4", XDM_CONST.LOG_LEVEL_WARNING, severity = "5", XDM_CONST.LOG_LEVEL_NOTICE, severity = "6", XDM_CONST.LOG_LEVEL_INFORMATIONAL, severity = "7", XDM_CONST.LOG_LEVEL_DEBUG, severity),
    xdm.alert.severity = severity, 
    xdm.network.session_id = session_id,
    xdm.session_context_id = session_id;
/* END of Ivanti (Pulse) Connect Secure (Remote Access VPN) */


[MODEL: dataset=atlassian_jira_raw, content_id="Jira"]
alter

	jira_status_change = json_extract_scalar(changedValues, "$.changedTo")

| alter

	xdm.event.operation = summary,

	xdm.source.ipv4 = remoteAddress,

	xdm.source.user.username = authorKey,

	xdm.source.user.identifier = authorAccountId,

	xdm.event.operation_sub_type = category,

	xdm.target.user.identifier = json_extract_scalar(objectItem, "$.id"),

	xdm.target.user.username = json_extract_scalar(objectItem, "$.name"),

	xdm.target.resource.type = json_extract_scalar(objectItem, "$.typeName"),

	xdm.event.outcome = if(jira_status_change != null, XDM_CONST.OUTCOME_SUCCESS, jira_status_change = null, null),

	xdm.event.outcome_reason = jira_status_change;


[MODEL: dataset="knowbe4_kmsat_raw", content_id="KnowBe4_KMSAT"]
alter xdm.alert.severity=json_extract_scalar(risk, "$.level"),
xdm.source.user.identifier=json_extract(user, "$.id"),
xdm.target.resource.id=external_id,
xdm.alert.original_alert_id=json_extract(event_type, "$.id"),
xdm.alert.name=event_type -> name,
xdm.alert.description=event_type -> description,
xdm.target.resource.parent_id=to_string(account_id),
xdm.event.description=description,
xdm.source.cloud.project=source,
xdm.source.user.username=arrayindex(regextract(json_extract(user, "$.email"),"([\d\w\.]+)\@"),0);


[MODEL: dataset="linux_linux_raw", content_id="LinuxEventsCollection"]

/*  authentications logs 
    models logs from /var/log/auth.log, /var/log/secure files
    and syslog logs which origin from security/authorization messages & log audit facilities. */ 
alter syslog_priority = to_integer(arrayindex(regextract(_raw_log, "^\<(\d{1,3})\>\w+"), 0))
| alter syslog_facility = floor(divide(syslog_priority, 8))

| filter _log_source_file_name in("auth*", "secure") or syslog_facility in(4, 10, 13)
| alter // extract constant headers and event_description   
    hostname = arrayindex(regextract(_raw_log, "\d{2}\S\d{2}\S\d{2}\s+(\S+)"), 0),
    process_name = arrayindex(regextract(_raw_log, "\d+\:\d+\:\d+\s\S+\s+([\%\w\-]+)"), 0),
    pid = to_integer(arrayindex(regextract(_raw_log, "\d{2}\S\d{2}\S\d{2}\s+\S+\s\S+\[(\d+)\]"), 0)),
    event_description = to_string(arrayindex(regextract(_raw_log, "\d{2}\S\d{2}\S\d{2}\s+\S+\s+[^\:]+\:\s*(.*)"), 0))
| alter // extract event-specific fields 
    src_ip = arrayindex(regextract(event_description,"(?:\s|rhost=)(\d{1,3}(?:\.\d{1,3}){3})"), 0),
    username = coalesce(arrayindex(regextract(event_description ,"(?i)\s+USER\=([\w\-\.]+)"), 0),
                        arrayindex(regextract(event_description ,"(?:authenticat\w+|invalid|illegal|for|by)\s+user\s+[\"\(]*([\w\-\.]+)"), 0),
                        arrayindex(regextract(event_description ,"for\s+([\w\-\.]+)\s+from"), 0)),
    logged_in_user = coalesce(arrayindex(regextract(event_description, "logname=(\S+)"), 0),
                              arrayindex(regextract(event_description, "([\w\-\.]+)\s*:\s+(?:TTY=|\d+\s+incorrect password attempt)"), 0),
                              arrayindex(regextract(event_description, "session opened for user \S+ by ([\w\-\.]+)"), 0)),
    remote_user = arrayindex(regextract(event_description, "ruser=(\S+)"), 0),
    command = coalesce(arrayindex(regextract(event_description ,"\[COMMAND\=([^\]]+)\]"), 0),
                       arrayindex(regextract(event_description ,"COMMAND=(.*)"), 0),
                       arrayindex(regextract(event_description ,"\s*\[[^\]]+\]:\s(.*)"), 0)),
    cwd = arrayindex(regextract(event_description ,"\scwd:(\S+)"), 0),
    pwd = arrayindex(regextract(event_description ,"PWD=(\S+)"), 0),
    filename = coalesce(arrayindex(regextract(event_description ,"\sfilename:([^]]+)"), 0),
                        arrayindex(regextract(event_description ,"read\S*\s+(\/\S+)"), 0)), // dnsmasq events
    uid = arrayindex(regextract(event_description ,"[^\-]uid[\:\=](\d+)"), 0),
    euid = arrayindex(regextract(event_description ,"euid=(\d+)"), 0),
    tty = coalesce(arrayindex(regextract(event_description ,"(?i)tty=([^\]\s]+)"), 0)),
    src_port = to_integer(coalesce(arrayindex(regextract(event_description ,"from\s+(?:\d{1,3}\.){3}\d{1,3}:(\d+)"), 0),
                                   arrayindex(regextract(event_description ,"(?:by|from|for|user\s+\S+)\s+\S*\s*port\s+(\d+)"), 0))),
    target_username = coalesce(arrayindex(regextract(event_description ,"password\s+changed\s+for\s+([\w\-\.]+)"), 0), // passwd events
                               arrayindex(regextract(event_description ,"changed\s+password\s+expiry\s+for\s+([\w\-\.]+)"), 0), //chage events 
                               if(process_name = "useradd", arrayindex(regextract(event_description, "name=([^,]+)"), 0))), // useradd events
    target_uid = if(process_name = "useradd", arrayindex(regextract(event_description, "UID=(\d+)"), 0)),
    target_group_id = if(process_name ~= "useradd|groupadd", arrayindex(regextract(event_description, "GID=(\d+)"), 0)),
    target_group_name = if(process_name = "groupadd", arrayindex(regextract(event_description, "name=(\w+)"), 0)),
    target_ip =  arrayindex(regextract(event_description ,"((?:\d{1,3}\.){3}\d{1,3})\#\d+"), 0),
    target_port = to_integer(coalesce(arrayindex(regextract(event_description ,"on\s+\S+\s+port\s+(\d+)"), 0),
                                      arrayindex(regextract(event_description ,"(?:\d{1,3}\.){3}\d{1,3}\#(\d+)"), 0))), // dnsmasq events
    target_service = arrayindex(regextract(event_description ,"service\s+(?:name=)\'([^\']+)"), 0), 
    target_process_name = arrayindex(regextract(event_description ,"process \d+ \(([^\)]+)"), 0), 
    target_pid = to_integer(coalesce(arrayindex(regextract(event_description, "pid=(\d+)"), 0),
                                     arrayindex(regextract(event_description, "process\s+(\d+)"), 0))),
    target_directory= if(process_name = "useradd", arrayindex(regextract(event_description, "home=([^,]+)"), 0)),
    sha256 = arrayindex(regextract(event_description ,"SHA256:(\S+)"), 0),
    session_id = coalesce(arrayindex(regextract(event_description ,"session\s+(\d+)"), 0),
                          arrayindex(regextract(event_description ,"\ssid[\:\=](\d+)"), 0)),
    operation = if(process_name ~= "useradd|groupadd", arrayindex(regextract(event_description, "([^:]+):"), 0)),
    sub_process = if(process_name = "systemd", arrayindex(regextract(event_description ,"([\w\.\-]+):"), 0)),
    authentication_protocol = arrayindex(regextract(event_description, "from \S+ port \d+ (\w+)"), 0),
    log_level = arrayindex(regextract(event_description, "^([a-zA-Z]+):"), 0)
| alter event_type =  if(event_description ~= "Accepted password", "Accepted password for user",
                           event_description ~= "received for user", "Auth status received for user",
                           event_description ~= "incorrect password attempts", "Incorrect password attempts",
                           event_description ~= "Connection closed by authenticating", "Connection closed by authenticating user",
                           event_description ~= "Connection closed by invalid", "Connection closed by invalid user",
                           event_description ~= "Connection closed", "Connection closed",
                           event_description ~= "Connection reset", "Connection reset", 
                           event_description ~= "Disconnected from authenticating", "Disconnected from authenticating user",
                           event_description ~= "Disconnected from \d{1,3}[\:\.]", "Disconnected from host",
                           event_description ~= "Disconnecting invalid user", "Disconnecting invalid user",
                           event_description ~= "Failed password", "Failed Password for invalid user",
                           event_description ~= "password check failed", "Password check failed for user",
                           event_description ~= "password changed for", "Password changed for user",
                           event_description ~= "PAM \d+ more authetication failure", "PAM authentication failure",
                           event_description ~= "PAM: User not known \w+", "PAM unknown user",
                           event_description ~= "Postponed keyboard-interactive for invalid user", "Postponed keyboard-interactive for invalid user",
                           event_description ~= "Postponed keyboard-interactive for \w+", "Postponed keyboard-interactive for user",
                           event_description ~= "maximum authentication attempts", "Maximum authentication attempts",
                           event_description ~= "Received disconnect from", "Received disconnect from host",
                           event_description ~= "Access denied for user", "Access denied for user",
                           event_description ~= "Timeout before authentication", "Timeout before authentication",
                           event_description ~= "input_userauth_request: invalid user", "input_userauth_request: invalid user",
                           event_description ~= "authentication failure", "Authentication failure",
                           event_description ~= "authentication success", "Authentication success",
                           event_description ~= "expired password for user", "Password expired for user",
                           event_description ~= "Server listening", "Server listening",
                           event_description ~= "session closed", "session closed",
                           event_description ~= "session opened", "session opened",
                           process_name)
| alter 
    outcome_reason = if(event_type IN ("Received disconnect from host", "Disconnecting invalid user"), arrayindex(regextract(event_description, "port\s+\S+\s+([^\[]+)"), 0), arrayindex(regextract(event_description, "received for user \S+:\s*\d+\s*\(([^\)]+)"), 0)),
    username = if(process_name in ("su", "sudo"), coalesce(logged_in_user, remote_user), coalesce(logged_in_user, remote_user, username)),
    target_username = if(process_name in("su", "sudo"), username, target_username),
    target_group = coalesce(target_group_name, target_group_id), 
    log_level = if(log_level ~= "debug|info|notice|warn|error|critical|alert|emergency|fatal", uppercase(log_level), null)
| alter
    xdm.source.host.hostname = hostname, 
    xdm.event.type = process_name, 
    xdm.event.original_event_type = if(event_type != process_name, concat(process_name, ": ", event_type), process_name),
    xdm.event.description = event_description,
    xdm.event.log_level = if(log_level ~= "DEBUG", XDM_CONST.LOG_LEVEL_DEBUG, log_level ~= "INFO", XDM_CONST.LOG_LEVEL_INFORMATIONAL, log_level ~= "NOTICE", XDM_CONST.LOG_LEVEL_NOTICE, log_level ~= "WARN", XDM_CONST.LOG_LEVEL_WARNING, log_level ~= "ERROR", XDM_CONST.LOG_LEVEL_ERROR, log_level ~= "CRITICAL", XDM_CONST.LOG_LEVEL_CRITICAL, log_level ~= "ALERT", XDM_CONST.LOG_LEVEL_ALERT, log_level ~= "EMERGENCY|FATAL", XDM_CONST.LOG_LEVEL_EMERGENCY),
    xdm.event.operation_sub_type = operation,
    xdm.event.outcome = if(event_description ~= "(?i)success|succeed|accepted|pass;", XDM_CONST.OUTCOME_SUCCESS, 
                           event_description ~= "(?i)fail|invalid|denied|illegal|incorrect|unknown|timeout|error|fatal|expired|refused|not met|user not known", XDM_CONST.OUTCOME_FAILED),
    xdm.event.outcome_reason = outcome_reason,
    xdm.network.application_protocol = authentication_protocol, 
    xdm.network.application_protocol_category = if(authentication_protocol ~= "ssh", "networking"), 
    xdm.network.application_protocol_subcategory = if(authentication_protocol ~= "ssh", "encrypted-tunnel"),
    xdm.network.session_id = session_id,
    xdm.source.application.name = sub_process, 
    xdm.source.ipv4 = src_ip,
    xdm.source.user.username = if(process_name in ("su", "sudo"), coalesce(logged_in_user, remote_user), coalesce(logged_in_user, remote_user, username)),
    xdm.source.process.name = process_name,
    xdm.source.process.pid = pid,
    xdm.source.process.executable.path = coalesce(cwd, pwd),
    xdm.source.user.identifier = uid,
    xdm.source.interface = tty,
    xdm.source.port = src_port, 
    xdm.source.process.executable.sha256 = sha256,
    xdm.target.ipv4 = target_ip,
    xdm.target.port = target_port,
    xdm.target.file.path = filename,
    xdm.target.file.directory = target_directory, 
    xdm.target.host.hostname = hostname,
    xdm.target.process.pid = target_pid,
    xdm.target.process.name = coalesce(target_process_name, target_service),
    xdm.target.process.command_line = command,
    xdm.target.user.identifier = coalesce(target_uid, euid),
    xdm.target.user.username = target_username,
    xdm.target.user.groups = if(target_group != null, arraycreate(target_group));

/*  general syslog & application messages logs 
    models all other log files which or not authentication logs or cron logs (e.g. modeling of /var/log/syslog, /var/log/messages, etc.) */ 
alter syslog_priority = to_integer(arrayindex(regextract(_raw_log, "^\<(\d{1,3})\>\w+"), 0))
| alter syslog_facility = floor(divide(syslog_priority, 8))
    | filter _log_source_file_name not in ("auth*", "secure", "cron") and syslog_facility not in (4, 9, 10, 13, 15)
| alter 
    get_hostname = to_string(arrayindex(regextract(_raw_log, "\d{2}\S\d{2}\S\d{2}\s+([^\s]+)"), 0)),
    get_process_name = to_string(arrayindex(regextract(_raw_log, "\d+\:\d+\:\d+\s\S+\s+([\%\w\-]+)"), 0)),
    get_tar_pid = to_integer(arrayindex(regextract(_raw_log, "\d{2}\S\d{2}\S\d{2}\s+[^\s]+\s[^\s]+\[(\d+)\]"),0)),
    get_src_pid = to_integer(arrayindex(regextract(_raw_log, "\[pid\s+(\d+)\]"),0)),
    get_event_description = arrayindex(regextract(_raw_log, "\d{2}\S\d{2}\S\d{2}\s+\S+\s+[^\:]+\:\s*(.*)"), 0),
    get_log_level = arrayindex(regextract(_raw_log ,"\:\s\<([a-zA-Z]+)\>"),0),
    get_user_name = arrayindex(regextract(_raw_log ,"\:\s\(([a-zA-Z]+)\)\sCMD"),0),
    get_command_line = arrayindex(regextract(_raw_log ,"\)\sCMD\s\(([^\)]+)\)"),0),
    get_error_file = if(_raw_log ~= "\[ERROR\]", arrayindex(regextract(_raw_log ,"File\s\"\"([^\"]+)\"\""),0), null),
    get_warning_username = if(_raw_log ~= "\[WARNING\]", replex(arrayindex(regextract(_raw_log ,"for user ([^\@]+)"),0), "'", ""), null),
    get_level_des = if(_raw_log ~= "level=", arrayindex(regextract(_raw_log ,"level=([^\s]+)"),0), null),
    get_msg_des = if(_raw_log ~= "level=", arrayindex(regextract(_raw_log ,"msg=[\"]+([^\"]+)"),0), null),
    get_info_url = if(_raw_log ~= "\[INFO\]", arrayindex(regextract(_raw_log ,"URL\:\s+([^\|]+)"),0), null),
    get_info_issuer = if(_raw_log ~= "\[INFO\]", arrayindex(regextract(_raw_log ,"SSL\:\s+ca\:\s+([^\|]+)"),0), null),
    get_info_certificate = if(_raw_log ~= "\[INFO\]", arrayindex(regextract(_raw_log ,"SSL\:[^\|]+\|[^\|]+\|certificate:(\s[^\|]+)"),0), null),
    get_src_ip1 = arrayindex(regextract(_raw_log ,"Source\s+(\d+\.\d+\.\d+\.\d+)\s+replaced\s+with\s+\d+\.\d+\.\d+\.\d+"),0),
    get_src_ip2 = arrayindex(regextract(_raw_log ,"source\s+\d+\.\d+\.\d+\.\d+\s+from\s+(\d+\.\d+\.\d+\.\d+)"),0),
    get_src_ip3 = arrayindex(regextract(_raw_log ,"\[(\d+\.\d+\.\d+\.\d+)\]\:\d+\-\>\[\d+\.\d+\.\d+\.\d+\]\:\d+"),0),
    get_src_ip4 = arrayindex(regextract(_raw_log ,"\[client\s+(\d+\.\d+\.\d+\.\d+)\:\d+\]"),0),
    get_src_ip5 = arrayindex(regextract(_raw_log ,"from\s+unknown\[([^\]]+)\]"),0),
    get_changed_ip = arrayindex(regextract(_raw_log ,"Source\s+\d+\.\d+\.\d+\.\d+\s+replaced\s+with\s+(\d+\.\d+\.\d+\.\d+)"),0),
    get_tar_ip1 = arrayindex(regextract(_raw_log ,"\[\d+\.\d+\.\d+\.\d+\]\:\d+\-\>\[(\d+\.\d+\.\d+\.\d+)\]\:\d+"),0),
    get_src_port1 = to_integer(arrayindex(regextract(_raw_log ,"\[\d+\.\d+\.\d+\.\d+\]\:(\d+)\-\>\[\d+\.\d+\.\d+\.\d+\]\:\d+"),0)),
    get_src_port2 = to_integer(arrayindex(regextract(_raw_log ,"\[client\s+\d+\.\d+\.\d+\.\d+\:(\d+)\]"),0)),
    get_tar_port1 = to_integer(arrayindex(regextract(_raw_log ,"\[\d+\.\d+\.\d+\.\d+\]\:\d+\-\>\[\d+\.\d+\.\d+\.\d+\]\:(\d+)"),0))
| alter
    xdm.event.log_level = if(_raw_log ~= "\[ERROR\]", XDM_CONST.LOG_LEVEL_ERROR, _raw_log ~= "\[WARNING\]", XDM_CONST.LOG_LEVEL_WARNING, _raw_log ~= "\[INFO\]", XDM_CONST.LOG_LEVEL_INFORMATIONAL, get_log_level = "error", XDM_CONST.LOG_LEVEL_ERROR, get_log_level = "warning", XDM_CONST.LOG_LEVEL_WARNING, get_log_level = "info", XDM_CONST.LOG_LEVEL_INFORMATIONAL, get_log_level = "debug", XDM_CONST.LOG_LEVEL_DEBUG, get_level_des ~= "error", XDM_CONST.LOG_LEVEL_ERROR, get_level_des ~= "warning", XDM_CONST.LOG_LEVEL_WARNING, get_level_des ~= "info", XDM_CONST.LOG_LEVEL_INFORMATIONAL),
    xdm.target.host.hostname = get_hostname,
    xdm.target.process.name = get_process_name,
    xdm.target.process.pid = get_tar_pid,
    xdm.event.type = get_process_name, 
    xdm.event.description = get_event_description,
    xdm.target.user.username = get_user_name,
    xdm.target.process.command_line = get_command_line,
    xdm.target.file.path = get_error_file,
    xdm.source.user.identifier = get_warning_username,
    xdm.alert.description = get_msg_des,
    xdm.target.url = get_info_url,
    xdm.network.tls.client_certificate.issuer = get_info_issuer,
    xdm.network.tls.client_certificate.subject = get_info_certificate,
    xdm.source.ipv4 = coalesce(get_src_ip1, get_src_ip2, get_src_ip3, get_src_ip4, get_src_ip5),
    xdm.target.ipv4 = coalesce(get_changed_ip, get_tar_ip1),
    xdm.source.port = coalesce(get_src_port1, get_src_port2),
    xdm.target.port = get_tar_port1,
    xdm.source.process.pid = get_src_pid;

/*  cron & scheduled jobs logs
    models logs from /var/log/cron and syslog logs which origin from clock daemon facility.  */ 
alter syslog_priority = to_integer(arrayindex(regextract(_raw_log, "^\<(\d{1,3})\>\w+"), 0))
| alter syslog_facility = floor(divide(syslog_priority, 8))
| filter _log_source_file_name = "cron" or syslog_facility in (9, 15)
| alter
    get_hostname = arrayindex(regextract(_raw_log, "\d{2}\S\d{2}\S\d{2}\s+([^\s]+)"), 0),
    get_process_name = arrayindex(regextract(_raw_log, "\d+\:\d+\:\d+\s\S+\s+([\%\w\-]+)"), 0),
    get_pid = to_integer(arrayindex(regextract(_raw_log, "\d{2}\S\d{2}\S\d{2}\s+[^\s]+\s[^\s]+\[(\d+)\]"),0)),
    get_event_description = arrayindex(regextract(_raw_log, "\d{2}\S\d{2}\S\d{2}\s+\S+\s+[^\:]+\:\s*(.*)"), 0),
    get_operation_sub = arrayindex(regextract(_raw_log, "\:\s+\(\S+\s+([[:upper:]]+)\s"),0)
| alter
    get_task = to_string(arrayindex(regextract(get_event_description, "^\s+\(([^\)]+)\)"),0)),
    get_info_des = if(get_operation_sub = "INFO", arrayindex(regextract(_raw_log, "\:\s+\(\S+\s+INFO\s+\(([^\)]+)\)"),0), null),
    get_mail_des = if(get_operation_sub = "MAIL", arrayindex(regextract(_raw_log, "\:\s+\(\S+\s+MAIL\s+\(([^\)]+)\)"),0), null),
    get_cmd_command = if(get_operation_sub = "CMD", arrayindex(regextract(_raw_log, "\:\s+\(\S+\s+CMD\s+(.*)"),0), null)
| alter
    xdm.event.log_level = if(get_operation_sub = "INFO", XDM_CONST.LOG_LEVEL_INFORMATIONAL, get_operation_sub = "ERROR", XDM_CONST.LOG_LEVEL_ERROR, get_operation_sub ~= "ALERT", XDM_CONST.LOG_LEVEL_ALERT, get_operation_sub ~= "CRIT", XDM_CONST.LOG_LEVEL_CRITICAL, get_operation_sub ~= "DEBUG", XDM_CONST.LOG_LEVEL_DEBUG, get_operation_sub ~= "EMERG", XDM_CONST.LOG_LEVEL_EMERGENCY, get_operation_sub ~= "NOTICE", XDM_CONST.LOG_LEVEL_NOTICE, get_operation_sub ~= "WARNI", XDM_CONST.LOG_LEVEL_WARNING),
    xdm.source.host.hostname = get_hostname,
    xdm.source.process.parent_id = get_process_name,
    xdm.event.type = get_process_name, 
    xdm.event.description = get_event_description,
    xdm.source.process.pid = get_pid,
    xdm.source.process.executable.file_type = get_task,
    xdm.event.operation_sub_type = get_operation_sub,
    xdm.alert.description = coalesce(get_info_des, get_mail_des),
    xdm.source.process.command_line = get_cmd_command;


[MODEL: dataset=microsoft_365_defender_raw, content_id="MicrosoftDefenderAdvancedThreatProtection"]
alter
    outcome_result = json_extract_scalar(evidence, "$.detectionStatus")
| alter
    //_time = parse_timestamp("%Y-%m-%dT%H:%M:%E*SZ", alertCreationTime),
    xdm.event.id = id,
    xdm.alert.original_alert_id = to_string(incidentId),
    xdm.alert.severity = severity,
    xdm.alert.category = category,
    xdm.alert.subcategory = threatFamilyName,
    xdm.alert.name = if(threatName = null, title, threatName),
    xdm.alert.description = description,
    xdm.target.host.device_id = machineId,
    xdm.target.host.fqdn = computerDnsName,
    xdm.alert.mitre_techniques = json_extract_array(mitreTechniques, "$."),
    xdm.target.file.sha256 = json_extract_scalar(evidence, "$.sha256"),
    xdm.target.file.filename = json_extract_scalar(evidence, "$.fileName"),
    xdm.target.file.path = json_extract_scalar(evidence, "$.filePath"),
    xdm.target.process.pid = to_integer(json_extract_scalar(evidence, "$.processId")),
    xdm.target.process.command_line = json_extract_scalar(evidence, "$.processCommandLine"),
    xdm.target.process.parent_id = json_extract_scalar(evidence, "$.parentProcessId"),
    xdm.target.host.ipv4_addresses = if(json_extract_scalar(evidence, "$.ipAddress") != null, arraycreate(json_extract_scalar(evidence, "$.ipAddress")), null),
    xdm.target.registry.key = json_extract_scalar(evidence, "$.registryKey"),
    xdm.target.registry.value_type = json_extract_scalar(evidence, "$.registryValueType"),
    xdm.target.registry.value = json_extract_scalar(evidence, "$.registryValue"),
    xdm.source.user.username = json_extract_scalar(evidence, "$.accountName"),
    xdm.source.user.domain = json_extract_scalar(evidence, "$.domainName"),
    xdm.source.user.identifier = json_extract_scalar(evidence, "$.userSid"),
    xdm.target.ipv4 = json_extract_scalar(evidence, "$.ipAddress"),
    xdm.event.outcome = if(outcome_result = "Detected", XDM_CONST.OUTCOME_FAILED, outcome_result = "Blocked", XDM_CONST.OUTCOME_SUCCESS, outcome_result = "Prevented", XDM_CONST.OUTCOME_PARTIAL, outcome_result = null, null, to_string(outcome_result));


[MODEL: dataset="microsoft_dns_raw", content_id="MicrosoftDNS"]
filter provider_name != "Microsoft-Windows-DNSServer" OR provider_name != "Microsoft-Windows-DNS-Server-Service"
// answer section part
| alter answerSec = arrayindex(regextract(_raw_log ,"ANSWER\sSECTION\:([^\:]+)AUTHORITY\sSECTION\:"),0)
| alter answerSec = replex(answerSec ,"\n","")
| alter answerType = arrayindex(regextract(answerSec ,"TYPE\s+([a-zA-Z]*)"),0),
    answerValue = arrayindex(regextract(answerSec ,"DATA\s+([\d\.]*)"),0)
//
| alter ResponseRequest = arrayindex(regextract(_raw_log,"(\s|R)\s"),7),
    Context = arrayindex(regextract(_raw_log,"PACKET\s+(\w+)\s"),0)
| alter xdm.source.port = if(sourcePort!="",to_integer(sourcePort),0),
    xdm.source.ipv4 = if(sourceIp not contains ":",coalesce(sourceIp,"")),
    xdm.source.ipv6 = if(sourceIp  contains ":",coalesce(sourceIp,"")),
    xdm.network.dns.response_code = if(responseCode="NOERROR",XDM_CONST.DNS_RESPONSE_CODE_NO_ERROR ,responseCode="FORMERR",XDM_CONST.DNS_RESPONSE_CODE_FORMAT_ERROR,responseCode="SERVFAIL",XDM_CONST.DNS_RESPONSE_CODE_SERVER_FAILURE,responseCode="NXDOMAIN",XDM_CONST.DNS_RESPONSE_CODE_NON_EXISTENT_DOMAIN,responseCode="NOTIMP",XDM_CONST.DNS_RESPONSE_CODE_NOT_IMPLEMENTED,responseCode="REFUSED",XDM_CONST.DNS_RESPONSE_CODE_QUERY_REFUSED,responseCode="YXDOMAIN",XDM_CONST.DNS_RESPONSE_CODE_NAME_EXISTS_WHEN_IT_SHOULD_NOT,responseCode="YXRRSET",XDM_CONST.DNS_RESPONSE_CODE_RR_SET_EXISTS_WHEN_IT_SHOULD_NOT,responseCode="NXRRSET",XDM_CONST.DNS_RESPONSE_CODE_RR_SET_THAT_SHOULD_EXIST_DOES_NOT,responseCode="NOTAUTH",XDM_CONST.DNS_RESPONSE_CODE_SERVER_NOT_AUTHORITATIVE_FOR_ZONE,responseCode="NOTZONE",XDM_CONST.DNS_RESPONSE_CODE_NAME_NOT_CONTAINED_IN_ZONE,responseCode="BADVERS",XDM_CONST.DNS_RESPONSE_CODE_BAD_OPT_VERSION,responseCode="BADSIG",XDM_CONST.DNS_RESPONSE_CODE_TSIG_SIGNATURE_FAILURE,responseCode="BADKEY",XDM_CONST.DNS_RESPONSE_CODE_KEY_NOT_RECOGNIZED,responseCode="BADTIME",XDM_CONST.DNS_RESPONSE_CODE_SIGNATURE_OUT_OF_TIME_WINDOW,responseCode="BADMODE",XDM_CONST.DNS_RESPONSE_CODE_BAD_TKEY_MODE,responseCode="BADNAME",XDM_CONST.DNS_RESPONSE_CODE_DUPLICATE_KEY_NAME,
responseCode="BADALG",XDM_CONST.DNS_RESPONSE_CODE_ALGORITHM_NOT_SUPPORTED,responseCode="BADTRUNC",XDM_CONST.DNS_RESPONSE_CODE_BAD_TRUNCATION, to_string(responseCode)),
    xdm.network.dns.dns_question.name = questionName,
    xdm.network.dns.dns_question.type = if(questionType="A",XDM_CONST.DNS_RECORD_TYPE_A, questionType="AAAA",XDM_CONST.DNS_RECORD_TYPE_AAAA, questionType="AFSDB",XDM_CONST.DNS_RECORD_TYPE_AFSDB, questionType="APL",XDM_CONST.DNS_RECORD_TYPE_APL, questionType="CAA",XDM_CONST.DNS_RECORD_TYPE_CAA, questionType="CDNSKEY",XDM_CONST.DNS_RECORD_TYPE_CDNSKEY, questionType="CDS",XDM_CONST.DNS_RECORD_TYPE_CDS, questionType="CERT",XDM_CONST.DNS_RECORD_TYPE_CERT, questionType="CNAME",XDM_CONST.DNS_RECORD_TYPE_CNAME, questionType="CSYNC",XDM_CONST.DNS_RECORD_TYPE_CSYNC, questionType="DHCID",XDM_CONST.DNS_RECORD_TYPE_DHCID, questionType="DLV",XDM_CONST.DNS_RECORD_TYPE_DLV, questionType="DNAME",XDM_CONST.DNS_RECORD_TYPE_DNAME, questionType="DNSKEY",XDM_CONST.DNS_RECORD_TYPE_DNSKEY, questionType="DS",XDM_CONST.DNS_RECORD_TYPE_DS, questionType="EUI48",XDM_CONST.DNS_RECORD_TYPE_EUI48, questionType="EUI64",XDM_CONST.DNS_RECORD_TYPE_EUI64, questionType="HINFO",XDM_CONST.DNS_RECORD_TYPE_HINFO, questionType="HIP",XDM_CONST.DNS_RECORD_TYPE_HIP, questionType="HTTPS",XDM_CONST.DNS_RECORD_TYPE_HTTPS, questionType="IPSECKEY",XDM_CONST.DNS_RECORD_TYPE_IPSECKEY, questionType="KEY",XDM_CONST.DNS_RECORD_TYPE_KEY, questionType="KX",XDM_CONST.DNS_RECORD_TYPE_KX, questionType="LOC",XDM_CONST.DNS_RECORD_TYPE_LOC, questionType="MX",XDM_CONST.DNS_RECORD_TYPE_MX, questionType="NAPTR",XDM_CONST.DNS_RECORD_TYPE_NAPTR, questionType="NS",XDM_CONST.DNS_RECORD_TYPE_NS, questionType="NSEC",XDM_CONST.DNS_RECORD_TYPE_NSEC, questionType="NSEC3",XDM_CONST.DNS_RECORD_TYPE_NSEC3, questionType="NSEC3PARAM",XDM_CONST.DNS_RECORD_TYPE_NSEC3PARAM, questionType="OPENPGPKEY",XDM_CONST.DNS_RECORD_TYPE_OPENPGPKEY, questionType="PTR",XDM_CONST.DNS_RECORD_TYPE_PTR, questionType="RRSIG",XDM_CONST.DNS_RECORD_TYPE_RRSIG, questionType="RP",XDM_CONST.DNS_RECORD_TYPE_RP, questionType="SIG",XDM_CONST.DNS_RECORD_TYPE_SIG, questionType="SMIMEA",XDM_CONST.DNS_RECORD_TYPE_SMIMEA, questionType="SOA",XDM_CONST.DNS_RECORD_TYPE_SOA, questionType="SRV",XDM_CONST.DNS_RECORD_TYPE_SRV, questionType="SSHFP",XDM_CONST.DNS_RECORD_TYPE_SSHFP, questionType="SVCB",XDM_CONST.DNS_RECORD_TYPE_SVCB, questionType="TA",XDM_CONST.DNS_RECORD_TYPE_TA, questionType="TKEY",XDM_CONST.DNS_RECORD_TYPE_TKEY, questionType="TLSA",XDM_CONST.DNS_RECORD_TYPE_TLSA, questionType="TSIG",XDM_CONST.DNS_RECORD_TYPE_TSIG, questionType="TXT",XDM_CONST.DNS_RECORD_TYPE_TXT, questionType="URI",XDM_CONST.DNS_RECORD_TYPE_URI, questionType="ZONEMD",XDM_CONST.DNS_RECORD_TYPE_ZONEMD, to_string(questionType)),
    xdm.target.port = to_integer(dstPort),
    xdm.network.dns.is_response = to_boolean(if(ResponseRequest="R",1,0)),
    xdm.network.ip_protocol = if(protocol="ICMP", XDM_CONST.IP_PROTOCOL_ICMP, protocol="TCP", XDM_CONST.IP_PROTOCOL_TCP, protocol="UDP", XDM_CONST.IP_PROTOCOL_UDP, to_string(protocol)),
    xdm.session_context_id=Context,
    xdm.target.ipv4 = "",
    xdm.network.dns.dns_resource_record.type = answerType,
    xdm.network.dns.dns_resource_record.value = answerValue;


filter provider_name = "Microsoft-Windows-DNSServer" OR provider_name = "Microsoft-Windows-DNS-Server-Service"
| alter
    userType = json_extract_scalar(user, "$.type"),
    dns_type = json_extract_scalar(event_data, "$.type"),
    dns_host = json_extract_scalar(event_data, "$.NAME"),
    dns_source_ip = json_extract_scalar(event_data, "$.Source")
| alter
    src_ip_v4 = if(dns_source_ip !~= ":", dns_source_ip, null),
    src_ip_v6 = if(dns_source_ip ~= ":", dns_source_ip, null)   
| alter
    xdm.source.ipv4 = src_ip_v4,
    xdm.source.ipv6 = src_ip_v6,
    xdm.target.module.size = to_integer(json_extract_scalar(event_data, "$.BufferSize")),
    xdm.target.zone = json_extract_scalar(event_data, "$.Zone"),
    xdm.event.operation_sub_type = json_extract_scalar(event_data, "$.PropertyKey"),
    xdm.network.dns.dns_resource_record.type = if(dns_type = "1", XDM_CONST.DNS_RECORD_TYPE_A, dns_type = "28", XDM_CONST.DNS_RECORD_TYPE_AAAA, dns_type = "18", XDM_CONST.DNS_RECORD_TYPE_AFSDB, dns_type = "42", XDM_CONST.DNS_RECORD_TYPE_APL, dns_type = "257", XDM_CONST.DNS_RECORD_TYPE_CAA, dns_type = "60", XDM_CONST.DNS_RECORD_TYPE_CDNSKEY, dns_type = "59", XDM_CONST.DNS_RECORD_TYPE_CDS, dns_type = "37", XDM_CONST.DNS_RECORD_TYPE_CERT, dns_type = "5", XDM_CONST.DNS_RECORD_TYPE_CNAME, dns_type = "62", XDM_CONST.DNS_RECORD_TYPE_CSYNC, dns_type = "49", XDM_CONST.DNS_RECORD_TYPE_DHCID, dns_type = "32769", XDM_CONST.DNS_RECORD_TYPE_DLV, dns_type = "39", XDM_CONST.DNS_RECORD_TYPE_DNAME, dns_type = "48", XDM_CONST.DNS_RECORD_TYPE_DNSKEY, dns_type = "43", XDM_CONST.DNS_RECORD_TYPE_DS, dns_type = "108", XDM_CONST.DNS_RECORD_TYPE_EUI48, dns_type = "109", XDM_CONST.DNS_RECORD_TYPE_EUI64, dns_type = "13", XDM_CONST.DNS_RECORD_TYPE_HINFO, dns_type = "55", XDM_CONST.DNS_RECORD_TYPE_HIP, dns_type = "65", XDM_CONST.DNS_RECORD_TYPE_HTTPS, dns_type = "45", XDM_CONST.DNS_RECORD_TYPE_IPSECKEY, dns_type = "25", XDM_CONST.DNS_RECORD_TYPE_KEY, dns_type = "36", XDM_CONST.DNS_RECORD_TYPE_KX, dns_type = "29", XDM_CONST.DNS_RECORD_TYPE_LOC, dns_type = "15", XDM_CONST.DNS_RECORD_TYPE_MX, dns_type = "35", XDM_CONST.DNS_RECORD_TYPE_NAPTR, dns_type = "2", XDM_CONST.DNS_RECORD_TYPE_NS, dns_type = "47", XDM_CONST.DNS_RECORD_TYPE_NSEC, dns_type = "50", XDM_CONST.DNS_RECORD_TYPE_NSEC3, dns_type = "51", XDM_CONST.DNS_RECORD_TYPE_NSEC3PARAM, dns_type = "61", XDM_CONST.DNS_RECORD_TYPE_OPENPGPKEY, dns_type = "12", XDM_CONST.DNS_RECORD_TYPE_PTR, dns_type = "46", XDM_CONST.DNS_RECORD_TYPE_RRSIG, dns_type = "17", XDM_CONST.DNS_RECORD_TYPE_RP, dns_type = "24", XDM_CONST.DNS_RECORD_TYPE_SIG, dns_type = "53", XDM_CONST.DNS_RECORD_TYPE_SMIMEA, dns_type = "6", XDM_CONST.DNS_RECORD_TYPE_SOA, dns_type = "33", XDM_CONST.DNS_RECORD_TYPE_SRV, dns_type = "44", XDM_CONST.DNS_RECORD_TYPE_SSHFP, dns_type = "64", XDM_CONST.DNS_RECORD_TYPE_SVCB, dns_type = "32768", XDM_CONST.DNS_RECORD_TYPE_TA, dns_type = "249", XDM_CONST.DNS_RECORD_TYPE_TKEY, dns_type = "52", XDM_CONST.DNS_RECORD_TYPE_TLSA, dns_type = "250", XDM_CONST.DNS_RECORD_TYPE_TSIG, dns_type = "16", XDM_CONST.DNS_RECORD_TYPE_TXT, dns_type = "256", XDM_CONST.DNS_RECORD_TYPE_URI, dns_type = "63", XDM_CONST.DNS_RECORD_TYPE_ZONEMD, to_string(dns_type)),
    xdm.target.resource.value = json_extract_scalar(event_data, "$.NewValue"),
	xdm.event.id = to_string(event_id),

	xdm.session_context_id = to_string(record_id),

	xdm.source.process.pid = to_integer(process_pid),

	xdm.source.process.thread_id = to_integer(process_thread_id),

	xdm.event.original_event_type = coalesce(event_action, task),
    xdm.source.user.identifier = json_extract_scalar(user, "$.identifier"),
    xdm.source.user.domain = json_extract_scalar(user, "$.domain"),
    xdm.source.user.username = json_extract_scalar(user, "$.name"),
    xdm.source.user.user_type = if(userType ~= "user|User",XDM_CONST.USER_TYPE_REGULAR, userType ~= "service|Service", XDM_CONST.USER_TYPE_SERVICE_ACCOUNT , userType ~= "computer|Computer",XDM_CONST.USER_TYPE_MACHINE_ACCOUNT , to_string(userType)),
	xdm.event.log_level = if(log_level ~= "info", XDM_CONST.LOG_LEVEL_INFORMATIONAL, log_level ~= "err", XDM_CONST.LOG_LEVEL_ERROR, log_level ~= "warn", XDM_CONST.LOG_LEVEL_WARNING, log_level="crit", XDM_CONST.LOG_LEVEL_CRITICAL, to_string(coalesce(opcode,log_level))),
    xdm.event.type = channel,
    xdm.event.description = message,
    xdm.source.host.hostname = coalesce(host_name, computer_name, dns_host),
    xdm.observer.type = provider_name;


[MODEL: dataset=msft_graph_security_alerts_raw, content_id="MicrosoftGraphSecurity"]
filter _reporting_device_name = "https://graph.microsoft.com/beta/security/alerts_v2"
| alter 
    alertEvidence_json = arraystring(arraymap(evidence -> [], if("@element" ~= "alertEvidence", "@element", null)), ""),
    analyzedMessageEvidence_json = arraystring(arraymap(evidence -> [], if("@element" ~= "analyzedMessageEvidence", "@element", null)), ""),
    analyzedMessageEvidence2_json = arraymap(evidence -> [], if("@element" ~= "analyzedMessageEvidence", "@element", null)),
    cloudApplicationEvidence_json = arraystring(arraymap(evidence -> [], if("@element" ~= "cloudApplicationEvidence", "@element", null)), ""),
    deviceEvidence_json = arraystring(arraymap(evidence -> [], if("@element" ~= "deviceEvidence", "@element", null)), ""),
    fileEvidence_json = arraystring(arraymap(evidence -> [], if("@element" ~= "fileEvidence", "@element", null)), ""),
    ipEvidence_json = arraymap(evidence -> [], if("@element" ~= "ipEvidence", "@element", null)),
    mailboxEvidence_json = arraystring(arraymap(evidence -> [], if("@element" ~= "mailboxEvidence", "@element", null)), ""),
    processEvidence_json = arraystring(arraymap(evidence -> [], if("@element" ~= "processEvidence", "@element", null)), ""),
    registryKeyEvidence_json = arraystring(arraymap(evidence -> [], if("@element" ~= "registryKeyEvidence", "@element", null)), ""),
    registryValueEvidence_json = arraystring(arraymap(evidence -> [], if("@element" ~= "registryValueEvidence", "@element", null)), ""),
    urlEvidence_json = arraystring(arraymap(evidence -> [], if("@element" ~= "urlEvidence", "@element", null)), ""),
    userEvidence_json = arraystring(arraymap(evidence -> [], if("@element" ~= "userEvidence", "@element", null)), "")
| alter
// userEvidence Fields
    userEvidence_userAccount_accountName = json_extract_scalar(userEvidence_json, "$.userAccount.accountName"),
    userEvidence_userAccount_domainName = json_extract_scalar(userEvidence_json, "$.userAccount.domainName"),
    userEvidence_userAccount_userSid = json_extract_scalar(userEvidence_json, "$.userAccount.userSid"),
    userEvidence_userAccount_azureAdUserId = json_extract_scalar(userEvidence_json, "$.userAccount.azureAdUserId"),
    userEvidence_userAccount_userPrincipalName = json_extract_scalar(userEvidence_json, "$.userAccount.userPrincipalName"),
    userEvidence_userAccount_displayName = json_extract_scalar(userEvidence_json, "$.userAccount.displayName"),
// alertEvidence Fields
    alertEvidence_tags = json_extract_scalar(alertEvidence_json, "$.tags"),
// analyzedMessageEvidence Fields
    analyzedMessageEvidence_tags = json_extract_scalar(analyzedMessageEvidence_json, "$.tags"),
    analyzedMessageEvidence_threats = json_extract_scalar(analyzedMessageEvidence_json, "$.threats"),
    analyzedMessageEvidence_internetMessageId = json_extract_scalar(analyzedMessageEvidence_json, "$.internetMessageId"),
    analyzedMessageEvidence_receivedDateTime = json_extract_scalar(analyzedMessageEvidence_json, "$.receivedDateTime"),
    analyzedMessageEvidence_subject = json_extract_scalar(analyzedMessageEvidence_json, "$.subject"),
    analyzedMessageEvidence_recipientEmailAddress = arraymap(analyzedMessageEvidence2_json, json_extract_scalar("@element", "$.recipientEmailAddress")),
// cloudApplicationEvidence Fields
    cloudApplicationEvidence_tags = json_extract_scalar(cloudApplicationEvidence_json, "$.tags"),
    cloudApplicationEvidence_displayName = json_extract_scalar(cloudApplicationEvidence_json, "$.displayName"),
    cloudApplicationEvidence_instanceName = json_extract_scalar(cloudApplicationEvidence_json, "$.instanceName"),
// deviceEvidence Fields
    deviceEvidence_tags = json_extract_scalar(deviceEvidence_json, "$.tags"),
    deviceEvidence_riskScore = json_extract_scalar(deviceEvidence_json, "$.riskScore"),
    deviceEvidence_deviceDnsName = json_extract_scalar(deviceEvidence_json, "$.deviceDnsName"),
    deviceEvidence_osPlatform = json_extract_scalar(deviceEvidence_json, "$.osPlatform"),
    deviceEvidence_version = json_extract_scalar(deviceEvidence_json, "$.version"),
// fileEvidence Fields
    fileEvidence_tags = json_extract_scalar(fileEvidence_json, "$.tags"),
    fileEvidence_detectionStatus = json_extract_scalar(fileEvidence_json, "$.detectionStatus"),
    fileEvidence_fileDetails_fileName = json_extract_scalar(fileEvidence_json, "$.fileDetails.fileName"),
    fileEvidence_fileDetails_filePath = json_extract_scalar(fileEvidence_json, "$.fileDetails.filePath"),
    fileEvidence_fileDetails_fileSize = json_extract_scalar(fileEvidence_json, "$.fileDetails.fileSize"),
    fileEvidence_fileDetails_sha256 = json_extract_scalar(fileEvidence_json, "$.fileDetails.sha256"),
    fileEvidence_fileDetails_signer = json_extract_scalar(fileEvidence_json, "$.fileDetails.signer"),
// ipEvidence Fields
    ipEvidence_tags = arraystring(arraymap(ipEvidence_json, json_extract_scalar("@element", "$.tags")), " "),
    ipEvidence_ipAddress = arraymap(ipEvidence_json, json_extract_scalar("@element", "$.ipAddress")),
// mailboxEvidence Fields
    mailboxEvidence_tags = json_extract_scalar(mailboxEvidence_json, "$.tags"),
    mailboxEvidence_displayName = json_extract_scalar(mailboxEvidence_json, "$.displayName"),
    mailboxEvidence_primaryAddress = json_extract_scalar(mailboxEvidence_json, "$.primaryAddress"),
    mailboxEvidence_userAccount_accountName = json_extract_scalar(mailboxEvidence_json, "$.userAccount.accountName"),
    mailboxEvidence_userAccount_userPrincipalName = json_extract_scalar(mailboxEvidence_json, "$.userAccount.userPrincipalName"),
    mailboxEvidence_userAccount_domainName = json_extract_scalar(mailboxEvidence_json, "$.userAccount.domainName"),
    mailboxEvidence_userAccount_userSid = json_extract_scalar(mailboxEvidence_json, "$.userAccount.userSid"),
// processEvidence Fields
    processEvidence_tags = json_extract_scalar(processEvidence_json, "$.tags"),
    processEvidence_detectionStatus = json_extract_scalar(processEvidence_json, "$.detectionStatus"),
    processEvidence_userAccount_accountName = json_extract_scalar(processEvidence_json, "$.userAccount.accountName"),
    processEvidence_userAccount_userPrincipalName = json_extract_scalar(processEvidence_json, "$.userAccount.userPrincipalName"),
    processEvidence_userAccount_domainName = json_extract_scalar(processEvidence_json, "$.userAccount.domainName"),
    processEvidence_userAccount_userSid = json_extract_scalar(processEvidence_json, "$.userAccount.userSid"),
    processEvidence_imageFile_fileName = json_extract_scalar(processEvidence_json, "$.imageFile.fileName"),
    processEvidence_imageFile_filePath = json_extract_scalar(processEvidence_json, "$.imageFile.filePath"),
    processEvidence_imageFile_fileSize = json_extract_scalar(processEvidence_json, "$.imageFile.fileSize"),
    processEvidence_imageFile_sha256 = json_extract_scalar(processEvidence_json, "$.imageFile.sha256"),
    processEvidence_imageFile_signer = json_extract_scalar(processEvidence_json, "$.imageFile.signer"),
    processEvidence_parentProcessId = json_extract_scalar(processEvidence_json, "$.parentProcessId"),
    processEvidence_processCommandLine = json_extract_scalar(processEvidence_json, "$.processCommandLine"),
    processEvidence_processId = json_extract_scalar(processEvidence_json, "$.processId"),
// registryKeyEvidence Fields
    registryKeyEvidence_tags = json_extract_scalar(registryKeyEvidence_json, "$.tags"),
    registryKeyEvidence_registryKey = json_extract_scalar(registryKeyEvidence_json, "$.registryKey"),
// registryKeyEvidence Fields    
    registryValueEvidence_tags = json_extract_scalar(registryValueEvidence_json, "$.tags"),
    registryValueEvidence_registryKey = json_extract_scalar(registryValueEvidence_json, "$.registryKey"),
    registryValueEvidence_registryValue = json_extract_scalar(registryValueEvidence_json, "$.registryValue"),
    registryValueEvidence_registryValueName = json_extract_scalar(registryValueEvidence_json, "$.registryValueName"),
    registryValueEvidence_registryValueType = json_extract_scalar(registryValueEvidence_json, "$.registryValueType"),
// urlEvidence Fields
    urlEvidence_tags = json_extract_scalar(urlEvidence_json, "$.tags"),
    urlEvidence_url = json_extract_scalar(urlEvidence_json, "$.url")
| alter
    check_resolved = if(to_string(status) ~= "resolved", to_boolean("TRUE"), to_boolean("FALSE")),
    unified_os_version = arraystring(arraycreate(deviceEvidence_osPlatform, deviceEvidence_version), " "),
    lowercase_os_platform = lowercase(deviceEvidence_osPlatform),
    lowercase_registry_type = lowercase(registryValueEvidence_registryValueType),
    get_email_timestamp = arraystring(regextract(analyzedMessageEvidence_receivedDateTime, "\d+\/\d+\/\d+ \d+:\d+:\d+ [A-Z]{2}"), ""),
    get_email_zone = replex(arraystring(regextract(analyzedMessageEvidence_receivedDateTime, "[+|-]\d+:\d+"), ""), ":", ""),
    check_ipv4 = if(ipEvidence_ipAddress !~= ":", ipEvidence_ipAddress, null),
    check_ipv6 = if(ipEvidence_ipAddress ~= ":", ipEvidence_ipAddress, null),
    outcome_check = coalesce(fileEvidence_detectionStatus, processEvidence_detectionStatus, to_string(classification))
| alter
    xdm.observer.unique_identifier = id,
    xdm.event.description = title,
    xdm.event.is_completed = check_resolved,
    xdm.alert.subcategory = category,
    xdm.event.outcome = if(fileEvidence_detectionStatus = "blocked", XDM_CONST.OUTCOME_SUCCESS, fileEvidence_detectionStatus = "detected", XDM_CONST.OUTCOME_FAILED, fileEvidence_detectionStatus = "prevented", XDM_CONST.OUTCOME_PARTIAL, processEvidence_detectionStatus = "blocked", XDM_CONST.OUTCOME_SUCCESS, processEvidence_detectionStatus = "detected", XDM_CONST.OUTCOME_FAILED, processEvidence_detectionStatus = "prevented", XDM_CONST.OUTCOME_PARTIAL, classification = "falsePositive", XDM_CONST.OUTCOME_SUCCESS, classification = "truePositive", XDM_CONST.OUTCOME_FAILED, classification = "benignPositive", XDM_CONST.OUTCOME_PARTIAL, outcome_check = null, null, to_string(outcome_check)),
    xdm.event.tags = arraycreate(alertEvidence_tags, analyzedMessageEvidence_tags, cloudApplicationEvidence_tags, deviceEvidence_tags, fileEvidence_tags, ipEvidence_tags, mailboxEvidence_tags, processEvidence_tags, registryKeyEvidence_tags, registryValueEvidence_tags, urlEvidence_tags),
    xdm.alert.severity = coalesce(to_string(severity), deviceEvidence_riskScore),
    xdm.source.host.device_id = tenantId,
    xdm.alert.description = description,
    xdm.intermediate.agent.identifier = detectorId,
    xdm.event.id = coalesce(to_string(incidentId), to_string(providerAlertId)),
    xdm.intermediate.host.fqdn = coalesce(to_string(alertWebUrl), to_string(incidentWebUrl)),
    xdm.alert.original_threat_name = coalesce(to_string(determination), analyzedMessageEvidence_threats),
    xdm.observer.type = serviceSource,
    xdm.intermediate.host.hostname = detectionSource,
    xdm.email.message_id = analyzedMessageEvidence_internetMessageId, 
    xdm.email.delivery_timestamp = parse_timestamp("%m/%d/%Y %H:%M:%S %p %z", arraystring(arraycreate(get_email_timestamp, get_email_zone), " ")),
    xdm.email.recipients = analyzedMessageEvidence_recipientEmailAddress,
    xdm.email.subject = analyzedMessageEvidence_subject,
    xdm.source.application.name = cloudApplicationEvidence_displayName,
    xdm.source.cloud.project = cloudApplicationEvidence_instanceName,
    xdm.source.host.fqdn = deviceEvidence_deviceDnsName,
    xdm.source.host.os = unified_os_version,
    xdm.source.agent.identifier = userEvidence_userAccount_azureAdUserId, 
    xdm.source.host.os_family = if(lowercase_os_platform ~= "win|windows", XDM_CONST.OS_FAMILY_WINDOWS, lowercase_os_platform ~= "mac|macos", XDM_CONST.OS_FAMILY_MACOS, lowercase_os_platform ~= "linux", XDM_CONST.OS_FAMILY_LINUX, lowercase_os_platform ~= "android", XDM_CONST.OS_FAMILY_ANDROID, lowercase_os_platform ~= "ios", XDM_CONST.OS_FAMILY_IOS, lowercase_os_platform ~= "ubuntu", XDM_CONST.OS_FAMILY_UBUNTU, lowercase_os_platform ~= "debian", XDM_CONST.OS_FAMILY_DEBIAN, lowercase_os_platform ~= "fedora", XDM_CONST.OS_FAMILY_FEDORA, lowercase_os_platform ~= "centos", XDM_CONST.OS_FAMILY_CENTOS, lowercase_os_platform ~= "chromeos", XDM_CONST.OS_FAMILY_CHROMEOS, lowercase_os_platform ~= "solaris", XDM_CONST.OS_FAMILY_SOLARIS, lowercase_os_platform ~= "scada", XDM_CONST.OS_FAMILY_SCADA),
    xdm.target.file.filename = fileEvidence_fileDetails_fileName,
    xdm.target.file.path = fileEvidence_fileDetails_filePath,
    xdm.target.file.size = to_integer(fileEvidence_fileDetails_fileSize),
    xdm.target.file.sha256 = fileEvidence_fileDetails_sha256,
    xdm.target.file.signer = fileEvidence_fileDetails_signer,
    xdm.alert.mitre_techniques = arraymap(json_extract_array(mitreTechniques, "$"), replex("@element", "\"", "")),
    xdm.source.host.ipv4_addresses = check_ipv4,
    xdm.source.host.ipv6_addresses = check_ipv6,
    xdm.source.user.username = coalesce(mailboxEvidence_displayName, mailboxEvidence_primaryAddress, mailboxEvidence_userAccount_accountName, mailboxEvidence_userAccount_userPrincipalName, processEvidence_userAccount_accountName, processEvidence_userAccount_userPrincipalName, userEvidence_userAccount_accountName, userEvidence_userAccount_userPrincipalName, userEvidence_userAccount_displayName),
    xdm.source.user.domain = coalesce(mailboxEvidence_userAccount_domainName, processEvidence_userAccount_domainName, userEvidence_userAccount_domainName),
    xdm.source.user.identifier = coalesce(mailboxEvidence_userAccount_userSid, processEvidence_userAccount_userSid, userEvidence_userAccount_userSid),
    xdm.source.process.executable.filename = processEvidence_imageFile_fileName,
    xdm.source.process.executable.path = processEvidence_imageFile_filePath,
    xdm.source.process.executable.size = to_integer(processEvidence_imageFile_fileSize), 
    xdm.source.process.executable.sha256 = processEvidence_imageFile_sha256,
    xdm.source.process.executable.signer = processEvidence_imageFile_signer,
    xdm.source.process.parent_id = processEvidence_parentProcessId,
    xdm.source.process.command_line = processEvidence_processCommandLine,
    xdm.source.process.pid = to_integer(processEvidence_processId),
    xdm.target.registry.key = coalesce(registryKeyEvidence_registryKey, registryValueEvidence_registryKey),
    xdm.target.registry.data = registryValueEvidence_registryValue,
    xdm.target.registry.value = registryValueEvidence_registryValueName,
    xdm.target.registry.value_type = if(lowercase_registry_type ~= "binary", XDM_CONST.REGISTRY_VALUE_TYPE_REG_BINARY, lowercase_registry_type ~= "dword$", XDM_CONST.REGISTRY_VALUE_TYPE_REG_DWORD, lowercase_registry_type ~= "dword_little", XDM_CONST.REGISTRY_VALUE_TYPE_REG_DWORD_LITTLE_ENDIAN, lowercase_registry_type ~= "dword_big", XDM_CONST.REGISTRY_VALUE_TYPE_REG_DWORD_BIG_ENDIAN, lowercase_registry_type ~= "expand", XDM_CONST.REGISTRY_VALUE_TYPE_REG_EXPAND_SZ, lowercase_registry_type ~= "link", XDM_CONST.REGISTRY_VALUE_TYPE_REG_LINK, lowercase_registry_type ~= "multi", XDM_CONST.REGISTRY_VALUE_TYPE_REG_MULTI_SZ, lowercase_registry_type ~= "none", XDM_CONST.REGISTRY_VALUE_TYPE_REG_NONE, lowercase_registry_type ~= "qword$", XDM_CONST.REGISTRY_VALUE_TYPE_REG_QWORD, lowercase_registry_type ~= "qword_little", XDM_CONST.REGISTRY_VALUE_TYPE_REG_QWORD_LITTLE_ENDIAN, lowercase_registry_type ~= "reg_sz", XDM_CONST.REGISTRY_VALUE_TYPE_REG_SZ, lowercase_registry_type = null, null, to_string(lowercase_registry_type)),
    xdm.target.url = urlEvidence_url;


[MODEL: dataset="iis_iis_raw", content_id="MicrosoftIISWebServer"]
call microsoft_iis_modeling;
[RULE: microsoft_iis_modeling content_id="MicrosoftIISWebServer"]
alter // extract pre-parsed fields from the parsed_fields JSON object 
    c_ip = parsed_fields -> c_ip, // The IP address of the affected client that can be either an IPv4 address or an IPv6 address. If the client IP address is an IPv6 address, the ScopeId field is also included in the address.
    c_port = parsed_fields -> c_port, // The port number for the affected client.
    cs_bytes = parsed_fields -> cs_bytes, // The number of bytes received and processed by the server.
    cs_cookie = parsed_fields -> cs_cookie, // the content of the cookie sent or received, if any.
    cs_host = parsed_fields -> cs_host, // The host header name, if any.
    cs_method = parsed_fields -> cs_method, // The requested verb, for example, a GET method.
    cs_referer = parsed_fields -> cs_referer, // The site that the user last visited. This site provided a link to the current site.
    cs_uri = parsed_fields -> cs_uri, // The URL and any query associated with it are logged as one field, separated by a question mark (0x3F). This field is truncated at its length limit of 4096 bytes. Relevant for error logs.
    cs_uri_query = parsed_fields -> cs_uri_query, // The query, if any, that the client was trying to perform. Relevant for access logs. 
    cs_uri_stem = parsed_fields -> cs_uri_stem, // The target of the verb, for example, Default.htm. Relevant for access logs. 
    cs_user_agent = parsed_fields -> cs_user_agent, // the browser type or http client that the client used.
    cs_username = parsed_fields -> cs_username, // The name of the authenticated user that accessed the server. Anonymous users are indicated by a hyphen.
    cs_version = parsed_fields -> cs_version, // The HTTP protocol version that the client used.
    log_type = parsed_fields -> log_type, 
    s_computername = parsed_fields -> s_computername, // The name of the server on which the log file entry was generated.
    s_ip = parsed_fields -> s_ip, // The IP address of the affected server that can be either an IPv4 address or an IPv6 address. If the server IP address is an IPv6 address, the ScopeId field is also included in the address.
    s_port = parsed_fields -> s_port, // The port number of the affected server.
    s_reason = parsed_fields -> s_reason, // This field contains a string that identifies the kind of error that is being logged. It is never left empty.
    s_siteid = parsed_fields -> s_siteid,
    s_sitename = parsed_fields -> s_sitename, //  the site instance number that fulfilled the request.
    sc_bytes = parsed_fields -> sc_bytes, // The number of bytes sent by the server.
    sc_status = parsed_fields -> sc_status, // The HTTP status code.
    sc_substatus = parsed_fields -> sc_substatus,
    sc_win32_status = parsed_fields -> sc_win32_status, // the Windows status code
    streamid = parsed_fields -> streamid, // The Stream Id.
    time_taken = parsed_fields -> time_taken, // The length of time that the action took, in milliseconds.
    transport = parsed_fields -> transport
| alter // post-extraction validations, cleanning and reformatting 
    c_ipv4 = arrayindex(regextract(c_ip, "((?:\d{1,3}\.){3}\d{1,3})"), 0), 
    c_ipv6 = arrayindex(regextract(c_ip, "(?:[a-fA-F\d]{0,4}\:){1,7}[a-fA-F\d]{0,4}"), 0),
    s_ipv4 = arrayindex(regextract(s_ip, "((?:\d{1,3}\.){3}\d{1,3})"), 0), 
    s_ipv6 = arrayindex(regextract(s_ip, "(?:[a-fA-F\d]{0,4}\:){1,7}[a-fA-F\d]{0,4}"), 0),
    sc_status_int = to_integer(sc_status),
    sc_win32_status_int = to_integer(sc_win32_status), 
    sc_full_status = concat(sc_status, ".", sc_substatus), // for e.g. 403.14
    streamid = if(streamid != "-", streamid), // clean empty values
    s_siteid = if(s_siteid != "-", s_siteid), // clean empty values
    sc_status = if(sc_status != "-", sc_status), // clean empty values
    target_resource = arrayindex(regextract(arrayindex(split(coalesce(cs_uri,cs_uri_stem), "?"), 0), "\/([^\/]+)"), -1),
    target_uri = if(
        cs_uri != null and cs_uri != "-", cs_uri, // error logs 
        cs_uri_query != null and cs_uri_query != "-", concat(cs_uri_stem, "?", cs_uri_query), cs_uri_stem), // access logs
    user_domain = if(cs_username != null and cs_username != "-", coalesce(arrayindex(regextract(cs_username, "(.+)\\.+"), 0), arrayindex(split(cs_username, "@"), 1)))
| alter 
    full_status_code = concat(sc_full_status, ".", sc_win32_status),
    is_successful = if(sc_win32_status_int = 0 and sc_status_int < 400),
    sc_status_reason = if( // https://learn.microsoft.com/en-us/troubleshoot/developer/webapps/iis/www-administration-management/http-status-code#introduction
        sc_status = null or sc_status_int < 400, null, sc_full_status = "400.1", "Invalid Destination Header", sc_full_status = "400.2", "Invalid Depth Header", sc_full_status = "400.3", "Invalid If Header", sc_full_status = "400.4", "Invalid Overwrite Header", sc_full_status = "400.5", "Invalid Translate Header", sc_full_status = "400.6", "Invalid Request Body", sc_full_status = "400.7", "Invalid Content Length", sc_full_status = "400.8", "Invalid Timeout", sc_full_status = "400.9", "Invalid Lock Token", sc_full_status = "400.10", "Invalid X-Forwarded-For (XFF) header", sc_full_status = "400.11", "Invalid WebSocket request", sc_full_status = "400.601", "Bad client request (ARR)", sc_full_status = "400.602", "Invalid time format (ARR)", sc_full_status = "400.603", "Parse range error (ARR)", sc_full_status = "400.604", "Client gone (ARR)", sc_full_status = "400.605", "Maximum number of forwards (ARR)", sc_full_status = "400.606", "Asynchronous competition error (ARR)", sc_full_status = "401.1", "Logon failed", sc_full_status = "401.2", "Logon failed due to server configuration", sc_full_status = "401.3", "Unauthorized due to ACL on resource", sc_full_status = "401.4", "Authorization failed by filter", sc_full_status = "401.5", "Authorization failed by ISAPI/CGI application", sc_full_status = "401.501", "Access denied: concurrent request rate limit reached", sc_full_status = "401.502", "Access denied: maximum request rate limit reached", sc_full_status = "401.503", "Access denied: IP address denied", sc_full_status = "401.504", "Access denied: host name denied", sc_full_status = "403.1", "Execute access forbidden", sc_full_status = "403.2", "Read access forbidden", sc_full_status = "403.3", "Write access forbidden", sc_full_status = "403.4", "SSL required", sc_full_status = "403.5", "SSL 128 required", sc_full_status = "403.6", "IP address rejected", sc_full_status = "403.7", "Client certificate required", sc_full_status = "403.8", "Site access denied", sc_full_status = "403.9", "Concurrent connections exceeded", sc_full_status = "403.1", "Forbidden: Execute access denied", sc_full_status = "403.11", "Forbidden: Password changed", sc_full_status = "403.12", "Mapper denied access", sc_full_status = "403.13", "Client certificate revoked", sc_full_status = "403.14", "Directory listing denied", sc_full_status = "403.15", "Client access licenses exceeded", sc_full_status = "403.16", "Client certificate is untrusted or invalid", sc_full_status = "403.17", "Client certificate has expired or is not yet valid", sc_full_status = "403.18", "Cannot execute requested URL in the current application pool", sc_full_status = "403.19", "Cannot execute CGI applications for the client browser in this application pool", sc_full_status = "403.2", "Forbidden: Passport logon failed", sc_full_status = "403.21", "Forbidden: Source access denied", sc_full_status = "403.22", "Forbidden: Infinite depth is denied", sc_full_status = "403.501", "Forbidden: concurrent request rate limit reached", sc_full_status = "403.502", "Forbidden: maximum request rate limit reached", sc_full_status = "403.503", "Forbidden: IP address denied", sc_full_status = "403.504", "Forbidden: host name denied", sc_full_status = "404.0", "Not found", sc_full_status = "404.1", "Site Not Found", sc_full_status = "404.2", "ISAPI or CGI restriction.", sc_full_status = "404.3", "MIME type restriction.", sc_full_status = "404.4", "No handler configured.", sc_full_status = "404.5", "Denied by request filtering configuration.", sc_full_status = "404.6", "Verb denied.", sc_full_status = "404.7", "File extension denied.", sc_full_status = "404.8", "Hidden namespace.", sc_full_status = "404.9", "Files attribute hidden.", sc_full_status = "404.1", "Request header too long.", sc_full_status = "404.11", "Request contains double escape sequence.", sc_full_status = "404.12", "Request contains high-bit characters.", sc_full_status = "404.13", "Content length too large.", sc_full_status = "404.14", "Request URL too long.", sc_full_status = "404.15", "Query string too long.", sc_full_status = "404.16", "WebDAV request sent to the static file handler", sc_full_status = "404.17", "Dynamic content mapped to the static file handler", sc_full_status = "404.18", "Query string sequence denied", sc_full_status = "404.19", "Denied by filtering rule", sc_full_status = "404.2", "Too Many URL Segments", sc_full_status = "404.501", "Not found: concurrent request rate limit reached", sc_full_status = "404.502", "Not found: maximum request rate limit reached", sc_full_status = "404.503", "Not found: IP address denied", sc_full_status = "404.504", "Not found: host name denied", sc_full_status = "405", "Method not allowed.", sc_full_status = "406", "Not acceptable.", sc_full_status = "408", "Request timed out.", sc_full_status = "412", "Precondition failed.", sc_full_status = "413", "Request entity too large.", sc_full_status = "500.0", "Module or ISAPI error occurred.", sc_full_status = "500.11", "Application is shutting down on the web server.", sc_full_status = "500.12", "Application is busy restarting on the web server.", sc_full_status = "500.13", "Web server is too busy.", sc_full_status = "500.15", "Direct requests for Global.asax aren't allowed.", sc_full_status = "500.19", "Configuration data is invalid.", sc_full_status = "500.21", "Module not recognized.", sc_full_status = "500.22", "An ASP.NET httpModules configuration does not apply in Managed Pipeline mode.", sc_full_status = "500.23", "An ASP.NET httpHandlers configuration does not apply in Managed Pipeline mode.", sc_full_status = "500.24", "An ASP.NET impersonation configuration does not apply in Managed Pipeline mode.", sc_full_status = "500.5", "A rewrite error occurred during RQ_BEGIN_REQUEST notification handling. A configuration or inbound rule execution error occurred.", sc_full_status = "500.51", "A rewrite error occurred during GL_PRE_BEGIN_REQUEST notification handling. A global configuration or global rule execution error occurred.", sc_full_status = "500.52", "A rewrite error occurred during RQ_SEND_RESPONSE notification handling. An outbound rule execution occurred.", sc_full_status = "500.53", "A rewrite error occurred during RQ_RELEASE_REQUEST_STATE notification handling. An outbound rule execution error occurred. The rule is configured to be executed before the output user cache gets updated.", sc_full_status = "500.1", "Internal ASP error.", sc_full_status = "502.1", "CGI application timeout.", sc_full_status = "502.2", "Bad gateway: Premature Exit.", sc_full_status = "502.3", "Bad Gateway: Forwarder Connection Error (ARR).", sc_full_status = "502.4", "Bad Gateway: No Server (ARR).", sc_full_status = "502.2", "Map request failure (ARR)", sc_full_status = "502.3", "WinHTTP asynchronous completion failure (ARR)", sc_full_status = "502.4", "No server (ARR)", sc_full_status = "502.5", "WebSocket failure (ARR)", sc_full_status = "502.6", "Forwarded request failure (ARR)", sc_full_status = "502.7", "Execute request failure (ARR)", sc_full_status = "503", "Application pool unavailable.", sc_full_status = "503.2", "Concurrent request limit exceeded.", sc_full_status = "503.3", "ASP.NET queue full", sc_full_status = "503.4", "FastCGI queue full"),
    sc_win32_status_reason = if( // https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-erref/18d8fbe8-a967-4f1c-ae50-99ca8e491d2d
        sc_win32_status = null or sc_win32_status_int = 0, null, sc_win32_status_int = 1, "ERROR_INVALID_FUNCTION", sc_win32_status_int = 2, "ERROR_FILE_NOT_FOUND", sc_win32_status_int = 3, "ERROR_PATH_NOT_FOUND", sc_win32_status_int = 4, "ERROR_TOO_MANY_OPEN_FILES", sc_win32_status_int = 5, "ERROR_ACCESS_DENIED", sc_win32_status_int = 6, "ERROR_INVALID_HANDLE", sc_win32_status_int = 7, "ERROR_ARENA_TRASHED", sc_win32_status_int = 8, "ERROR_NOT_ENOUGH_MEMORY", sc_win32_status_int = 9, "ERROR_INVALID_BLOCK", sc_win32_status_int = 10, "ERROR_BAD_ENVIRONMENT", sc_win32_status_int = 11, "ERROR_BAD_FORMAT", sc_win32_status_int = 12, "ERROR_INVALID_ACCESS", sc_win32_status_int = 13, "ERROR_INVALID_DATA", sc_win32_status_int = 14, "ERROR_OUTOFMEMORY", sc_win32_status_int = 15, "ERROR_INVALID_DRIVE", sc_win32_status_int = 16, "ERROR_CURRENT_DIRECTORY", sc_win32_status_int = 17, "ERROR_NOT_SAME_DEVICE", sc_win32_status_int = 18, "ERROR_NO_MORE_FILES", sc_win32_status_int = 19, "ERROR_WRITE_PROTECT", sc_win32_status_int = 20, "ERROR_BAD_UNIT", sc_win32_status_int = 21, "ERROR_NOT_READY", sc_win32_status_int = 22, "ERROR_BAD_COMMAND", sc_win32_status_int = 23, "ERROR_CRC", sc_win32_status_int = 24, "ERROR_BAD_LENGTH", sc_win32_status_int = 25, "ERROR_SEEK", sc_win32_status_int = 26, "ERROR_NOT_DOS_DISK", sc_win32_status_int = 27, "ERROR_SECTOR_NOT_FOUND", sc_win32_status_int = 28, "ERROR_OUT_OF_PAPER", sc_win32_status_int = 29, "ERROR_WRITE_FAULT", sc_win32_status_int = 30, "ERROR_READ_FAULT", sc_win32_status_int = 31, "ERROR_GEN_FAILURE", sc_win32_status_int = 32, "ERROR_SHARING_VIOLATION", sc_win32_status_int = 33, "ERROR_LOCK_VIOLATION", sc_win32_status_int = 34, "ERROR_WRONG_DISK", sc_win32_status_int = 36, "ERROR_SHARING_BUFFER_EXCEEDED", sc_win32_status_int = 38, "ERROR_HANDLE_EOF", sc_win32_status_int = 39, "ERROR_HANDLE_DISK_FULL", sc_win32_status_int = 50, "ERROR_NOT_SUPPORTED", sc_win32_status_int = 51, "ERROR_REM_NOT_LIST", sc_win32_status_int = 52, "ERROR_DUP_NAME", sc_win32_status_int = 53, "ERROR_BAD_NETPATH", sc_win32_status_int = 54, "ERROR_NETWORK_BUSY", sc_win32_status_int = 55, "ERROR_DEV_NOT_EXIST", sc_win32_status_int = 56, "ERROR_TOO_MANY_CMDS", sc_win32_status_int = 57, "ERROR_ADAP_HDW_ERR", sc_win32_status_int = 58, "ERROR_BAD_NET_RESP", sc_win32_status_int = 59, "ERROR_UNEXP_NET_ERR", sc_win32_status_int = 60, "ERROR_BAD_REM_ADAP", sc_win32_status_int = 61, "ERROR_PRINTQ_FULL", sc_win32_status_int = 62, "ERROR_NO_SPOOL_SPACE", sc_win32_status_int = 63, "ERROR_PRINT_CANCELED", sc_win32_status_int = 64, "ERROR_NETNAME_DELETED", sc_win32_status_int = 65, "ERROR_NETWORK_ACCESS_DENIED", sc_win32_status_int = 66, "ERROR_BAD_DEV_TYPE", sc_win32_status_int = 67, "ERROR_BAD_NET_NAME", sc_win32_status_int = 68, "ERROR_TOO_MANY_NAMES", sc_win32_status_int = 69, "ERROR_TOO_MANY_SESS", sc_win32_status_int = 70, "ERROR_SHARING_PAUSED", sc_win32_status_int = 71, "ERROR_REQ_NOT_ACCEP", sc_win32_status_int = 72, "ERROR_REDIR_PAUSED", sc_win32_status_int = 80, "ERROR_FILE_EXISTS", sc_win32_status_int = 82, "ERROR_CANNOT_MAKE", sc_win32_status_int = 83, "ERROR_FAIL_I24", sc_win32_status_int = 84, "ERROR_OUT_OF_STRUCTURES", sc_win32_status_int = 85, "ERROR_ALREADY_ASSIGNED", sc_win32_status_int = 86, "ERROR_INVALID_PASSWORD", sc_win32_status_int = 87, "ERROR_INVALID_PARAMETER", sc_win32_status_int = 88, "ERROR_NET_WRITE_FAULT", sc_win32_status_int = 89, "ERROR_NO_PROC_SLOTS", sc_win32_status_int = 100, "ERROR_TOO_MANY_SEMAPHORES", sc_win32_status_int = 101, "ERROR_EXCL_SEM_ALREADY_OWNED", sc_win32_status_int = 102, "ERROR_SEM_IS_SET", sc_win32_status_int = 103, "ERROR_TOO_MANY_SEM_REQUESTS", sc_win32_status_int = 104, "ERROR_INVALID_AT_INTERRUPT_TIME", sc_win32_status_int = 105, "ERROR_SEM_OWNER_DIED", sc_win32_status_int = 106, "ERROR_SEM_USER_LIMIT", sc_win32_status_int = 107, "ERROR_DISK_CHANGE", sc_win32_status_int = 108, "ERROR_DRIVE_LOCKED", sc_win32_status_int = 109, "ERROR_BROKEN_PIPE", sc_win32_status_int = 110, "ERROR_OPEN_FAILED", sc_win32_status_int = 111, "ERROR_BUFFER_OVERFLOW", sc_win32_status_int = 112, "ERROR_DISK_FULL", sc_win32_status_int = 113, "ERROR_NO_MORE_SEARCH_HANDLES", sc_win32_status_int = 114, "ERROR_INVALID_TARGET_HANDLE", sc_win32_status_int = 117, "ERROR_INVALID_CATEGORY", sc_win32_status_int = 118, "ERROR_INVALID_VERIFY_SWITCH", sc_win32_status_int = 119, "ERROR_BAD_DRIVER_LEVEL", sc_win32_status_int = 120, "ERROR_CALL_NOT_IMPLEMENTED", sc_win32_status_int = 121, "ERROR_SEM_TIMEOUT", sc_win32_status_int = 122, "ERROR_INSUFFICIENT_BUFFER", sc_win32_status_int = 123, "ERROR_INVALID_NAME", sc_win32_status_int = 124, "ERROR_INVALID_LEVEL", sc_win32_status_int = 125, "ERROR_NO_VOLUME_LABEL", sc_win32_status_int = 126, "ERROR_MOD_NOT_FOUND", sc_win32_status_int = 127, "ERROR_PROC_NOT_FOUND", sc_win32_status_int = 128, "ERROR_WAIT_NO_CHILDREN", sc_win32_status_int = 129, "ERROR_CHILD_NOT_COMPLETE", sc_win32_status_int = 130, "ERROR_DIRECT_ACCESS_HANDLE", sc_win32_status_int = 131, "ERROR_NEGATIVE_SEEK", sc_win32_status_int = 132, "ERROR_SEEK_ON_DEVICE", sc_win32_status_int = 133, "ERROR_IS_JOIN_TARGET", sc_win32_status_int = 134, "ERROR_IS_JOINED", sc_win32_status_int = 135, "ERROR_IS_SUBSTED", sc_win32_status_int = 136, "ERROR_NOT_JOINED", sc_win32_status_int = 137, "ERROR_NOT_SUBSTED", sc_win32_status_int = 138, "ERROR_JOIN_TO_JOIN", sc_win32_status_int = 139, "ERROR_SUBST_TO_SUBST", sc_win32_status_int = 140, "ERROR_JOIN_TO_SUBST", sc_win32_status_int = 141, "ERROR_SUBST_TO_JOIN", sc_win32_status_int = 142, "ERROR_BUSY_DRIVE", sc_win32_status_int = 143, "ERROR_SAME_DRIVE", sc_win32_status_int = 144, "ERROR_DIR_NOT_ROOT", sc_win32_status_int = 145, "ERROR_DIR_NOT_EMPTY", sc_win32_status_int = 146, "ERROR_IS_SUBST_PATH", sc_win32_status_int = 147, "ERROR_IS_JOIN_PATH", sc_win32_status_int = 148, "ERROR_PATH_BUSY", sc_win32_status_int = 149, "ERROR_IS_SUBST_TARGET", sc_win32_status_int = 150, "ERROR_SYSTEM_TRACE", sc_win32_status_int = 151, "ERROR_INVALID_EVENT_COUNT", sc_win32_status_int = 152, "ERROR_TOO_MANY_MUXWAITERS", sc_win32_status_int = 153, "ERROR_INVALID_LIST_FORMAT", sc_win32_status_int = 154, "ERROR_LABEL_TOO_LONG", sc_win32_status_int = 155, "ERROR_TOO_MANY_TCBS", sc_win32_status_int = 156, "ERROR_SIGNAL_REFUSED", sc_win32_status_int = 157, "ERROR_DISCARDED", sc_win32_status_int = 158, "ERROR_NOT_LOCKED", sc_win32_status_int = 159, "ERROR_BAD_THREADID_ADDR", sc_win32_status_int = 160, "ERROR_BAD_ARGUMENTS", sc_win32_status_int = 161, "ERROR_BAD_PATHNAME", sc_win32_status_int = 162, "ERROR_SIGNAL_PENDING", sc_win32_status_int = 164, "ERROR_MAX_THRDS_REACHED", sc_win32_status_int = 167, "ERROR_LOCK_FAILED", sc_win32_status_int = 170, "ERROR_BUSY", sc_win32_status_int = 173, "ERROR_CANCEL_VIOLATION", sc_win32_status_int = 174, "ERROR_ATOMIC_LOCKS_NOT_SUPPORTED", sc_win32_status_int = 180, "ERROR_INVALID_SEGMENT_NUMBER", sc_win32_status_int = 182, "ERROR_INVALID_ORDINAL", sc_win32_status_int = 183, "ERROR_ALREADY_EXISTS", sc_win32_status_int = 186, "ERROR_INVALID_FLAG_NUMBER", sc_win32_status_int = 187, "ERROR_SEM_NOT_FOUND", sc_win32_status_int = 188, "ERROR_INVALID_STARTING_CODESEG", sc_win32_status_int = 189, "ERROR_INVALID_STACKSEG", sc_win32_status_int = 190, "ERROR_INVALID_MODULETYPE", sc_win32_status_int = 191, "ERROR_INVALID_EXE_SIGNATURE", sc_win32_status_int = 192, "ERROR_EXE_MARKED_INVALID", sc_win32_status_int = 193, "ERROR_BAD_EXE_FORMAT", sc_win32_status_int = 194, "ERROR_ITERATED_DATA_EXCEEDS_64k", sc_win32_status_int = 195, "ERROR_INVALID_MINALLOCSIZE", sc_win32_status_int = 196, "ERROR_DYNLINK_FROM_INVALID_RING", sc_win32_status_int = 197, "ERROR_IOPL_NOT_ENABLED", sc_win32_status_int = 198, "ERROR_INVALID_SEGDPL", sc_win32_status_int = 199, "ERROR_AUTODATASEG_EXCEEDS_64k", sc_win32_status_int = 200, "ERROR_RING2SEG_MUST_BE_MOVABLE", sc_win32_status_int = 201, "ERROR_RELOC_CHAIN_XEEDS_SEGLIM", sc_win32_status_int = 202, "ERROR_INFLOOP_IN_RELOC_CHAIN", sc_win32_status_int = 203, "ERROR_ENVVAR_NOT_FOUND", sc_win32_status_int = 205, "ERROR_NO_SIGNAL_SENT", sc_win32_status_int = 206, "ERROR_FILENAME_EXCED_RANGE", sc_win32_status_int = 207, "ERROR_RING2_STACK_IN_USE", sc_win32_status_int = 208, "ERROR_META_EXPANSION_TOO_LONG", sc_win32_status_int = 209, "ERROR_INVALID_SIGNAL_NUMBER", sc_win32_status_int = 210, "ERROR_THREAD_1_INACTIVE", sc_win32_status_int = 212, "ERROR_LOCKED", sc_win32_status_int = 214, "ERROR_TOO_MANY_MODULES", sc_win32_status_int = 215, "ERROR_NESTING_NOT_ALLOWED", sc_win32_status_int = 216, "ERROR_EXE_MACHINE_TYPE_MISMATCH", sc_win32_status_int = 230, "ERROR_BAD_PIPE", sc_win32_status_int = 231, "ERROR_PIPE_BUSY", sc_win32_status_int = 232, "ERROR_NO_DATA", sc_win32_status_int = 233, "ERROR_PIPE_NOT_CONNECTED", sc_win32_status_int = 234, "ERROR_MORE_DATA", sc_win32_status_int = 240, "ERROR_VC_DISCONNECTED", sc_win32_status_int = 254, "ERROR_INVALID_EA_NAME", sc_win32_status_int = 255, "ERROR_EA_LIST_INCONSISTENT", sc_win32_status_int = 258, "WAIT_TIMEOUT", sc_win32_status_int = 259, "ERROR_NO_MORE_ITEMS", sc_win32_status_int = 266, "ERROR_CANNOT_COPY", sc_win32_status_int = 267, "ERROR_DIRECTORY", sc_win32_status_int = 275, "ERROR_EAS_DIDNT_FIT", sc_win32_status_int = 276, "ERROR_EA_FILE_CORRUPT", sc_win32_status_int = 277, "ERROR_EA_TABLE_FULL", sc_win32_status_int = 278, "ERROR_INVALID_EA_HANDLE", sc_win32_status_int = 282, "ERROR_EAS_NOT_SUPPORTED", sc_win32_status_int = 288, "ERROR_NOT_OWNER", sc_win32_status_int = 298, "ERROR_TOO_MANY_POSTS", sc_win32_status_int = 299, "ERROR_PARTIAL_COPY", sc_win32_status_int = 300, "ERROR_OPLOCK_NOT_GRANTED", sc_win32_status_int = 301, "ERROR_INVALID_OPLOCK_PROTOCOL", sc_win32_status_int = 317, "ERROR_MR_MID_NOT_FOUND", sc_win32_status_int = 487, "ERROR_INVALID_ADDRESS", sc_win32_status_int = 534, "ERROR_ARITHMETIC_OVERFLOW", sc_win32_status_int = 535, "ERROR_PIPE_CONNECTED", sc_win32_status_int = 536, "ERROR_PIPE_LISTENING", sc_win32_status_int = 994, "ERROR_EA_ACCESS_DENIED", sc_win32_status_int = 995, "ERROR_OPERATION_ABORTED", sc_win32_status_int = 996, "ERROR_IO_INCOMPLETE", sc_win32_status_int = 997, "ERROR_IO_PENDING", sc_win32_status_int = 998, "ERROR_NOACCESS", sc_win32_status_int = 999, "ERROR_SWAPERROR")
| alter // XDM mappings
    xdm.event.duration = to_integer(time_taken),
    xdm.event.outcome = if(
        is_successful, XDM_CONST.OUTCOME_SUCCESS,
        log_type = "Error Log" or (sc_status_int >= 400 and sc_status_int <= 599), XDM_CONST.OUTCOME_FAILED,
        sc_win32_status_int > 0 and sc_status_int < 400, XDM_CONST.OUTCOME_PARTIAL),
    xdm.event.outcome_reason = if(not is_successful and sc_status != null, arraystring(arraycreate(coalesce(full_status_code, sc_status), sc_win32_status_reason, sc_status_reason, s_reason), "; ")),
    xdm.event.type = log_type, 
    xdm.observer.name = s_computername,
    xdm.network.application_protocol = if(cs_version != "-", cs_version),
    xdm.network.http.http_header.header = if(cs_cookie != null and cs_cookie != "-", "Cookie"),
    xdm.network.http.http_header.value = if(cs_cookie != "-", cs_cookie),
    xdm.network.http.method = if(cs_method = "-" or cs_method = null, null, cs_method = "GET", XDM_CONST.HTTP_METHOD_GET, cs_method = "POST", XDM_CONST.HTTP_METHOD_POST,cs_method = "PUT", XDM_CONST.HTTP_METHOD_PUT, cs_method = "PATCH", XDM_CONST.HTTP_METHOD_PATCH, cs_method = "OPTIONS", XDM_CONST.HTTP_METHOD_OPTIONS, cs_method = "HEAD", XDM_CONST.HTTP_METHOD_HEAD, cs_method = "ACL", XDM_CONST.HTTP_METHOD_ACL, cs_method = "BASELINE_CONTROL", XDM_CONST.HTTP_METHOD_BASELINE_CONTROL, cs_method = "BIND", XDM_CONST.HTTP_METHOD_BIND, cs_method = "CHECKIN", XDM_CONST.HTTP_METHOD_CHECKIN, cs_method = "CHECKOUT", XDM_CONST.HTTP_METHOD_CHECKOUT, cs_method = "CONNECT", XDM_CONST.HTTP_METHOD_CONNECT, cs_method = "COPY", XDM_CONST.HTTP_METHOD_COPY, cs_method = "DELETE", XDM_CONST.HTTP_METHOD_DELETE, cs_method = "LABEL", XDM_CONST.HTTP_METHOD_LABEL, cs_method = "LINK", XDM_CONST.HTTP_METHOD_LINK, cs_method = "LOCK", XDM_CONST.HTTP_METHOD_LOCK, cs_method = "MERGE", XDM_CONST.HTTP_METHOD_MERGE, cs_method = "MKACTIVITY", XDM_CONST.HTTP_METHOD_MKACTIVITY, cs_method = "MKCALENDAR", XDM_CONST.HTTP_METHOD_MKCALENDAR, cs_method = "MKCOL", XDM_CONST.HTTP_METHOD_MKCOL, cs_method = "MKREDIRECTREF", XDM_CONST.HTTP_METHOD_MKREDIRECTREF, cs_method = "MKWORKSPACE", XDM_CONST.HTTP_METHOD_MKWORKSPACE, cs_method = "MOVE", XDM_CONST.HTTP_METHOD_MOVE, cs_method = "ORDERPATCH", XDM_CONST.HTTP_METHOD_ORDERPATCH, cs_method = "PRI", XDM_CONST.HTTP_METHOD_PRI, cs_method = "PROPFIND", XDM_CONST.HTTP_METHOD_PROPFIND, cs_method = "PROPPATCH", XDM_CONST.HTTP_METHOD_PROPPATCH, cs_method = "REBIND", XDM_CONST.HTTP_METHOD_REBIND, cs_method = "REPORT", XDM_CONST.HTTP_METHOD_REPORT, cs_method = "SEARCH", XDM_CONST.HTTP_METHOD_SEARCH, cs_method = "TRACE", XDM_CONST.HTTP_METHOD_TRACE, cs_method = "UNBIND", XDM_CONST.HTTP_METHOD_UNBIND, cs_method = "UNCHECKOUT", XDM_CONST.HTTP_METHOD_UNCHECKOUT, cs_method = "UNLINK", XDM_CONST.HTTP_METHOD_UNLINK, cs_method = "UNLOCK", XDM_CONST.HTTP_METHOD_UNLOCK, cs_method = "UPDATE", XDM_CONST.HTTP_METHOD_UPDATE, cs_method = "UPDATEREDIRECTREF", XDM_CONST.HTTP_METHOD_UPDATEREDIRECTREF, cs_method = "VERSION_CONTROL", XDM_CONST.HTTP_METHOD_VERSION_CONTROL, cs_method),
    xdm.network.http.referrer = if(cs_referer != "-", cs_referer),
    xdm.network.http.response_code = if(sc_status = "-", null, sc_status = "200", XDM_CONST.HTTP_RSP_CODE_OK, sc_status = "201", XDM_CONST.HTTP_RSP_CODE_CREATED, sc_status = "500", XDM_CONST.HTTP_RSP_CODE_INTERNAL_SERVER_ERROR, sc_status = "501", XDM_CONST.HTTP_RSP_CODE_NOT_IMPLEMENTED, sc_status = "502", XDM_CONST.HTTP_RSP_CODE_BAD_GATEWAY, sc_status = "503", XDM_CONST.HTTP_RSP_CODE_SERVICE_UNAVAILABLE, sc_status = "504", XDM_CONST.HTTP_RSP_CODE_GATEWAY_TIMEOUT, sc_status = "505", XDM_CONST.HTTP_RSP_CODE_HTTP_VERSION_NOT_SUPPORTED, sc_status = "506", XDM_CONST.HTTP_RSP_CODE_VARIANT_ALSO_NEGOTIATES, sc_status = "507", XDM_CONST.HTTP_RSP_CODE_INSUFFICIENT_STORAGE, sc_status = "508", XDM_CONST.HTTP_RSP_CODE_LOOP_DETECTED, sc_status = "511", XDM_CONST.HTTP_RSP_CODE_NETWORK_AUTHENTICATION_REQUIRED, sc_status = "400", XDM_CONST.HTTP_RSP_CODE_BAD_REQUEST, sc_status = "401", XDM_CONST.HTTP_RSP_CODE_UNAUTHORIZED, sc_status = "402", XDM_CONST.HTTP_RSP_CODE_PAYMENT_REQUIRED, sc_status = "403", XDM_CONST.HTTP_RSP_CODE_FORBIDDEN, sc_status = "404", XDM_CONST.HTTP_RSP_CODE_NOT_FOUND, sc_status = "405", XDM_CONST.HTTP_RSP_CODE_METHOD_NOT_ALLOWED, sc_status = "406", XDM_CONST.HTTP_RSP_CODE_NOT_ACCEPTABLE, sc_status = "407", XDM_CONST.HTTP_RSP_CODE_PROXY_AUTHENTICATION_REQUIRED, sc_status = "408", XDM_CONST.HTTP_RSP_CODE_REQUEST_TIMEOUT, sc_status = "409", XDM_CONST.HTTP_RSP_CODE_CONFLICT, sc_status = "410", XDM_CONST.HTTP_RSP_CODE_GONE, sc_status = "411", XDM_CONST.HTTP_RSP_CODE_LENGTH_REQUIRED, sc_status = "412", XDM_CONST.HTTP_RSP_CODE_PRECONDITION_FAILED, sc_status = "413", XDM_CONST.HTTP_RSP_CODE_CONTENT_TOO_LARGE, sc_status = "414", XDM_CONST.HTTP_RSP_CODE_URI_TOO_LONG, sc_status = "415", XDM_CONST.HTTP_RSP_CODE_UNSUPPORTED_MEDIA_TYPE, sc_status = "416", XDM_CONST.HTTP_RSP_CODE_RANGE_NOT_SATISFIABLE, sc_status = "417", XDM_CONST.HTTP_RSP_CODE_EXPECTATION_FAILED, sc_status = "421", XDM_CONST.HTTP_RSP_CODE_MISDIRECTED_REQUEST, sc_status = "422", XDM_CONST.HTTP_RSP_CODE_UNPROCESSABLE_CONTENT, sc_status = "423", XDM_CONST.HTTP_RSP_CODE_LOCKED, sc_status = "424", XDM_CONST.HTTP_RSP_CODE_FAILED_DEPENDENCY, sc_status = "425", XDM_CONST.HTTP_RSP_CODE_TOO_EARLY, sc_status = "426", XDM_CONST.HTTP_RSP_CODE_UPGRADE_REQUIRED, sc_status = "428", XDM_CONST.HTTP_RSP_CODE_PRECONDITION_REQUIRED, sc_status = "429", XDM_CONST.HTTP_RSP_CODE_TOO_MANY_REQUESTS, sc_status = "431", XDM_CONST.HTTP_RSP_CODE_REQUEST_HEADER_FIELDS_TOO_LARGE, sc_status = "451", XDM_CONST.HTTP_RSP_CODE_UNAVAILABLE_FOR_LEGAL_REASONS, sc_status = "100", XDM_CONST.HTTP_RSP_CODE_CONTINUE, sc_status = "101", XDM_CONST.HTTP_RSP_CODE_SWITCHING_PROTOCOLS, sc_status = "102", XDM_CONST.HTTP_RSP_CODE_PROCESSING, sc_status = "103", XDM_CONST.HTTP_RSP_CODE_EARLY_HINTS, sc_status = "202", XDM_CONST.HTTP_RSP_CODE_ACCEPTED, sc_status = "203", XDM_CONST.HTTP_RSP_CODE_NON__AUTHORITATIVE_INFORMATION, sc_status = "204", XDM_CONST.HTTP_RSP_CODE_NO_CONTENT, sc_status = "205", XDM_CONST.HTTP_RSP_CODE_RESET_CONTENT, sc_status = "206", XDM_CONST.HTTP_RSP_CODE_PARTIAL_CONTENT, sc_status = "207", XDM_CONST.HTTP_RSP_CODE_MULTI__STATUS, sc_status = "208", XDM_CONST.HTTP_RSP_CODE_ALREADY_REPORTED, sc_status = "226", XDM_CONST.HTTP_RSP_CODE_IM_USED, sc_status = "300", XDM_CONST.HTTP_RSP_CODE_MULTIPLE_CHOICES, sc_status = "301", XDM_CONST.HTTP_RSP_CODE_MOVED_PERMANENTLY, sc_status = "302", XDM_CONST.HTTP_RSP_CODE_FOUND, sc_status = "303", XDM_CONST.HTTP_RSP_CODE_SEE_OTHER, sc_status = "304", XDM_CONST.HTTP_RSP_CODE_NOT_MODIFIED, sc_status = "305", XDM_CONST.HTTP_RSP_CODE_USE_PROXY, sc_status = "307", XDM_CONST.HTTP_RSP_CODE_TEMPORARY_REDIRECT, sc_status = "308", XDM_CONST.HTTP_RSP_CODE_PERMANENT_REDIRECT, sc_status),
    xdm.network.http.url = target_uri,
    xdm.network.ip_protocol = if(transport = "-" or transport = null, null, transport="TCP", XDM_CONST.IP_PROTOCOL_TCP, transport="UDP", XDM_CONST.IP_PROTOCOL_UDP, transport),
    xdm.network.session_id = streamid,
    xdm.session_context_id = streamid,
    xdm.source.host.ipv4_public_addresses = if(c_ipv4 != null and not incidr(c_ipv4, "10.0.0.0/8, 192.168.0.0/16, 172.16.0.0/12, 127.0.0.0/8, 169.254.0.0/16, 100.64.0.0/10"), arraycreate(c_ipv4)),
    xdm.source.ipv4 = c_ipv4,
    xdm.source.ipv6 = c_ipv6,
    xdm.source.port = to_integer(c_port),
    xdm.source.sent_bytes = to_integer(cs_bytes),
    xdm.source.user_agent = if(cs_user_agent != "-", replace(cs_user_agent, "+", " ")),
    xdm.source.user.username = if(cs_username != "-", cs_username),
    xdm.source.user.domain = user_domain,
    xdm.target.application.name = coalesce(s_sitename, s_siteid),
    xdm.target.host.fqdn = cs_host,
    xdm.target.host.hostname = s_computername,
    xdm.target.host.ipv4_public_addresses = if(s_ipv4 != null and not incidr(s_ipv4, "10.0.0.0/8, 192.168.0.0/16, 172.16.0.0/12, 127.0.0.0/8, 169.254.0.0/16, 100.64.0.0/10"), arraycreate(s_ipv4)),
    xdm.target.ipv4 = s_ipv4,
    xdm.target.ipv6 = s_ipv6,
    xdm.target.port = to_integer(s_port),
    xdm.target.resource.name = target_resource,
    xdm.target.sent_bytes = to_integer(sc_bytes),
    xdm.target.url = target_uri;


[MODEL: dataset = microsoft_windows_raw, content_id="MicrosoftWindowsEvents"]
// supported channels/providers 
filter channel in ("System", "Application") or provider_name in("Microsoft-Windows-PowerShell", "Microsoft-Windows-TaskScheduler", "Microsoft-Windows-Windows Firewall With Advanced Security", "Microsoft-Windows-Windows Defender") or provider_name contains "Microsoft-Windows-Security-"
| alter event_id_num = to_integer(event_id) // used for filtering by event id ranges 
| alter // Extract fields 
        action = arrayindex(regextract(message, "Action:\s*(\S+)"), 0), 
        action_status = arrayindex(regextract(message, "Action Status:\s*(.+?)\s+(?:\w+\s+)?\w+:"), 0),
        Command_Name = arrayindex(regextract(message, "Command Name = (.*?)\s{2, }"), 0),
        Command_Path = arrayindex(regextract(message, "Command Path = (.*?)\s{2, }"), 0),
        dc_name = event_data -> DCName,
        detection_type = arrayindex(regextract(message, "Detection Type:\s*(.+?)\s+Detection"), 0), // microsoft defender 
        defender_signature_version = arrayindex(regextract(message, "Signature Version:\s*(.+?)\s+Engine"), 0), // microsoft defender 
        defender_security_intelligence_version = coalesce(event_data -> ["Current security intelligence Version"], event_data -> ["AV security intelligence version"]), // microsoft defender 
        defender_engine_version = coalesce(event_data -> ["Current Engine Version"], arrayindex(regextract(message, "Engine Version:\s*([\d\.]+)\s"), 0), arrayindex(regextract(message, "Engine Version:\s*(.+?)$"), 0)), // microsoft defender 
        defender_security_intelligence_type = event_data -> ["Security intelligence Type"],
        error_code = coalesce(event_data -> error, arrayindex(regextract(message, "Error Code:\s*(\S+)"), 0)),
        error_message = coalesce(event_data -> ErrorMessage, arrayindex(regextract(message, "Error Description:\s*([^\.]+\.)"), 0)),
        event_data_param1 = event_data -> param1,
        event_data_param2 = event_data -> param2,
        event_name = arrayindex(regextract(message, "([^\.]+)\."), 0),
        IpPort = event_data -> IpPort,
        IpAddress = event_data -> IpAddress,
        LogLevel = lowercase(log_level),
        logonType = event_data -> LogonType,
        message_action = arrayindex(regextract(message, "action \"([^\"]+)\""), 0),
        message_instance = arrayindex(regextract(message, "instance \"([^\"]+)\""), 0),
        message_processID = arrayindex(regextract(message, "process ID \"([^\"]+)\""), 0),
        message_task = arrayindex(regextract(message , "task \"([^\"]+)\""), 0),
        new_value =  event_data -> ["New Value"],
        old_value = event_data -> ["Old Value"], 
        file_path = arrayindex(regextract(message , "Path:\s*(.+?\\\w+);?\s+\w+\s+\w+"), 0),
        process_name_format = coalesce(event_data -> ProcessName, arrayindex(regextract(message, "Process Name:\s*(\S+)"), 0)), 
        product_name = event_data -> ["Product Name"], // microsoft defender event ids 1000 - 1005 
        product_version = event_data -> ["Product Version"], // microsoft defender event ids 1000 - 1005 
        rule_name1 = arraystring(regextract(message, "Rule\s+Name\:\s+(.*)\b\s+Modifying\s*User:"), ""),
        rule_name2 = arraystring(regextract(message, "Rule\s*Name\:\s+(.*[^\w\s])\s+Modifying\s*User"), ""),
        scan_id = event_data -> ["Scan ID"], // windows defender event ids 1000 - 1005 
        scan_type = event_data -> ["Scan Type"], // windows defender event ids 1000 - 1005 
        scan_params = event_data -> ["Scan Parameters"], // windows defender event ids 1000 - 1005 
        scan_duration = multiply(add(add(multiply(to_integer(event_data -> ["Scan Time Hours"]), 3600), multiply(to_integer(event_data -> ["Scan Time Minutes"]), 60)), to_integer(event_data -> ["Scan Time Seconds"])), 1000), // windows defender event ids 1000 - 1005 
        severity = arrayindex(regextract(message, "Severity:\s*(\w+)"), 0),
        Script_Name = arrayindex(regextract(arrayindex(regextract(message, "Script Name = (.*?)\s{2, }"), 0), "\\([^\\]+)$"), 0),
        Script_Path = arrayindex(regextract(message, "Script Name = (.*?)\s{2, }"), 0),
        target_username = event_data -> TargetUserName, 
        target_user_sid = event_data -> TargetUserSid,
        target_domain_name = event_data -> TargetDomainName,
        threat_id = if(provider_name = "Microsoft-Windows-Windows Defender" and ((event_id_num >= 1006 and event_id_num <= 1012) or event_id_num = 1015 or (event_id_num >= 1116 and event_id_num <= 1119)), arrayindex(regextract(message, "ID:\s*(\w+)\s+\w+:"), 0)),
        threat_category = if(provider_name = "Microsoft-Windows-Windows Defender" and ((event_id_num >= 1006 and event_id_num <= 1012) or event_id_num = 1015 or (event_id_num >= 1116 and event_id_num <= 1119)), arrayindex(regextract(message, "Category:\s*(.+?)\s+\w+:"), 0)),
        threat_name = if(provider_name = "Microsoft-Windows-Windows Defender" and ((event_id_num >= 1006 and event_id_num <= 1012) or event_id_num = 1015 or (event_id_num >= 1116 and event_id_num <= 1119)), arrayindex(regextract(message, "Name:\s*(.+?)\s+ID:"), 0)),
        user_domain = coalesce(user -> domain, event_data -> Domain, event_data -> SubjectDomainName, user_data -> SubjectDomainName, arrayindex(regextract(message, "User:\s*([^\\]+)"), 0)),
        user_name = coalesce(user -> name, event_data -> User, event_data -> SubjectUserName, user_data -> SubjectUserName, arrayindex(regextract(message, "User:\s*(?:[^\\]+\\)*(\S+)"), 0), arrayindex(regextract(message, "User \"([^\"]+)\""), 0), if(channel="Application" and event_data -> param3 contains "*\\*", event_data -> param3)), 
        user_sid = coalesce(event_data -> SID, event_data -> SubjectUserSid, user -> identifier, user -> SubjectUserSid, event_data -> UserSid, if(provider_name = "Microsoft-Windows-Windows Firewall With Advanced Security", arrayindex(regextract(message, "Modifying\s*User\:\s+(.*)\b\s+Modifying\s+Application:"), 0))),
        user_type = user -> type
| alter // post-extraction processing & validations
        check_rule_name1 = if(rule_name1 ~= "\S", rule_name1, null),
    	check_rule_name2 = if(rule_name2 ~= "\S", rule_name2, null),
        check_Command_Path = if(Command_Path ~= "\S", Command_Path, null),
        check_Command_Name = if(Command_Name ~= "\S", Command_Name, null),
        check_Script_Name = if(Script_Name ~= "\S", Script_Name, null),
        check_Script_Path = if(Script_Path ~= "\S", Script_Path, null),
        check_message_task = if(message_task ~= "\S", message_task, null),
        check_message_processID = if(message_processID ~= "\S", message_processID, null),
        check_message_action = if(message_action ~= "\S", message_action, null),
        check_fw_description = if(provider_name = "Microsoft-Windows-Windows Firewall With Advanced Security", arraystring(regextract(message, "^[^\.]+\."), ""), null),
        check_fw_process_name = if(provider_name = "Microsoft-Windows-Windows Firewall With Advanced Security", arraystring(regextract(message, "Modifying\s*Application:\s+\S+\\([^\.]+\.exe)"), ""), null),
        get_message_instance_exe_path = if(message_instance ~= "exe", message_instance, null),
        get_message_instance_exe_process = if(message_instance ~= "exe", arrayindex(regextract(message_instance, "\\([a-zA-Z0-9]+\.exe)$"), 0), null)
| alter event_type = coalesce(event_action, task, check_message_task, event_name) // set event type
| alter // XDM mappings 
        xdm.alert.category = threat_category,
        xdm.alert.description = if(channel="System", error_code, check_fw_description != null, check_fw_description, error_message),
        xdm.alert.original_threat_name = threat_name,
        xdm.alert.original_threat_id = threat_id,
        xdm.alert.original_alert_id = activity_id,
        xdm.alert.severity = severity,
        xdm.event.description = coalesce(message, if(channel="System", event_data -> updateTitle), if(channel="Application", event_data -> param3)),
        xdm.event.duration = to_integer(scan_duration),
        xdm.event.id = to_string(event_id),
        xdm.event.log_level = if(LogLevel="information", XDM_CONST.LOG_LEVEL_INFORMATIONAL, LogLevel="error", XDM_CONST.LOG_LEVEL_ERROR, LogLevel="warning", XDM_CONST.LOG_LEVEL_WARNING, LogLevel="critical", XDM_CONST.LOG_LEVEL_CRITICAL, to_string(coalesce(opcode, log_level))),
        xdm.event.operation_sub_type = coalesce(check_message_action, arrayindex(regextract(message, "(^.*?)\."), 0), if(channel="System", event_data_param2)),
        xdm.event.original_event_type = event_type,
        xdm.event.outcome_reason = coalesce(if(channel="Application" and task="TM", event_data_param2), action_status, error_message),
        xdm.event.outcome = if(event_result = "success", XDM_CONST.OUTCOME_SUCCESS, event_result="failure", XDM_CONST.OUTCOME_FAILED, coalesce(event_result, action, error_code)),
        xdm.event.type = channel,
        xdm.logon.type = if(logonType="2", XDM_CONST.LOGON_TYPE_INTERACTIVE, logonType="3", XDM_CONST.LOGON_TYPE_NETWORK, logonType="4", XDM_CONST.LOGON_TYPE_BATCH , logonType="5", XDM_CONST.LOGON_TYPE_SERVICE , logonType ="6", XDM_CONST.LOGON_TYPE_PROXY , logonType="7", XDM_CONST.LOGON_TYPE_NEW_CREDENTIALS , logonType="8", XDM_CONST.LOGON_TYPE_NETWORK_CLEARTEXT, logonType="9", XDM_CONST.LOGON_TYPE_NEW_CREDENTIALS , logonType="10", XDM_CONST.LOGON_TYPE_REMOTE_INTERACTIVE , logonType="11", XDM_CONST.LOGON_TYPE_CACHED_INTERACTIVE, logonType="12", XDM_CONST.LOGON_TYPE_CACHED_REMOTE_INTERACTIVE , logonType="13", XDM_CONST.LOGON_TYPE_CACHED_UNLOCK, logonType),
        xdm.network.rule = coalesce(check_rule_name1, check_rule_name2, threat_id),
        xdm.observer.action = action,
        xdm.observer.type = provider_name,
        xdm.observer.unique_identifier = provider_guid,
        xdm.observer.version = product_version,
        xdm.session_context_id = to_string(record_id),
        xdm.source.agent.type = coalesce(defender_security_intelligence_type, detection_type), 
        xdm.source.agent.version = defender_engine_version,
        xdm.source.agent.content_version = coalesce(defender_signature_version, defender_security_intelligence_version),
        xdm.source.application.name = coalesce(if(channel="System", event_data_param1), arrayindex(regextract(message, "HostApplication=([\S]+)"), 0), product_name),
        xdm.source.application.version = product_version,
        xdm.source.host.fqdn = event_data -> WorkstationName,
        xdm.source.host.hostname = coalesce(host_name, computer_name, if(user_name contains "*$", user_name), if(channel="System", event_data -> HostName), if(channel="Application" and task="Devices", event_data_param1)),
        xdm.source.host.os = os_subtype,
        xdm.source.host.os_family = XDM_CONST.OS_FAMILY_WINDOWS,
        xdm.source.ipv4 = if(IpAddress ~= "(?:\d{1,3}\.){3}\d{1,3}", arrayindex(regextract(IpAddress, "((?:\d{1,3}\.){3}\d{1,3})"), 0)),
        xdm.source.ipv6 = if(IpAddress ~= "(?:[a-fA-F\d]{0,4}\:){7}[\wa-fA-F]{0,4}", arrayindex(regextract(IpAddress, "((?:[a-fA-F\d]{0,4}\:){7}[\wa-fA-F]{0,4})"), 0)), 
        xdm.source.port = if(IpPort~="\d+", to_integer(IpPort), null),
        xdm.source.process.command_line = coalesce(if(check_Command_Name != null and check_Command_Name != "", check_Command_Name), process_cmd),
        xdm.source.process.executable.directory = arraystring(regextract(message, "Modifying\s*Application:\s+(\S+)"), ""),
        xdm.source.process.executable.filename = if(check_Script_Name != null and check_Script_Name != "", check_Script_Name, null),
        xdm.source.process.executable.md5 = process_md5,
        xdm.source.process.executable.path = coalesce(get_message_instance_exe_path, process_name_format, if(channel="Application", event_data -> Module), if(check_Script_Path != null and check_Script_Path != "", check_Script_Path), if(check_Command_Path != null and check_Command_Path != "", check_Command_Path), process_path, file_path),
        xdm.source.process.executable.sha256 = process_sha256,
        xdm.source.process.name = coalesce(check_fw_process_name, get_message_instance_exe_process, arrayindex(regextract(process_name_format, "\\([^\\]+)$"), 0), if(channel="System", process_name_format), process_name),
        xdm.source.process.pid = to_integer(coalesce(check_message_processID, to_string(process_pid), if(channel="System", event_data -> ProcessID))),
        xdm.source.process.thread_id = to_integer(process_thread_id),
        xdm.source.user.domain = user_domain,
        xdm.source.user.identifier = user_sid,
        xdm.source.user.user_type = if(user_type contains "User", XDM_CONST.USER_TYPE_REGULAR, user_type contains "Service", XDM_CONST.USER_TYPE_SERVICE_ACCOUNT , user_type contains "Computer", XDM_CONST.USER_TYPE_MACHINE_ACCOUNT , user_type),
        xdm.source.user.username = user_name,
        xdm.target.ipv4 = "",
        xdm.target.file.path = file_path,
        xdm.target.port = to_integer(0),
        xdm.target.resource.id = scan_id, 
        xdm.target.resource.type = scan_type, 
        xdm.target.resource_before.value = old_value,
        xdm.target.resource.value = coalesce(new_value, scan_params),
        xdm.target.user.domain = coalesce(target_domain_name, if(channel="System", dc_name)),
        xdm.target.user.groups = if(target_username not contains "*$" AND event_type = "Security Group Management", arraycreate(target_username)),
        xdm.target.user.identifier = target_user_sid,
        xdm.target.user.username = if(target_username not contains "*$" AND event_type != "Security Group Management", target_username);


[MODEL: dataset = microsoft_sysmon_raw, content_id="MicrosoftWindowsSysmon"]
alter

	get_processthreadid_int = to_integer(process_thread_id),

	get_processpid_int = to_integer(process_pid),

	get_eventid_str = to_string(event_id),

	get_user_type = user -> type,

	get_user_sid = user -> identifier,

	get_user_domain = user -> domain,

	get_user_name = user -> name,

	get_eventdata_eventtype = event_data -> EventType,

	get_eventdata_ProcessId = to_integer(event_data -> ProcessId),

	get_eventdata_Image = event_data -> Image,

	get_eventdata_User = event_data -> User,

	get_eventdata_RuleName = event_data -> RuleName,

	get_eventdata_SourceUser = event_data -> SourceUser,

	get_eventdata_TargetProcessId = event_data -> TargetProcessId,

	get_eventdata_SourceImage = event_data -> SourceImage,

	get_eventdata_CallTrace = event_data -> CallTrace,

	get_eventdata_TargetUser = event_data -> TargetUser,

	get_eventdata_SourceProcessId = to_integer(event_data -> SourceProcessId),

	get_eventdata_SourceThreadId = to_integer(event_data -> SourceThreadId),

	get_eventdata_TargetImage = event_data -> TargetImage,

	get_eventdata_TargetObject = event_data -> TargetObject,

	get_eventdata_Details = event_data -> Details,

	get_eventdata_TargetFilename = event_data -> TargetFilename,

	get_eventdata_Hashes_sha256 = arraystring(regextract(event_data -> Hashes, "SHA256=([^\,]+)"), ""),

	get_eventdata_Protocol = uppercase(event_data -> Protocol),

	get_eventdata_DestinationIp = event_data -> DestinationIp,

	get_eventdata_DestinationHostname = event_data -> DestinationHostname,

	get_eventdata_SourceHostname = event_data -> SourceHostname,

	get_eventdata_SourceIp = event_data -> SourceIp,

	get_eventdata_SourcePort = to_integer(event_data -> SourcePort),

	get_eventdata_DestinationPort = to_integer(event_data -> DestinationPort),

	get_eventdata_CommandLine = event_data -> CommandLine,

	get_eventdata_IntegrityLevel = event_data -> IntegrityLevel,

	get_eventdata_OriginalFileName = event_data -> OriginalFileName,

	get_eventdata_LogonGuid = event_data -> LogonGuid,

	get_eventdata_Description = event_data -> Description,

	get_eventdata_TerminalSessionId = event_data -> TerminalSessionId,

	get_eventdata_FileVersion = event_data -> FileVersion,

	get_eventdata_ParentProcessId = event_data -> ParentProcessId,

	get_eventdata_ImageLoaded = event_data -> ImageLoaded,

	get_eventdata_Signed = to_string(event_data -> Signed),

	get_eventdata_Signature = event_data -> Signature,

	get_eventdata_SignatureStatus = lowercase(event_data -> SignatureStatus),

	get_eventdata_QueryName = event_data -> QueryName,

	get_eventdata_QueryResults = event_data -> QueryResults,

	get_eventdata_QueryStatus = to_string(event_data -> QueryStatus)

| alter

	check_avilable_ip = get_eventdata_DestinationIp,

	check_avilable_ip2 = get_eventdata_SourceIp,

	check_eventdata_SourceIp_v4 = if(get_eventdata_SourceIp ~= ":", null, get_eventdata_SourceIp),

	check_eventdata_SourceIp_v6 = if(get_eventdata_SourceIp ~= ":", get_eventdata_SourceIp, null),	

	check_eventdata_DestinationIp_v4 = if(get_eventdata_DestinationIp ~= ":", null, get_eventdata_DestinationIp),

	check_eventdata_DestinationIp_v6 = if(get_eventdata_DestinationIp ~= ":", get_eventdata_DestinationIp, null),

	check_eventid_name = if(get_eventid_str = "1", "Process creation", get_eventid_str = "2", "A process changed a file creation time", get_eventid_str = "3", "Network connection", get_eventid_str = "5", "Process terminated", get_eventid_str = "6", "Driver loaded", get_eventid_str = "7", "Image loaded", get_eventid_str = "8", "CreateRemoteThread", get_eventid_str = "9", "RawAccessRead", get_eventid_str = "10", "ProcessAccess", get_eventid_str = "11", "FileCreate", get_eventid_str = "12", "RegistryEvent: Object create and delete", get_eventid_str = "13", "RegistryEvent: Value Set", get_eventid_str = "14", "RegistryEvent: Key and Value Rename", get_eventid_str = "15", "FileCreateStreamHash", get_eventid_str = "17", "PipeEvent: Pipe Created", get_eventid_str = "18", "PipeEvent: Pipe Connected", get_eventid_str = "19", "WmiEvent: WmiEventFilter activity detected", get_eventid_str = "20", "WmiEvent: WmiEventConsumer activity detected", get_eventid_str = "21", "WmiEvent: WmiEventConsumerToFilter activity detected", get_eventid_str = "22", "DNSEvent: DNS query", get_eventid_str = "23", "FileDelete (File Delete archived)", get_eventid_str = "24", "ClipboardChange: New content in the clipboard", get_eventid_str = "25", "ProcessTampering: Process image change", get_eventid_str = "26", "FileDeleteDetected: File Delete logged", get_eventid_str),

	check_task_registry = if(task != "Registry object added or deleted", null, get_eventdata_eventtype = "DeleteKey", "DeleteKey", get_eventdata_eventtype = "DeleteValue", "DeleteValue", get_eventdata_eventtype = "CreateKey", "CreateKey", null),

	check_eventdata_Image_exe = arraystring(regextract(get_eventdata_Image, "[^\\]+\.[a-z]+$"), ""),

	check_eventdata_User_domain = if(get_eventdata_User = null, null, arraystring(regextract(get_eventdata_User, "^([^\\]+)\\[\s\S]+"), "")),

	check_eventdata_User_name = if(get_eventdata_User = null, null, arraystring(regextract(get_eventdata_User, "^[^\\]+\\([\s\S]+)"), "")),

	check_eventdata_RuleName = if(get_eventdata_RuleName = "-", null, get_eventdata_RuleName),

	check_eventdata_SourceUser_domain = if(get_eventdata_SourceUser = null, null, arraystring(regextract(get_eventdata_SourceUser, "^([^\\]+)\\[\s\S]+"), "")),

	check_eventdata_SourceUser_name = if(get_eventdata_SourceUser = null, null, arraystring(regextract(get_eventdata_SourceUser, "^[^\\]+\\([\s\S]+)"), "")),

	check_eventdata_SourceImage_exe = arraystring(regextract(get_eventdata_SourceImage, "[^\\]+\.[a-z]+$"), ""),

	check_eventdata_TargetUser_domain = if(get_eventdata_TargetUser = null, null, arraystring(regextract(get_eventdata_TargetUser, "^([^\\]+)\\[\s\S]+"), "")),

	check_eventdata_TargetUser_name = if(get_eventdata_TargetUser = null, null, arraystring(regextract(get_eventdata_TargetUser, "^[^\\]+\\([\s\S]+)"), "")),

	check_eventdata_TargetImage_exe = arraystring(regextract(get_eventdata_TargetImage, "[^\\]+\.[a-z]+$"), ""),

	check_eventdata_IntegrityLevel = to_integer(if(get_eventdata_IntegrityLevel = "Untrusted", "0", get_eventdata_IntegrityLevel = "Low", "1", get_eventdata_IntegrityLevel = "Medium", "2", get_eventdata_IntegrityLevel = "High", "3", get_eventdata_IntegrityLevel = "System", "4", null))

| alter

	clean_task = lowercase(task),

	clean_log_level = lowercase(log_level),

	clean_eventdata_details = lowercase(get_eventdata_Details),

	clean_target_localip_10 = incidr(check_avilable_ip,"10.0.0.0/8"),

	clean_target_localip_127 = incidr(check_avilable_ip,"127.0.0.0/8"),

	clean_target_localip_169 = incidr(check_avilable_ip,"169.254.0.0/16"),

	clean_target_localip_172 = incidr(check_avilable_ip,"172.16.0.0/12"),

	clean_target_localip_192 = incidr(check_avilable_ip,"192.168.0.0/16"),

	clean_source_localip_10 = incidr(check_avilable_ip2,"10.0.0.0/8"),

	clean_source_localip_127 = incidr(check_avilable_ip2,"127.0.0.0/8"),

	clean_source_localip_169 = incidr(check_avilable_ip,"169.254.0.0/16"),

	clean_source_localip_172 = incidr(check_avilable_ip2,"172.16.0.0/12"),

	clean_source_localip_192 = incidr(check_avilable_ip2,"192.168.0.0/16") 

| alter

	xdm.source.host.os_family = XDM_CONST.OS_FAMILY_WINDOWS,

	xdm.observer.type = provider_name,

	xdm.observer.unique_identifier = replex(provider_guid, "\{|\}", ""),

	xdm.network.dns.dns_resource_record.value = if(get_eventdata_QueryResults = "-", null, get_eventdata_QueryResults),

	xdm.network.dns.dns_question.name = get_eventdata_QueryName,

	xdm.network.dns.response_code = if(get_eventdata_QueryStatus = "0", XDM_CONST.DNS_RESPONSE_CODE_NO_ERROR, get_eventdata_QueryStatus = "9001", XDM_CONST.DNS_RESPONSE_CODE_FORMAT_ERROR, get_eventdata_QueryStatus = "9002", XDM_CONST.DNS_RESPONSE_CODE_SERVER_FAILURE, get_eventdata_QueryStatus = "9003", XDM_CONST.DNS_RESPONSE_CODE_NON_EXISTENT_DOMAIN, get_eventdata_QueryStatus = "9004", XDM_CONST.DNS_RESPONSE_CODE_NOT_IMPLEMENTED, get_eventdata_QueryStatus = "9005", XDM_CONST.DNS_RESPONSE_CODE_QUERY_REFUSED, get_eventdata_QueryStatus = "9006", XDM_CONST.DNS_RESPONSE_CODE_NAME_EXISTS_WHEN_IT_SHOULD_NOT, get_eventdata_QueryStatus = "9007", XDM_CONST.DNS_RESPONSE_CODE_RR_SET_EXISTS_WHEN_IT_SHOULD_NOT, get_eventdata_QueryStatus = "9008", XDM_CONST.DNS_RESPONSE_CODE_RR_SET_THAT_SHOULD_EXIST_DOES_NOT, get_eventdata_QueryStatus = "9009", XDM_CONST.DNS_RESPONSE_CODE_SERVER_NOT_AUTHORITATIVE_FOR_ZONE, get_eventdata_QueryStatus = "9010", XDM_CONST.DNS_RESPONSE_CODE_NAME_NOT_CONTAINED_IN_ZONE, get_eventdata_QueryStatus = "9016", XDM_CONST.DNS_RESPONSE_CODE_TSIG_SIGNATURE_FAILURE, get_eventdata_QueryStatus = "9017", XDM_CONST.DNS_RESPONSE_CODE_KEY_NOT_RECOGNIZED, get_eventdata_QueryStatus = "9018", XDM_CONST.DNS_RESPONSE_CODE_SIGNATURE_OUT_OF_TIME_WINDOW, get_eventdata_QueryStatus = "9101", "DNS_ERROR_KEYMASTER_REQUIRED", get_eventdata_QueryStatus = "9102", "DNS_ERROR_NOT_ALLOWED_ON_SIGNED_ZONE", get_eventdata_QueryStatus = "9103", "DNS_ERROR_NSEC3_INCOMPATIBLE_WITH_RSA_SHA1", get_eventdata_QueryStatus = "9104", "DNS_ERROR_NOT_ENOUGH_SIGNING_KEY_DESCRIPTORS", get_eventdata_QueryStatus = "9105", "DNS_ERROR_UNSUPPORTED_ALGORITHM", get_eventdata_QueryStatus = "9106", "DNS_ERROR_INVALID_KEY_SIZE", get_eventdata_QueryStatus = "9107", "DNS_ERROR_SIGNING_KEY_NOT_ACCESSIBLE", get_eventdata_QueryStatus = "9108", "DNS_ERROR_KSP_DOES_NOT_SUPPORT_PROTECTION", get_eventdata_QueryStatus = "9109", "DNS_ERROR_UNEXPECTED_DATA_PROTECTION_ERROR", get_eventdata_QueryStatus = "9110", "DNS_ERROR_UNEXPECTED_CNG_ERROR", get_eventdata_QueryStatus = "9111", "DNS_ERROR_UNKNOWN_SIGNING_PARAMETER_VERSION", get_eventdata_QueryStatus = "9112", "DNS_ERROR_KSP_NOT_ACCESSIBLE", get_eventdata_QueryStatus = "9113", "DNS_ERROR_TOO_MANY_SKDS", get_eventdata_QueryStatus = "9114", "DNS_ERROR_INVALID_ROLLOVER_PERIOD", get_eventdata_QueryStatus = "9115", "DNS_ERROR_INVALID_INITIAL_ROLLOVER_OFFSET", get_eventdata_QueryStatus = "9116", "DNS_ERROR_ROLLOVER_IN_PROGRESS", get_eventdata_QueryStatus = "9117", "DNS_ERROR_STANDBY_KEY_NOT_PRESENT", get_eventdata_QueryStatus = "9118", "DNS_ERROR_NOT_ALLOWED_ON_ZSK", get_eventdata_QueryStatus = "9119", "DNS_ERROR_NOT_ALLOWED_ON_ACTIVE_SKD", get_eventdata_QueryStatus = "9120", "DNS_ERROR_ROLLOVER_ALREADY_QUEUED", get_eventdata_QueryStatus = "9121", "DNS_ERROR_NOT_ALLOWED_ON_UNSIGNED_ZONE", get_eventdata_QueryStatus = "9122", "DNS_ERROR_BAD_KEYMASTER", get_eventdata_QueryStatus = "9123", "DNS_ERROR_INVALID_SIGNATURE_VALIDITY_PERIOD", get_eventdata_QueryStatus = "9124", "DNS_ERROR_INVALID_NSEC3_ITERATION_COUNT", get_eventdata_QueryStatus = "9125", "DNS_ERROR_DNSSEC_IS_DISABLED", get_eventdata_QueryStatus = "9126", "DNS_ERROR_INVALID_XML", get_eventdata_QueryStatus = "9127", "DNS_ERROR_NO_VALID_TRUST_ANCHORS", get_eventdata_QueryStatus = "9128", "DNS_ERROR_ROLLOVER_NOT_POKEABLE", get_eventdata_QueryStatus = "9129", "DNS_ERROR_NSEC3_NAME_COLLISION", get_eventdata_QueryStatus = "9130", "DNS_ERROR_NSEC_INCOMPATIBLE_WITH_NSEC3_RSA_SHA1", get_eventdata_QueryStatus = "9501", "DNS_INFO_NO_RECORDS", get_eventdata_QueryStatus = "9502", "DNS_ERROR_BAD_PACKET", get_eventdata_QueryStatus = "9503", "DNS_ERROR_NO_PACKET", get_eventdata_QueryStatus = "9504", "DNS_ERROR_RCODE", get_eventdata_QueryStatus = "9505", "DNS_ERROR_UNSECURE_PACKET", get_eventdata_QueryStatus = "9506", "DNS_REQUEST_PENDING", get_eventdata_QueryStatus = "9551", "DNS_ERROR_INVALID_TYPE", get_eventdata_QueryStatus = "9552", "DNS_ERROR_INVALID_IP_ADDRESS", get_eventdata_QueryStatus = "9553", "DNS_ERROR_INVALID_PROPERTY", get_eventdata_QueryStatus = "9554", "DNS_ERROR_TRY_AGAIN_LATER", get_eventdata_QueryStatus = "9555", "DNS_ERROR_NOT_UNIQUE", get_eventdata_QueryStatus = "9556", "DNS_ERROR_NON_RFC_NAME", get_eventdata_QueryStatus = "9557", "DNS_STATUS_FQDN", get_eventdata_QueryStatus = "9558", "DNS_STATUS_DOTTED_NAME", get_eventdata_QueryStatus = "9559", "DNS_STATUS_SINGLE_PART_NAME", get_eventdata_QueryStatus = "9560", "DNS_ERROR_INVALID_NAME_CHAR", get_eventdata_QueryStatus = "9561", "DNS_ERROR_NUMERIC_NAME", get_eventdata_QueryStatus = "9562", "DNS_ERROR_NOT_ALLOWED_ON_ROOT_SERVER", get_eventdata_QueryStatus = "9563", "DNS_ERROR_NOT_ALLOWED_UNDER_DELEGATION", get_eventdata_QueryStatus = "9564", "DNS_ERROR_CANNOT_FIND_ROOT_HINTS", get_eventdata_QueryStatus = "9565", "DNS_ERROR_INCONSISTENT_ROOT_HINTS", get_eventdata_QueryStatus = "9566", "DNS_ERROR_DWORD_VALUE_TOO_SMALL", get_eventdata_QueryStatus = "9567", "DNS_ERROR_DWORD_VALUE_TOO_LARGE", get_eventdata_QueryStatus = "9568", "DNS_ERROR_BACKGROUND_LOADING", get_eventdata_QueryStatus = "9569", "DNS_ERROR_NOT_ALLOWED_ON_RODC", get_eventdata_QueryStatus = "9570", "DNS_ERROR_NOT_ALLOWED_UNDER_DNAME", get_eventdata_QueryStatus = "9571", "DNS_ERROR_DELEGATION_REQUIRED", get_eventdata_QueryStatus = "9572", "DNS_ERROR_INVALID_POLICY_TABLE", get_eventdata_QueryStatus = "9601", "DNS_ERROR_ZONE_DOES_NOT_EXIST", get_eventdata_QueryStatus = "9602", "DNS_ERROR_NO_ZONE_INFO", get_eventdata_QueryStatus = "9603", "DNS_ERROR_INVALID_ZONE_OPERATION", get_eventdata_QueryStatus = "9604", "DNS_ERROR_ZONE_CONFIGURATION_ERROR", get_eventdata_QueryStatus = "9605", "DNS_ERROR_ZONE_HAS_NO_SOA_RECORD", get_eventdata_QueryStatus = "9606", "DNS_ERROR_ZONE_HAS_NO_NS_RECORDS", get_eventdata_QueryStatus = "9607", "DNS_ERROR_ZONE_LOCKED", get_eventdata_QueryStatus = "9608", "DNS_ERROR_ZONE_CREATION_FAILED", get_eventdata_QueryStatus = "9609", "DNS_ERROR_ZONE_ALREADY_EXISTS", get_eventdata_QueryStatus = "9610", "DNS_ERROR_AUTOZONE_ALREADY_EXISTS", get_eventdata_QueryStatus = "9611", "DNS_ERROR_INVALID_ZONE_TYPE", get_eventdata_QueryStatus = "9612", "DNS_ERROR_SECONDARY_REQUIRES_MASTER_IP", get_eventdata_QueryStatus = "9613", "DNS_ERROR_ZONE_NOT_SECONDARY", get_eventdata_QueryStatus = "9614", "DNS_ERROR_NEED_SECONDARY_ADDRESSES", get_eventdata_QueryStatus = "9615", "DNS_ERROR_WINS_INIT_FAILED", get_eventdata_QueryStatus = "9616", "DNS_ERROR_NEED_WINS_SERVERS", get_eventdata_QueryStatus = "9617", "DNS_ERROR_NBSTAT_INIT_FAILED", get_eventdata_QueryStatus = "9618", "DNS_ERROR_SOA_DELETE_INVALID", get_eventdata_QueryStatus = "9619", "DNS_ERROR_FORWARDER_ALREADY_EXISTS", get_eventdata_QueryStatus = "9620", "DNS_ERROR_ZONE_REQUIRES_MASTER_IP", get_eventdata_QueryStatus = "9621", "DNS_ERROR_ZONE_IS_SHUTDOWN", get_eventdata_QueryStatus = "9622", "DNS_ERROR_ZONE_LOCKED_FOR_SIGNING", get_eventdata_QueryStatus = "9651", "DNS_ERROR_PRIMARY_REQUIRES_DATAFILE", get_eventdata_QueryStatus = "9652", "DNS_ERROR_INVALID_DATAFILE_NAME", get_eventdata_QueryStatus = "9653", "DNS_ERROR_DATAFILE_OPEN_FAILURE", get_eventdata_QueryStatus = "9654", "DNS_ERROR_FILE_WRITEBACK_FAILED", get_eventdata_QueryStatus = "9655", "DNS_ERROR_DATAFILE_PARSING", get_eventdata_QueryStatus = "9701", "DNS_ERROR_RECORD_DOES_NOT_EXIST", get_eventdata_QueryStatus = "9702", "DNS_ERROR_RECORD_FORMAT", get_eventdata_QueryStatus = "9703", "DNS_ERROR_NODE_CREATION_FAILED", get_eventdata_QueryStatus = "9704", "DNS_ERROR_UNKNOWN_RECORD_TYPE", get_eventdata_QueryStatus = "9705", "DNS_ERROR_RECORD_TIMED_OUT", get_eventdata_QueryStatus = "9706", "DNS_ERROR_NAME_NOT_IN_ZONE", get_eventdata_QueryStatus = "9707", "DNS_ERROR_CNAME_LOOP", get_eventdata_QueryStatus = "9708", "DNS_ERROR_NODE_IS_CNAME", get_eventdata_QueryStatus = "9709", "DNS_ERROR_CNAME_COLLISION", get_eventdata_QueryStatus = "9710", "DNS_ERROR_RECORD_ONLY_AT_ZONE_ROOT", get_eventdata_QueryStatus = "9711", "DNS_ERROR_RECORD_ALREADY_EXISTS", get_eventdata_QueryStatus = "9712", "DNS_ERROR_SECONDARY_DATA", get_eventdata_QueryStatus = "9713", "DNS_ERROR_NO_CREATE_CACHE_DATA", get_eventdata_QueryStatus = "9714", "DNS_ERROR_NAME_DOES_NOT_EXIST", get_eventdata_QueryStatus = "9715", "DNS_WARNING_PTR_CREATE_FAILED", get_eventdata_QueryStatus = "9716", "DNS_WARNING_DOMAIN_UNDELETED", get_eventdata_QueryStatus = "9717", "DNS_ERROR_DS_UNAVAILABLE", get_eventdata_QueryStatus = "9718", "DNS_ERROR_DS_ZONE_ALREADY_EXISTS", get_eventdata_QueryStatus = "9719", "DNS_ERROR_NO_BOOTFILE_IF_DS_ZONE", get_eventdata_QueryStatus = "9720", "DNS_ERROR_NODE_IS_DNAME", get_eventdata_QueryStatus = "9721", "DNS_ERROR_DNAME_COLLISION", get_eventdata_QueryStatus = "9722", "DNS_ERROR_ALIAS_LOOP", get_eventdata_QueryStatus = "9751", "DNS_INFO_AXFR_COMPLETE", get_eventdata_QueryStatus = "9752", "DNS_ERROR_AXFR", get_eventdata_QueryStatus = "9753", "DNS_INFO_ADDED_LOCAL_WINS", get_eventdata_QueryStatus = "9801", "DNS_STATUS_CONTINUE_NEEDED", get_eventdata_QueryStatus = "9851", "DNS_ERROR_NO_TCPIP", get_eventdata_QueryStatus = "9852", "DNS_ERROR_NO_DNS_SERVERS", get_eventdata_QueryStatus = "9901", "DNS_ERROR_DP_DOES_NOT_EXIST", get_eventdata_QueryStatus = "9902", "DNS_ERROR_DP_ALREADY_EXISTS", get_eventdata_QueryStatus = "9903", "DNS_ERROR_DP_NOT_ENLISTED", get_eventdata_QueryStatus = "9904", "DNS_ERROR_DP_ALREADY_ENLISTED", get_eventdata_QueryStatus = "9905", "DNS_ERROR_DP_NOT_AVAILABLE", get_eventdata_QueryStatus = "9906", "DNS_ERROR_DP_FSMO_ERROR", get_eventdata_QueryStatus = null, null, to_string(get_eventdata_QueryStatus)),

	xdm.source.process.executable.signature_status = if(get_eventdata_SignatureStatus = "valid", XDM_CONST.SIGNATURE_STATUS_SIGNED_VERIFIED, get_eventdata_SignatureStatus = "unavailable", XDM_CONST.SIGNATURE_STATUS_STATUS_UNKNOWN, get_eventdata_SignatureStatus = "expired", XDM_CONST.SIGNATURE_STATUS_SIGNED_INVALID, get_eventdata_SignatureStatus = null, null, to_string(get_eventdata_SignatureStatus)),

	xdm.source.process.executable.signer = if(get_eventdata_Signature = "-", null, get_eventdata_Signature),

	xdm.source.process.executable.is_signed = to_boolean(get_eventdata_Signed),

	xdm.source.process.parent_id = get_eventdata_ParentProcessId,

	xdm.source.process.executable.file_type = if(get_eventdata_FileVersion = "-", null, get_eventdata_FileVersion),

	xdm.source.agent.identifier = get_eventdata_TerminalSessionId, 

	xdm.source.process.executable.path = coalesce(get_eventdata_ImageLoaded, get_eventdata_CallTrace),

	xdm.source.process.is_injected = if(get_eventid_str = "25", to_boolean("true"), null),

	xdm.event.id = get_eventid_str,

	xdm.event.type = channel,

	xdm.event.original_event_type = check_eventid_name,

	xdm.session_context_id = to_string(record_id),

	xdm.source.process.pid = coalesce(get_eventdata_SourceProcessId, get_eventdata_ProcessId, get_processpid_int),

	xdm.source.process.thread_id = coalesce(get_eventdata_SourceThreadId, get_processthreadid_int),

	xdm.event.operation = if(clean_task ~= "process create", XDM_CONST.OPERATION_TYPE_PROCESS_CREATE, clean_task ~= "file created", XDM_CONST.OPERATION_TYPE_FILE_CREATE, clean_task ~= "registry value set", XDM_CONST.OPERATION_TYPE_REGISTRY_SET_VALUE, clean_task ~= "file delete logged", XDM_CONST.OPERATION_TYPE_REGISTRY_SET_VALUE, check_task_registry = "DeleteKey", XDM_CONST.OPERATION_TYPE_REGISTRY_DELETE_KEY, check_task_registry = "DeleteValue", XDM_CONST.OPERATION_TYPE_REGISTRY_DELETE_VALUE, check_task_registry = "CreateKey", XDM_CONST.OPERATION_TYPE_REGISTRY_CREATE_KEY, clean_task ~= "image loaded", XDM_CONST.OPERATION_TYPE_IMAGE_LOAD, get_eventid_str = "5", XDM_CONST.OPERATION_TYPE_PROCESS_TERMINATE, get_eventid_str = "23", XDM_CONST.OPERATION_TYPE_FILE_REMOVE, get_eventid_str = "26", XDM_CONST.OPERATION_TYPE_FILE_REMOVE, task = null, null, to_string(task)),	

	xdm.source.user.user_type = if(get_user_type contains "User", XDM_CONST.USER_TYPE_REGULAR, get_user_type contains "Service", XDM_CONST.USER_TYPE_SERVICE_ACCOUNT , get_user_type contains "Computer", XDM_CONST.USER_TYPE_MACHINE_ACCOUNT , get_user_type),

	xdm.source.user.identifier = get_user_sid,

	xdm.source.user.domain = coalesce(check_eventdata_SourceUser_domain, check_eventdata_User_domain, get_user_domain),

	xdm.source.user.username = coalesce(check_eventdata_SourceUser_name, check_eventdata_User_name, get_user_name),

	xdm.event.log_level = if(clean_log_level = "information", XDM_CONST.LOG_LEVEL_INFORMATIONAL, clean_log_level = "error", XDM_CONST.LOG_LEVEL_ERROR, clean_log_level = "warning", XDM_CONST.LOG_LEVEL_WARNING, clean_log_level = "critical", XDM_CONST.LOG_LEVEL_CRITICAL, to_string(coalesce(opcode, log_level))),

	xdm.event.description = message,

	xdm.alert.description = event_data,

	xdm.source.process.executable.directory = coalesce(get_eventdata_SourceImage, get_eventdata_Image),

	xdm.source.process.name = coalesce(check_eventdata_SourceImage_exe, check_eventdata_Image_exe),

	xdm.network.rule = check_eventdata_RuleName,

	xdm.event.operation_sub_type = get_eventdata_eventtype,

	xdm.target.process.pid = to_integer(get_eventdata_TargetProcessId),

	xdm.target.user.username = check_eventdata_TargetUser_name,

	xdm.target.user.domain = check_eventdata_TargetUser_domain,

	xdm.target.process.name = check_eventdata_TargetImage_exe,

	xdm.target.process.executable.directory = get_eventdata_TargetImage,

	xdm.target.registry.key = get_eventdata_TargetObject,

	xdm.target.registry.value = get_eventdata_Details,

	xdm.target.registry.value_type = if(clean_eventdata_details ~= "binary", XDM_CONST.REGISTRY_VALUE_TYPE_REG_BINARY, clean_eventdata_details ~= "dword" and clean_eventdata_details ~= "little", XDM_CONST.REGISTRY_VALUE_TYPE_REG_DWORD_LITTLE_ENDIAN, clean_eventdata_details ~= "dword" and clean_eventdata_details ~= "big", XDM_CONST.REGISTRY_VALUE_TYPE_REG_DWORD_BIG_ENDIAN, clean_eventdata_details ~= "dword", XDM_CONST.REGISTRY_VALUE_TYPE_REG_DWORD, clean_eventdata_details ~= "link", XDM_CONST.REGISTRY_VALUE_TYPE_REG_LINK, clean_eventdata_details ~= "none", XDM_CONST.REGISTRY_VALUE_TYPE_REG_NONE, clean_eventdata_details ~= "qword" and clean_eventdata_details ~= "little", XDM_CONST.REGISTRY_VALUE_TYPE_REG_QWORD_LITTLE_ENDIAN, clean_eventdata_details ~= "qword", XDM_CONST.REGISTRY_VALUE_TYPE_REG_QWORD, clean_eventdata_details ~= "expand", XDM_CONST.REGISTRY_VALUE_TYPE_REG_EXPAND_SZ, clean_eventdata_details ~= "multi", XDM_CONST.REGISTRY_VALUE_TYPE_REG_MULTI_SZ, clean_eventdata_details ~= "sz", XDM_CONST.REGISTRY_VALUE_TYPE_REG_SZ, clean_eventdata_details = null, null, to_string(clean_eventdata_details)),

	xdm.target.file.path = get_eventdata_TargetFilename,

	xdm.source.process.executable.sha256 = get_eventdata_Hashes_sha256,

	xdm.network.ip_protocol = if(get_eventdata_Protocol = "HOPOPT" , XDM_CONST.IP_PROTOCOL_HOPOPT, get_eventdata_Protocol = "ICMP" , XDM_CONST.IP_PROTOCOL_ICMP, get_eventdata_Protocol = "IGMP" , XDM_CONST.IP_PROTOCOL_IGMP, get_eventdata_Protocol = "GGP" , XDM_CONST.IP_PROTOCOL_GGP, get_eventdata_Protocol = "IP" , XDM_CONST.IP_PROTOCOL_IP, get_eventdata_Protocol = "ST" , XDM_CONST.IP_PROTOCOL_ST, get_eventdata_Protocol = "TCP" , XDM_CONST.IP_PROTOCOL_TCP, get_eventdata_Protocol = "CBT" , XDM_CONST.IP_PROTOCOL_CBT, get_eventdata_Protocol = "EGP" , XDM_CONST.IP_PROTOCOL_EGP, get_eventdata_Protocol = "IGP" , XDM_CONST.IP_PROTOCOL_IGP, get_eventdata_Protocol = "BBN_RCC_MON" , XDM_CONST.IP_PROTOCOL_BBN_RCC_MON, get_eventdata_Protocol = "NVP_II" , XDM_CONST.IP_PROTOCOL_NVP_II, get_eventdata_Protocol = "PUP" , XDM_CONST.IP_PROTOCOL_PUP, get_eventdata_Protocol = "ARGUS" , XDM_CONST.IP_PROTOCOL_ARGUS, get_eventdata_Protocol = "EMCON" , XDM_CONST.IP_PROTOCOL_EMCON, get_eventdata_Protocol = "XNET" , XDM_CONST.IP_PROTOCOL_XNET, get_eventdata_Protocol = "CHAOS" , XDM_CONST.IP_PROTOCOL_CHAOS, get_eventdata_Protocol = "UDP" , XDM_CONST.IP_PROTOCOL_UDP, get_eventdata_Protocol = "MUX" , XDM_CONST.IP_PROTOCOL_MUX, get_eventdata_Protocol = "DCN_MEAS" , XDM_CONST.IP_PROTOCOL_DCN_MEAS, get_eventdata_Protocol = "HMP" , XDM_CONST.IP_PROTOCOL_HMP, get_eventdata_Protocol = "PRM" , XDM_CONST.IP_PROTOCOL_PRM, get_eventdata_Protocol = "XNS_IDP" , XDM_CONST.IP_PROTOCOL_XNS_IDP, get_eventdata_Protocol = "TRUNK_1" , XDM_CONST.IP_PROTOCOL_TRUNK_1, get_eventdata_Protocol = "TRUNK_2" , XDM_CONST.IP_PROTOCOL_TRUNK_2, get_eventdata_Protocol = "LEAF_1" , XDM_CONST.IP_PROTOCOL_LEAF_1, get_eventdata_Protocol = "LEAF_2" , XDM_CONST.IP_PROTOCOL_LEAF_2, get_eventdata_Protocol = "RDP" , XDM_CONST.IP_PROTOCOL_RDP, get_eventdata_Protocol = "IRTP" , XDM_CONST.IP_PROTOCOL_IRTP, get_eventdata_Protocol = "ISO_TP4" , XDM_CONST.IP_PROTOCOL_ISO_TP4, get_eventdata_Protocol = "NETBLT" , XDM_CONST.IP_PROTOCOL_NETBLT, get_eventdata_Protocol = "MFE_NSP" , XDM_CONST.IP_PROTOCOL_MFE_NSP, get_eventdata_Protocol = "MERIT_INP" , XDM_CONST.IP_PROTOCOL_MERIT_INP, get_eventdata_Protocol = "DCCP" , XDM_CONST.IP_PROTOCOL_DCCP, get_eventdata_Protocol = "3PC" , XDM_CONST.IP_PROTOCOL_3PC, get_eventdata_Protocol = "IDPR" , XDM_CONST.IP_PROTOCOL_IDPR, get_eventdata_Protocol = "XTP" , XDM_CONST.IP_PROTOCOL_XTP, get_eventdata_Protocol = "DDP" , XDM_CONST.IP_PROTOCOL_DDP, get_eventdata_Protocol = "IDPR_CMTP" , XDM_CONST.IP_PROTOCOL_IDPR_CMTP, get_eventdata_Protocol = "TP" , XDM_CONST.IP_PROTOCOL_TP, get_eventdata_Protocol = "IL" , XDM_CONST.IP_PROTOCOL_IL, get_eventdata_Protocol = "IPV6" , XDM_CONST.IP_PROTOCOL_IPV6, get_eventdata_Protocol = "SDRP" , XDM_CONST.IP_PROTOCOL_SDRP, get_eventdata_Protocol = "IPV6_ROUTE" , XDM_CONST.IP_PROTOCOL_IPV6_ROUTE, get_eventdata_Protocol = "IPV6_FRAG" , XDM_CONST.IP_PROTOCOL_IPV6_FRAG, get_eventdata_Protocol = "IDRP" , XDM_CONST.IP_PROTOCOL_IDRP, get_eventdata_Protocol = "RSVP" , XDM_CONST.IP_PROTOCOL_RSVP, get_eventdata_Protocol = "GRE" , XDM_CONST.IP_PROTOCOL_GRE, get_eventdata_Protocol = "DSR" , XDM_CONST.IP_PROTOCOL_DSR, get_eventdata_Protocol = "BNA" , XDM_CONST.IP_PROTOCOL_BNA, get_eventdata_Protocol = "ESP" , XDM_CONST.IP_PROTOCOL_ESP, get_eventdata_Protocol = "AH" , XDM_CONST.IP_PROTOCOL_AH, get_eventdata_Protocol = "I_NLSP" , XDM_CONST.IP_PROTOCOL_I_NLSP, get_eventdata_Protocol = "SWIPE" , XDM_CONST.IP_PROTOCOL_SWIPE, get_eventdata_Protocol = "NARP" , XDM_CONST.IP_PROTOCOL_NARP, get_eventdata_Protocol = "MOBILE" , XDM_CONST.IP_PROTOCOL_MOBILE, get_eventdata_Protocol = "TLSP" , XDM_CONST.IP_PROTOCOL_TLSP, get_eventdata_Protocol = "SKIP" , XDM_CONST.IP_PROTOCOL_SKIP, get_eventdata_Protocol = "IPV6_ICMP" , XDM_CONST.IP_PROTOCOL_IPV6_ICMP, get_eventdata_Protocol = "IPV6_NONXT" , XDM_CONST.IP_PROTOCOL_IPV6_NONXT, get_eventdata_Protocol = "IPV6_OPTS" , XDM_CONST.IP_PROTOCOL_IPV6_OPTS, get_eventdata_Protocol = "CFTP" , XDM_CONST.IP_PROTOCOL_CFTP, get_eventdata_Protocol = "SAT_EXPAK" , XDM_CONST.IP_PROTOCOL_SAT_EXPAK, get_eventdata_Protocol = "KRYPTOLAN" , XDM_CONST.IP_PROTOCOL_KRYPTOLAN, get_eventdata_Protocol = "RVD" , XDM_CONST.IP_PROTOCOL_RVD, get_eventdata_Protocol = "IPPC" , XDM_CONST.IP_PROTOCOL_IPPC, get_eventdata_Protocol = "SAT_MON" , XDM_CONST.IP_PROTOCOL_SAT_MON, get_eventdata_Protocol = "VISA" , XDM_CONST.IP_PROTOCOL_VISA, get_eventdata_Protocol = "IPCV" , XDM_CONST.IP_PROTOCOL_IPCV, get_eventdata_Protocol = "CPNX" , XDM_CONST.IP_PROTOCOL_CPNX, get_eventdata_Protocol = "CPHB" , XDM_CONST.IP_PROTOCOL_CPHB, get_eventdata_Protocol = "WSN" , XDM_CONST.IP_PROTOCOL_WSN, get_eventdata_Protocol = "PVP" , XDM_CONST.IP_PROTOCOL_PVP, get_eventdata_Protocol = "BR_SAT_MON" , XDM_CONST.IP_PROTOCOL_BR_SAT_MON, get_eventdata_Protocol = "SUN_ND" , XDM_CONST.IP_PROTOCOL_SUN_ND, get_eventdata_Protocol = "WB_MON" , XDM_CONST.IP_PROTOCOL_WB_MON, get_eventdata_Protocol = "WB_EXPAK" , XDM_CONST.IP_PROTOCOL_WB_EXPAK, get_eventdata_Protocol = "ISO_IP" , XDM_CONST.IP_PROTOCOL_ISO_IP, get_eventdata_Protocol = "VMTP" , XDM_CONST.IP_PROTOCOL_VMTP, get_eventdata_Protocol = "SECURE_VMTP" , XDM_CONST.IP_PROTOCOL_SECURE_VMTP, get_eventdata_Protocol = "VINES" , XDM_CONST.IP_PROTOCOL_VINES, get_eventdata_Protocol = "TTP" , XDM_CONST.IP_PROTOCOL_TTP, get_eventdata_Protocol = "NSFNET_IGP" , XDM_CONST.IP_PROTOCOL_NSFNET_IGP, get_eventdata_Protocol = "DGP" , XDM_CONST.IP_PROTOCOL_DGP, get_eventdata_Protocol = "TCF" , XDM_CONST.IP_PROTOCOL_TCF, get_eventdata_Protocol = "EIGRP" , XDM_CONST.IP_PROTOCOL_EIGRP, get_eventdata_Protocol = "OSPFIGP" , XDM_CONST.IP_PROTOCOL_OSPFIGP, get_eventdata_Protocol = "SPRITE_RPC" , XDM_CONST.IP_PROTOCOL_SPRITE_RPC, get_eventdata_Protocol = "LARP" , XDM_CONST.IP_PROTOCOL_LARP, get_eventdata_Protocol = "MTP" , XDM_CONST.IP_PROTOCOL_MTP, get_eventdata_Protocol = "AX25" , XDM_CONST.IP_PROTOCOL_AX25, get_eventdata_Protocol = "IPIP" , XDM_CONST.IP_PROTOCOL_IPIP, get_eventdata_Protocol = "MICP" , XDM_CONST.IP_PROTOCOL_MICP, get_eventdata_Protocol = "SCC_SP" , XDM_CONST.IP_PROTOCOL_SCC_SP, get_eventdata_Protocol = "ETHERIP" , XDM_CONST.IP_PROTOCOL_ETHERIP, get_eventdata_Protocol = "ENCAP" , XDM_CONST.IP_PROTOCOL_ENCAP, get_eventdata_Protocol = "GMTP" , XDM_CONST.IP_PROTOCOL_GMTP, get_eventdata_Protocol = "IFMP" , XDM_CONST.IP_PROTOCOL_IFMP, get_eventdata_Protocol = "PNNI" , XDM_CONST.IP_PROTOCOL_PNNI, get_eventdata_Protocol = "PIM" , XDM_CONST.IP_PROTOCOL_PIM, get_eventdata_Protocol = "ARIS" , XDM_CONST.IP_PROTOCOL_ARIS, get_eventdata_Protocol = "SCPS" , XDM_CONST.IP_PROTOCOL_SCPS, get_eventdata_Protocol = "QNX" , XDM_CONST.IP_PROTOCOL_QNX, get_eventdata_Protocol = "AN" , XDM_CONST.IP_PROTOCOL_AN, get_eventdata_Protocol = "IPCOMP" , XDM_CONST.IP_PROTOCOL_IPCOMP, get_eventdata_Protocol = "SNP" , XDM_CONST.IP_PROTOCOL_SNP, get_eventdata_Protocol = "COMPAQ_PEER" , XDM_CONST.IP_PROTOCOL_COMPAQ_PEER, get_eventdata_Protocol = "IPX_IN_IP" , XDM_CONST.IP_PROTOCOL_IPX_IN_IP, get_eventdata_Protocol = "VRRP" , XDM_CONST.IP_PROTOCOL_VRRP, get_eventdata_Protocol = "PGM" , XDM_CONST.IP_PROTOCOL_PGM, get_eventdata_Protocol = "L2TP" , XDM_CONST.IP_PROTOCOL_L2TP, get_eventdata_Protocol = "DDX" , XDM_CONST.IP_PROTOCOL_DDX, get_eventdata_Protocol = "IATP" , XDM_CONST.IP_PROTOCOL_IATP, get_eventdata_Protocol = "STP" , XDM_CONST.IP_PROTOCOL_STP, get_eventdata_Protocol = "SRP" , XDM_CONST.IP_PROTOCOL_SRP, get_eventdata_Protocol = "UTI" , XDM_CONST.IP_PROTOCOL_UTI, get_eventdata_Protocol = "SMP" , XDM_CONST.IP_PROTOCOL_SMP, get_eventdata_Protocol = "SM" , XDM_CONST.IP_PROTOCOL_SM, get_eventdata_Protocol = "PTP" , XDM_CONST.IP_PROTOCOL_PTP, get_eventdata_Protocol = "ISIS" , XDM_CONST.IP_PROTOCOL_ISIS, get_eventdata_Protocol = "FIRE" , XDM_CONST.IP_PROTOCOL_FIRE, get_eventdata_Protocol = "CRTP" , XDM_CONST.IP_PROTOCOL_CRTP, get_eventdata_Protocol = "CRUDP" , XDM_CONST.IP_PROTOCOL_CRUDP, get_eventdata_Protocol = "SSCOPMCE" , XDM_CONST.IP_PROTOCOL_SSCOPMCE, get_eventdata_Protocol = "IPLT" , XDM_CONST.IP_PROTOCOL_IPLT, get_eventdata_Protocol = "SPS" , XDM_CONST.IP_PROTOCOL_SPS, get_eventdata_Protocol = "PIPE" , XDM_CONST.IP_PROTOCOL_PIPE, get_eventdata_Protocol = "SCTP" , XDM_CONST.IP_PROTOCOL_SCTP, get_eventdata_Protocol = "FC" , XDM_CONST.IP_PROTOCOL_FC, get_eventdata_Protocol = "RSVP_E2E_IGNORE" , XDM_CONST.IP_PROTOCOL_RSVP_E2E_IGNORE, get_eventdata_Protocol = "MOBILITY" , XDM_CONST.IP_PROTOCOL_MOBILITY, get_eventdata_Protocol = "UDPLITE" , XDM_CONST.IP_PROTOCOL_UDPLITE, get_eventdata_Protocol = "MPLS_IN_IP" , XDM_CONST.IP_PROTOCOL_MPLS_IN_IP, get_eventdata_Protocol = "MANET" , XDM_CONST.IP_PROTOCOL_MANET, get_eventdata_Protocol = "HIP" , XDM_CONST.IP_PROTOCOL_HIP, get_eventdata_Protocol = "SHIM6" , XDM_CONST.IP_PROTOCOL_SHIM6, get_eventdata_Protocol = "WESP" , XDM_CONST.IP_PROTOCOL_WESP, get_eventdata_Protocol = "ROHC" , XDM_CONST.IP_PROTOCOL_ROHC, get_eventdata_Protocol = "RESERVED" , XDM_CONST.IP_PROTOCOL_RESERVED, get_eventdata_Protocol = null, null, to_string(get_eventdata_Protocol)),

	xdm.target.ipv4 = check_eventdata_DestinationIp_v4,

	xdm.target.ipv6 = check_eventdata_DestinationIp_v6,

	xdm.target.is_internal_ip = if(get_eventdata_DestinationIp = null, null, clean_target_localip_10 = false and clean_target_localip_172 = false and clean_target_localip_192 = false and clean_target_localip_127 = false and clean_target_localip_169 = false, to_boolean("false"), to_boolean("true")),

	xdm.target.host.hostname = if(get_eventdata_DestinationHostname = "-", null, get_eventdata_DestinationHostname),

	xdm.source.host.hostname = if(get_eventdata_SourceHostname = "-", null, coalesce(get_eventdata_SourceHostname, host_name, computer_name)),

	xdm.source.ipv4 = check_eventdata_SourceIp_v4,

	xdm.source.ipv6 = check_eventdata_SourceIp_v6,

	xdm.source.is_internal_ip = if(get_eventdata_SourceIp = null, null, clean_source_localip_10 = false and clean_source_localip_172 = false and clean_source_localip_192 = false and clean_source_localip_127 = false and clean_source_localip_169 = false, to_boolean("false"), to_boolean("true")),

	xdm.source.port = get_eventdata_SourcePort,

	xdm.target.port = get_eventdata_DestinationPort,

	xdm.source.process.command_line = get_eventdata_CommandLine,

	xdm.source.process.integrity_level = check_eventdata_IntegrityLevel,

	xdm.source.process.executable.filename = get_eventdata_OriginalFileName,

	xdm.logon.logon_guid = get_eventdata_LogonGuid,

	xdm.alert.subcategory = get_eventdata_Description;


[MODEL: dataset = mimecast_mimecast_raw, content_id="Mimecast"]
filter
    xsiem_classifier = "audit_event"
| alter
    
    xdm.event.operation_sub_type = category,
    xdm.event.description = eventInfo,
    xdm.event.type = auditType,
    xdm.source.user.username = user,
    xdm.event.id = id;

filter
    xsiem_classifier = "siem_log"
| alter
    rcpt_array = arraymap(json_extract_array(rcpt, "$."), trim("@element", "\"")),
    recipient_array = arraymap(json_extract_array(Recipient, "$."), trim("@element", "\"")),
    ip_array = arraymap(json_extract_array(IP , "$."), trim("@element", "\"")),
    src_ip_array = arraymap(json_extract_array(SourceIP , "$."), trim("@element", "\""))
| alter
    xdm.observer.unique_identifier = acc,
    xdm.event.id = aCode,
    xdm.email.attachment.filename = AttNames,
    xdm.email.recipients = arrayconcat(rcpt_array, recipient_array),
    xdm.email.message_id = MsgId,
    xdm.email.sender = Sender,
    xdm.email.subject = Subject,
    xdm.alert.name = Virus,
    xdm.email.attachment.extension = fileExt,
    xdm.email.attachment.file_type = fileMime,
    xdm.email.attachment.md5 = md5,
    xdm.email.attachment.sha256 = sha256,
    xdm.event.description = ScanResultInfo,
    xdm.event.type = coalesce(Action, Act),
    xdm.target.host.ipv4_addresses = arrayconcat(ip_array, src_ip_array);


[MODEL: dataset = mysql_enterprise_raw, content_id="MySQLEnterprise"]
alter
    //_time = parse_timestamp("%Y-%m-%d %H:%M:%S", json_extract_scalar(_raw_log, "$.timestamp")),
    xdm.target.resource.id = json_extract_scalar(_raw_log, "$.startup_data.server_id"),
    xdm.target.resource.type = json_extract_scalar(_raw_log, "$.startup_data.os_version"),
    xdm.target.resource.sub_type = json_extract_scalar(_raw_log, "$.startup_data.mysql_version"),
    xdm.event.type = json_extract_scalar(_raw_log, "$.class"),
    xdm.source.user.username = json_extract_scalar(_raw_log, "$.account.user"),
    xdm.source.host.hostname = json_extract_scalar(_raw_log, "$.account.host"),
    xdm.target.user.username = json_extract_scalar(_raw_log, "$.login.user"),
    xdm.target.host.os = json_extract_scalar(_raw_log, "$.login.os"),
    xdm.target.ipv4 = json_extract_scalar(_raw_log, "$.login.ip"),
    xdm.database.name = json_extract_scalar(_raw_log, "$.table_access_data.db"),
    xdm.database.tables = split(json_extract_scalar(_raw_log, "$.table_access_data.table")),
    xdm.database.operation = json_extract_scalar(_raw_log, "$.table_access_data.query"),
    xdm.target.process.command_line = json_extract_scalar(_raw_log, "$.table_access_data.sql_command"),
    xdm.database.connection_id = json_extract_scalar(_raw_log, "$.connection_id");


[MODEL: dataset="nginx_nginx_raw", content_id="NGINXWebServer"]
filter _raw_log ~= "GET|HEAD|POST|DELETE|CONNECT|OPTIONS|TRACE|PATCH"
| alter 
    Source_Ip = arrayindex(regextract(_raw_log, "(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\s)"),0),
    requested_line = arrayindex(regextract(_raw_log,"\"[A-Z]+\s(\S+)\sHTTP"),0),
    User_agent = arrayindex(regextract(_raw_log,"\"\s\"([^\"]+)"),0),
    bytes_size = arrayindex(regextract(_raw_log,"\d\s(\d+)"),0),
    httpmethod=arrayindex(regextract(_raw_log,"\"([A-Z]+)\s\S+\sHTTP"),0),
    statuscode=arrayindex(regextract(_raw_log,"HTTP\/\d+\.\d+\"\s(\d+)\s"),0),
// extract source_ip
    sourceipv4 = arrayindex(regextract(_raw_log, "(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\s)"),0),
    sourceipv6 = arrayindex(regextract(_raw_log,"(\w+\:\w+\:\w+\:\w+\:\w+\:\w+\:\w+\:\w+)"),0)
| alter sourceip = coalesce(sourceipv4,sourceipv6),
// end extract source_ip
    Username = arrayindex(regextract(_raw_log,"(\S+)\s\[\d+\/"),0)
| alter
    xdm.network.http.url = requested_line,
    xdm.target.sent_bytes = to_number(bytes_size),
    xdm.source.ipv4 = source_ip,
    xdm.network.http.method=httpmethod,
    xdm.network.http.response_code=statuscode,
    xdm.source.user.username = Username;
filter _raw_log !~= "GET|HEAD|POST|DELETE|CONNECT|OPTIONS|TRACE|PATCH"
| alter log_level = arrayindex(regextract(_raw_log,"\[(\w+)\]"),0),
    Tid = arrayindex(regextract(_raw_log,"\#(\d+)"),0),
    cid = arrayindex(regextract(_raw_log,"\*(\d+)"),0),
    uri = arrayindex(regextract(_raw_log,"open\(\)\s\"?([^\s]+)"),0),
    error_message = arrayindex(regextract(_raw_log,"\*\d+\s([^\,]+)"),0),
// extract client
    client_address_ipv4 = arrayindex(regextract(_raw_log,"client:\s(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})"), 0),
    client_address_ipv6 = arrayindex(regextract(_raw_log,"client\:\s(\w+\:\w+\:\w+\:\w+\:\w+\:\w+\:\w+\:\w+)"),0)
| alter client_address = coalesce(client_address_ipv4, client_address_ipv6),
// end extract client
    Server = arrayindex(regextract(_raw_log,"server\:([^\,]+)"),0),
    Request = arrayindex(regextract(_raw_log,"request\:([^\,]+)"),0),
    Host = arrayindex(regextract(_raw_log,"host\:\s\"?([^\"?\:]+)"),0),
    Referrer = arrayindex(regextract(_raw_log,"referrer\:\s([^\s]+) "),0),
    destination_port = arrayindex(regextract(_raw_log,"host\:\s\"?[^\"?\:]+\:(\d+)"),0)
| alter
    // xdm.alert.description = request
    // xdm.target.user.username = host
    xdm.alert.severity = log_level,
    xdm.target.user.identifier = tid,
    xdm.source.ipv4 = client_address,
    xdm.alert.description = error_message,
    xdm.target.user.username = server,
    xdm.event.description = referrer,
    xdm.source.user.identifier = uri,
    xdm.target.resource.value = destination_port;


[RULE: o365_common_fields content_id="Office365"]
alter

	RecordType = to_integer(RecordType)

| alter

	xdm.event.id = Id,

	xdm.event.type = if(RecordType = 1, "ExchangeAdmin", RecordType = 2, "ExchangeItem", RecordType = 3, "ExchangeItemGroup", RecordType = 4, "SharePoint", RecordType = 6, "SharePointFileOperation", RecordType = 7, "OneDrive", RecordType = 8, "AzureActiveDirectory", RecordType = 9, "AzureActiveDirectoryAccountLogon", RecordType = 10, "DataCenterSecurityCmdlet", RecordType = 11, "ComplianceDLPSharePoint", RecordType = 13, "ComplianceDLPExchange", RecordType = 14, "SharePointSharingOperation", RecordType = 15, "AzureActiveDirectoryStsLogon", RecordType = 16, "SkypeForBusinessPSTNUsage", RecordType = 17, "SkypeForBusinessUsersBlocked", RecordType = 18, "SecurityComplianceCenterEOPCmdlet", RecordType = 19, "ExchangeAggregatedOperation", RecordType = 20, "PowerBIAudit", RecordType = 21, "CRM", RecordType = 22, "Yammer", RecordType = 23, "SkypeForBusinessCmdlets", RecordType = 24, "Discovery", RecordType = 25, "MicrosoftTeams", RecordType = 28, "ThreatIntelligence", RecordType = 29, "MailSubmission", RecordType = 30, "MicrosoftFlow", RecordType = 31, "AeD", RecordType = 32, "MicrosoftStream", RecordType = 33, "ComplianceDLPSharePointClassification", RecordType = 34, "ThreatFinder", RecordType = 35, "Project", RecordType = 36, "SharePointListOperation", RecordType = 37, "SharePointCommentOperation", RecordType = 38, "DataGovernance", RecordType = 39, "Kaizala", RecordType = 40, "SecurityComplianceAlerts", RecordType = 41, "ThreatIntelligenceUrl", RecordType = 42, "SecurityComplianceInsights", RecordType = 43, "MIPLabel", RecordType = 44, "WorkplaceAnalytics", RecordType = 45, "PowerAppsApp", RecordType = 46, "PowerAppsPlan", RecordType = 47, "ThreatIntelligenceAtpContent", RecordType = 48, "LabelContentExplorer", RecordType = 49, "TeamsHealthcare", RecordType = 50, "ExchangeItemAggregated", RecordType = 51, "HygieneEvent", RecordType = 52, "DataInsightsRestApiAudit", RecordType = 53, "InformationBarrierPolicyApplication", RecordType = 54, "SharePointListItemOperation", RecordType = 55, "SharePointContentTypeOperation", RecordType = 56, "SharePointFieldOperation", RecordType = 57, "MicrosoftTeamsAdmin", RecordType = 58, "HRSignal", RecordType = 59, "MicrosoftTeamsDevice", RecordType = 60, "MicrosoftTeamsAnalytics", RecordType = 61, "InformationWorkerProtection", RecordType = 62, "Campaign", RecordType = 63, "DLPEndpoint", RecordType = 64, "AirInvestigation", RecordType = 65, "Quarantine", RecordType = 66, "MicrosoftForms", RecordType = 67, "ApplicationAudit", RecordType = 68, "ComplianceSupervisionExchange", RecordType = 69, "CustomerKeyServiceEncryption", RecordType = 70, "OfficeNative", RecordType = 71, "MipAutoLabelSharePointItem", RecordType = 72, "MipAutoLabelSharePointPolicyLocation", RecordType = 73, "MicrosoftTeamsShifts", RecordType = 75, "MipAutoLabelExchangeItem", RecordType = 76, "CortanaBriefing", RecordType = 78, "WDATPAlerts", RecordType = 82, "SensitivityLabelPolicyMatch", RecordType = 83, "SensitivityLabelAction", RecordType = 84, "SensitivityLabeledFileAction", RecordType = 85, "AttackSim", RecordType = 86, "AirManualInvestigation", RecordType = 87, "SecurityComplianceRBAC", RecordType = 88, "UserTraining", RecordType = 89, "AirAdminActionInvestigation", RecordType = 90, "MSTIC", RecordType = 91, "PhysicalBadgingSignal", RecordType = 93, "AipDiscover", RecordType = 94, "AipSensitivityLabelAction", RecordType = 95, "AipProtectionAction", RecordType = 96, "AipFileDeleted", RecordType = 97, "AipHeartBeat", RecordType = 98, "MCASAlerts", RecordType = 99, "OnPremisesFileShareScannerDlp", RecordType = 100, "OnPremisesSharePointScannerDlp", RecordType = 101, "ExchangeSearch", RecordType = 102, "SharePointSearch", RecordType = 103, "PrivacyInsights", RecordType = 105, "MyAnalyticsSettings", RecordType = 106, "SecurityComplianceUserChange", RecordType = 107, "ComplianceDLPExchangeClassification", RecordType = 109, "MipExactDataMatch", RecordType = 113, "MS365DCustomDetection", RecordType = 147, "CoreReportingSettings", RecordType = 148, "ComplianceConnector", RecordType = 154, "OMEPortal", RecordType = 174, "DataShareOperation", RecordType = 181, "EduDataLakeDownloadOperation", RecordType = 183, "MicrosoftGraphDataConnectOperation", RecordType = 186, "PowerPagesSite", RecordType = 188, "PlannerPlan", RecordType = 189, "PlannerCopyPlan", RecordType = 190, "PlannerTask", RecordType = 191, "PlannerRoster", RecordType = 192, "PlannerPlanList", RecordType = 193, "PlannerTaskList", RecordType = 194, "PlannerTenantSettings", RecordType = 195, "ProjectForThewebProject", RecordType = 196, "ProjectForThewebTask", RecordType = 197, "ProjectForThewebRoadmap", RecordType = 198, "ProjectForThewebRoadmapItem", RecordType = 199, "ProjectForThewebProjectSettings", RecordType = 200, "ProjectForThewebRoadmapSettings", RecordType = 216, "Viva", RecordType = 217, "MicrosoftGraphDataConnectConsent", RecordType = 218, "AttackSimAdmin", RecordType = 230, "TeamsUpdates", RecordType = 231, "PlannerRosterSensitivityLabel", RecordType = 237, "DefenderExpertsforXDRAdmin", RecordType = 251, "VfamCreatePolicy", RecordType = 252, "VfamUpdatePolicy", RecordType = 253, "VfamDeletePolicy", RecordType = 261, "CopilotInteraction", RecordType = 287, "ProjectForThewebAssignedToMeSettings"),

	xdm.source.cloud.project_id = OrganizationId,

	xdm.observer.unique_identifier = AppAccessContext -> CorrelationId; // An identifier that can be used to correlate a specific user's actions across Microsoft 365 services.
[MODEL: dataset="msft_o365_general_raw", content_id="Office365"]
call o365_common_fields
| alter

	EnforcementMode = to_integer(EnforcementMode), 

	sourceworkload = to_integer(sourceworkload), 

	Scope = to_integer(Scope), 

	FileSize = to_integer(FileSize)	

| alter

	platform_lowercase = lowercase(to_string(Platform)),

	user_type_string = to_string(UserType),

	translate_EnforcementMode = if(EnforcementMode = 1, "Audit", EnforcementMode = 2, "Warn (Block with override)", EnforcementMode = 3, "Warn and bypass", EnforcementMode = 4, "Block", EnforcementMode = 5, "Allow (Audit without alerts)"),

	src_ip = coalesce(userip, senderip, ClientIP),

	filename_name = if(filename ~= "\.", filename, null),

	filename_extension = if(filename ~= "\.", arraystring(regextract(filename, "^\S+\.(\S+)"), ""), null),

	members_upn = arraystring(arraymap(members -> [], "@element" -> UPN), "|"),

	members_displayname = arraystring(arraymap(members -> [], "@element" -> DisplayName), "|"),

	members_role = arraystring(arraymap(members -> [], "@element" -> Role), "|"),

	sourceworkload_name = if(sourceworkload = 0, "SharePoint Online", sourceworkload = 1, "	OneDrive for Business", sourceworkload = 2, "Microsoft Teams"),

	Scope_name = if(Scope = 0, "Online", Scope = 1, "Onprem"),

	check_objectid_filepath = if(arraystring(regextract(ObjectId, "^.+[\/\\]([^\/\\]+)$"), "") ~= "\.", arraystring(regextract(ObjectId, "^.+[\/\\]([^\/\\]+)$"), ""))

| alter

	src_ip_v4 = if(src_ip ~= "\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}", src_ip, null),

	src_ip_v6 = if(src_ip ~= "[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}", src_ip, null),

	objectid_filename = if(check_objectid_filepath != null, arraystring(regextract(check_objectid_filepath, "\S+\.\S+$"), ""), null),

	objectid_filextension = if(check_objectid_filepath != null, arraystring(regextract(check_objectid_filepath, "\S+\.(\S+)$"), ""), null),

	objectid_clean = if(ObjectId = null, null, ObjectId ~= "^\s*$", null, ObjectId)

| alter

	xdm.target.file.path = if(arraystring(regextract(ObjectId, "^.+[\/\\]([^\/\\]+)$"), "") ~= "\.", ObjectId, null),

	xdm.event.operation_sub_type = coalesce(policyaction, message, Operation),

	xdm.event.operation = if(Operation = "AttachmentAccess", XDM_CONST.OPERATION_TYPE_FILE_OPEN, Operation ~= "FileCreated", XDM_CONST.OPERATION_TYPE_FILE_CREATE, Operation = "FileDeleted", XDM_CONST.OPERATION_TYPE_FILE_REMOVE, Operation = "FileAccessed", XDM_CONST.OPERATION_TYPE_FILE_OPEN, Operation = "FileAccessedExtended", XDM_CONST.OPERATION_TYPE_FILE_OPEN, Operation = "FilePreviewed", XDM_CONST.OPERATION_TYPE_FILE_OPEN, Operation = "FileModified", XDM_CONST.OPERATION_TYPE_FILE_WRITE, Operation = "FileRenamed", XDM_CONST.OPERATION_TYPE_FILE_RENAME, Operation = "FileCheckOutDiscarded", XDM_CONST.OPERATION_TYPE_FILE_CHANGE_MODE, Operation = "FileDeleted", XDM_CONST.OPERATION_TYPE_FILE_REMOVE, Operation = "FileDeletedFirstStageRecycleBin", XDM_CONST.OPERATION_TYPE_FILE_REMOVE, Operation = "FileDeletedSecondStageRecycleBin", XDM_CONST.OPERATION_TYPE_FILE_REMOVE, Operation = "FileModified", XDM_CONST.OPERATION_TYPE_FILE_WRITE, Operation = "FileRestored", XDM_CONST.OPERATION_TYPE_FILE_CHANGE_MODE, Operation = "FolderCreated", XDM_CONST.OPERATION_TYPE_DIR_CREATE, Operation = "FolderDeleted", XDM_CONST.OPERATION_TYPE_DIR_REMOVE, Operation = "FolderDeletedFirstStageRecycleBin", XDM_CONST.OPERATION_TYPE_DIR_REMOVE, Operation = "FolderDeletedSecondStageRecycleBin", XDM_CONST.OPERATION_TYPE_DIR_REMOVE, Operation = "FolderModified", XDM_CONST.OPERATION_TYPE_DIR_WRITE, Operation = "FolderRecycled", XDM_CONST.OPERATION_TYPE_DIR_CHANGE_MODE, Operation = "FolderRenamed", XDM_CONST.OPERATION_TYPE_DIR_RENAME, Operation = "FolderRestored", XDM_CONST.OPERATION_TYPE_DIR_CHANGE_MODE, Operation = "FolderRestored", XDM_CONST.OPERATION_TYPE_DIR_CHANGE_MODE),

	xdm.alert.original_alert_id = coalesce(InvestigationId, actionid, AlertEntityId, AlertId),

	xdm.event.original_event_type = coalesce(detectiontype, EntityType, to_string(RecordType)),

	xdm.target.file.filename = coalesce(filename_name, objectid_filename),

	xdm.target.file.extension = coalesce(FileExtension, filename_extension, objectid_filextension),

	xdm.source.host.os_family = if(platform_lowercase ~= "win|microsoft", XDM_CONST.OS_FAMILY_WINDOWS, platform_lowercase ~= "mac|osx", XDM_CONST.OS_FAMILY_MACOS, platform_lowercase ~= "linux", XDM_CONST.OS_FAMILY_LINUX, platform_lowercase ~= "android", XDM_CONST.OS_FAMILY_ANDROID, platform_lowercase ~= "ios", XDM_CONST.OS_FAMILY_IOS, platform_lowercase ~= "ubuntu", XDM_CONST.OS_FAMILY_UBUNTU, platform_lowercase ~= "debian", XDM_CONST.OS_FAMILY_DEBIAN, platform_lowercase ~= "fedora", XDM_CONST.OS_FAMILY_FEDORA, platform_lowercase ~= "centos", XDM_CONST.OS_FAMILY_CENTOS, platform_lowercase ~= "chrome", XDM_CONST.OS_FAMILY_CHROMEOS, platform_lowercase ~= "solaris", XDM_CONST.OS_FAMILY_SOLARIS, platform_lowercase ~= "scada", XDM_CONST.OS_FAMILY_SCADA),

	xdm.target.resource.name = coalesce(formname, objectid_clean),

	xdm.source.host.device_id = EntityId,

	xdm.email.sender = p2sender,

	xdm.email.recipients = coalesce(arraycreate(targetuserid), arraycreate(ReleaseTo), arraycreate(recipients)),

	xdm.source.user.username = coalesce(username, members_displayname),

	xdm.source.user.upn = coalesce(members_upn, actoruserid, UserId),

	xdm.source.user.user_type = if(user_type_string ~= "0|1|2|3", XDM_CONST.USER_TYPE_REGULAR, user_type_string ~= "4|5|6|7|8", XDM_CONST.USER_TYPE_SERVICE_ACCOUNT),

	xdm.source.user.identity_type = if(user_type_string ~= "0|1|2|3", XDM_CONST.IDENTITY_TYPE_USER, user_type_string ~= "4|5|6|7|8", XDM_CONST.IDENTITY_TYPE_MACHINE),

	xdm.auth.privilege_level = if(userrole = "owner", XDM_CONST.PRIVILEGE_LEVEL_USER, userrole = "admin", XDM_CONST.PRIVILEGE_LEVEL_ADMIN, members_role = "2", XDM_CONST.PRIVILEGE_LEVEL_GUEST, members_role = "1", XDM_CONST.PRIVILEGE_LEVEL_ADMIN, members_role = "0", XDM_CONST.PRIVILEGE_LEVEL_USER, user_type_string ~= "0|1", XDM_CONST.PRIVILEGE_LEVEL_USER, user_type_string ~= "2|3", XDM_CONST.PRIVILEGE_LEVEL_ADMIN, user_type_string ~= "4|5|6|7|8", XDM_CONST.PRIVILEGE_LEVEL_SYSTEM),

	xdm.source.user.identifier = coalesce(to_string(ActorYammerUserId), UserKey),

	xdm.alert.subcategory = coalesce(verdict, investigationtype, Category, Scope_name),

	xdm.event.description = coalesce(to_string(ModifiedProperties), to_string(messages), to_string(FileData), `fields`, ExtraProperties, details, detail, PolicyMatchInfo, to_string(Data), to_string(dataexporttype)),

	xdm.alert.description = to_string(AppAccessContext),

	xdm.target.resource.id = itemid,

	xdm.source.user_agent = useragent,

	xdm.target.resource.type = ItemType,

	xdm.source.ipv4 = src_ip_v4,

	xdm.source.ipv6 = src_ip_v6,

	xdm.target.file.size = FileSize,

	xdm.email.return_path = p1sender,

	xdm.email.message_id = coalesce(NetworkMessageId, to_string(messageid), internetmessageid),

	xdm.target.file.file_type = FileType,

	xdm.target.file.sha256 = `sha256`,

	xdm.event.outcome = if(EnforcementMode = 1, XDM_CONST.OUTCOME_UNKNOWN, to_string(EnforcementMode) ~= "2|3", XDM_CONST.OUTCOME_PARTIAL, EnforcementMode = 4, XDM_CONST.OUTCOME_FAILED, EnforcementMode = 5, XDM_CONST.OUTCOME_SUCCESS, ResultStatus = "Succeeded", XDM_CONST.OUTCOME_SUCCESS, ResultStatus = "PartiallySucceeded", XDM_CONST.OUTCOME_PARTIAL, ResultStatus = "Failed", XDM_CONST.OUTCOME_FAILED, ResultStatus ~= "[Tt]rue", XDM_CONST.OUTCOME_SUCCESS, ResultStatus ~= "[Ff]alse", XDM_CONST.OUTCOME_FAILED),

	xdm.event.outcome_reason = coalesce(Reason, translate_EnforcementMode, ResultStatus),

	xdm.observer.action = coalesce(to_string(actions), Status, translate_EnforcementMode, ResultStatus),

	xdm.network.rule = Name,

	xdm.source.host.hostname = coalesce(entityname, DeviceName),

	xdm.alert.severity = Severity,

	xdm.alert.name = investigationname,

	xdm.source.application.name = SourceApp,

	xdm.email.subject = coalesce(itemname, subject),

	xdm.target.user.identifier = targetyammeruserid,

	xdm.alert.original_threat_name = replex(ThreatsAndDetectionTech, "[\"\[\]]", ""),

	xdm.target.url = url, 

	xdm.network.http.url = coalesce(eventdeeplink, deeplinkurl),

	xdm.source.process.name = if(Application ~= "\.[Ee][Xx][Ee]", Application),

	xdm.observer.type = coalesce(sourceworkload_name, Source, Workload);
[MODEL: dataset="msft_o365_exchange_online_raw", content_id="Office365"]
call o365_common_fields
| alter

	LogonType = to_integer(LogonType),

	InternalLogonType = to_integer(InternalLogonType),

	Scope = to_integer(Scope),

	AttachmentSizeInBytes = to_integer(AttachmentSizeInBytes)

| alter

	user_logon_type = to_string(coalesce(LogonType, InternalLogonType)),

	user_type_string = to_string(UserType),

	get_src_ip = coalesce(ClientIPAddress, ClientIP),

	check_objectid_filepath = if(arraystring(regextract(ObjectId, "^.+[\/\\]([^\/\\]+)$"), "") ~= "\.", arraystring(regextract(ObjectId, "^.+[\/\\]([^\/\\]+)$"), ""))

| alter

	objectid_clean = if(ObjectId = null, null, ObjectId ~= "^\s*$", null, ObjectId),

	check_src_ipv4 = if(get_src_ip ~= "\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}", get_src_ip, null),

	check_src_ipv6 = if(get_src_ip ~= "[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}", get_src_ip, null)

| alter

	xdm.target.resource.name = coalesce(ModifiedObjectResolvedName, objectid_clean),

	xdm.target.file.path = if(arraystring(regextract(ObjectId, "^.+[\/\\]([^\/\\]+)$"), "") ~= "\.", ObjectId, null),

	xdm.event.operation_sub_type = Operation,

	xdm.event.operation = if(Operation = "AttachmentAccess", XDM_CONST.OPERATION_TYPE_FILE_OPEN, Operation ~= "FileCreated", XDM_CONST.OPERATION_TYPE_FILE_CREATE, Operation = "FileDeleted", XDM_CONST.OPERATION_TYPE_FILE_REMOVE, Operation = "FileAccessed", XDM_CONST.OPERATION_TYPE_FILE_OPEN, Operation = "FileAccessedExtended", XDM_CONST.OPERATION_TYPE_FILE_OPEN, Operation = "FilePreviewed", XDM_CONST.OPERATION_TYPE_FILE_OPEN, Operation = "FileModified", XDM_CONST.OPERATION_TYPE_FILE_WRITE, Operation = "FileRenamed", XDM_CONST.OPERATION_TYPE_FILE_RENAME, Operation = "FileCheckOutDiscarded", XDM_CONST.OPERATION_TYPE_FILE_CHANGE_MODE, Operation = "FileDeleted", XDM_CONST.OPERATION_TYPE_FILE_REMOVE, Operation = "FileDeletedFirstStageRecycleBin", XDM_CONST.OPERATION_TYPE_FILE_REMOVE, Operation = "FileDeletedSecondStageRecycleBin", XDM_CONST.OPERATION_TYPE_FILE_REMOVE, Operation = "FileModified", XDM_CONST.OPERATION_TYPE_FILE_WRITE, Operation = "FileRestored", XDM_CONST.OPERATION_TYPE_FILE_CHANGE_MODE, Operation = "FolderCreated", XDM_CONST.OPERATION_TYPE_DIR_CREATE, Operation = "FolderDeleted", XDM_CONST.OPERATION_TYPE_DIR_REMOVE, Operation = "FolderDeletedFirstStageRecycleBin", XDM_CONST.OPERATION_TYPE_DIR_REMOVE, Operation = "FolderDeletedSecondStageRecycleBin", XDM_CONST.OPERATION_TYPE_DIR_REMOVE, Operation = "FolderModified", XDM_CONST.OPERATION_TYPE_DIR_WRITE, Operation = "FolderRecycled", XDM_CONST.OPERATION_TYPE_DIR_CHANGE_MODE, Operation = "FolderRenamed", XDM_CONST.OPERATION_TYPE_DIR_RENAME, Operation = "FolderRestored", XDM_CONST.OPERATION_TYPE_DIR_CHANGE_MODE, Operation = "FolderRestored", XDM_CONST.OPERATION_TYPE_DIR_CHANGE_MODE),

	xdm.target.file.filename = if(check_objectid_filepath != null, arraystring(regextract(check_objectid_filepath, "\S+\.\S+$"), ""), null),

	xdm.target.file.extension = if(check_objectid_filepath != null, arraystring(regextract(check_objectid_filepath, "\S+\.(\S+)$"), ""), null),

	xdm.event.original_event_type = to_string(RecordType),

	xdm.event.description = coalesce(to_string(AffectedItems), to_string(ModifiedProperties)),

	xdm.alert.subcategory = if(Scope = 0, "Online", Scope = 1, "Onprem"),

	xdm.source.host.hostname = ClientMachineName,

	xdm.source.cloud.project = OrganizationName,

	xdm.source.user.user_type = if(user_logon_type ~= "3|4", XDM_CONST.USER_TYPE_SERVICE_ACCOUNT, user_logon_type ~= "0|1|2|5|6", XDM_CONST.USER_TYPE_REGULAR, user_type_string ~= "0|1|2|3", XDM_CONST.USER_TYPE_REGULAR, user_type_string ~= "4|5|6|7|8", XDM_CONST.USER_TYPE_SERVICE_ACCOUNT),

	xdm.source.user.identity_type = if(user_logon_type ~= "3|4", XDM_CONST.IDENTITY_TYPE_MACHINE, user_logon_type ~= "0|1|2|5|6", XDM_CONST.IDENTITY_TYPE_USER, user_type_string ~= "0|1|2|3", XDM_CONST.IDENTITY_TYPE_USER, user_type_string ~= "4|5|6|7|8", XDM_CONST.IDENTITY_TYPE_MACHINE),

	xdm.auth.privilege_level = if(user_logon_type ~= "3|4", XDM_CONST.PRIVILEGE_LEVEL_SYSTEM, user_logon_type ~= "1|6", XDM_CONST.PRIVILEGE_LEVEL_ADMIN, user_logon_type ~= "0|2|5", XDM_CONST.PRIVILEGE_LEVEL_USER, user_type_string ~= "0|1", XDM_CONST.PRIVILEGE_LEVEL_USER, user_type_string ~= "2|3", XDM_CONST.PRIVILEGE_LEVEL_ADMIN, user_type_string ~= "4|5|6|7|8", XDM_CONST.PRIVILEGE_LEVEL_SYSTEM),

	xdm.event.outcome = if(ResultStatus = "Succeeded", XDM_CONST.OUTCOME_SUCCESS, ResultStatus = "PartiallySucceeded", XDM_CONST.OUTCOME_PARTIAL, ResultStatus = "Failed", XDM_CONST.OUTCOME_FAILED, ResultStatus ~= "[Tt]rue", XDM_CONST.OUTCOME_SUCCESS, ResultStatus ~= "[Ff]alse", XDM_CONST.OUTCOME_FAILED),

	xdm.source.user.upn = coalesce(MailboxOwnerUPN, UserId),

	xdm.email.message_id = coalesce(Item -> InternetMessageId, ExchangeMetaData -> MessageID, MailboxGuid),

	xdm.intermediate.user.identifier = MailboxOwnerSid,

	xdm.source.user.identifier = coalesce(LogonUserSid, UserKey),

	xdm.source.user.username = LogonUserDisplayName,

	xdm.intermediate.host.hostname = OriginatingServer,

	xdm.target.resource.id = formid,

	xdm.observer.type = Workload,  

	xdm.source.ipv4 = check_src_ipv4,

	xdm.source.ipv6 = check_src_ipv6,

	xdm.source.application.name = ClientApplication,

	xdm.email.attachment.size = AttachmentSizeInBytes,

	xdm.alert.description = to_string(AppAccessContext),

	xdm.network.rule = to_string(PolicyDetails),

	xdm.email.subject = coalesce(replex(Item -> Subject, "\"", ""), replex(ExchangeMetaData -> Subject, "\"", "")),

	xdm.source.process.name = arraystring(regextract(ClientProcessName, "^(\S+)\.\S+"), ""),

	xdm.email.sender = coalesce(ExchangeMetaData -> From, sender),

	xdm.email.recipients = coalesce(arraymap(ExchangeMetaData -> To[], replex("@element", "\"", "")), arraycreate(receivers)),

	xdm.email.cc = arraymap(ExchangeMetaData -> CC[], replex("@element", "\"", "")),

	xdm.email.bcc = arraymap(ExchangeMetaData -> BCC[], replex("@element", "\"", "")),

	xdm.email.origination_timestamp = parse_timestamp( "%Y-%m-%dT%H:%M:%S", ExchangeMetaData -> Sent),

	xdm.email.data = to_string(OperationProperties),

	xdm.source.process.executable.extension = arraystring(regextract(ClientProcessName, "^\S+\.(\S+)"), "");
[MODEL: dataset="msft_o365_sharepoint_online_raw", content_id="Office365"]
call o365_common_fields
| alter

	Scope = to_integer(Scope)

| alter

	check_objectid_filepath = if(arraystring(regextract(ObjectId, "^.+[\/\\]([^\/\\]+)$"), "") ~= "\.", arraystring(regextract(ObjectId, "^.+[\/\\]([^\/\\]+)$"), ""), null),

	sourcefilename_filename = arraystring(regextract(SourceFileName, "^\S+\.\S+"), ""),

	sourcefilename_filextension = arraystring(regextract(SourceFileName, "^\S+\.(\S+)"), "")

| alter

	platform_lowercase = lowercase(to_string(Platform)),

	user_type_string = to_string(UserType),

	SharePointMetaData_FileName_name = SharePointMetaData -> FileName,

	SharePointMetaData_FileName_extension = arraystring(regextract(SharePointMetaData -> FileName, "^\S+\.(\S+)"), ""),

	objectid_filepath = if(ObjectId ~= "\\|\/", ObjectId, null),

	objectid_filename = if(check_objectid_filepath != null, arraystring(regextract(check_objectid_filepath, "\S+\.\S+$"), ""), null),

	objectid_filextension = if(check_objectid_filepath != null, arraystring(regextract(check_objectid_filepath, "\S+\.(\S+)$"), ""), null),

	check_sourcefilename_filename = if(sourcefilename_filename ~= "^\s*$", null, sourcefilename_filename),

	check_sourcefilename_filextension = if(sourcefilename_filextension ~= "^\s*$", null, sourcefilename_filextension),

	destinationfilename_filextension = arraystring(regextract(DestinationFileName, "^\S+\.(\S+)"), ""),	

	src_ip_v4 = if(ClientIP ~= "\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}", ClientIP, null),

	src_ip_v6 = if(ClientIP ~= "[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}", ClientIP, null)

| alter

	xdm.target.resource.id = Site,

	xdm.target.url = SiteUrl,

	xdm.event.operation_sub_type = Operation,

	xdm.event.operation = if(Operation = "AttachmentAccess", XDM_CONST.OPERATION_TYPE_FILE_OPEN, Operation ~= "FileCreated", XDM_CONST.OPERATION_TYPE_FILE_CREATE, Operation = "FileDeleted", XDM_CONST.OPERATION_TYPE_FILE_REMOVE, Operation = "FileAccessed", XDM_CONST.OPERATION_TYPE_FILE_OPEN, Operation = "FileAccessedExtended", XDM_CONST.OPERATION_TYPE_FILE_OPEN, Operation = "FilePreviewed", XDM_CONST.OPERATION_TYPE_FILE_OPEN, Operation = "FileModified", XDM_CONST.OPERATION_TYPE_FILE_WRITE, Operation = "FileRenamed", XDM_CONST.OPERATION_TYPE_FILE_RENAME, Operation = "FileCheckOutDiscarded", XDM_CONST.OPERATION_TYPE_FILE_CHANGE_MODE, Operation = "FileDeleted", XDM_CONST.OPERATION_TYPE_FILE_REMOVE, Operation = "FileDeletedFirstStageRecycleBin", XDM_CONST.OPERATION_TYPE_FILE_REMOVE, Operation = "FileDeletedSecondStageRecycleBin", XDM_CONST.OPERATION_TYPE_FILE_REMOVE, Operation = "FileModified", XDM_CONST.OPERATION_TYPE_FILE_WRITE, Operation = "FileRestored", XDM_CONST.OPERATION_TYPE_FILE_CHANGE_MODE, Operation = "FolderCreated", XDM_CONST.OPERATION_TYPE_DIR_CREATE, Operation = "FolderDeleted", XDM_CONST.OPERATION_TYPE_DIR_REMOVE, Operation = "FolderDeletedFirstStageRecycleBin", XDM_CONST.OPERATION_TYPE_DIR_REMOVE, Operation = "FolderDeletedSecondStageRecycleBin", XDM_CONST.OPERATION_TYPE_DIR_REMOVE, Operation = "FolderModified", XDM_CONST.OPERATION_TYPE_DIR_WRITE, Operation = "FolderRecycled", XDM_CONST.OPERATION_TYPE_DIR_CHANGE_MODE, Operation = "FolderRenamed", XDM_CONST.OPERATION_TYPE_DIR_RENAME, Operation = "FolderRestored", XDM_CONST.OPERATION_TYPE_DIR_CHANGE_MODE, Operation = "FolderRestored", XDM_CONST.OPERATION_TYPE_DIR_CHANGE_MODE),

	xdm.target.resource.type = ItemType,

	xdm.alert.subcategory = if(Scope = 0, "Online", Scope = 1, "Onprem"),

	xdm.network.http.browser = if(BrowserName = null, null, BrowserName ~= "^\s*$", null, BrowserName),

	xdm.observer.name = EventSource,

	xdm.source.user.upn = coalesce(SharePointMetaData -> From, UserId),

	xdm.alert.severity = Severity,

	xdm.source.user_agent = if(UserAgent = null, null, UserAgent ~= "^\s*$", null, UserAgent),

	xdm.source.user.identifier = UserKey,

	xdm.observer.type = coalesce(Source, Workload),

	xdm.auth.auth_method = AuthenticationType,

	xdm.source.ipv4 = src_ip_v4,

	xdm.source.ipv6 = src_ip_v6,

	xdm.target.user.upn = if(targetuserorgroupname ~= "@", targetuserorgroupname),

	xdm.target.user.groups = if(targetuserorgroupname !~= "@", arraycreate(targetuserorgroupname)),

	xdm.source.host.os_family = if(platform_lowercase ~= "win|microsoft", XDM_CONST.OS_FAMILY_WINDOWS, platform_lowercase ~= "mac|osx", XDM_CONST.OS_FAMILY_MACOS, platform_lowercase ~= "linux|wac", XDM_CONST.OS_FAMILY_LINUX, platform_lowercase ~= "android", XDM_CONST.OS_FAMILY_ANDROID, platform_lowercase ~= "ios", XDM_CONST.OS_FAMILY_IOS, platform_lowercase ~= "ubuntu", XDM_CONST.OS_FAMILY_UBUNTU, platform_lowercase ~= "debian", XDM_CONST.OS_FAMILY_DEBIAN, platform_lowercase ~= "fedora", XDM_CONST.OS_FAMILY_FEDORA, platform_lowercase ~= "centos", XDM_CONST.OS_FAMILY_CENTOS, platform_lowercase ~= "chrome", XDM_CONST.OS_FAMILY_CHROMEOS, platform_lowercase ~= "solaris", XDM_CONST.OS_FAMILY_SOLARIS, platform_lowercase ~= "scada", XDM_CONST.OS_FAMILY_SCADA),

	xdm.source.application.name = ApplicationDisplayName,

	xdm.event.original_event_type = to_string(RecordType),

	xdm.event.description = to_string(ModifiedProperties),

	xdm.alert.description = to_string(AppAccessContext),

	xdm.target.file.size = to_integer(SharePointMetaData -> FileSize),

	xdm.target.file.path = coalesce(SharePointMetaData -> FilePathUrl, objectid_filepath),

	xdm.target.file.filename = coalesce(SharePointMetaData_FileName_name, DestinationFileName, check_sourcefilename_filename, objectid_filename),

	xdm.target.file.extension = coalesce(SharePointMetaData_FileName_extension, destinationfilename_filextension, check_sourcefilename_filextension, objectid_filextension),

	xdm.target.resource.name = if(ObjectId = null, null, ObjectId ~= "^\s*$", null, ObjectId),

	xdm.source.user.user_type = if(user_type_string ~= "0|1|2|3", XDM_CONST.USER_TYPE_REGULAR, user_type_string ~= "4|5|6|7|8", XDM_CONST.USER_TYPE_SERVICE_ACCOUNT),

	xdm.source.user.identity_type = if(user_type_string ~= "0|1|2|3", XDM_CONST.IDENTITY_TYPE_USER, user_type_string ~= "4|5|6|7|8", XDM_CONST.IDENTITY_TYPE_MACHINE),

	xdm.auth.privilege_level = if(user_type_string ~= "0|1", XDM_CONST.PRIVILEGE_LEVEL_USER, user_type_string ~= "2|3", XDM_CONST.PRIVILEGE_LEVEL_ADMIN, user_type_string ~= "4|5|6|7|8", XDM_CONST.PRIVILEGE_LEVEL_SYSTEM),

	xdm.observer.action = to_string(ExceptionInfo),

	xdm.network.rule = to_string(PolicyDetails),

	xdm.event.outcome = if(ResultStatus = "Succeeded", XDM_CONST.OUTCOME_SUCCESS, ResultStatus = "PartiallySucceeded", XDM_CONST.OUTCOME_PARTIAL, ResultStatus = "Failed", XDM_CONST.OUTCOME_FAILED, ResultStatus ~= "[Tt]rue", XDM_CONST.OUTCOME_SUCCESS, ResultStatus ~= "[Ff]alse", XDM_CONST.OUTCOME_FAILED);
[MODEL: dataset="msft_o365_dlp_raw", content_id="Office365"]
call o365_common_fields
| alter

	Scope = to_integer(Scope)

| alter

	SharePointMetaData_FileName = SharePointMetaData -> FileName,

	SharePointMetaData_FilePathUrl = SharePointMetaData -> FilePathUrl,

	EndpointMetaData_EnforcementMode = EndpointMetaData -> EnforcementMode,

	EndpointMetaData_FileExtension = EndpointMetaData -> FileExtension,

	user_type_string = to_string(UserType),

	check_objectid_filepath = if(arraystring(regextract(ObjectId, "^.+[\/\\]([^\/\\]+)$"), "") ~= "\.", arraystring(regextract(ObjectId, "^.+[\/\\]([^\/\\]+)$"), ""))

| alter

	translate_EnforcementMode = if(EndpointMetaData_EnforcementMode = "1", "Audit", EndpointMetaData_EnforcementMode = "2", "Warn (Block with override)", EndpointMetaData_EnforcementMode = "3", "Warn and bypass", EndpointMetaData_EnforcementMode = "4", "Block", EndpointMetaData_EnforcementMode = "5", "Allow (Audit without alerts)"),

	SharePointMetaData_FileName_name = arrayindex(split(SharePointMetaData_FileName, """\\"""), -1),

	SharePointMetaData_FileName_extension = arraystring(regextract(SharePointMetaData_FileName, "\S+\.(\S+)$"), ""),

	ObjectId_path = if(ObjectId ~= "\\|\/", ObjectId, null),

	ObjectId_name = if(check_objectid_filepath != null, arraystring(regextract(check_objectid_filepath, "\S+\.\S+$"), ""), null),

	ObjectId_extension = if(check_objectid_filepath != null, arraystring(regextract(check_objectid_filepath, "\S+\.(\S+)$"), ""), null)

| alter

	xdm.source.user.username = SharePointMetaData -> From,

	xdm.network.http.url = SharePointMetaData -> SiteCollectionUrl,

	xdm.target.file.path = coalesce(SharePointMetaData_FilePathUrl, ObjectId_path),

	xdm.target.file.filename = coalesce(SharePointMetaData_FileName_name, ObjectId_name),

	xdm.target.file.extension = coalesce(SharePointMetaData_FileName_extension, EndpointMetaData_FileExtension, ObjectId_extension),

	xdm.event.original_event_type = to_string(RecordType),

	xdm.event.operation_sub_type = Operation,

	xdm.event.operation = if(Operation = "AttachmentAccess", XDM_CONST.OPERATION_TYPE_FILE_OPEN, Operation ~= "FileCreated", XDM_CONST.OPERATION_TYPE_FILE_CREATE, Operation = "FileDeleted", XDM_CONST.OPERATION_TYPE_FILE_REMOVE, Operation = "FileAccessed", XDM_CONST.OPERATION_TYPE_FILE_OPEN, Operation = "FileAccessedExtended", XDM_CONST.OPERATION_TYPE_FILE_OPEN, Operation = "FilePreviewed", XDM_CONST.OPERATION_TYPE_FILE_OPEN, Operation = "FileModified", XDM_CONST.OPERATION_TYPE_FILE_WRITE, Operation = "FileRenamed", XDM_CONST.OPERATION_TYPE_FILE_RENAME, Operation = "FileCheckOutDiscarded", XDM_CONST.OPERATION_TYPE_FILE_CHANGE_MODE, Operation = "FileDeleted", XDM_CONST.OPERATION_TYPE_FILE_REMOVE, Operation = "FileDeletedFirstStageRecycleBin", XDM_CONST.OPERATION_TYPE_FILE_REMOVE, Operation = "FileDeletedSecondStageRecycleBin", XDM_CONST.OPERATION_TYPE_FILE_REMOVE, Operation = "FileModified", XDM_CONST.OPERATION_TYPE_FILE_WRITE, Operation = "FileRestored", XDM_CONST.OPERATION_TYPE_FILE_CHANGE_MODE, Operation = "FolderCreated", XDM_CONST.OPERATION_TYPE_DIR_CREATE, Operation = "FolderDeleted", XDM_CONST.OPERATION_TYPE_DIR_REMOVE, Operation = "FolderDeletedFirstStageRecycleBin", XDM_CONST.OPERATION_TYPE_DIR_REMOVE, Operation = "FolderDeletedSecondStageRecycleBin", XDM_CONST.OPERATION_TYPE_DIR_REMOVE, Operation = "FolderModified", XDM_CONST.OPERATION_TYPE_DIR_WRITE, Operation = "FolderRecycled", XDM_CONST.OPERATION_TYPE_DIR_CHANGE_MODE, Operation = "FolderRenamed", XDM_CONST.OPERATION_TYPE_DIR_RENAME, Operation = "FolderRestored", XDM_CONST.OPERATION_TYPE_DIR_CHANGE_MODE, Operation = "FolderRestored", XDM_CONST.OPERATION_TYPE_DIR_CHANGE_MODE),

	xdm.alert.subcategory = if(Scope = 0, "Online", Scope = 1, "Onprem"),

	xdm.target.url = SharePointMetaData -> FilePathUrl,

	xdm.source.user.user_type = if(user_type_string ~= "0|1|2|3", XDM_CONST.USER_TYPE_REGULAR, user_type_string ~= "4|5|6|7|8", XDM_CONST.USER_TYPE_SERVICE_ACCOUNT),

	xdm.source.user.identity_type = if(user_type_string ~= "0|1|2|3", XDM_CONST.IDENTITY_TYPE_USER, user_type_string ~= "4|5|6|7|8", XDM_CONST.IDENTITY_TYPE_MACHINE),

	xdm.auth.privilege_level = if(user_type_string ~= "0|1", XDM_CONST.PRIVILEGE_LEVEL_USER, user_type_string ~= "2|3", XDM_CONST.PRIVILEGE_LEVEL_ADMIN, user_type_string ~= "4|5|6|7|8", XDM_CONST.PRIVILEGE_LEVEL_SYSTEM),

	xdm.event.outcome = if(EndpointMetaData_EnforcementMode = "1", XDM_CONST.OUTCOME_UNKNOWN, EndpointMetaData_EnforcementMode ~= "2|3", XDM_CONST.OUTCOME_PARTIAL, EndpointMetaData_EnforcementMode = "4", XDM_CONST.OUTCOME_FAILED, EndpointMetaData_EnforcementMode = "5", XDM_CONST.OUTCOME_SUCCESS, ResultStatus = "Succeeded", XDM_CONST.OUTCOME_SUCCESS, ResultStatus = "PartiallySucceeded", XDM_CONST.OUTCOME_PARTIAL, ResultStatus = "Failed", XDM_CONST.OUTCOME_FAILED, ResultStatus ~= "[Tt]rue", XDM_CONST.OUTCOME_SUCCESS, ResultStatus ~= "[Ff]alse", XDM_CONST.OUTCOME_FAILED),

	xdm.event.outcome_reason = coalesce(translate_EnforcementMode, ResultStatus),

	xdm.observer.action = coalesce(translate_EnforcementMode, to_string(ExceptionInfo), ResultStatus),

	xdm.email.attachment.size = coalesce(to_integer(ExchangeMetaData -> FileSize), to_integer(SharePointMetaData -> FileSize)),

	xdm.email.message_id = ExchangeMetaData -> MessageID,

	xdm.email.sender = ExchangeMetaData -> From,

	xdm.email.recipients = arraymap(ExchangeMetaData -> To[], replex("@element", "\"", "")),

	xdm.email.cc = arraymap(ExchangeMetaData -> CC[], replex("@element", "\"", "")),

	xdm.email.bcc = arraymap(ExchangeMetaData -> BCC[], replex("@element", "\"", "")),

	xdm.email.subject = ExchangeMetaData -> Subject,

	xdm.email.origination_timestamp = parse_timestamp( "%Y-%m-%dT%H:%M:%S", ExchangeMetaData -> Sent),

	xdm.target.file.file_type = EndpointMetaData -> FileType,

	xdm.target.host.hostname = EndpointMetaData -> DeviceName,

	xdm.observer.type = coalesce(evaluationsource, Workload),

	xdm.source.user.upn = UserId,

	xdm.source.user.identifier = UserKey,

	xdm.target.resource.name = if(ObjectId = null, null, ObjectId ~= "^\s*$", null, ObjectId),

	xdm.alert.description = to_string(AppAccessContext),	

	xdm.network.rule = to_string(PolicyDetails);
[MODEL: dataset = "msft_o365_emails_raw", content_id="Office365"]
alter

	xdm.email.message_id = InternetMessageId,								

	xdm.source.user.username = coalesce(sender -> emailAddress.name, From -> emailAddress.name),

	xdm.email.sender = coalesce(sender -> emailAddress.address, From -> emailAddress.address),

	xdm.observer.unique_identifier = webLink,

	xdm.email.recipients = arraymap(toRecipients -> [], "@element"-> emailAddress.address),

	xdm.email.cc = arraymap(ccRecipients -> [], "@element"-> emailAddress.address),

	// xdm.email.bcc = arraymap(bccRecipients -> [], "@element"-> emailAddress.address),

	xdm.email.attachment.filename = arraystring(arraymap(attachments  -> [], "@element"-> name), "|"),

	xdm.email.data = to_string(internetMessageHeaders),

	xdm.alert.severity = importance;



[MODEL: dataset=okta_okta_raw, content_id="Okta"]
filter
    eventType in ("app.ad.api.user_import.account_locked","app.app_instance.csr.generate","app.app_instance.csr.publish","app.app_instance.csr.revoke","app.app_instance.provision_sync_job.completed","app.app_instance.provision_sync_job.failed","app.app_instance.provision_sync_job.started","app.audit_report.download.local.active","app.audit_report.download.local.deprov","app.audit_report.download.rogue.report","app.generic.unauth_app_access_attempt","app.inbound_del_auth.login_success","app.keys.clone","app.keys.generate","app.keys.rotate","app.ldap.password.change.failed","app.office365.api.change.domain.federation.success","app.office365.api.error.ad.user","app.office365.api.error.check.user.exists","app.office365.api.error.create.user","app.office365.api.error.deactivate.user","app.office365.api.error.download.custom.objects","app.office365.api.error.download.groups","app.office365.api.error.download.users","app.office365.api.error.endpoint.unavailable","app.office365.api.error.get.company.dirsync.failure","app.office365.api.error.get.company.dirsync.status.failure","app.office365.api.error.get.company.dirsync.status.pending","app.office365.api.error.get.object.ids.by.group.id","app.office365.api.error.group.create.failure","app.office365.api.error.group.create.failure.name.in.use","app.office365.api.error.group.delete.failure","app.office365.api.error.group.membership.update.assignment.failure","app.office365.api.error.group.membership.update.failure","app.office365.api.error.group.membership.update.group.not.found.failure","app.office365.api.error.group.membership.update.removal.failure","app.office365.api.error.group.update.failure","app.office365.api.error.group.update.failure.not.found","app.office365.api.error.import.profile","app.office365.api.error.no.endpoints.found","app.office365.api.error.push.password","app.office365.api.error.push.profile","app.office365.api.error.reactivate.user","app.office365.api.error.remove.domain.federation.failure","app.office365.api.error.remove.domain.federation.failure.access.denied","app.office365.api.error.remove.domain.federation.failure.domain.not.found","app.office365.api.error.revoke.refresh.token","app.office365.api.error.set.company.dirsync.failure","app.office365.api.error.set.company.dirsync.status.failure","app.office365.api.error.set.domain.federation.failure","app.office365.api.error.set.domain.federation.failure.access.denied","app.office365.api.error.set.domain.federation.failure.domain.default","app.office365.api.error.set.domain.federation.failure.domain.not.found","app.office365.api.error.sync.contact","app.office365.api.error.sync.finalize","app.office365.api.error.sync.group","app.office365.api.error.sync.not.activated","app.office365.api.error.sync.set.attribute","app.office365.api.error.sync.user","app.office365.api.error.unable.to.create.graph.client","app.office365.api.error.validate.admin.creds","app.office365.api.error.validate.creds","app.office365.api.error.validate.creds.unknown.exception","app.office365.api.error.x-ms-forwarded-client-ip-header.absent","app.office365.api.remove.domain.federation.success","app.office365.api.set.domain.federation.success","app.office365.api.sync.complete","app.office365.api.sync.heartbeat.sent","app.office365.api.sync.job.complete","app.office365.api.sync.job.complete.contact","app.office365.api.sync.job.complete.group","app.office365.api.sync.job.complete.user","app.office365.clientplatform.conversion.job.processing.app.instance","app.office365.clientplatform.conversion.job.skipping.migration","app.office365.dirsync.skipping.conflict-object","app.office365.dirsync.skipping.critical-system-object","app.office365.dirsync.skipping.non-security-group-invalid-mail","app.office365.dirsync.skipping.reserved-attribute-value","app.office365.dirsync.skipping.systemmailbox","app.office365.dirsync.skipping.without-name-and-displayname","app.office365.error.importing.user","app.office365.graph.api.error.no.mailbox.found","app.office365.graph.api.error.rate-limit.exceeded","app.office365.graph.api.error.service.principal.creation.failed","app.office365.service.principal.cleanup.job.complete","app.office365.service.principal.cleanup.job.invalid.credentials","app.office365.service.principal.cleanup.job.processing","app.office365.service.principal.cleanup.job.skipping.missing.creds","app.office365.service.principal.cleanup.job.skipping.no.service.principal","app.office365.service.principal.cleanup.job.unable.to.delete.service.principal","app.office365.user.delete.success","app.office365.user.lifecycle.action.failed","app.office365.user.remove.licenses.success","app.radius.agent.listener.failed","app.radius.agent.listener.succeeded","app.radius.agent.port_inaccessible","app.radius.agent.port_reaccessible","app.radius.info_access.no_permission","app.radius.info_access.partial_permission","app.realtimesync.import.details.add_user","app.realtimesync.import.details.delete_user","app.realtimesync.import.details.update_user","app.saml.sensitive.attribute.update","app.user_management.grouppush.mapping.created.from.rule","app.user_management.grouppush.mapping.created.from.rule.error.duplicate","app.user_management.grouppush.mapping.created.from.rule.error.validation","app.user_management.grouppush.mapping.created.from.rule.errors","app.user_management.grouppush.mapping.okta.users.ignored","app.user_management.push_new_user_success","app.user_management.update_from_master_failed","app.user_management.user_group_import.create_failure","app.user_management.user_group_import.delete_success","app.user_management.user_group_import.update_failure","app.user_management.user_group_import.upsert_fail","app.user_management.user_group_import.upsert_success","application.configuration.disable_delauth_outbound","application.configuration.disable_fed_broker_mode","application.configuration.enable_delauth_outbound","application.configuration.enable_fed_broker_mode","application.configuration.reset_logo","application.configuration.update","application.configuration.update_api_credentials_for_pass_change","application.configuration.update_logo","application.lifecycle.activate","application.lifecycle.create","application.lifecycle.deactivate","application.lifecycle.delete","application.lifecycle.update","application.policy.sign_on.deny_access","application.policy.sign_on.rule.create","application.policy.sign_on.rule.delete","application.policy.sign_on.update","application.provision.field_mapping_rule.change","application.provision.group.add","application.provision.group.import","application.provision.group.remove","application.provision.group.update","application.provision.group.verify_exists","application.provision.group_membership.add","application.provision.group_membership.import","application.provision.group_membership.remove","application.provision.group_membership.update","application.provision.group_push.activate_mapping","application.provision.group_push.delete_appgroup","application.provision.group_push.mapping.and.groups.deleted.rule.deleted","application.provision.group_push.mapping.app.group.renamed","application.provision.group_push.mapping.app.group.renamed.failed","application.provision.group_push.mapping.created","application.provision.group_push.mapping.created.from.rule.warning.duplicate.name","application.provision.group_push.mapping.created.from.rule.warning.duplicate.name.tobecreated","application.provision.group_push.mapping.created.from.rule.warning.upsertGroup.duplicate.name","application.provision.group_push.mapping.deactivated.source.group.renamed","application.provision.group_push.mapping.deactivated.source.group.renamed.failed","application.provision.group_push.mapping.update.or.delete.failed","application.provision.group_push.mapping.update.or.delete.failed.with.error","application.provision.group_push.push_memberships","application.provision.group_push.pushed","application.provision.group_push.removed","application.provision.group_push.updated","application.provision.integration.call_api","application.provision.user.activate","application.provision.user.deactivate","application.provision.user.deprovision","application.provision.user.import","application.provision.user.import_profile","application.provision.user.password","application.provision.user.push","application.provision.user.push_okta_password","application.provision.user.push_password","application.provision.user.push_profile","application.provision.user.reactivate","application.provision.user.sync","application.provision.user.verify_exists","application.registration_policy.lifecycle.create","application.registration_policy.lifecycle.update","application.user_membership.add","application.user_membership.approve","application.user_membership.change_password","application.user_membership.change_username","application.user_membership.deprovision","application.user_membership.provision","application.user_membership.remove","application.user_membership.restore","application.user_membership.restore_password","application.user_membership.revoke","application.user_membership.show_password","application.user_membership.update","credential.register","credential.revoke","device.enrollment.create","device.lifecycle.activate","device.lifecycle.deactivate","device.lifecycle.delete","device.lifecycle.suspend","device.lifecycle.unsuspend","device.platform.add","device.platform.delete","device.platform.update","device.user.add","device.user.remove","directory.app_user_profile.update","directory.mapping.update","directory.non_default_user_profile.create","directory.user_profile.update","event_hook.activated","event_hook.created","event_hook.deactivated","event_hook.deleted","event_hook.delivery","event_hook.updated","event_hook.verified","group.application_assignment.add","group.application_assignment.remove","group.application_assignment.update","group.lifecycle.create","group.lifecycle.delete","group.privilege.grant","group.privilege.revoke","group.profile.update","group.user_membership.add","group.user_membership.remove","group.user_membership.rule.add_exclusion","group.user_membership.rule.deactivated","iam.resourceset.bindings.add","iam.resourceset.bindings.delete","iam.resourceset.create","iam.resourceset.delete","iam.resourceset.resources.add","iam.resourceset.resources.delete","iam.role.create","iam.role.delete","iam.role.permissions.add","iam.role.permissions.delete","inline_hook.activated","inline_hook.created","inline_hook.deactivated","inline_hook.deleted","inline_hook.executed","master_application.user_membership.add","mim.createEnrollment.ANDROID","mim.createEnrollment.IOS","mim.createEnrollment.OSX","mim.createEnrollment.UNKNOWN","mim.createEnrollment.WINDOWS","network_zone.rule.disabled","omm.app.VPN.settings.changed","omm.app.WIFI.settings.changed","omm.app.eas.cert_based.settings.changed","omm.app.eas.disabled","omm.app.eas.settings.changed","omm.cma.created","omm.cma.deleted","omm.cma.updated","omm.enrollment.changed","pki.ca.add","pki.ca.delete","pki.cert.bind","pki.cert.issue","pki.cert.lifecycle.activate","pki.cert.lifecycle.delete","pki.cert.lifecycle.hold","pki.cert.lifecycle.revoke","pki.cert.lifecycle.suspend","pki.cert.renew","pki.cert.revoke","policy.evaluate_sign_on","policy.execute.user.start","policy.lifecycle.activate","policy.lifecycle.create","policy.lifecycle.deactivate","policy.lifecycle.delete","policy.lifecycle.overwrite","policy.lifecycle.update","policy.mapping.create","policy.rule.action.execute","policy.rule.activate","policy.rule.add","policy.rule.deactivate","policy.rule.delete","policy.rule.invalidate","policy.rule.update","policy.scheduled.execute","scheduled_action.user_suspension.canceled","scheduled_action.user_suspension.completed","scheduled_action.user_suspension.scheduled","scheduled_action.user_suspension.updated","security.authenticator.lifecycle.activate","security.authenticator.lifecycle.deactivate","security.device.add_request_blacklist_policy","security.device.remove_request_blacklist_policy","security.device.temporarily_disable_blacklisting","security.request.blocked","security.threat.configuration.update","security.threat.detected","security.voice.add_country_blacklist","security.voice.remove_country_blacklist","security.zone.make_blacklist","security.zone.remove_blacklist","self_service.disabled","self_service.enabled","system.agent.ad.connect","system.agent.ad.create","system.agent.ad.deactivate","system.agent.ad.delete","system.agent.ad.import_ou","system.agent.ad.import_user","system.agent.ad.invoke_dir","system.agent.ad.reactivate","system.agent.ad.read_dirsync","system.agent.ad.read_ldap","system.agent.ad.read_schema","system.agent.ad.read_topology","system.agent.ad.realtimesync","system.agent.ad.reset_user_password","system.agent.ad.start","system.agent.ad.unlock_user_account","system.agent.ad.update","system.agent.ad.update_user","system.agent.ad.upgrade","system.agent.ad.upload_iwa_log","system.agent.ad.upload_log","system.agent.ad.write_ldap","system.agent.auto_update","system.agent.connector.connect","system.agent.connector.deactivate","system.agent.connector.delete","system.agent.connector.reactivate","system.agent.ldap.change_user_password","system.agent.ldap.create_user_JIT","system.agent.ldap.disconnect","system.agent.ldap.reconnect","system.agent.ldap.reset_user_password","system.agent.ldap.unlock_user_account","system.agent_pools.auto_update","system.api_token.create","system.api_token.enable","system.api_token.revoke","system.brand.update","system.captcha.create","system.captcha.delete","system.captcha.update","system.custom_error.update","system.custom_signin.update","system.custom_url_domain.cert_renew","system.custom_url_domain.cert_upload","system.custom_url_domain.delete","system.custom_url_domain.initiate","system.directory.debugger.extend","system.directory.debugger.grant","system.directory.debugger.query_executed","system.directory.debugger.revoke","system.email.template.create","system.email.template.delete","system.email.template.update","system.idp.lifecycle.activate","system.idp.lifecycle.create","system.idp.lifecycle.deactivate","system.idp.lifecycle.delete","system.idp.lifecycle.update","system.import.clear.unconfirmed.users.summary","system.import.complete","system.import.complete_batch","system.import.custom_object.complete","system.import.custom_object.create","system.import.custom_object.delete","system.import.custom_object.update","system.import.download.complete","system.import.download.start","system.import.group.complete","system.import.group.create","system.import.group.delete","system.import.group.start","system.import.group.update","system.import.group_membership.complete","system.import.implicit_deletion.complete","system.import.implicit_deletion.start","system.import.import_profile","system.import.import_provisioning_info","system.import.membership_processing.complete","system.import.membership_processing.start","system.import.object_creation.complete","system.import.object_creation.start","system.import.roadblock","system.import.roadblock.reschedule_and_resume","system.import.roadblock.resume","system.import.roadblock.updated","system.import.start","system.import.user.complete","system.import.user.create","system.import.user.delete","system.import.user.match","system.import.user.start","system.import.user.suspend","system.import.user.unsuspend","system.import.user.unsuspend_after_confirm","system.import.user.update","system.import.user.update_user_lifecycle_from_master","system.import.user_csv.complete","system.import.user_csv.start","system.import.user_matching.complete","system.import.user_matching.start","system.iwa.create","system.iwa.go_offline","system.iwa.go_online","system.iwa.promote_primary","system.iwa.remove","system.iwa.update","system.iwa.use_default","system.ldapi.bind","system.ldapi.search","system.ldapi.unbind","system.log_stream.lifecycle.activate","system.log_stream.lifecycle.create","system.log_stream.lifecycle.deactivate","system.log_stream.lifecycle.delete","system.log_stream.lifecycle.update","system.mfa.factor.activate","system.mfa.factor.deactivate","system.org.captcha.activate","system.org.captcha.deactivate","system.org.lifecycle.create","system.org.rate_limit.warning","system.org.task.remove","system.theme.update","task.lifecycle.activate","task.lifecycle.create","task.lifecycle.deactivate","task.lifecycle.delete","task.lifecycle.update","user.account.access_super_user_app","user.account.lock","user.account.lock.limit","user.account.privilege.grant","user.account.privilege.revoke","user.account.report_suspicious_activity_by_enduser","user.account.reset_password","user.account.unlock","user.account.unlock_by_admin","user.account.unlock_failure","user.account.unlock_token","user.account.update_password","user.account.update_primary_email","user.account.update_profile","user.account.update_secondary_email","user.account.update_user_type","user.account.use_token","user.credential.enroll","user.identity_snapshot.attestation.create","user.lifecycle.activate","user.lifecycle.create","user.lifecycle.deactivate","user.lifecycle.delete.completed","user.lifecycle.delete.initiated","user.lifecycle.jit.error.read_only","user.lifecycle.password_mass_expiry","user.lifecycle.reactivate","user.lifecycle.suspend","user.lifecycle.unsuspend","user.session.access_admin_app","user.session.clear","user.session.end","user.session.expire","user.session.impersonation.end","user.session.impersonation.extend","user.session.impersonation.grant","user.session.impersonation.initiate","user.session.impersonation.revoke","workflows.user.connection.create","workflows.user.connection.delete","workflows.user.connection.reauthorize","workflows.user.connection.revoke","workflows.user.flow.activate","workflows.user.flow.create","workflows.user.flow.deactivate","workflows.user.flow.delete","workflows.user.flow.export","workflows.user.flow.import","workflows.user.flow.save","workflows.user.table.create","workflows.user.table.delete","workflows.user.table.export","workflows.user.table.import","workflows.user.table.update","workflows.user.table.view","zone.activate","zone.create","zone.deactivate","zone.delete","zone.make_blacklist","zone.remove_blacklist","zone.update","system.push.send_factor_verify_push")
| alter
    outcome_result = json_extract_scalar(outcome, "$.result"),
    actor_type = json_extract_scalar(actor, "$.type")
| alter
    xdm.source.user.identifier = json_extract_scalar(actor, "$.id"),
    xdm.source.user.user_type = if(actor_type in("User"), XDM_CONST.USER_TYPE_REGULAR, actor_type in("SystemPrincipal"), XDM_CONST.USER_TYPE_SERVICE_ACCOUNT,actor_type in("IP address"), XDM_CONST.USER_TYPE_MACHINE_ACCOUNT, to_string(actor_type)),
    xdm.source.user.username = json_extract_scalar(actor, "$.alternateId"),
    xdm.target.cloud.zone = json_extract_scalar(client, "$.zone"),
    xdm.source.ipv4 = json_extract_scalar(client,"$.ipAddress"),
    xdm.target.ipv4="",
    xdm.source.port=to_integer(0),
    xdm.target.port=to_integer(0),
    xdm.source.location.city = json_extract_scalar(client, "$.geographicalContext.city"),
    xdm.source.location.country = json_extract_scalar(client, "$.geographicalContext.country"),
    xdm.source.location.latitude = to_float(json_extract_scalar(client, "$.geographicalContext.geolocation.lat")),
    xdm.source.location.longitude = to_float(json_extract_scalar(client, "$.geographicalContext.geolocation.lon")),
    xdm.event.type = eventType,
    xdm.event.outcome = if(outcome_result="SUCCESS", XDM_CONST.OUTCOME_SUCCESS, outcome_result="FAILURE", XDM_CONST.OUTCOME_FAILED, outcome_result="ALLOW", XDM_CONST.OUTCOME_SUCCESS, outcome_result="DENY", XDM_CONST.OUTCOME_FAILED, outcome_result="CHALLENGE", XDM_CONST.OUTCOME_PARTIAL, XDM_CONST.OUTCOME_UNKNOWN),
    xdm.event.outcome_reason = json_extract_scalar(outcome, "$.reason"),
    xdm.target.resource.id = arraystring (arraymap (json_extract_array (`target`,"$."), json_extract_scalar ("@element", "$.alternateId")),","),
    xdm.target.resource.type = arraystring (arraymap (json_extract_array (`target`,"$."), json_extract_scalar ("@element", "$.type")),","),
    xdm.source.user_agent = json_extract_scalar(client, "$.userAgent.rawUserAgent"),
    xdm.source.host.os = json_extract_scalar(client, "$.userAgent.os"),
    xdm.source.application.name = json_extract_scalar(client, "$.userAgent.browser"),
    xdm.event.id = uuid,
    xdm.source.asn.as_name =  json_extract_scalar(securityContext,"$.asOrg")
    //First and last name extraction
    | alter displayName = json_extract_scalar(actor, "$.displayName")
    | alter
        lastName = arrayindex(regextract(displayName, "\s([\S]*)"),0),
        firstName= arrayindex(regextract(displayName, "([\S]*)\s"),0)
    | alter
        xdm.source.user.first_name = firstName,
        xdm.source.user.last_name = lastName;

filter
    eventType in ("user.session.start","user.mfa.okta_verify.deny_push_upgrade_needed","user.mfa.okta_verify.deny_push","user.mfa.okta_verify","user.mfa.factor.update","user.mfa.factor.unsuspend","user.mfa.factor.suspend","user.mfa.factor.reset_all","user.mfa.factor.deactivate","user.mfa.factor.activate","user.mfa.attempt_bypass","app.access_request.approver.approve","app.access_request.approver.deny","app.access_request.delete","app.access_request.deny","app.access_request.expire","app.access_request.grant","app.access_request.request","app.kerberos_rich_client.account_not_found","app.kerberos_rich_client.instance_not_found","app.kerberos_rich_client.multiple_accounts_found","app.kerberos_rich_client.user_authentication_successful","app.oauth2.admin.consent.grant","app.oauth2.admin.consent.revoke","app.oauth2.as.authorize","app.oauth2.as.authorize.code","app.oauth2.as.authorize.implicit.access_token","app.oauth2.as.authorize.implicit.id_token","app.oauth2.as.authorize.scope_denied","app.oauth2.as.consent.grant","app.oauth2.as.consent.revoke","app.oauth2.as.consent.revoke.implicit.as","app.oauth2.as.consent.revoke.implicit.client","app.oauth2.as.consent.revoke.implicit.scope","app.oauth2.as.consent.revoke.implicit.user","app.oauth2.as.consent.revoke.user","app.oauth2.as.consent.revoke.user.client","app.oauth2.as.evaluate.claim","app.oauth2.as.interact.interaction_code","app.oauth2.as.interact.interaction_handle","app.oauth2.as.key.rollover","app.oauth2.as.token.detect_reuse","app.oauth2.as.token.grant","app.oauth2.as.token.grant.access_token","app.oauth2.as.token.grant.device_secret","app.oauth2.as.token.grant.id_token","app.oauth2.as.token.grant.refresh_token","app.oauth2.as.token.revoke","app.oauth2.authorize","app.oauth2.authorize.code","app.oauth2.authorize.implicit.access_token","app.oauth2.authorize.implicit.id_token","app.oauth2.client.lifecycle.activate","app.oauth2.client.lifecycle.create","app.oauth2.client.lifecycle.deactivate","app.oauth2.client.lifecycle.delete","app.oauth2.client.lifecycle.update","app.oauth2.client_id_rate_limit_warning","app.oauth2.consent.grant","app.oauth2.interact.interaction_code","app.oauth2.interact.interaction_handle","app.oauth2.invalid_client_credentials","app.oauth2.invalid_client_ids","app.oauth2.key.rollover","app.oauth2.signon","app.oauth2.token.detect_reuse","app.oauth2.token.grant","app.oauth2.token.grant.access_token","app.oauth2.token.grant.id_token","app.oauth2.token.grant.refresh_token","app.oauth2.token.revoke","app.oauth2.token.revoke.implicit.as","app.oauth2.token.revoke.implicit.client","app.oauth2.token.revoke.implicit.user","app.office365.graph.api.error.service.principal.msgraph.authentication.failure","application.integration.authentication_failure","oauth2.as.activated","oauth2.as.created","oauth2.as.deactivated","oauth2.as.deleted","oauth2.as.updated","oauth2.claim.created","oauth2.claim.deleted","oauth2.claim.updated","oauth2.scope.created","oauth2.scope.deleted","oauth2.scope.updated","system.agent.ldap.realtimesync","system.agent.ldap.update_user","system.agent.ldap.update_user_password","system.iwa_agentless.auth","system.iwa_agentless.redirect","system.iwa_agentless.update","system.iwa_agentless.user.not_found","system.iwa_agentless_kerberos.update","user.authentication.auth","user.authentication.auth_via_AD_agent","user.authentication.auth_via_IDP","user.authentication.auth_via_LDAP_agent","user.authentication.auth_via_inbound_SAML","user.authentication.auth_via_inbound_delauth","user.authentication.auth_via_iwa","user.authentication.auth_via_mfa","user.authentication.auth_via_radius","user.authentication.auth_via_richclient","user.authentication.auth_via_social","user.authentication.authenticate","user.authentication.slo","user.authentication.sso","user.authentication.verify","user.import.password")
| alter
    outcome_result = json_extract_scalar(outcome, "$.result"),
    actor_type = lowercase(json_extract_scalar(actor, "$.type")),
    actor_alternateId = json_extract_scalar(actor, "$.alternateId"),
    actor_displayName = json_extract_scalar(actor, "$.displayName"),
    actor_id = json_extract_scalar(actor, "$.id"),
    target_id = trim(json_extract(`target`, "$[0].id"), "\""),
    target_type = trim(json_extract(`target`, "$[0].type"), "\""),
    target_alternateId = trim(json_extract(`target`, "$[0].alternateId"), "\""),
    target_displaynames = trim(json_extract(`target`, "$[0].displayName"), "\""),
    debugdata_factor = lowercase(json_extract_scalar(debugContext, "$.debugData.factor")),
    get_reason = json_extract_scalar(outcome, "$.reason"),
    debugdata_errorcode = to_string(json_extract(debugContext, "$.debugData.errorCode")),
    source_ip = json_extract_scalar(client, "$.ipAddress"),
    client_device = json_extract_scalar(client, "$.device"),
    client_ua_os = lowercase(json_extract_scalar(client, "$.userAgent.os")),
    userAgent_rawUserAgent = json_extract_scalar(client, "$.userAgent.rawUserAgent"),
    securityContext_isProxy = json_extract_scalar(securityContext, "$.isProxy"),
    debugContext_debugData_risk_reasons = json_extract(debugContext, "$.debugData.risk.reasons"),
    debugContext_debugData_behaviors = json_extract(debugContext, "$.debugData.behaviors"),
    debugContext_debugData_threatSuspected = lowercase(to_string(json_extract(debugContext, "$.debugData.threatSuspected"))),
    debugContext_debugData_originalPrincipal_type = json_extract(debugContext, "$.debugData.originalPrincipal.type"),
    securityContext_domain = json_extract_scalar(securityContext, "$.domain"),
    request_ipChain = request -> ipChain[]
| alter

	source_ipv4 = if(source_ip !~= ":", source_ip, null),
    source_ipv6 = if(source_ip ~= ":", source_ip, null),
    convert_behaviors_array = arraymap(split(debugContext_debugData_behaviors, ","), rtrim(ltrim("@element", "{"), "}")),
    lowercase_user_type = lowercase(debugContext_debugData_originalPrincipal_type),
    check_debugData_threatSuspected = if(debugContext_debugData_threatSuspected = "false", "risky_signin: FALSE", "risky_signin: TRUE"),
    check_actor_type = if(actor_type = "user", XDM_CONST.USER_TYPE_REGULAR, actor_type = "appuser", XDM_CONST.USER_TYPE_REGULAR, null),
    check_target_type = if(target_type !~= "User", null, target_type = null, null, XDM_CONST.USER_TYPE_REGULAR),
    check_actor_alternateId = if(actor_type = "user", actor_alternateId, actor_type = "appuser", actor_alternateId, null),
    check_target_alternateId = if(target_type !~= "User", null, target_alternateId = null, null, target_alternateId),    
    check_actor_displayName = if(actor_type = "user", actor_displayName, actor_type = "appuser", actor_displayName, null),
    check_target_displayName = if(target_type !~= "User", null, target_displaynames = null, null, target_displaynames),
    check_actor_first_name = if(actor_type = "user", arrayindex(split(actor_displayName), 0) , actor_type = "appuser", arrayindex(split(actor_displayName), 0), null),
    check_target_first_name = if(target_type ~= "User", arrayindex(split(target_displaynames), 0) , null),
    check_actor_last_name = if(actor_type = "user", arrayindex(split(actor_displayName), 1) , actor_type = "appuser", arrayindex(split(actor_displayName), 1), null),
    check_target_last_name = if(target_type ~= "User", arrayindex(split(target_displaynames), 1) , null),
    check_actor_id = if(actor_type = "user", actor_id, actor_type = "appuser", actor_id, null),
    check_target_id = if(target_type !~= "User", null, target_id = null, null, target_id),
    check_securityContext_isProxy = if(securityContext_isProxy = "true", to_boolean("TRUE"), to_boolean("FALSE")),
    check_debugData_risk_reasons1 = if(debugContext_debugData_risk_reasons ~= "Anonymizing Proxy", to_boolean("TRUE"), to_boolean("FALSE")),
    check_debugData_risk_reasons2 = if(debugContext_debugData_risk_reasons ~= "Anonymizing Proxy", "anonymized_ip: TRUE", "anonymized_ip: FALSE"),
    check_ipChain_v4 = arraymap(request_ipChain, if("@element" -> ip !~= ":", "@element" -> ip, null)),
    check_securityContext_domain = if(securityContext_domain = ".", null, securityContext_domain),
    check_ipChain_v6 = arraymap(request_ipChain, if("@element" -> ip ~= ":", "@element" -> ip, null))
| alter
    xdm.event.log_level = if(severity = "DEBUG", XDM_CONST.LOG_LEVEL_DEBUG, severity = "INFO", XDM_CONST.LOG_LEVEL_INFORMATIONAL, severity = "WARN", XDM_CONST.LOG_LEVEL_WARNING, severity = "ERROR", XDM_CONST.LOG_LEVEL_ERROR, severity = null, null, to_string(severity)),
    xdm.event.operation_sub_type = if(eventType != "user.authentication.auth_via_mfa", null, debugdata_factor ~= "yubikey", "hardware_token", target_displaynames ~= "touch id", "hardware_token", target_displaynames ~= "hardware", "hardware_token", debugdata_factor = "fido_webauthn", "hardware_token", debugdata_factor = "password_as_factor", "password", target_displaynames = "authenticator", "application", target_displaynames = "android authenticator with safetyNet attestation", "application", target_displaynames = "okta verify", "application", target_displaynames = "windows hello software authenticator", "application", debugdata_factor = "okta_soft_token", "application", debugdata_factor = "okta_verify_push", "application", debugdata_factor = "email_factor", "email", debugdata_factor = "sms_factor", "sms", debugdata_factor = "call_factor", "voice", null),
    xdm.event.type = if(eventType in ("user.authentication.sso", "user.session.start", "user.mfa.okta_verify.deny_push", "user.mfa.factor.update", "user.authentication.auth_via_mfa", "user.authentication.auth_via_AD_agent", "user.authentication.verify", "user.authentication.auth_via_radius", "user.authentication.auth_via_richclient", "system.push.send_factor_verify_push"), "authentication", ""),
    xdm.event.description = displayMessage,
    xdm.event.operation = if(eventType ~= "authentication|oauth2|mfa", XDM_CONST.OPERATION_TYPE_AUTH_MFA, eventType ~= "session|access_request|import|kerberos_rich_client|iwa|ldap", XDM_CONST.OPERATION_TYPE_AUTH_LOGIN, eventType = null, null, to_string(eventType)),
    xdm.logon.type = if(actor_type = "user", XDM_CONST.LOGON_TYPE_INTERACTIVE, actor_type ~= "network", XDM_CONST.LOGON_TYPE_NETWORK, actor_type ~= "batch", XDM_CONST.LOGON_TYPE_BATCH, actor_type ~= "service", XDM_CONST.LOGON_TYPE_SERVICE, actor_type ~= "proxy", XDM_CONST.LOGON_TYPE_PROXY, actor_type ~= "unlock", XDM_CONST.LOGON_TYPE_UNLOCK, actor_type = "systemprincipal", null, actor_type = null, null, to_string(actor_type)),
    xdm.auth.service = if(eventType = "user.authentication.auth_via_AD_agent", "IDP", eventType = "user.authentication.auth_via_radius", "IDP", eventType = "user.authentication.auth_via_richclient", "IDP", eventType = "user.session.start", "IDP", eventType = "policy.evaluate_sign_on", "IDP", eventType = "system.push.send_factor_verify_push", "IDP", eventType = "user.authentication.auth_via_mfa", "IDP", eventType = "user.authentication.verify", "IDP", eventType = "user.mfa.okta_verify.deny_push", "IDP", eventType = "user.authentication.sso", "SP", null),
    xdm.source.host.os_family = if(client_ua_os ~= "chrome", XDM_CONST.OS_FAMILY_CHROMEOS, client_ua_os ~= "linux", XDM_CONST.OS_FAMILY_LINUX, client_ua_os ~= "ubuntu", XDM_CONST.OS_FAMILY_UBUNTU, client_ua_os ~= "windows|ms", XDM_CONST.OS_FAMILY_WINDOWS, client_ua_os ~= "mac", XDM_CONST.OS_FAMILY_MACOS, client_ua_os ~= "android", XDM_CONST.OS_FAMILY_ANDROID, client_ua_os ~= "ios", XDM_CONST.OS_FAMILY_IOS, client_ua_os ~= "debian", XDM_CONST.OS_FAMILY_DEBIAN, client_ua_os ~= "fedora", XDM_CONST.OS_FAMILY_FEDORA, client_ua_os ~= "centos", XDM_CONST.OS_FAMILY_CENTOS, client_ua_os ~= "centos", XDM_CONST.OS_FAMILY_CENTOS, client_ua_os ~= "solaris", XDM_CONST.OS_FAMILY_SOLARIS, client_ua_os ~= "scada", XDM_CONST.OS_FAMILY_SCADA, client_ua_os = null, null, to_string(client_ua_os)),
    xdm.source.host.device_category = client_device,
    xdm.source.location.region = json_extract_scalar(client, "$.geographicalContext.state"),
    xdm.source.user.upn = check_actor_alternateId,
    xdm.target.user.upn = check_target_alternateId,
    xdm.source.user.username = check_actor_displayName,
    xdm.target.user.username = check_target_displayName,
    xdm.source.user.first_name = check_actor_first_name,
    xdm.target.user.first_name = check_target_first_name,
    xdm.source.user.last_name = check_actor_last_name,
    xdm.target.user.last_name = check_target_last_name,
    xdm.source.user.identifier = check_actor_id,
    xdm.target.user.identifier = check_target_id,
    xdm.source.user.user_type = check_actor_type,
    xdm.target.user.user_type = check_target_type,
    xdm.target.resource.id = if(target_type = "AppInstance", target_id, null),
    xdm.target.resource.name = if(target_type = "AppInstance", target_alternateId, null),
    xdm.source.asn.as_number = to_integer(json_extract_scalar(securityContext, "$.asNumber")),
    xdm.source.asn.isp = json_extract_scalar(securityContext, "$.isp"),
    xdm.source.asn.domain = check_securityContext_domain, 
    xdm.source.asn.is_proxy = check_securityContext_isProxy,
    xdm.intermediate.is_proxy = check_debugData_risk_reasons1,
    xdm.event.tags = arraycreate(XDM_CONST.EVENT_TAG_AUTHENTICATION),
    xdm.alert.severity = json_extract(debugContext, "$.debugData.risk.level"),
    xdm.alert.risks = arrayconcat(convert_behaviors_array, arraycreate(check_debugData_threatSuspected), arraycreate(check_debugData_risk_reasons2)),
    xdm.session_context_id = json_extract_scalar(`transaction`, "$.id"),
    xdm.observer.action = legacyEventType,
    xdm.source.zone = json_extract_scalar(client, "$.zone"),
    xdm.observer.type = json_extract_scalar(`transaction`, "$.type"),
    xdm.observer.unique_identifier = json_extract_scalar(debugContext, "$.debugData.deviceFingerprint"),
    xdm.auth.mfa.client_details = json_extract_scalar(`transaction`, "$.detail.requestApiTokenId"),
    xdm.intermediate.application.name = json_extract_scalar(debugContext, "$.debugData.proxyType"),
    xdm.network.http.referrer = json_extract_scalar(debugContext, "$.debugData.origin"),
    xdm.network.rule = json_extract_scalar(debugContext, "$.debugData.threatDetections"),
    xdm.network.http.url = json_extract_scalar(debugContext, "$.debugData.url"),
    xdm.auth.privilege_level = if(lowercase_user_type = "user", XDM_CONST.PRIVILEGE_LEVEL_USER, lowercase_user_type = "guest", XDM_CONST.PRIVILEGE_LEVEL_GUEST, lowercase_user_type = "admin", XDM_CONST.PRIVILEGE_LEVEL_ADMIN, lowercase_user_type = "system", XDM_CONST.PRIVILEGE_LEVEL_SYSTEM, lowercase_user_type = null, null, to_string(lowercase_user_type)),
    xdm.auth.mfa.provider = json_extract_scalar(authenticationContext, "$.authenticationProvider.credentialProvider"),
    xdm.auth.mfa.method = json_extract_scalar(authenticationContext, "$.authenticationProvider.credentialType"),
    xdm.source.host.ipv4_addresses = check_ipChain_v4,
    xdm.source.host.ipv6_addresses = check_ipChain_v6,
    xdm.source.host.device_id = json_extract_scalar(client, "$.id"),
    xdm.source.ipv4 = source_ipv4,
    xdm.source.ipv6 = source_ipv6,
    xdm.target.ipv4 = "",
    xdm.target.ipv6 = "",
    xdm.source.port = 0,
    xdm.target.port = 0,
    xdm.source.location.city = json_extract_scalar(client, "$.geographicalContext.city"),
    xdm.source.location.country = json_extract_scalar(client, "$.geographicalContext.country"),
    xdm.source.location.latitude = to_float(json_extract_scalar(client, "$.geographicalContext.geolocation.lat")),
    xdm.source.location.longitude = to_float(json_extract_scalar(client, "$.geographicalContext.geolocation.lon")),
    xdm.network.session_id = json_extract_scalar(authenticationContext, "$.authenticationProvider.externalSessionId"),
    xdm.event.original_event_type = eventType,
    xdm.event.outcome = if(outcome_result = "SUCCESS",XDM_CONST.OUTCOME_SUCCESS, outcome_result = "FAILURE", XDM_CONST.OUTCOME_FAILED, outcome_result = "ALLOW", XDM_CONST.OUTCOME_SUCCESS, outcome_result = "DENY", XDM_CONST.OUTCOME_FAILED, outcome_result = "CHALLENGE", XDM_CONST.OUTCOME_PARTIAL, outcome_result = "UNKNOWN", XDM_CONST.OUTCOME_UNKNOWN, outcome_result = "SKIPPED", XDM_CONST.OUTCOME_PARTIAL, outcome_result = null, null, to_string(outcome_result)), 
    xdm.event.outcome_reason = if(get_reason ~= "UNKNOWN_USER", "user_does_not_exist", get_reason ~= "Login denied. No matching user is assigned to Radius App RADIUS Application.", "user_does_not_exist", get_reason ~= "Login denied. No matching user", "user_does_not_exist", get_reason ~= "INVALID_CREDENTIALS", "bad_credentials", get_reason ~= "Authentication failed: bad username or password", "bad_credentials", debugdata_errorcode ~= "1326", "bad_credentials", get_reason ~= "Authentication failed: account is expired", "account_expired_or_disabled", get_reason ~= "USER_ACCOUNT_EXPIRE", "account_expired_or_disabled", get_reason ~= "GENERAL_NONSUCCESS", "account_expired_or_disabled", get_reason ~= "Authentication failed: password has expired", "account_expired_or_disabled", debugdata_errorcode ~= "1331", "account_expired_or_disabled", debugdata_errorcode ~= "1793", "account_expired_or_disabled", get_reason ~= "Authentication failed: account is locked", "account_locked", get_reason ~= "LOCKED_OUT", "account_locked", get_reason ~= "Login failed.", "failed_login", get_reason ~= "Login Failed", "failed_login", get_reason ~= "PASSWORD_BASED_LOGIN_DISALLOWED", "auth_policy_access_violation", get_reason ~= "login denied", "auth_policy_access_violation", get_reason ~= "VERIFICATION_ERROR", "mfa_failure", get_reason ~= "DEL_AUTH_TIMEOUT", "mfa_expired", get_reason ~= "User rejected Okta push verify", "user_reject", get_reason ~= "Login aborted", "user_cancelled", get_reason ~= "Login aborted.", "user_cancelled", get_reason ~= "NOT_SPECIFIED", "OTHER", get_reason = null, null, to_string(get_reason)),
    xdm.target.host.device_category = target_type,
    xdm.source.user_agent = if(lowercase(userAgent_rawUserAgent) = "unknown", null, userAgent_rawUserAgent),
    xdm.source.host.os = json_extract_scalar(client, "$.userAgent.os"),
    xdm.source.application.name = json_extract_scalar(client, "$.userAgent.browser"),
    xdm.event.id = uuid,
    xdm.source.asn.as_name = json_extract_scalar(securityContext,"$.asOrg");
[MODEL: dataset=okta_sso_raw, content_id="Okta"]
alter
    outcome_result = json_extract_scalar(outcome, "$.result"),
    actor_type = lowercase(json_extract_scalar(actor, "$.type")),
    actor_alternateId = json_extract_scalar(actor, "$.alternateId"),
    actor_displayName = json_extract_scalar(actor, "$.displayName"),
    actor_id = json_extract_scalar(actor, "$.id"),
    target_id = trim(json_extract(`target`, "$[0].id"), "\""),
    target_type = trim(json_extract(`target`, "$[0].type"), "\""),
    target_alternateId = trim(json_extract(`target`, "$[0].alternateId"), "\""),
    target_displaynames = trim(json_extract(`target`, "$[0].displayName"), "\""),
    debugdata_factor = lowercase(json_extract_scalar(debugContext, "$.debugData.factor")),
    get_reason = json_extract_scalar(outcome, "$.reason"),
    debugdata_errorcode = to_string(json_extract(debugContext, "$.debugData.errorCode")),
    source_ip = json_extract_scalar(client, "$.ipAddress"),
    client_device = json_extract_scalar(client, "$.device"),
    client_ua_os = lowercase(json_extract_scalar(client, "$.userAgent.os")),
    userAgent_rawUserAgent = json_extract_scalar(client, "$.userAgent.rawUserAgent"),
    securityContext_isProxy = json_extract_scalar(securityContext, "$.isProxy"),
    debugContext_debugData_risk_reasons = json_extract(debugContext, "$.debugData.risk.reasons"),
    debugContext_debugData_behaviors = json_extract(debugContext, "$.debugData.behaviors"),
    debugContext_debugData_threatSuspected = lowercase(to_string(json_extract(debugContext, "$.debugData.threatSuspected"))),
    debugContext_debugData_originalPrincipal_type = json_extract(debugContext, "$.debugData.originalPrincipal.type"),
    securityContext_domain = json_extract_scalar(securityContext, "$.domain"),
    request_ipChain = request -> ipChain[]
| alter

	source_ipv4 = if(source_ip !~= ":", source_ip, null),
    source_ipv6 = if(source_ip ~= ":", source_ip, null),
    convert_behaviors_array = arraymap(split(debugContext_debugData_behaviors, ","), rtrim(ltrim("@element", "{"), "}")),
    lowercase_user_type = lowercase(debugContext_debugData_originalPrincipal_type),
    check_debugData_threatSuspected = if(debugContext_debugData_threatSuspected = "false", "risky_signin: FALSE", "risky_signin: TRUE"),
    check_actor_type = if(actor_type = "user", XDM_CONST.USER_TYPE_REGULAR, actor_type = "appuser", XDM_CONST.USER_TYPE_REGULAR, null),
    check_target_type = if(target_type !~= "User", null, target_type = null, null, XDM_CONST.USER_TYPE_REGULAR),
    check_actor_alternateId = if(actor_type = "user", actor_alternateId, actor_type = "appuser", actor_alternateId, null),
    check_target_alternateId = if(target_type !~= "User", null, target_alternateId = null, null, target_alternateId),    
    check_actor_displayName = if(actor_type = "user", actor_displayName, actor_type = "appuser", actor_displayName, null),
    check_target_displayName = if(target_type !~= "User", null, target_displaynames = null, null, target_displaynames),
    check_actor_first_name = if(actor_type in("user", "appuser"),  arrayindex(regextract(actor_displayName, "(^[^,\s]+)"), 0), null),
    check_target_first_name = if(target_type ~= "User", arrayindex(split(target_displaynames), 0) , null),
    check_actor_last_name = if(actor_type in("user", "appuser"), arrayindex(regextract(actor_displayName, "^[^,\s]+[,\s]+(.*)$"), 0), null),
    check_target_last_name = if(target_type ~= "User", arrayindex(split(target_displaynames), 1) , null),
    check_actor_id = if(actor_type = "user", actor_id, actor_type = "appuser", actor_id, null),
    check_target_id = if(target_type !~= "User", null, target_id = null, null, target_id),
    check_securityContext_isProxy = if(securityContext_isProxy = "true", to_boolean("TRUE"), to_boolean("FALSE")),
    check_debugData_risk_reasons1 = if(debugContext_debugData_risk_reasons ~= "Anonymizing Proxy", to_boolean("TRUE"), to_boolean("FALSE")),
    check_debugData_risk_reasons2 = if(debugContext_debugData_risk_reasons ~= "Anonymizing Proxy", "anonymized_ip: TRUE", "anonymized_ip: FALSE"),
    check_ipChain_v4 = arraymap(request_ipChain, if("@element" -> ip !~= ":", "@element" -> ip, null)),
    check_securityContext_domain = if(securityContext_domain = ".", null, securityContext_domain),
    check_ipChain_v6 = arraymap(request_ipChain, if("@element" -> ip ~= ":", "@element" -> ip, null))
| alter
    xdm.event.log_level = if(severity = "DEBUG", XDM_CONST.LOG_LEVEL_DEBUG, severity = "INFO", XDM_CONST.LOG_LEVEL_INFORMATIONAL, severity = "WARN", XDM_CONST.LOG_LEVEL_WARNING, severity = "ERROR", XDM_CONST.LOG_LEVEL_ERROR, severity = null, null, to_string(severity)),
    xdm.event.operation_sub_type = if(eventType != "user.authentication.auth_via_mfa", null, debugdata_factor ~= "yubikey", "hardware_token", target_displaynames ~= "touch id", "hardware_token", target_displaynames ~= "hardware", "hardware_token", debugdata_factor = "fido_webauthn", "hardware_token", debugdata_factor = "password_as_factor", "password", target_displaynames = "authenticator", "application", target_displaynames = "android authenticator with safetyNet attestation", "application", target_displaynames = "okta verify", "application", target_displaynames = "windows hello software authenticator", "application", debugdata_factor = "okta_soft_token", "application", debugdata_factor = "okta_verify_push", "application", debugdata_factor = "email_factor", "email", debugdata_factor = "sms_factor", "sms", debugdata_factor = "call_factor", "voice", null),
    xdm.event.type = if(eventType in ("user.authentication.sso", "user.session.start", "user.mfa.okta_verify.deny_push", "user.mfa.factor.update", "user.authentication.auth_via_mfa", "user.authentication.auth_via_AD_agent", "user.authentication.verify", "user.authentication.auth_via_radius", "user.authentication.auth_via_richclient", "system.push.send_factor_verify_push"), "authentication", ""),
    xdm.event.description = displayMessage,
xdm.event.operation = if(eventType ~= "authentication|oauth2|mfa", XDM_CONST.OPERATION_TYPE_AUTH_MFA, eventType ~= "session|access_request|import|kerberos_rich_client|iwa|ldap", XDM_CONST.OPERATION_TYPE_AUTH_LOGIN, eventType = null, null, to_string(eventType)),
    xdm.logon.type = if(actor_type = "user", XDM_CONST.LOGON_TYPE_INTERACTIVE, actor_type ~= "network", XDM_CONST.LOGON_TYPE_NETWORK, actor_type ~= "batch", XDM_CONST.LOGON_TYPE_BATCH, actor_type ~= "service", XDM_CONST.LOGON_TYPE_SERVICE, actor_type ~= "proxy", XDM_CONST.LOGON_TYPE_PROXY, actor_type ~= "unlock", XDM_CONST.LOGON_TYPE_UNLOCK, actor_type = "systemprincipal", null, actor_type = null, null, to_string(actor_type)),
    xdm.auth.service = if(eventType = "user.authentication.auth_via_AD_agent", "IDP", eventType = "user.authentication.auth_via_radius", "IDP", eventType = "user.authentication.auth_via_richclient", "IDP", eventType = "user.session.start", "IDP", eventType = "policy.evaluate_sign_on", "IDP", eventType = "system.push.send_factor_verify_push", "IDP", eventType = "user.authentication.auth_via_mfa", "IDP", eventType = "user.authentication.verify", "IDP", eventType = "user.mfa.okta_verify.deny_push", "IDP", eventType = "user.authentication.sso", "SP", null),
    xdm.source.host.os_family = if(client_ua_os ~= "chrome", XDM_CONST.OS_FAMILY_CHROMEOS, client_ua_os ~= "linux", XDM_CONST.OS_FAMILY_LINUX, client_ua_os ~= "ubuntu", XDM_CONST.OS_FAMILY_UBUNTU, client_ua_os ~= "windows|ms", XDM_CONST.OS_FAMILY_WINDOWS, client_ua_os ~= "mac", XDM_CONST.OS_FAMILY_MACOS, client_ua_os ~= "android", XDM_CONST.OS_FAMILY_ANDROID, client_ua_os ~= "ios", XDM_CONST.OS_FAMILY_IOS, client_ua_os ~= "debian", XDM_CONST.OS_FAMILY_DEBIAN, client_ua_os ~= "fedora", XDM_CONST.OS_FAMILY_FEDORA, client_ua_os ~= "centos", XDM_CONST.OS_FAMILY_CENTOS, client_ua_os ~= "centos", XDM_CONST.OS_FAMILY_CENTOS, client_ua_os ~= "solaris", XDM_CONST.OS_FAMILY_SOLARIS, client_ua_os ~= "scada", XDM_CONST.OS_FAMILY_SCADA, client_ua_os = null, null, to_string(client_ua_os)),
    xdm.source.host.device_category = client_device,
    xdm.source.location.region = json_extract_scalar(client, "$.geographicalContext.state"),
    xdm.source.user.upn = check_actor_alternateId,
    xdm.target.user.upn = check_target_alternateId,
    xdm.source.user.username = check_actor_displayName,
    xdm.target.user.username = check_target_displayName,
    xdm.source.user.first_name = check_actor_first_name,
    xdm.target.user.first_name = check_target_first_name,
    xdm.source.user.last_name = check_actor_last_name,
    xdm.target.user.last_name = check_target_last_name,
    xdm.source.user.identifier = check_actor_id,
    xdm.target.user.identifier = check_target_id,
    xdm.source.user.user_type = check_actor_type,
    xdm.target.user.user_type = check_target_type,
    xdm.target.resource.id = if(target_type = "AppInstance", target_id, null),
    xdm.target.resource.name = if(target_type = "AppInstance", target_alternateId, null),
    xdm.source.asn.as_number = to_integer(json_extract_scalar(securityContext, "$.asNumber")),
    xdm.source.asn.isp = json_extract_scalar(securityContext, "$.isp"),
    xdm.source.asn.domain = check_securityContext_domain,
    xdm.source.asn.is_proxy = check_securityContext_isProxy,
    xdm.intermediate.is_proxy = check_debugData_risk_reasons1,
    xdm.event.tags = arraycreate(XDM_CONST.EVENT_TAG_AUTHENTICATION),
    xdm.alert.severity = json_extract(debugContext, "$.debugData.risk.level"),
    xdm.alert.risks = arrayconcat(convert_behaviors_array, arraycreate(check_debugData_threatSuspected), arraycreate(check_debugData_risk_reasons2)),
    xdm.session_context_id = json_extract_scalar(`transaction`, "$.id"),
    xdm.observer.action = legacyEventType,
    xdm.source.zone = json_extract_scalar(client, "$.zone"),
    xdm.observer.type = json_extract_scalar(`transaction`, "$.type"),
    xdm.observer.unique_identifier = json_extract_scalar(debugContext, "$.debugData.deviceFingerprint"),
    xdm.auth.mfa.client_details = json_extract_scalar(`transaction`, "$.detail.requestApiTokenId"),
    xdm.intermediate.application.name = json_extract_scalar(debugContext, "$.debugData.proxyType"),
    xdm.network.http.referrer = json_extract_scalar(debugContext, "$.debugData.origin"),
    xdm.network.rule = json_extract_scalar(debugContext, "$.debugData.threatDetections"),
    xdm.network.http.url = json_extract_scalar(debugContext, "$.debugData.url"),
    xdm.auth.privilege_level = if(lowercase_user_type = "user", XDM_CONST.PRIVILEGE_LEVEL_USER, lowercase_user_type = "guest", XDM_CONST.PRIVILEGE_LEVEL_GUEST, lowercase_user_type = "admin", XDM_CONST.PRIVILEGE_LEVEL_ADMIN, lowercase_user_type = "system", XDM_CONST.PRIVILEGE_LEVEL_SYSTEM, lowercase_user_type = null, null, to_string(lowercase_user_type)),
    xdm.auth.mfa.provider = json_extract_scalar(authenticationContext, "$.authenticationProvider.credentialProvider"),
    xdm.auth.mfa.method = json_extract_scalar(authenticationContext, "$.authenticationProvider.credentialType"),
    xdm.source.host.ipv4_addresses = check_ipChain_v4,
    xdm.source.host.ipv6_addresses = check_ipChain_v6,
    xdm.source.host.device_id = json_extract_scalar(client, "$.id"),
    xdm.source.ipv4 = source_ipv4,
    xdm.source.ipv6 = source_ipv6,
    xdm.target.ipv4 = "",
    xdm.target.ipv6 = "",
    xdm.source.port = 0,
    xdm.target.port = 0,
    xdm.source.location.city = json_extract_scalar(client, "$.geographicalContext.city"),
    xdm.source.location.country = json_extract_scalar(client, "$.geographicalContext.country"),
    xdm.source.location.latitude = to_float(json_extract_scalar(client, "$.geographicalContext.geolocation.lat")),
    xdm.source.location.longitude = to_float(json_extract_scalar(client, "$.geographicalContext.geolocation.lon")),
    xdm.network.session_id = json_extract_scalar(authenticationContext, "$.authenticationProvider.externalSessionId"),
    xdm.event.original_event_type = eventType,
    xdm.event.outcome = if(outcome_result = "SUCCESS",XDM_CONST.OUTCOME_SUCCESS, outcome_result = "FAILURE", XDM_CONST.OUTCOME_FAILED, outcome_result = "ALLOW", XDM_CONST.OUTCOME_SUCCESS, outcome_result = "DENY", XDM_CONST.OUTCOME_FAILED, outcome_result = "CHALLENGE", XDM_CONST.OUTCOME_PARTIAL, outcome_result = "UNKNOWN", XDM_CONST.OUTCOME_UNKNOWN, outcome_result = "SKIPPED", XDM_CONST.OUTCOME_PARTIAL, outcome_result = null, null, to_string(outcome_result)), 
    xdm.event.outcome_reason = if(get_reason ~= "UNKNOWN_USER", "user_does_not_exist", get_reason ~= "Login denied. No matching user is assigned to Radius App RADIUS Application.", "user_does_not_exist", get_reason ~= "Login denied. No matching user", "user_does_not_exist", get_reason ~= "INVALID_CREDENTIALS", "bad_credentials", get_reason ~= "Authentication failed: bad username or password", "bad_credentials", debugdata_errorcode ~= "1326", "bad_credentials", get_reason ~= "Authentication failed: account is expired", "account_expired_or_disabled", get_reason ~= "USER_ACCOUNT_EXPIRE", "account_expired_or_disabled", get_reason ~= "GENERAL_NONSUCCESS", "account_expired_or_disabled", get_reason ~= "Authentication failed: password has expired", "account_expired_or_disabled", debugdata_errorcode ~= "1331", "account_expired_or_disabled", debugdata_errorcode ~= "1793", "account_expired_or_disabled", get_reason ~= "Authentication failed: account is locked", "account_locked", get_reason ~= "LOCKED_OUT", "account_locked", get_reason ~= "Login failed.", "failed_login", get_reason ~= "Login Failed", "failed_login", get_reason ~= "PASSWORD_BASED_LOGIN_DISALLOWED", "auth_policy_access_violation", get_reason ~= "login denied", "auth_policy_access_violation", get_reason ~= "VERIFICATION_ERROR", "mfa_failure", get_reason ~= "DEL_AUTH_TIMEOUT", "mfa_expired", get_reason ~= "User rejected Okta push verify", "user_reject", get_reason ~= "Login aborted", "user_cancelled", get_reason ~= "Login aborted.", "user_cancelled", get_reason ~= "NOT_SPECIFIED", "OTHER", get_reason = null, null, to_string(get_reason)),
    xdm.target.host.device_category = target_type,
    xdm.source.user_agent = if(lowercase(userAgent_rawUserAgent) = "unknown", null, userAgent_rawUserAgent),
    xdm.source.host.os = json_extract_scalar(client, "$.userAgent.os"),
    xdm.source.application.name = json_extract_scalar(client, "$.userAgent.browser"),
    xdm.event.id = uuid,
    xdm.source.asn.as_name = json_extract_scalar(securityContext,"$.asOrg");


[MODEL: dataset=onelogin_iam_raw, content_id="OneLogin"]
alter 
    event_type_id = to_string(event_type_id),
    ipv4 = if(ipaddr ~= "^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$", ipaddr, null),
    ipv6 = if(ipaddr ~= "\:[a-fA-F\d]{1,4}|[a-fA-F\d]{1,4}\:", ipaddr, null),
    target_user_id = to_string(user_id)
| alter 
    // map event type id according to https://api.onelogin.com/api/1/events/types (https://developers.onelogin.com/api-docs/1/events/event-types)
     event_name = if(event_type_id="1", "APP_ADDED_TO_ROLE", event_type_id="2", "APP_REMOVED_FROM_ROLE", event_type_id="3", "USER_ASSUMED_USER", event_type_id="4", "USER_ASSIGNED_ROLE",event_type_id="5", "USER_LOGGED_INTO_ONELOGIN",event_type_id="6", "USER_FAILED_ONELOGIN_LOGIN",event_type_id="7", "USER_LOGGED_OUT_OF_ONELOGIN",event_type_id="8", "USER_LOGGED_INTO_APP",event_type_id="9", "USER_FAILED_APP_LOGIN",event_type_id="10", "USER_REQUESTED_NEW_PASSWORD",event_type_id="11", "USER_CHANGED_PASSWORD",event_type_id="12", "UNLOCKED_USER",event_type_id="13", "CREATED_USER",event_type_id="14", "UPDATED_USER",event_type_id="15", "DEACTIVATED_USER",event_type_id="16", "ACTIVATED_USER",event_type_id="17", "DELETED_USER",event_type_id="18", "ADMIN_APPROVED_PASSWORD_REQUEST",event_type_id="19", "USER_LOCKED",event_type_id="20", "REACHED_USERS_LIMIT",event_type_id="21", "SUSPENDED_USER",event_type_id="22", "USER_ADDED_OTP_DEVICE",event_type_id="23", "USER_BULK_OPERATION",event_type_id="24", "USER_REMOVED_OTP_DEVICE",event_type_id="25", "PROVISIONING_EXCEPTION",event_type_id="26", "PROVISIONING_EVENT",event_type_id="27", "USER_DOWNLOADED_CERT",event_type_id="28", "USER_RECENTLY_REMOVED",event_type_id="29", "USER_LOGGED_OUT_OF_APP",event_type_id="30", "UPDATED_PAYMENT_INFO",event_type_id="31", "FAILED_UPDATE_PAYMENT_INFO",event_type_id="32", "REACTIVATED_USER",event_type_id="33", "USERS_IMPORTED_FROM_DIRECTORY",event_type_id="34", "USER_REQUESTED_APP",event_type_id="35", "USER_LOCKED_OUT_OF_APP",event_type_id="36", "USER_LOST_OTP_DEVICE",event_type_id="37", "USER_JOIN_REQUEST",event_type_id="38", "APP_REACHED_USER_LIMIT",event_type_id="39", "CONNECTOR_BROKEN",event_type_id="40", "USER_UNLOCKED_OTP_DEVICE",event_type_id="41", "AD_CONNECTOR_STARTED",event_type_id="42", "AD_CONNECTOR_STOPPED",event_type_id="43", "AD_CONNECTOR_CONFIG_RELOAD",event_type_id="44", "AD_CONNECTOR_NOTIFICATION",event_type_id="45", "AD_CONNECTOR_EXCEPTION_OLD",event_type_id="46", "AD_CONNECTOR_FAIL_OVER",event_type_id="47", "AD_CONNECTOR_EXCEPTION",event_type_id="48", "IMPORTED_USER",event_type_id="49", "UPDATE_USER_FAILED",event_type_id="50", "REJECTED_USER",event_type_id="51", "USER_CREATED_IN_APP",event_type_id="52", "USER_UPDATED_IN_APP",event_type_id="53", "USER_SUSPENDED_IN_APP",event_type_id="54", "USER_REACTIVATED_IN_APP",event_type_id="55", "USER_DELETED_IN_APP",event_type_id="56", "UNMATCHED_USERS",event_type_id="57", "RABBIT_DOWN",event_type_id="58", "RABBIT_RESTARTED",event_type_id="59", "USER_LINKED_IN_APP",event_type_id="60", "PROVISIONING_DEPROVISIONING_MODE_DO_NOTHING_WARNING",event_type_id="61", "USER_FAILED_SUSPENDING_IN_APP",event_type_id="62", "USER_FAILED_REACTIVATING_IN_APP",event_type_id="63", "USER_FAILED_DELETING_IN_APP",event_type_id="64", "USER_FAILED_CREATING_IN_APP",event_type_id="65", "USER_FAILED_UPDATING_IN_APP",event_type_id="66", "NO_USERS_TO_IMPORT_FROM_DIRECTORY",event_type_id="67", "DIRECTORY_IMPORT_EXCEPTION",event_type_id="68", "USER_AUTHENTICATED_BY_RADIUS",event_type_id="69", "USER_REJECTED_BY_RADIUS",event_type_id="70", "PRIVILEGE_GRANTED_TO_ACCOUNT",event_type_id="71", "PRIVILEGE_REVOKED_FROM_ACCOUNT",event_type_id="72", "PRIVILEGE_GRANTED_TO_USER",event_type_id="73", "PRIVILEGE_REVOKED_FROM_USER",event_type_id="74", "TRUSTED_IDP_ADDED",event_type_id="75", "TRUSTED_IDP_REMOVED",event_type_id="76", "TRUSTED_IDP_MODIFIED",event_type_id="77", "USER_FAILED_PROXY_LOGIN",event_type_id="78", "USER_SUCCEEDED_PROXY_LOGIN",event_type_id="79", "AD_CONNECTOR_PROVISIONING_ERROR",event_type_id="80", "USER_CREATED_IN_DIRECTORY",event_type_id="81", "USER_UPDATED_IN_DIRECTORY",event_type_id="82", "USER_SUSPENDED_IN_DIRECTORY",event_type_id="83", "USER_REACTIVATED_IN_DIRECTORY",event_type_id="84", "USER_DELETED_IN_DIRECTORY",event_type_id="85", "APP_COULD_NOT_AUTHENTICATE",event_type_id="86", "USER_FAILED_REMOTE_AUTHENTICATION",event_type_id="87", "USER_VIEWED_NOTE",event_type_id="88", "USER_EDITED_NOTE",event_type_id="89", "USER_DELETED_NOTE",event_type_id="90", "USER_UNAUTHORIZED_APP_ACCESS",event_type_id="91", "USER_UNDETERMINED_BY_RADIUS",event_type_id="92", "USER_NTHASH_REQUESTED_BY_RADIUS",event_type_id="95", "DIRECTORY_GROUPS_WRITE_BACK_IMPORT_STARTED",event_type_id="96", "DIRECTORY_GROUPS_WRITE_BACK_IMPORT_FINISHED",event_type_id="100", "SELF_REGISTRATION_REQUEST",event_type_id="101", "SELF_REGISTRATION_APPROVED",event_type_id="102", "SELF_REGISTRATION_DENIED",event_type_id="103", "SELF_REGISTRATION_REQUEST_UNVERIFIED",event_type_id="104", "SELF_REGISTRATION_REQUEST_VERIFIED",event_type_id="105", "SMS_FAILURE",event_type_id="106", "USER_CHANGE_PASSWORD_FAILED",event_type_id="110", "APP_LOGINS_UPDATED",event_type_id="111", "APP_LOGINS_UPDATE_FAILED",event_type_id="112", "TRUSTED_IDP_MADE_DEFAULT",event_type_id="113", "DIRECTORY_IMPORT_STARTED",event_type_id="114", "DIRECTORY_IMPORT_FINISHED",event_type_id="115", "USER_INVITED",event_type_id="116", "CREATE_USER_FAILED",event_type_id="117", "DIRECTORY_SYNC_RUN_ID",event_type_id="118", "SAML_ACS_FAILED",event_type_id="119", "TRUSTED_IDP_REMOVED_AS_DEFAULT",event_type_id="120", "UNLOCKED_USER_IN_DIRECTORY",event_type_id="121", "SCRIPTLET_ERROR",event_type_id="122", "USER_AUTHENTICATED_BY_API",event_type_id="123", "USER_REJECTED_BY_API",event_type_id="124", "ENTITLEMENTS_CACHE_ACTION",event_type_id="125", "ENTITLEMENT_ACTION",event_type_id="126", "DIRECTORY_CONNECTOR_ENABLED",event_type_id="127", "DIRECTORY_CONNECTOR_DISABLED",event_type_id="128", "NO_ACTIVE_ACTIVE_DIRECTORY_CONNECTORS",event_type_id="129", "VLDAP_BIND_FAILURE",event_type_id="130", "VLDAP_BIND_SUCCESS",event_type_id="131", "DIRECTORY_EXPORT_STARTED",event_type_id="132", "DIRECTORY_EXPORT_FINISHED",event_type_id="133", "DIRECTORY_EXPORT_EXCEPTION",event_type_id="134", "DIRECTORY_REFRESH_SCHEMA_EXCEPTION",event_type_id="135", "CERTIFICATE_EXPIRES",event_type_id="136", "DIRECTORY_FIELDS_IMPORT_STARTED",event_type_id="137", "USER_APP_REQUEST_APPROVED",event_type_id="138", "USER_APP_REQUEST_DENIED",event_type_id="139", "DIRECTORY_FIELDS_IMPORT_FINISHED",event_type_id="140", "SOCIAL_SIGN_IN",event_type_id="141", "SOCIAL_SIGN_IN_FAILURE",event_type_id="145", "USER_SMART_PASSWORD_UPDATED",event_type_id="146", "USER_SMART_PASSWORD_UPDATE_FAILED",event_type_id="147", "USER_MANUALLY_ADDED_TO_ROLE",event_type_id="148", "USER_MANUALLY_REMOVED_FROM_ROLE",event_type_id="149", "USER_AUTO_ADDED_TO_ROLE",event_type_id="150", "USER_AUTO_REMOVED_FROM_ROLE",event_type_id="151", "USER_ROLE_MANAGEMENT_GRANTED",event_type_id="152", "USER_ROLE_MANAGEMENT_REVOKED",event_type_id="153", "MAC_LOGIN_SUCCESS",event_type_id="154", "MAC_LOGIN_FAILURE",event_type_id="155", "DIRECTORY_FIELDS_IMPORT_EXCEPTION",event_type_id="156", "POLICY_CREATED",event_type_id="157", "POLICY_UPDATED",event_type_id="158", "POLICY_DELETED",event_type_id="159", "PROXY_AGENT_CREATED",event_type_id="160", "PROXY_AGENT_DELETED",event_type_id="161", "RADIUS_CONFIG_CREATED",event_type_id="162", "RADIUS_CONFIG_UPDATED",event_type_id="163", "RADIUS_CONFIG_DELETED",event_type_id="164", "VPN_ENABLED",event_type_id="165", "VPN_SETTINGS_UPDATED",event_type_id="166", "VPN_DISABLED",event_type_id="167", "EMBEDDING_ENABLED",event_type_id="168", "EMBEDDING_SETTINGS_UPDATED",event_type_id="169", "EMBEDDING_DISABLED",event_type_id="170", "AUTHENTICATION_FACTOR_CREATED",event_type_id="171", "AUTHENTICATION_FACTOR_UPDATED",event_type_id="172", "AUTHENTICATION_FACTOR_DELETED",event_type_id="173", "SECURITY_QUESTIONS_UPDATED",event_type_id="174", "DESKTOP_SSO_SETTINGS_UPDATED",event_type_id="175", "DESKTOP_SSO_ENABLED",event_type_id="176", "DESKTOP_SSO_DISABLED",event_type_id="177", "CERTIFICATE_CREATED",event_type_id="178", "CERTIFICATE_DELETED",event_type_id="179", "API_CREDENTIAL_CREATED",event_type_id="180", "API_CREDENTIAL_DELETED",event_type_id="181", "API_CREDENTIAL_ENABLED",event_type_id="182", "API_CREDENTIAL_DISABLED",event_type_id="183", "VLDAP_ENABLED",event_type_id="184", "VLDAP_DISABLED",event_type_id="185", "VLDAP_SETTINGS_UPDATED",event_type_id="186", "BRANDING_ENABLED",event_type_id="187", "BRANDING_DISABLED",event_type_id="188", "BRANDING_UPDATED",event_type_id="189", "MAPPING_ADDED",event_type_id="190", "MAPPING_DELETED",event_type_id="191", "MAPPING_DISABLED",event_type_id="192", "MAPPING_ENABLED",event_type_id="193", "MAPPING_UPDATED",event_type_id="194", "USER_FIELD_ADDED",event_type_id="195", "USER_FIELD_DELETED",event_type_id="196", "COMPANY_INFO_UPDATED",event_type_id="197", "ACCOUNT_SETTINGS_UPDATED",event_type_id="198", "DIRECTORY_CREATED",event_type_id="199", "DIRECTORY_DESTROYED",event_type_id="200", "DIRECTORY_CONNECTOR_INSTANCE_ADDED",event_type_id="201", "DIRECTORY_CONNECTOR_INSTANCE_DELETED",event_type_id="202", "REAPPLIED_MAPPINGS",event_type_id="203", "SELF_REGISTRATION_PROFILE_CREATED",event_type_id="204", "SELF_REGISTRATION_PROFILE_UPDATED",event_type_id="205", "SELF_REGISTRATION_PROFILE_DESTROYED",event_type_id="206", "MANUALLY_ADDED_LOGIN",event_type_id="207", "MANUALLY_REMOVED_LOGIN",event_type_id="208", "RETRIED_PROVISIONING",event_type_id="209", "DIRECTORY_USER_IMPORT_WARNING",event_type_id="210", "LDAP_CONNECTOR_EXCEPTION",event_type_id="211", "ADMIN_CHANGED_USER_PASSWORD",event_type_id="212", "DIRECTORY_LOCKED",event_type_id="213", "PROFILE_PICTURE_UPLOADED",event_type_id="214", "PROFILE_PICTURE_DELETED",event_type_id="215", "ADMIN_CHANGED_ACCOUNT_SETTINGS",event_type_id="216", "JOB_IN_QUEUE",event_type_id="217", "DIRECTORY_IMPORT_LIMIT_REACHED",event_type_id="218", "REAPPLIED_MAPPINGS_FAILED",event_type_id="219", "WORKDAY_REAL_TIME_NOTIFICATION",event_type_id="220", "ADMIN_CREATED_PAYMENT_RECORD",event_type_id="221", "ADMIN_UPDATED_PAYMENT_RECORD",event_type_id="222", "ADMIN_DELETED_PAYMENT_RECORD",event_type_id="223", "USER_UNLICENSED",event_type_id="224", "USER_LICENSED_MANUALLY",event_type_id="225", "USER_UNLICENSED_MANUALLY",event_type_id="226", "USER_UNLICENSED_AUTOMATICALLY",event_type_id="227", "USER_LICENSE_FAILED",event_type_id="228", "USERS_LICENSED_BULK",event_type_id="229", "ACCOUNT_NEAR_LIMIT",event_type_id="230", "ACCOUNT_IN_LIMIT",event_type_id="231", "USERS_IN_UNLICENSED_STATE",event_type_id="232", "USER_AGREED_TERMS",event_type_id="233", "USER_DENIED_TERMS",event_type_id="234", "ADMIN_ENABLED_TERMS",event_type_id="235", "ADMIN_UPDATED_TERMS",event_type_id="236", "ADMIN_DISABLED_TERMS",event_type_id="237", "DELETE_USER_FAILED",event_type_id="238", "USER_REDIRECTED_FOR_PASSWORD_CHANGE",event_type_id="239", "IMPORT_USER_FAILED",event_type_id="240", "USER_REVEALED_PASSWORD",event_type_id="241", "CSV_IMPORT_FAILED",event_type_id="242", "JOB_START_FAILED",event_type_id="243", "JOB_TERMINATED",event_type_id="244", "REPORT_GENERATED",event_type_id="245", "REPORT_GENERATION_FAILED",event_type_id="246", "REPORT_GENERATION_TERMINATED",event_type_id="247", "USER_MAPPINGS_FAILED",event_type_id="248", "USER_MAPPINGS_SUCCEEDED",event_type_id="249", "USER_BULK_OPERATION_FAILED",event_type_id="250", "PROVISIONING_APP_CONFIG_ERROR",event_type_id="251", "PROVISIONING_APP_THROTTLED",event_type_id="252", "USER_REMOVELOGINS_FAILED",event_type_id="253", "ENTITLEMENT_MAPPINGS_FAILED",event_type_id="254", "ENTITLEMENT_MAPPINGS_REAPPLIED",event_type_id="255", "MANUALLY_UPDATED_LOGIN",event_type_id="291", "USER_CREATED_BY_TIDP",event_type_id="300", "LDAP_CONNECTOR_STARTED",event_type_id="301", "LDAP_CONNECTOR_NOTIFICATION",event_type_id="303", "LDAP_CONNECTOR_CONFIG_RELOAD",event_type_id="304", "LDAP_CONNECTOR_STOPPED",event_type_id="305", "LDAP_CONNECTOR_FAIL_OVER",event_type_id="306", "MANUALLY_ADDED_LOGIN_FAILURE",event_type_id="307", "LDAP_CONNECTOR_PROVISIONING_ERROR",event_type_id="330", "USER_DISASSOCIATED_FROM_DIRECTORY",event_type_id="331", "USER_ASSOCIATED_TO_DIRECTORY",event_type_id="332", "USER_DIRECTORY_EXTERNAL_ID_UPDATED",event_type_id="333", "USER_DIRECTORY_EXTERNAL_ID_DELETED",event_type_id="334", "USER_NOT_UPDATED_IN_APP",event_type_id="400", "API_BAD_REQUEST",event_type_id="401", "API_UNAUTHORIZED",event_type_id="402", "MAPPING_SKIPPED",event_type_id="410", "BROADCASTER_CREATED",event_type_id="411", "BROADCASTER_UPDATED",event_type_id="412", "BROADCASTER_DELETED",event_type_id="501", "API_INDEX_ACTION",event_type_id="502", "API_SHOW_ACTION",event_type_id="503", "API_RES_ACTION",event_type_id="510", "API_SET_PWD_SALT",event_type_id="511", "API_SET_PWD_CLEAR_TEXT",event_type_id="512", "API_SET_CUSTOM_ATTRS",event_type_id="513", "API_ADD_ROLES",event_type_id="514", "API_REMOVE_ROLES",event_type_id="515", "API_AUTH_ISSUE_TOKEN",event_type_id="516", "API_LOGOUT",event_type_id="517", "API_SET_PWD_SALT_FAILED",event_type_id="518", "API_SET_PWD_CLEAR_TEXT_FAILED",event_type_id="519", "API_SET_CUSTOM_ATTRS_FAILED",event_type_id="520", "API_ADD_ROLES_FAILED",event_type_id="521", "API_REMOVE_ROLES_FAILED",event_type_id="522", "API_AUTH_ISSUE_TOKEN_FAILED",event_type_id="523", "API_LOGOUT_FAILED",event_type_id="524", "API_DESTROY_USER_FAILED",event_type_id="525", "API_GET_INVITE_LINK_FAILED",event_type_id="526", "API_LOCK_USER_FAILED",event_type_id="527", "API_VERIFY_FACTOR_FAILED",event_type_id="528", "API_VERIFY_FACTOR",event_type_id="529", "API_UPDATE_USER",event_type_id="530", "API_DESTROY_USER",event_type_id="531", "API_LOCK_USER",event_type_id="532", "API_UPDATE_USER_FAILED",event_type_id="533", "API_CREATE_USER",event_type_id="534", "API_CREATE_USER_FAILED",event_type_id="535", "API_GET_INVITE_LINK",event_type_id="536", "API_USER_OTPS_RETRIEVED",event_type_id="537", "API_CONFIRM_FACTOR",event_type_id="538", "API_CONFIRM_FACTOR_FAILED",event_type_id="539", "API_TRIGGER_FACTOR",event_type_id="540", "API_ADDED_OTP_DEVICE",event_type_id="541", "DIRECTORY_UPDATED",event_type_id="542", "DIRECTORY_OUS_CHANGED",event_type_id="545", "API_SEND_INVITE_LINK_FAILED",event_type_id="546", "API_SEND_INVITE_LINK",event_type_id="550", "FORCE_LOGOUT_USER",event_type_id="551", "SUSPENDED_USER_VIA_API",event_type_id="552", "REACTIVATED_USER_VIA_API",event_type_id="553", "USER_LOCKED_VIA_API",event_type_id="554", "UNLOCKED_USER_VIA_API",event_type_id="555", "EXTERNAL_ASSUME_USER",event_type_id="600", "APP_CREATED_BY_USER",event_type_id="601", "APP_UPDATED_BY_USER",event_type_id="602", "APP_DELETED_BY_USER",event_type_id="700", "CONNECTOR_CREATED",event_type_id="701", "CONNECTOR_CREATE_FAILED",event_type_id="702", "CONNECTOR_UPDATED",event_type_id="703", "CONNECTOR_UPDATE_FAILED",event_type_id="704", "CONNECTOR_DELETED",event_type_id="705", "CONNECTOR_DELETE_FAILED",event_type_id="706", "CONNECTOR_STATS_UPDATE",event_type_id="800", "PARAMETER_CREATED",event_type_id="801", "PARAMETER_CREATE_FAILED",event_type_id="802", "PARAMETER_UPDATED",event_type_id="803", "PARAMETER_UPDATE_FAILED",event_type_id="804", "PARAMETER_DELETED",event_type_id="805", "PARAMETER_DELETE_FAILED",event_type_id="900", "ONELOGIN_DESKTOP_MAC_LOGIN_SUCCESS",event_type_id="901", "ONELOGIN_DESKTOP_MAC_LOGIN_FAILURE",event_type_id="902", "ONELOGIN_DESKTOP_DEVICE_DELETED",event_type_id="903", "ONELOGIN_DESKTOP_DEVICE_UNBIND",event_type_id="904", "ONELOGIN_DESKTOP_LOGIN_SUCCESS",event_type_id="905", "ONELOGIN_DESKTOP_LOGIN_FAILURE",event_type_id="906", "ONELOGIN_DESKTOP_USER_FAILED_ONELOGIN_LOGIN",event_type_id="907", "DIRECTORY_EXPORT_SUCCESS",event_type_id="911", "ONELOGIN_DESKTOP_REVOKE_CERT_FOR_USER",event_type_id="912", "ONELOGIN_DESKTOP_REVOKE_CERT_FOR_DEVICE",event_type_id="931", "ADAPTIVE_LOGIN_ENABLED",event_type_id="932", "ADAPTIVE_LOGIN_DISABLED",event_type_id="950", "OL_OTP_PUSH_REJECT",event_type_id="1001", "USER_LOGIN_CHALLENGE",event_type_id="1002", "USER_LOGIN_CHALLENGE_FAILED",event_type_id="1010", "USER_REAUTH_SUCCESS",event_type_id="1100", "TEMP_OTP_TOKEN_GENERATED",event_type_id="1101", "TEMP_OTP_TOKEN_REVOKED",event_type_id="1200", "DELEGATED_APP_PRIVILEGE_DENIED",event_type_id="1201", "DELEGATED_USER_PRIVILEGE_DENIED",event_type_id="1244", "USER_ADDED_PHONE_NUMBER",event_type_id="1245", "USER_UPDATED_PHONE_NUMBER",event_type_id="1300", "API_APP_CREATED",event_type_id="1301", "API_APP_CREATE_FAILED",event_type_id="1302", "API_APP_UPDATED",event_type_id="1303", "API_APP_UPDATE_FAILED",event_type_id="1304", "API_APP_DESTROYED",event_type_id="1305", "API_APP_DESTROY_FAILED",event_type_id="1400", "USER_VERIFIED_OTP_DEVICE",event_type_id="1401", "API_AUTH_APP_CREATE_FAILED",event_type_id="1402", "API_AUTH_APP_UPDATED",event_type_id="1403", "API_AUTH_APP_UPDATE_FAILED",event_type_id="1404", "API_AUTH_APP_DESTROYED",event_type_id="1405", "API_AUTH_APP_DESTROY_FAILED",event_type_id="1406", "API_AUTH_SCOPE_CREATED",event_type_id="1407", "API_AUTH_SCOPE_CREATE_FAILED",event_type_id="1408", "API_AUTH_SCOPE_UPDATED",event_type_id="1409", "API_AUTH_SCOPE_UPDATE_FAILED",event_type_id="1410", "API_AUTH_SCOPE_DESTROYED",event_type_id="1411", "API_AUTH_SCOPE_DESTROY_FAILED",event_type_id="1412", "API_AUTH_CLAIM_CREATED",event_type_id="1413", "API_AUTH_CLAIM_CREATE_FAILED",event_type_id="1414", "API_AUTH_CLAIM_UPDATED",event_type_id="1415", "API_AUTH_CLAIM_UPDATE_FAILED",event_type_id="1416", "API_AUTH_CLAIM_DESTROYED",event_type_id="1417", "API_AUTH_CLAIM_DESTROY_FAILED",event_type_id="1418", "API_AUTH_CLIENT_CREATED",event_type_id="1419", "API_AUTH_CLIENT_CREATE_FAILED",event_type_id="1420", "API_AUTH_CLIENT_UPDATED",event_type_id="1421", "API_AUTH_CLIENT_UPDATE_FAILED",event_type_id="1422", "API_AUTH_CLIENT_DESTROYED",event_type_id="1423", "API_AUTH_CLIENT_DESTROY_FAILED",event_type_id="1424", "API_AUTH_APP_CREATED",event_type_id="1500", "SANDBOX_SYNC_STARTED",event_type_id="1501", "SANDBOX_SYNC_FAILED",event_type_id="1502", "SANDBOX_SYNCED",event_type_id="1503", "SANDBOX_DELETED",event_type_id="1504", "SANDBOX_DELETE_FAILED",event_type_id="1505", "SANDBOX_CREATED",event_type_id="1506", "SANDBOX_CREATION_FAILED",event_type_id="1507", "SANDBOX_UPDATED",event_type_id="1508", "SANDBOX_UPDATE_FAILED",event_type_id="1509", "SANDBOX_DELETED_BY_API",event_type_id="1510", "SANDBOX_DELETE_FAILED_BY_API",event_type_id="1511", "SANDBOX_CREATED_BY_API",event_type_id="1512", "SANDBOX_CREATION_FAILED_BY_API",event_type_id="1513", "SANDBOX_UPDATED_BY_API",event_type_id="1514", "SANDBOX_UPDATE_FAILED_BY_API",event_type_id="1600", "PROFILE_DEVICES_DELETE_DEVICE",event_type_id="1601", "PROFILE_DEVICES_RENAME_DEVICE",event_type_id="1602", "PROFILE_DEVICES_UPDATE_DEFAULT",event_type_id="1603", "PROFILE_SETTINGS_UPDATE_LOCALE",event_type_id="1604", "PROFILE_SETTINGS_UPDATE_PHONE",event_type_id="1605", "PROFILE_SETTINGS_UPDATE_DEFAULT_TAB",event_type_id="1606", "PROFILE_SETTINGS_UPDATE_PROFILE_PHOTO",event_type_id="1607", "PROFILE_SETTINGS_UPDATE_APP_AUTO_DETECT",event_type_id="1608", "PROFILE_CHANGE_PASSWORD",event_type_id="1609", "PROFILE_SETTINGS_UPDATE_SHOW_TABS",event_type_id="1700", "RADIUS_ATTRIBUTE_CREATED",event_type_id="1701", "RADIUS_ATTRIBUTE_UPDATED",event_type_id="1702", "RADIUS_ATTRIBUTE_DELETED",event_type_id="1801", "ROLE_CREATED",event_type_id="1802", "ROLE_DELETED",event_type_id="1900", "API_BRAND_CREATED",event_type_id="1901", "API_BRAND_CREATE_FAILED",event_type_id="1902", "API_BRAND_UPDATED",event_type_id="1903", "API_BRAND_UPDATE_FAILED",event_type_id="1904", "API_BRAND_DESTROYED",event_type_id="1905", "API_BRAND_DESTROY_FAILED",event_type_id="2000", "HOOKS_LIST_FUNCTION",event_type_id="2001", "CUSTOM_SMTP_ERROR",event_type_id="2002", "SMTP_SETTINGS_UPDATED",event_type_id="2003", "HOOKS_CREATE_FUNCTION",event_type_id="2004", "HOOKS_CREATE_FUNCTION_FAILED",event_type_id="2005", "HOOKS_GET_FUNCTION",event_type_id="2006", "HOOKS_GET_FUNCTION_LOGS",event_type_id="2007", "HOOKS_UPDATE_FUNCTION",event_type_id="2008", "HOOKS_UPDATE_FUNCTION_FAILED",event_type_id="2009", "HOOKS_DELETE_FUNCTION",event_type_id="2010", "HOOKS_DELETE_FUNCTION_FAILED",event_type_id="2011", "HOOKS_LIST_ENVVAR",event_type_id="2012", "HOOKS_CREATE_ENVVAR",event_type_id="2013", "HOOKS_CREATE_ENVVAR_FAILED",event_type_id="2014", "HOOKS_GET_ENVVAR",event_type_id="2015", "HOOKS_UPDATE_ENVVAR",event_type_id="2016", "HOOKS_UPDATE_ENVVAR_FAILED",event_type_id="2017", "HOOKS_DELETE_ENVVAR",event_type_id="2018", "HOOKS_DELETE_ENVVAR_FAILED",event_type_id="2100", "DELEGATED_PRIVILEGE_CREATED_VIA_API",event_type_id="2101", "DELEGATED_PRIVILEGE_CREATED_BY_USER",event_type_id="2102", "DELEGATED_PRIVILEGE_UPDATED_VIA_API",event_type_id="2103", "DELEGATED_PRIVILEGE_UPDATED_BY_USER",event_type_id="2104", "DELEGATED_PRIVILEGE_DELETED_VIA_API",event_type_id="2105", "DELEGATED_PRIVILEGE_DELETED_BY_USER",event_type_id="2106", "DELEGATED_PRIVILEGE_ASSIGNED_TO_USER_VIA_API",event_type_id="2107", "DELEGATED_PRIVILEGE_ASSIGNED_TO_USER_BY_USER",event_type_id="2108", "DELEGATED_PRIVILEGE_REMOVED_FROM_USER_VIA_API",event_type_id="2109", "DELEGATED_PRIVILEGE_REMOVED_FROM_USER_BY_USER",event_type_id="2110", "DELEGATED_PRIVILEGE_ASSIGNED_TO_ROLE_VIA_API",event_type_id="2111", "DELEGATED_PRIVILEGE_ASSIGNED_TO_ROLE_BY_USER",event_type_id="2112", "DELEGATED_PRIVILEGE_REMOVED_FROM_ROLE_VIA_API",event_type_id="2113", "DELEGATED_PRIVILEGE_REMOVED_FROM_ROLE_BY_USER",event_type_id="2114", "DELEGATED_ROLE_PRIVILEGE_DENIED",event_type_id="2201", "REPORT_CREATED_BY_USER",event_type_id="2202", "REPORT_UPDATED_BY_USER",event_type_id="2203", "REPORT_CLONED_BY_USER",event_type_id="2204", "REPORT_DESTROYED_BY_USER",event_type_id="3000", "OIDC_GENERAL_FAIL",event_type_id="3001", "OIDC_IMPLICIT_FLOW_SUCCESS",event_type_id="3002", "OIDC_IMPLICIT_FLOW_FAILED",event_type_id="3003", "OIDC_GET_CODE_SUCCESS",event_type_id="3004", "OIDC_GET_CODE_FAILED",event_type_id="3005", "OIDC_AUTHORIZATION_CODE_SUCCESS",event_type_id="3006", "OIDC_AUTHORIZATION_CODE_FAILED",event_type_id="3007", "OIDC_CLIENT_CREDENTIALS_SUCCESS",event_type_id="3008", "OIDC_CLIENT_CREDENTIALS_FAILED",event_type_id="3009", "OIDC_PASSWORD_SUCCESS",event_type_id="3010", "OIDC_PASSWORD_FAILED",event_type_id="3011", "OIDC_REFRESH_TOKEN_SUCCESS",event_type_id="3012", "OIDC_REFRESH_TOKEN_FAILED",event_type_id="3013", "OIDC_VALIDATE_TOKEN_SUCCESS",event_type_id="3014", "OIDC_VALIDATE_TOKEN_FAILED",event_type_id="3015", "OIDC_REVOKE_TOKEN_SUCCESS",event_type_id="3016", "OIDC_REVOKE_TOKEN_FAILED",event_type_id="3017", "OIDC_USER_INFO_SUCCESS",event_type_id="3018", "OIDC_USER_INFO_FAILED",event_type_id="3019", "NOTIFICATION_WAS_SENT",event_type_id="3020", "GROUP_CREATED",event_type_id="3021", "GROUP_UPDATED",event_type_id="3022", "GROUP_DESTROYED",event_type_id="3023", "USER_CREATED_NOTE",event_type_id="3024", "DELEGATED_GROUP_PRIVILEGE_DENIED",event_type_id="3025", "DELEGATED_POLICY_PRIVILEGE_DENIED",event_type_id="3026", "PROFILE_DEVICES_UNSET_DEFAULT",event_type_id="3027", "DELEGATED_REPORT_PRIVILEGE_DENIED",event_type_id="3028", "DELEGATED_TRUSTED_IDP_PRIVILEGE_DENIED",event_type_id="9000", "USER_ENABLED_WORKFLOW",event_type_id="9001", "USER_DISABLED_WORKFLOW",event_type_id="9002", "USER_INITIATED_WORKFLOW",event_type_id="9003", "USER_COMPLETED_TASK",event_type_id="9004", "USER_MARKED_TASK_COMPLETE",event_type_id="9005", "USER_MARKED_WORKFLOW_COMPLETE",event_type_id="9006", "USER_MARKED_TASK_INCOMPLETE",event_type_id="9007", "USER_ENABLED_ONBOARDING",event_type_id="9008", "USER_DISABLED_ONBOARDING",event_type_id="9009", "USER_ENABLED_OFFBOARDING",event_type_id="9010", "USER_DISABLED_OFFBOARDING",event_type_id="9011", "USER_INITIATED_OFFBOARDING",event_type_id="9012", "USER_INITIATED_ONBOARDING",event_type_id="9013", "USER_COMPLETED_WORKFLOW",event_type_id="9014", "APP_RULES_LIST_SUCCESS",event_type_id="9015", "APP_RULES_LIST_FAILED",event_type_id="9016", "APP_RULES_CREATE_SUCCESS",event_type_id="9017", "APP_RULES_CREATE_FAILED",event_type_id="9018", "APP_RULES_UPDATE_SUCCESS",event_type_id="9019", "APP_RULES_UPDATE_FAILED",event_type_id="9020", "APP_RULES_GET_SUCCESS",event_type_id="9021", "APP_RULES_GET_FAILED",event_type_id="9022", "APP_RULES_DRYRUN_SUCCESS",event_type_id="9023", "APP_RULES_DRYRUN_FAILED",event_type_id="9024", "APP_RULES_DELETE_SUCCESS",event_type_id="9025", "APP_RULES_DELETE_FAILED",event_type_id="9026", "APP_RULES_SORT_SUCCESS",event_type_id="9027", "APP_RULES_SORT_FAILED",event_type_id="9028", "APP_RULES_APPLY_SUCCESS",event_type_id="9029", "APP_RULES_APPLY_FAILED",event_type_id="9030", "APP_RULES_REFRESH_ENTITLEMENTS_SUCCESS",event_type_id="9031", "APP_RULES_REFRESH_ENTITLEMENTS_FAILED",event_type_id="9032", "APP_RULES_LIST_CONDITIONS_SUCCESS",event_type_id="9033", "APP_RULES_LIST_CONDITIONS_FAILED",event_type_id="9034", "APP_RULES_LIST_CONDITION_OPERATORS_SUCCESS",event_type_id="9035", "APP_RULES_LIST_CONDITION_OPERATORS_FAILED",event_type_id="9036", "APP_RULES_LIST_ACTIONS_SUCCESS",event_type_id="9037", "APP_RULES_LIST_ACTIONS_FAILED",event_type_id="9038", "APP_RULES_LIST_ACTION_VALUES_SUCCESS",event_type_id="9039", "APP_RULES_LIST_ACTION_VALUES_FAILED",event_type_id="9040", "USER_ROLE_MANAGEMENT_GRANTED_FAILED",event_type_id="9041", "USER_ROLE_MANAGEMENT_REVOKED_FAILED",event_type_id="9042", "APP_ADDED_TO_ROLE_FAILED",event_type_id="9043", "APP_REMOVED_FROM_ROLE_FAILED",event_type_id="9044", "USER_MANUALLY_ADDED_TO_ROLE_FAILED",event_type_id="9045", "USER_MANUALLY_REMOVED_FROM_ROLE_FAILED",event_type_id="9046", "ROLE_CREATE_FAILED",event_type_id="9047", "ROLE_DELETE_FAILED",event_type_id="9048", "ROLE_LIST_SUCCESS",event_type_id="9049", "ROLE_LIST_FAILED",event_type_id="9050", "ROLE_GET_SUCCESS",event_type_id="9051", "ROLE_GET_FAILED",event_type_id="9052", "ROLE_UPDATE_SUCCESS",event_type_id="9053", "ROLE_UPDATE_FAILED",event_type_id="9054", "ROLE_LIST_APPS_SUCCESS",event_type_id="9055", "ROLE_LIST_APPS_FAILED",event_type_id="9056", "ROLE_LIST_USERS_SUCCESS",event_type_id="9057", "ROLE_LIST_USERS_FAILED",event_type_id="9058", "ROLE_LIST_ADMINISTRATORS_SUCCESS",event_type_id="9059", "ROLE_LIST_ADMINISTRATORS_FAILED", event_type_id)
| alter 
    xdm.event.id = to_string(id),
    xdm.event.original_event_type = event_type_id,
    xdm.event.type = event_name, 
    xdm.event.description = notes,
    xdm.alert.severity = to_string(risk_score),
    xdm.alert.description = risk_reasons,
    xdm.network.rule = policy_name,
    xdm.source.user.username = actor_user_name,
    xdm.source.user.identifier = to_string(actor_user_id),
    xdm.source.ipv4 = ipv4, 
    xdm.source.host.ipv4_addresses = if(ipv4 != null, arraycreate(ipv4), null),
    xdm.source.ipv6 = ipv6, 
    xdm.source.host.ipv6_addresses = if(ipv6 != null, arraycreate(ipv6), null),
    xdm.target.user.username = user_name,
    xdm.target.user.identifier = target_user_id,
    xdm.target.user.employee_id = target_user_id,
    xdm.target.application.name = app_name,
    xdm.target.ipv4 = ipv4, 
    xdm.target.host.ipv4_addresses = if(ipv4 != null, arraycreate(ipv4), null),
    xdm.target.ipv6 = ipv6, 
    xdm.target.host.ipv6_addresses = if(ipv6 != null, arraycreate(ipv6), null),
    xdm.target.host.hostname = otp_device_name,
    xdm.target.host.device_id = to_string(otp_device_id);


[MODEL: dataset="prisma_cloud_raw", content_id="PrismaCloud"]
alter /* extract alert data (schema docs: https://pan.dev/prisma-cloud/api/cspm/get-alerts-v-2/) */
    alert_scanner_version = alertAdditionalInfo -> scannerVersion,
    policy_description = policy -> description,
    policy_labels = arraymap(policy -> labels[], trim("@element", "\"")),
    policy_name = policy -> name, 
    policy_cloudType = policy -> cloudType, 
    policy_policyId = policy -> policyId, 
    policy_policyType = policy -> policyType,  
    policy_severity = policy -> severity,
    policy_lastModifiedBy = policy -> lastModifiedBy, 
    policy_recommendation = policy -> recommendation,
    policy_mitre_compliance_metadata = arrayfilter(policy -> complianceMetadata[], "@element" -> sectionLabel = "MITRE ATT&CK"),
    resource_account = resource -> account, 
    resource_accountId = resource -> accountId, 
    resource_cloudaccountgroups = arraymap(resource -> cloudAccountGroups[], trim("@element", "\"")),
    resource_cloudaccountowners = trim(arraystring(resource -> cloudAccountOwners[], ","), "\""),
    resource_cloudType = resource -> cloudType, 
    resource_cloudServiceName = resource -> cloudServiceName,
    resource_data_zone = resource -> data.zone,
    resource_data_placement_availabilityZone = resource -> data.placement.availabilityZone,
    resource_data_snapshot_availabilityZone = resource -> data.snapshot.availabilityZone, // DB_SNAPSHOT resource type
    resource_data_availabilityZones_zoneName = arraystring(arraymap(resource -> data.availabilityZones[], "@element" -> zoneName), ","),
    resource_data_cidrBlock = resource -> data.cidrBlock,
    resource_data_ipCidrRange = resource -> data.ipCidrRange, // SUBNET resource type
    resource_data_association_publicIp = resource -> data.association.publicIp, // IFACE resource type
    resource_data_mac_address = resource -> data.macAddress, // IFACE resource type
    resource_data_dbname = resource -> data.dbname, // MANAGED_DBMS resource type 
    resource_data_snapshot_port = resource -> data.snapshot.port, // DB_SNAPSHOT resource type 
    resource_data_endpoint_port = resource -> data.endpoint.port, // MANAGED_DBMS resource type
    resource_data_endpoint = resource -> data.endpoint,
    resource_data_gatewayAddress = resource -> data.gatewayAddress, // SUBNET resource type
    resource_data_user = resource -> data.user, // IAM_CREDENTIAL_REPORT & IAM_USER resource types
    resource_data_host = resource -> data.host, // INSTANCE resource type
    resource_id = resource -> id, 
    resource_name = resource -> name, 
    resource_region = resource -> region, 
    resource_regionId = resource -> regionId, 
    resource_resourceType = resource -> resourceType, 
    resource_rrn = resource -> rrn,  
    resource_url = resource -> url
| alter // post extraction processing 
    cloud_type = uppercase(coalesce(policy_cloudType, resource_cloudType)), 
    cloud_region = coalesce(resource_regionId, resource_region),
    cloud_zone = coalesce(arrayindex(regextract(resource_data_zone, "zones\/([\w\-]+)"), 0), resource_data_zone, resource_data_placement_availabilityZone, resource_data_snapshot_availabilityZone, resource_data_availabilityZones_zoneName),
    hostname = if(resource_resourceType = "INSTANCE", resource_name),
    ip_address = if(resource_resourceType = "GCP_KUBERNETES_CLUSTER", resource_data_endpoint, coalesce(resource_data_host, resource_data_gatewayAddress, resource_data_association_publicIp)),
    port = to_integer(coalesce(resource_data_endpoint_port, resource_data_snapshot_port)),
    subnet_cidr_range = coalesce(resource_data_cidrBlock, resource_data_ipCidrRange), 
    mac_address = if(resource_data_mac_address != null, arraycreate(resource_data_mac_address)),
    mitre_tactics = arraydistinct(arraymap(policy_mitre_compliance_metadata, "@element" -> requirementId)),
    mitre_techniques = arraydistinct(arraymap(policy_mitre_compliance_metadata, "@element" -> sectionId))
| alter cloud_provider = if(cloud_type ~= "ALIBABA", XDM_CONST.CLOUD_PROVIDER_ALIBABA, cloud_type ~= "AWS|AMAZON", XDM_CONST.CLOUD_PROVIDER_AWS, cloud_type ~= "AZURE|MS|MICROSOFT", XDM_CONST.CLOUD_PROVIDER_AZURE, cloud_type ~= "GOOGLE|GCP", XDM_CONST.CLOUD_PROVIDER_GCP, cloud_type)
| alter // mappings 
    xdm.alert.name = policy_name, 
    xdm.alert.description = policy_description,
    xdm.alert.mitre_tactics = mitre_tactics, 
    xdm.alert.mitre_techniques = mitre_techniques,
    xdm.alert.original_alert_id = id,
    xdm.alert.original_threat_id = coalesce(policy_policyId, policyId), 
    xdm.alert.severity = policy_severity,
    xdm.database.name = resource_data_dbname,
    xdm.event.id = id,
    xdm.event.tags = policy_labels,
    xdm.event.original_event_type = policy_policyType,
    xdm.event.description = policy_recommendation, 
    xdm.event.outcome = status,
    xdm.event.outcome_reason = reason, 
    xdm.event.is_completed = if(status in ("resolved", "dismissed"), to_boolean("TRUE"), status in ("open", "snoozed"), to_boolean("FALSE")),
    xdm.intermediate.user.username = policy_lastModifiedBy, 
    xdm.network.rule = policy_name, 
    xdm.observer.version = alert_scanner_version,
    xdm.target.application.name = resource_cloudServiceName, 
    xdm.target.cloud.project = resource_account,
    xdm.target.cloud.provider = cloud_provider,
    xdm.target.cloud.region = cloud_region,
    xdm.target.cloud.zone = cloud_zone, 
    xdm.target.host.hostname = hostname,
    xdm.target.host.mac_addresses = mac_address,
    xdm.target.ipv4 = ip_address,
    xdm.target.port = port,
    xdm.target.resource.id = resource_id,
    xdm.target.resource.name = resource_rrn, 
    xdm.target.resource.type = resource_resourceType, 
    xdm.target.resource.value = resource_name, 
    xdm.target.resource.parent_id = resource_cloudaccountowners,
    xdm.target.subnet = subnet_cidr_range,
    xdm.target.url = resource_url,
    xdm.target.user.ou = resource_accountId,
    xdm.target.user.username = resource_data_user,
    xdm.target.user.groups = resource_cloudaccountgroups;


[MODEL: dataset = prisma_cloud_compute_raw, content_id="PrismaCloudCompute"]
alter

	lowercase_tags = lowercase(tags),

	lowercase_osDistro = lowercase(osDistro),

	lowercase_provider = lowercase(provider),

	get_label_image_name_1 = json_extract_scalar(labels, "$['baseimage.name']"),

	get_label_image_name_2 = json_extract_scalar(labels, "$['org.opencontainers.image.ref.name']"),

	get_label_image_name_3 = json_extract_scalar(labels, "$.Name"),									

	get_label_image_name_4 = json_extract_scalar(labels, "$.name"),									

	get_label_image_os = json_extract_scalar(labels, "$['org.opencontainers.image.version']"),

	get_label_image_author = json_extract_scalar(labels, "$['org.opencontainers.image.authors']"),

	get_label_app = json_extract_scalar(labels, "$.app"),

	get_label_maintainer = json_extract_scalar(labels, "$.maintainer"),

	get_label_osDistro = lowercase(json_extract_scalar(labels, "$.osDistro")),

	get_label_osVersion = json_extract_scalar(labels, "$.osVersion")

| alter

	check_image = coalesce(image, get_label_image_name_1, get_label_image_name_2, get_label_image_name_3, get_label_image_name_4),

	check_osDistro = coalesce(lowercase_osDistro, get_label_osDistro),

	check_origin_vendor = coalesce(get_label_maintainer, get_label_image_author),

	check_fullos_1 = get_label_osDistro + get_label_osVersion,

	check_fullos_2 = get_label_image_name_2 + get_label_image_os

| alter

	xdm.target.user.username = user,

	xdm.target.host.fqdn = fqdn,

	xdm.target.host.hostname = host,

	xdm.network.rule = rule,

	xdm.event.tags = arraycreate(if(lowercase_tags ~= "auth", XDM_CONST.EVENT_TAG_AUTHENTICATION, lowercase_tags ~= "vpn", XDM_CONST.EVENT_TAG_VPN, lowercase_tags ~= "network", XDM_CONST.EVENT_TAG_NETWORK, lowercase_tags = null, null, to_string(lowercase_tags))),

	xdm.event.type = type,

	xdm.target.agent.identifier = check_image,

	xdm.alert.description = coalesce(aggregatedAlerts, aggregated),

	xdm.target.host.manufacturer = labels,

	xdm.target.location.region = region,

	xdm.event.description = message,

	xdm.target.application.name = get_label_app,

	xdm.alert.category = category,

	xdm.target.resource.type = if(function != null, "function", check_image != null, "INSTANCE", container != null, "container", null),

	xdm.target.resource.value = if(function != null, "function", check_image != null, check_image, container != null, container, null),

	xdm.target.host.os_family = if(check_osDistro ~= "win", XDM_CONST.OS_FAMILY_WINDOWS, check_osDistro ~= "mac", XDM_CONST.OS_FAMILY_MACOS, check_osDistro ~= "linux|amzn", XDM_CONST.OS_FAMILY_LINUX, get_label_maintainer ~= "Red Hat", XDM_CONST.OS_FAMILY_LINUX, check_osDistro ~= "android", XDM_CONST.OS_FAMILY_ANDROID, check_osDistro ~= "ios", XDM_CONST.OS_FAMILY_IOS, check_osDistro ~= "ubuntu", XDM_CONST.OS_FAMILY_UBUNTU, check_osDistro ~= "debian", XDM_CONST.OS_FAMILY_DEBIAN, check_osDistro ~= "fedora", XDM_CONST.OS_FAMILY_FEDORA, check_osDistro ~= "centos", XDM_CONST.OS_FAMILY_CENTOS, check_osDistro ~= "chromeos", XDM_CONST.OS_FAMILY_CHROMEOS, check_osDistro ~= "solaris", XDM_CONST.OS_FAMILY_SOLARIS, check_osDistro ~= "scada", XDM_CONST.OS_FAMILY_SCADA, check_osDistro = null, null, to_string(lowercase_osDistro)),

	xdm.target.cloud.provider = if(lowercase_provider ~= "aws|amazon|amz", XDM_CONST.CLOUD_PROVIDER_AWS, check_osDistro ~= "aws|amazon|amz", XDM_CONST.CLOUD_PROVIDER_AWS, lowercase_provider ~= "gcp|google", XDM_CONST.CLOUD_PROVIDER_GCP, lowercase_provider ~= "azure|microsoft", XDM_CONST.CLOUD_PROVIDER_AZURE, lowercase_provider ~= "baba|alibaba", XDM_CONST.CLOUD_PROVIDER_ALIBABA, lowercase_provider = null, null, to_string(lowercase_provider)),

	xdm.target.cloud.project = accountID,

	xdm.target.process.container_id = container,

	xdm.target.host.os = coalesce(osRelease, check_fullos_1, check_fullos_2),

	xdm.target.host.device_category = to_string(collections),

	//xdm.alert.risks = vulnerabilities,

	xdm.target.process.command_line = if(command = null, arraystring(regextract(message, "command:\s+(.*)"), ""), command),

	xdm.target.process.name = if(startupProcess = "#startupProcess", null, startupProcess),

	xdm.target.application.publisher = check_origin_vendor;


[MODEL: dataset = proofpoint_email_security_raw, content_id="ProofpointEmailSecurity"]
// Modeling rule for Proofpoint email security "Message" events
filter event_type = "message"
// Parsing fiedls
| alter
        header_from = arrayindex(msg -> normalizedHeader.from[], 0),
        cc = split(rtrim(ltrim(replex(replex(arrayindex(msg -> normalizedHeader.cc[], 0), ",\s*?\\t", ","), ",\s+", ","), "\""), "\""), ","),
        to = split(rtrim(ltrim(replex(replex(arrayindex(msg -> normalizedHeader.to[], 0), ",\s*?\\t", ","), ",\s+", ","), "\""), "\""), ","),
        returnPath = split(rtrim(ltrim(replex(replex(arrayindex(json_extract_array(msg, "$.normalizedHeader.return-path"), 0), ",\s*?\\t", ","), ",\s+", ","), "\""), "\""), ","),
        msgParts_array = msgParts -> [],
        actions = `filter` -> actions[],
        source_ip = connection -> ip
| alter
        header_from = if(header_from contains "<", arrayindex(regextract(header_from, "<([^>]+)>"), 0), trim(header_from, "\"")),
        cc = arrayfilter(arraymap(cc, if("@element" contains "<", arrayindex(regextract("@element", "<([^>]+)>"),0), "@element")), "@element" contains "@"),
        to = arrayfilter(arraymap(to, if("@element" contains "<", arrayindex(regextract("@element", "<([^>]+)>"),0), "@element")), "@element" contains "@")
// Modeling fields
| alter
        xdm.event.type = event_type,
        xdm.event.id = guid,
        xdm.network.session_id = connection -> sid,
        xdm.source.location.country = if(connection -> country !~= "[a-zA-Z]+", null, connection -> country),
        xdm.source.ipv4 = if(source_ip ~= "\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}", source_ip, null),
        xdm.source.ipv6 = if(source_ip ~= "[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}", source_ip, null),
        xdm.source.host.hostname = connection -> host,
        xdm.network.application_protocol = connection -> protocol,
        xdm.network.tls.cipher = connection -> tls.inbound.cipher,
        xdm.network.tls.protocol_version = connection -> tls.inbound.version,
        xdm.email.recipients = to,
        xdm.email.sender = if(header_from != null and header_from != "", header_from, envelope -> from),
        xdm.email.cc = cc,
        xdm.email.message_id = rtrim(ltrim(arrayindex(json_extract_array(msg, "$.normalizedHeader.message-id"), 0), "\""), "\""),
        xdm.email.subject = rtrim(ltrim(arrayindex(msg -> normalizedHeader.subject[], 0), "\""), "\""),
        xdm.email.return_path = arraystring(returnPath, ", "),
        xdm.email.attachment.extension = arraystring(arrayfilter(arraymap(msgParts_array, "@element" -> detectedExt), "@element" != "" and "@element" != null), ", "),
        xdm.email.mime = arraystring(arrayfilter(arraymap(msgParts_array, "@element" -> detectedMime), "@element" != "" and "@element" != null), ", "),
        xdm.email.attachment.filename = arraystring(arrayfilter(arraymap(msgParts_array, "@element" -> detectedName), "@element" != "" and "@element" != null), ", "),
        xdm.email.attachment.md5 = arraystring(arrayfilter(arraymap(msgParts_array, "@element" -> md5), "@element" != "" and "@element" != null), ", "),
        xdm.email.attachment.sha256 = arraystring(arrayfilter(arraymap(msgParts_array, "@element" -> sha256), "@element" != "" and "@element" != null), ", "),
        xdm.observer.action = arraystring(arraymap(actions, if("@element" -> isFinal = "true", "@element" -> action, null)), ", "),
        xdm.alert.original_threat_name = arraystring(`filter` -> modules.av.virusNames[], ", ");
// Modeling rule for Proofpoint email security "Mail" events
filter event_type = "maillog"
| alter
        xdm.event.type = event_type,
        xdm.event.description = data,
        xdm.event.id = id,
        xdm.source.agent.identifier = pps -> agent,
        xdm.email.sender = sm -> from,
        xdm.source.process.name = sm -> daemon,
        xdm.email.message_id = rtrim(ltrim(sm -> msgid, "<"), ">"),
        xdm.network.application_protocol = sm -> proto,
        xdm.observer.action = rtrim(arrayindex(regextract(sm -> stat, "(^[^:\(]+)"), 0), "\s"),
        xdm.email.recipients = arraymap(arraymap(arraymap(arraymap(sm -> to[], ltrim("@element", "\"")), rtrim("@element", "\"")), ltrim("@element", "<")), rtrim("@element", ">")),
        xdm.network.tls.cipher = if(lowercase(tls -> cipher) = "none", null, tls -> cipher),
        xdm.network.tls.protocol_version = if(lowercase(tls -> version) = "none", null, tls -> version);


[MODEL:dataset="recorded_future_intelligence_cloud_raw", content_id="RecordedFuture"]

alter
// The ID of the alert
alert_id = id,
// The name of the rule
event_description = rule -> name,
// The ID of the rule
event_id = rule -> id,
// The link to the rule in RF system
alert_subcat = rule -> url.portal,
// Event type
event_type = type ,
// The title of the alert
alert_name = title ,
// Description of the alert from AI insights
alert_description = ai_insights -> text,
// Event hits
alert_risks = json_extract_array(hits,"$.") 

| alter xdm.alert.original_alert_id = alert_id ,
xdm.alert.risks = alert_risks,
xdm.event.description = event_description ,
xdm.event.id = event_id ,
xdm.alert.subcategory = alert_subcat ,
xdm.event.type = event_type ,
xdm.alert.name = alert_name ,
xdm.alert.description = alert_description;


[MODEL: dataset = salesforce_login_raw , content_id="Salesforce"]
alter xdm.source.user.identifier = replex(_USER_ID_ ,"\"",""),
    xdm.target.module.path = replex(_URI_ ,"\"",""),
    xdm.event.duration = to_integer(multiply(to_integer(replex(_RUN_TIME_ ,"\"","")),1000)),
    xdm.source.ipv4 = arrayindex(regextract(_SOURCE_IP_ ,"(\d+\.\d+\.\d+\.\d+)"),0),
    xdm.source.user.username = replex(_USER_NAME_ ,"\"",""),
    xdm.source.user.user_type = if(_USER_TYPE_ in ("Standard","PowerPartner","PowerCustomerSuccess","Guest","CustomerSuccess","CspLitePortal","CsnOnly"),XDM_CONST.USER_TYPE_REGULAR ,_USER_TYPE_ = "SelfService",XDM_CONST.USER_TYPE_SERVICE_ACCOUNT ,to_string(replex(_USER_TYPE_ ,"\"",""))),
    xdm.event.type = replex(_EVENT_TYPE_ ,"\"",""),
    xdm.source.user_agent = replex(_BROWSER_TYPE_ ,"\"",""),
    xdm.network.tls.cipher = replex(_CIPHER_SUITE_ ,"\"",""),
    xdm.network.tls.protocol_version = replex(_TLS_PROTOCOL_ ,"\"",""),
    xdm.database.response_time = to_integer(replex(_DB_TOTAL_TIME_ ,"\"","")),
    xdm.logon.logon_guid = replex(_LOGIN_KEY_ ,"\"",""),
    xdm.observer.version = replex(_API_VERSION_ ,"\"",""),
    xdm.event.outcome_reason = replex(_LOGIN_STATUS_ ,"\"",""),
    xdm.source.host.os = replex(_PLATFORM_TYPE_ ,"\"",""),
    xdm.auth.auth_method = replex(_AUTHENTICATION_METHOD_REFERENCE_ ,"\"","");
[MODEL: dataset = salesforce_audit_raw, content_id="Salesforce"]
alter xdm.event.operation_sub_type = Action,
    xdm.event.description = Display,
    xdm.source.user.identifier = CreatedById,
    xdm.target.resource.id = Id,
    xdm.event.type = json_extract_scalar(attributes,"$.type" ),
    xdm.source.user.username = CreatedByIssuer,
    xdm.target.user.username = DelegateUser;
[MODEL: dataset = salesforce_eventlogfile_raw, content_id="Salesforce"]
alter method = coalesce(replex(_METHOD_ ,"\"",""),replex(_HTTP_METHOD_,"\"","")),
    timefield = to_integer(multiply(to_integer(replex(_TIME_ ,"\"","")),1000)),
    run_time = to_integer(multiply(to_integer(replex(_RUN_TIME_ ,"\"","")),1000)),
    totoal_ms = if(_TOTAL_MS_ ~= "\d+", to_integer(_TOTAL_MS_),null),
    client_ip = if(_CLIENT_IP_ ~= "\d+\.\d+\.\d+\.\d+",replex(_CLIENT_IP_ ,"\"",""),null ),
    exec_time = to_integer(replex(_EXEC_TIME_ ,"\"","")),
    url = replex(_URL_ ,"\"",""),
    next_link = replex(_NEXT_LINK_ ,"\"",""),
    execute_ms = to_integer(replex(_EXECUTE_MS_  ,"\"","")),
    file_type = replex(_FILE_TYPE_,"\"",""),
    media_type = replex(_MEDIA_TYPE_ ,"\"",""),
    size_bytes = to_integer(replex(_SIZE_BYTES_, "\"","")),
    db_cpu_time = to_integer(replex(_DB_CPU_TIME_,"\"","")),
    entry_point = replex(_ENTRY_POINT_,"\"",""),
    uri = replex(_URI_ ,"\"",""),
    status_code = replex(_STATUS_CODE_,"\"",""),
    browser_name = replex(_BROWSER_NAME_,"\"",""),
    user_agent = replex(_USER_AGENT_,"\"",""),
    callout_time = to_integer(replex(_CALLOUT_TIME_,"\"","")),
    flow_load_time = to_integer(replex(_FLOW_LOAD_TIME_,"\"","")),
    record_id = replex(_RECORD_ID_,"\"",""),
    device_session_id = replex(_DEVICE_SESSION_ID_,"\"",""),
    prevpage_app_name = replex(_PREVPAGE_APP_NAME_ ,"\"",""),
    app_name = replex(_APP_NAME_ ,"\"",""),
    target_ui_element = replex(_TARGET_UI_ELEMENT_,"\"",""),
    page_url = replex(_PAGE_URL_ ,"\"",""),
    duration_field = to_integer(replex(_DURATION_ ,"\"","")),
    entity = replex(_ENTITY_ ,"\"",""),
    file_preview_type = replex(_FILE_PREVIEW_TYPE_,"\"",""),
    device_id = if( _DEVICE_ID_ = "\"\"",null,replex(_DEVICE_ID_ ,"\"","") ),
    user_type = replex(_USER_TYPE_ ,"\"","")
| alter xdm.target.file.path = coalesce(uri ,entry_point ),
    xdm.target.url = coalesce(url,next_link ),
    xdm.event.duration = coalesce(timefield,duration_field,run_time,totoal_ms,exec_time,execute_ms,db_cpu_time,callout_time,flow_load_time),
    xdm.event.operation_sub_type = replex(_ACTION_ ,"\"",""),
    xdm.network.http.method = if(method = "GET", XDM_CONST.HTTP_METHOD_GET , method = "POST", XDM_CONST.HTTP_METHOD_POST, method = "PUT", XDM_CONST.HTTP_METHOD_PUT, to_String(method)),
    xdm.target.process.executable.filename = replex(_ORIGIN_ ,"\"",""),
    xdm.target.process.command_line = replex(_SEARCH_QUERY_ ,"\"",""),
    xdm.target.host.os = replex(_OS_NAME_ ,"\"",""),
    xdm.target.user.identifier = replex(_USER_ID_ ,"\"",""),
    xdm.target.application.name = coalesce(app_name,prevpage_app_name),
    xdm.target.resource.name = coalesce(page_url,target_ui_element,entity),
    xdm.target.process.executable.extension = if(_QUIDDITY_ = "A", "ACS Batch Apex",_QUIDDITY_ = "B", "Bulk API and Bulk API 2.0",_QUIDDITY_ = "BA", "Start method of a Batch Apex job",_QUIDDITY_ = "C", "Scheduled Apex",_QUIDDITY_ = "CI", "Commerce Integration",_QUIDDITY_ = "DL", " Discoverable Login page",_QUIDDITY_ = "E", "Inbound Email Service",_QUIDDITY_ = "F", "Future",_QUIDDITY_ = "FC", "Function Callback",_QUIDDITY_ = "H", "Apex REST",_QUIDDITY_ = "I", "Invocable Action",_QUIDDITY_ = "K", "Quick Action",_QUIDDITY_ = "L", "Lightning",_QUIDDITY_ = "M", "Remote Action",_QUIDDITY_ = "P", "Bulk Apex jobs running in parallel",_QUIDDITY_ = "PEPC", "Platform Event Publish Callback",_QUIDDITY_ = "PI", "Post install script for a managed package",_QUIDDITY_ = "Q", "Queueable",_QUIDDITY_ = "QTXF", "Transaction Finalizer for Queueable",_QUIDDITY_ = "R", "Synchronous uncategorized (which is where all transactions not specified elsewhere end up)",_QUIDDITY_ = "S", "QueryLocator Batch Apex (Batch Apex jobs run faster when the start method returns a QueryLocator object that doesn't include related records via a subquery. See Batch Apex Best Practices in Using Batch Apex.)",_QUIDDITY_ = "TA", "Tests Async",_QUIDDITY_ = "TD", "Tests Deployment",_QUIDDITY_ = "TS", "Tests Synchronous",_QUIDDITY_ = "V", "Visualforce",_QUIDDITY_ = "W", "SOAP Webservices",_QUIDDITY_ = "X", "Execute Anonymous",to_string(_QUIDDITY_)),
    xdm.source.ipv4 = client_ip,
    xdm.source.host.device_id = device_id,
    xdm.target.file.file_type = coalesce(file_type ,media_type, file_preview_type),
    xdm.network.session_id = coalesce(record_id,device_session_id),
    xdm.source.user.user_type = if(user_type in ("Standard","PowerPartner","PowerCustomerSuccess","Guest","CustomerSuccess","CspLitePortal","CsnOnly"),XDM_CONST.USER_TYPE_REGULAR,user_type = "SelfService",XDM_CONST.USER_TYPE_SERVICE_ACCOUNT ,to_string(user_type)),
    xdm.target.location.country = arrayindex(regextract(_CLIENT_GEO_ ,"\"([^\/]+)\/"),0),
    xdm.target.file.size = size_bytes,
    xdm.source.user_agent = coalesce(user_agent,browser_name),
    xdm.observer.type = replex(_ENTITY_NAME_,"\"",""),
    xdm.network.dns.response_code = if(status_code = "100", XDM_CONST.HTTP_RSP_CODE_CONTINUE, status_code = "101", XDM_CONST.HTTP_RSP_CODE_SWITCHING_PROTOCOLS, status_code = "102", XDM_CONST.HTTP_RSP_CODE_PROCESSING, status_code = "103", XDM_CONST.HTTP_RSP_CODE_EARLY_HINTS, status_code = "200", XDM_CONST.HTTP_RSP_CODE_OK, status_code = "201", XDM_CONST.HTTP_RSP_CODE_CREATED, status_code = "202", XDM_CONST.HTTP_RSP_CODE_ACCEPTED, status_code = "203", XDM_CONST.HTTP_RSP_CODE_NON__AUTHORITATIVE_INFORMATION, status_code = "204", XDM_CONST.HTTP_RSP_CODE_NO_CONTENT, status_code = "205", XDM_CONST.HTTP_RSP_CODE_RESET_CONTENT, status_code = "206", XDM_CONST.HTTP_RSP_CODE_PARTIAL_CONTENT, status_code = "207", XDM_CONST.HTTP_RSP_CODE_MULTI__STATUS, status_code = "208", XDM_CONST.HTTP_RSP_CODE_ALREADY_REPORTED, status_code = "226", XDM_CONST.HTTP_RSP_CODE_IM_USED, status_code = "300", XDM_CONST.HTTP_RSP_CODE_MULTIPLE_CHOICES, status_code = "301", XDM_CONST.HTTP_RSP_CODE_MOVED_PERMANENTLY, status_code = "302", XDM_CONST.HTTP_RSP_CODE_FOUND, status_code = "303", XDM_CONST.HTTP_RSP_CODE_SEE_OTHER, status_code = "304", XDM_CONST.HTTP_RSP_CODE_NOT_MODIFIED, status_code = "305", XDM_CONST.HTTP_RSP_CODE_USE_PROXY, status_code = "307", XDM_CONST.HTTP_RSP_CODE_TEMPORARY_REDIRECT, status_code = "308", XDM_CONST.HTTP_RSP_CODE_PERMANENT_REDIRECT, status_code = "400", XDM_CONST.HTTP_RSP_CODE_BAD_REQUEST, status_code = "401", XDM_CONST.HTTP_RSP_CODE_UNAUTHORIZED, status_code = "402", XDM_CONST.HTTP_RSP_CODE_PAYMENT_REQUIRED, status_code = "403", XDM_CONST.HTTP_RSP_CODE_FORBIDDEN, status_code = "404", XDM_CONST.HTTP_RSP_CODE_NOT_FOUND, status_code = "405", XDM_CONST.HTTP_RSP_CODE_METHOD_NOT_ALLOWED, status_code = "406", XDM_CONST.HTTP_RSP_CODE_NOT_ACCEPTABLE, status_code = "407", XDM_CONST.HTTP_RSP_CODE_PROXY_AUTHENTICATION_REQUIRED, status_code = "408", XDM_CONST.HTTP_RSP_CODE_REQUEST_TIMEOUT, status_code = "409", XDM_CONST.HTTP_RSP_CODE_CONFLICT, status_code = "410", XDM_CONST.HTTP_RSP_CODE_GONE, status_code = "411", XDM_CONST.HTTP_RSP_CODE_LENGTH_REQUIRED, status_code = "412", XDM_CONST.HTTP_RSP_CODE_PRECONDITION_FAILED, status_code = "413", XDM_CONST.HTTP_RSP_CODE_CONTENT_TOO_LARGE, status_code = "414", XDM_CONST.HTTP_RSP_CODE_URI_TOO_LONG, status_code = "415", XDM_CONST.HTTP_RSP_CODE_UNSUPPORTED_MEDIA_TYPE, status_code = "416", XDM_CONST.HTTP_RSP_CODE_RANGE_NOT_SATISFIABLE, status_code = "417", XDM_CONST.HTTP_RSP_CODE_EXPECTATION_FAILED, status_code = "421", XDM_CONST.HTTP_RSP_CODE_MISDIRECTED_REQUEST, status_code = "422", XDM_CONST.HTTP_RSP_CODE_UNPROCESSABLE_CONTENT, status_code = "423", XDM_CONST.HTTP_RSP_CODE_LOCKED, status_code = "424", XDM_CONST.HTTP_RSP_CODE_FAILED_DEPENDENCY, status_code = "425", XDM_CONST.HTTP_RSP_CODE_TOO_EARLY, status_code = "426", XDM_CONST.HTTP_RSP_CODE_UPGRADE_REQUIRED, status_code = "428", XDM_CONST.HTTP_RSP_CODE_PRECONDITION_REQUIRED, status_code = "429", XDM_CONST.HTTP_RSP_CODE_TOO_MANY_REQUESTS, status_code = "431", XDM_CONST.HTTP_RSP_CODE_REQUEST_HEADER_FIELDS_TOO_LARGE, status_code = "451", XDM_CONST.HTTP_RSP_CODE_UNAVAILABLE_FOR_LEGAL_REASONS, status_code = "500", XDM_CONST.HTTP_RSP_CODE_INTERNAL_SERVER_ERROR, status_code = "501", XDM_CONST.HTTP_RSP_CODE_NOT_IMPLEMENTED, status_code = "502", XDM_CONST.HTTP_RSP_CODE_BAD_GATEWAY, status_code = "503", XDM_CONST.HTTP_RSP_CODE_SERVICE_UNAVAILABLE, status_code = "504", XDM_CONST.HTTP_RSP_CODE_GATEWAY_TIMEOUT, status_code = "505", XDM_CONST.HTTP_RSP_CODE_HTTP_VERSION_NOT_SUPPORTED, status_code = "506", XDM_CONST.HTTP_RSP_CODE_VARIANT_ALSO_NEGOTIATES, status_code = "507", XDM_CONST.HTTP_RSP_CODE_INSUFFICIENT_STORAGE, status_code = "508", XDM_CONST.HTTP_RSP_CODE_LOOP_DETECTED, status_code = "511", XDM_CONST.HTTP_RSP_CODE_NETWORK_AUTHENTICATION_REQUIRED, status_code = null, null, to_string(status_code)),
    xdm.source.sent_bytes = to_integer(replex(_REQUEST_SIZE_,"\"","")),
    xdm.target.sent_bytes = to_integer(replex(_RESPONSE_SIZE_,"\"","")),
    xdm.database.schema = coalesce(replex(_SEARCH_QUERY_, "\"",""),replex(_SELECT_ ,"\"","")),
    xdm.database.response_time = to_integer(replex(_DB_TOTAL_TIME_ ,"\"","")),
    xdm.source.host.hostname = replex(_DEVICE_PLATFORM_,"\"",""),
    xdm.event.type = replex(_EVENT_TYPE_,"\"","");


[MODEL: dataset = servicenow_servicenow_raw, content_id="ServiceNow"]
alter // sys_audit: https://docs.servicenow.com/bundle/vancouver-platform-security/page/administer/time/concept/exploring-auditing.html#d227507e148
    xdm.database.tables = arraycreate(tablename), // Table that the audit record is for (for example, "incident")
    xdm.event.type = "AUDIT", 
    xdm.event.id = sys_id, // the record id of the audit record in sys_audit
    xdm.event.outcome_reason = reason, // Reason for the change (if any reason is associated with the change)
    xdm.session_context_id = documentkey, // the record id of the audited record in <tablename>
    xdm.source.user.username = user, // Name of the user who created the change. 
    xdm.target.resource_before.value = oldvalue, // Old value of the field change represented by this sys_audit record.
    xdm.target.resource.id = documentkey, // the record id of the audited record in <tablename>
    xdm.target.resource.name = fieldname, // Field that changed
    xdm.target.resource.type = tablename, // Table that the audit record is for (for example, "incident")
    xdm.target.resource.value = newvalue; // New value of the field change represented by this sys_audit record.


[MODEL: dataset = "silverfort_admin_console_raw", content_id="Silverfort"]
//The event type we're mapping is "Authentication"
filter cefdeviceeventclassid = "Authentication"
| alter
    src_user = arrayindex(regextract(suser,"(\S+)\@"),0), //src_user comes sometimes as UPN
    coordinates = if(cs11 != "n/a", split(cs11, ",")), //The coordinates comes as <latitude>,<longitude>
    outcome_reason = arrayindex(regextract(cs2, "\w+\s\((.+)\)"), 0), //The format of 'cs2' is 'Denied (Bad Password)', we're extracting the outcome reason, which will appear mostly in Denied.
    risks = if(cs7 != "n/a", replace(cs7, "_", " ")) //Comes with underscore instead of space delimiter
| alter
    latitude = if(cs11 != "n/a", to_float(arrayindex(coordinates, 0))),
    longitude = if(cs11 != "n/a", to_float(arrayindex(coordinates, 1)))

//Mapping to XDM fields
| alter
    xdm.source.user.username = coalesce(src_user,suser),
    xdm.source.user.upn = if(src_user != null, suser),
    xdm.source.user.domain = sntdom,
    xdm.source.host.hostname = shost,
    xdm.source.ipv4 = if(incidr(src, "0.0.0.0/0"), src),
    xdm.source.ipv6 = arrayindex(regextract(src, "(?:[a-fA-F\d]{0,4}\:){7}[\wa-fA-F]{0,4}"),0),
    xdm.target.application.name = if(destinationServiceName != "", destinationServiceName),
    xdm.target.resource.name = if(dhost !="", dhost),
    xdm.target.domain = if(dntdom != "", dntdom),
    xdm.event.operation_sub_type = app,
    xdm.event.description = if(msg != "", msg),
    xdm.alert.severity = cs1,
    xdm.event.outcome = if(cs2 contains "Allowed", XDM_CONST.OUTCOME_SUCCESS, cs2 contains "Denied", XDM_CONST.OUTCOME_FAILED, XDM_CONST.OUTCOME_UNKNOWN),
    xdm.observer.action = if(cs3 != "n/a",cs3),
    xdm.event.outcome_reason = if(cs5 != "n/a", cs5, outcome_reason),
    xdm.alert.risks = split(risks ,","),
    xdm.network.rule = if(cs8 != "n/a", replace(cs8, "_", " ")),
    xdm.source.location.country = if(cs9 != "n/a", cs9),
    xdm.source.location.city = if(cs10 != "n/a", cs10),
    xdm.source.location.latitude = latitude,
    xdm.source.location.longitude = longitude,
    xdm.event.type = cefdeviceeventclassid,
    xdm.event.tags = arraycreate(XDM_CONST.EVENT_TAG_AUTHENTICATION);


[MODEL: dataset=slack_slack_raw, content_id="Slack"]
filter
    action not in ("user_login","user_logout")
| alter
    get_type = json_extract_scalar(entity, "$.type")
| alter
    xdm.event.id = id,
    xdm.event.operation = action,
    xdm.source.user.identifier = json_extract_scalar(actor, "$.user.id"),
    xdm.source.user.username = json_extract_scalar(actor, "$.user.name"),
    xdm.target.resource.type = get_type,
    xdm.source.user_agent = json_extract_scalar(context, "$.ua"),
    xdm.session_context_id = json_extract_scalar(context, "$.session_id"),
    xdm.source.ipv4 = json_extract_scalar(context, "$.ip_address"),
    xdm.target.resource.id = if(get_type = "channel", json_extract_scalar(entity, "$.channel.id"), get_type = "user", json_extract_scalar(entity, "$.user.id"), get_type = "file", json_extract_scalar(entity, "$.file.id"), get_type = "workspace", json_extract_scalar(entity, "$.workspace.id"), get_type = "enterprise", json_extract_scalar(entity, "$.enterprise.id"), get_type = "workflow", json_extract_scalar(entity, "$.workflow.id"), get_type = "message", json_extract_scalar(entity, "$.message.id"),get_type = "app", json_extract_scalar(entity, "$.app.id"),get_type = "usergroups", json_extract_scalar(entity, "$.usergroups.id"),get_type = "huddles", json_extract_scalar(entity, "$.huddles.id"), ""),
    xdm.target.resource.name = if(get_type = "channel", json_extract_scalar(entity, "$.channel.name"), get_type = "user", json_extract_scalar(entity, "$.user.name"), get_type = "file", json_extract_scalar(entity, "$.file.name"), get_type = "workspace", json_extract_scalar(entity, "$.workspace.name"), get_type = "enterprise", json_extract_scalar(entity, "$.enterprise.name"), get_type = "workflow", json_extract_scalar(entity, "$.workflow.name"), get_type = "message", json_extract_scalar(entity, "$.message.name"),get_type = "app", json_extract_scalar(entity, "$.app.name"),get_type = "usergroups", json_extract_scalar(entity, "$.usergroups.name"),get_type = "huddles", json_extract_scalar(entity, "$.huddles.name"), null);

filter
    action in ("user_login","user_logout")
| alter
    xdm.event.id = id,
    xdm.event.operation = action,
    xdm.source.user.identifier = json_extract_scalar(actor, "$.user.id"),
    xdm.source.user.username = json_extract_scalar(actor, "$.user.name"),
    xdm.target.user.identifier = json_extract_scalar(entity, "$.user.id"),
    xdm.target.user.username = json_extract_scalar(entity, "$.user.name"),
    xdm.target.application.name = json_extract_scalar(context, "$.app.name"),
    xdm.network.session_id = json_extract_scalar(context, "$.session_id"),
    xdm.source.ipv4 = json_extract_scalar(context, "$.ip_address");


[MODEL: dataset=squid_squid_raw, content_id="Squid"]
alter
        URL = arrayindex(regextract(_raw_log ,"\/\d*\s\d*\s[\S]*\s([\S]+)\s"),0),
        User = arrayindex(regextract(_raw_log ,"\/\d*\s\d*\s[\S]*\s[\S]*\s([\S]+)\s"),0),
        Protocol = arrayindex(regextract(_raw_log ,"\s*([^\s^_]+)_[^\/]*\/\d*\s"),0),
        http_method = arrayindex(regextract(_raw_log ,"\/\d*\s\d*\s([\S]+)\s"),0)
| alter
        Protocol = if(Protocol not in ("TCP", "UDP", "ICMP"), "None", Protocol)
| alter
        xdm.event.duration = to_integer(arrayindex(regextract(_raw_log ,"\.\d+\s*(\d+)\s\d{1,3}"),0)),
        xdm.source.ipv4 = arrayindex(regextract(_raw_log ,"\s*(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})"),0),
        xdm.source.ipv6 = arrayindex(regextract(_raw_log ,"\s+([a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5})"),0),
        xdm.observer.action = arrayindex(regextract(_raw_log ,"\s*([^\/^\s]+)\/\d*\s"),0),
        xdm.network.http.response_code = arrayindex(regextract(_raw_log ,"\s*[^\/^\s]*\/(\d+)\s"),0),
        xdm.source.sent_bytes = to_integer(arrayindex(regextract(_raw_log ,"\/\d*\s(\d+)\s"),0)),
        xdm.network.http.method = if(http_method = "ACL", XDM_CONST.HTTP_METHOD_ACL, http_method = "BASELINE_CONTROL", XDM_CONST.HTTP_METHOD_BASELINE_CONTROL, http_method = "BIND", XDM_CONST.HTTP_METHOD_BIND, http_method = "CHECKIN", XDM_CONST.HTTP_METHOD_CHECKIN, http_method = "CHECKOUT", XDM_CONST.HTTP_METHOD_CHECKOUT, http_method = "CONNECT", XDM_CONST.HTTP_METHOD_CONNECT, http_method = "COPY", XDM_CONST.HTTP_METHOD_COPY, http_method = "DELETE", XDM_CONST.HTTP_METHOD_DELETE, http_method = "GET", XDM_CONST.HTTP_METHOD_GET, http_method = "HEAD", XDM_CONST.HTTP_METHOD_HEAD, http_method = "LABEL", XDM_CONST.HTTP_METHOD_LABEL, http_method = "LINK", XDM_CONST.HTTP_METHOD_LINK, http_method = "LOCK", XDM_CONST.HTTP_METHOD_LOCK, http_method = "MERGE", XDM_CONST.HTTP_METHOD_MERGE, http_method = "MKACTIVITY", XDM_CONST.HTTP_METHOD_MKACTIVITY, http_method = "MKCALENDAR", XDM_CONST.HTTP_METHOD_MKCALENDAR, http_method = "MKCOL", XDM_CONST.HTTP_METHOD_MKCOL, http_method = "MKREDIRECTREF", XDM_CONST.HTTP_METHOD_MKREDIRECTREF, http_method = "MKWORKSPACE", XDM_CONST.HTTP_METHOD_MKWORKSPACE, http_method = "MOVE", XDM_CONST.HTTP_METHOD_MOVE, http_method = "OPTIONS", XDM_CONST.HTTP_METHOD_OPTIONS, http_method = "ORDERPATCH", XDM_CONST.HTTP_METHOD_ORDERPATCH, http_method = "PATCH", XDM_CONST.HTTP_METHOD_PATCH, http_method = "POST", XDM_CONST.HTTP_METHOD_POST, http_method = "PRI", XDM_CONST.HTTP_METHOD_PRI, http_method = "PROPFIND", XDM_CONST.HTTP_METHOD_PROPFIND, http_method = "PROPPATCH", XDM_CONST.HTTP_METHOD_PROPPATCH, http_method = "PUT", XDM_CONST.HTTP_METHOD_PUT, http_method = "REBIND", XDM_CONST.HTTP_METHOD_REBIND, http_method = "REPORT", XDM_CONST.HTTP_METHOD_REPORT, http_method = "SEARCH", XDM_CONST.HTTP_METHOD_SEARCH, http_method = "TRACE", XDM_CONST.HTTP_METHOD_TRACE, http_method = "UNBIND", XDM_CONST.HTTP_METHOD_UNBIND, http_method = "UNCHECKOUT", XDM_CONST.HTTP_METHOD_UNCHECKOUT, http_method = "UNLINK", XDM_CONST.HTTP_METHOD_UNLINK, http_method = "UNLOCK", XDM_CONST.HTTP_METHOD_UNLOCK, http_method = "UPDATE", XDM_CONST.HTTP_METHOD_UPDATE, http_method = "UPDATEREDIRECTREF", XDM_CONST.HTTP_METHOD_UPDATEREDIRECTREF, http_method = "VERSION_CONTROL", XDM_CONST.HTTP_METHOD_VERSION_CONTROL, to_string(http_method)),
        xdm.network.http.url = replex (URL, ":\d+", ""),
        xdm.target.port = to_number(arrayindex(regextract(URL ,":(\d+)"),0)),
        xdm.source.user.username = if(User != "-", User, null),
        xdm.event.operation_sub_type = arrayindex(regextract(_raw_log ,"\/\d*\s\d*\s[\S]*\s[\S]*\s[\S]*\s([^\/]+)/"),0),
        xdm.intermediate.ipv4 = arrayindex(regextract(_raw_log ,"\/\d*\s\d*\s[\S]*\s[\S]*\s[\S]*\s[^\/]*/(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})"),0),
        xdm.intermediate.ipv6 = arrayindex(regextract(_raw_log ,"\/\d*\s\d*\s[\S]*\s[\S]*\s[\S]*\s[^\/]*/([a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5})"),0),
        xdm.network.ip_protocol= if(Protocol="ICMP", XDM_CONST.IP_PROTOCOL_ICMP, Protocol="TCP", XDM_CONST.IP_PROTOCOL_TCP, Protocol="UDP", XDM_CONST.IP_PROTOCOL_UDP, to_string(Protocol));


[MODEL: dataset=symantec_bluecoatproxysg_raw, content_id="SymantecBlueCoatProxySG"]
/* docs: 
    - log formats: https://techdocs.broadcom.com/us/en/symantec-security-software/web-and-network-security/edge-swg/7-4/getting-started/page-help-administration/page-help-logging/log-formats.html#concept26560_Custom
    - default formats: https://techdocs.broadcom.com/us/en/symantec-security-software/web-and-network-security/edge-swg/7-4/getting-started/page-help-administration/page-help-logging/log-formats/default-formats.html
    - field list: date time time-taken c-ip sc-status s-action sc-bytes cs-bytes cs-method cs-uri-scheme cs-host cs-uri-port cs-uri-path cs-uri-query cs-username cs-auth-group s-supplier-name rs(Content-Type) cs(Referer) cs(User-Agent) sc-filter-result cs-categories x-virus-id s-ip
*/

// filter out records which contain only metadata 
filter _raw_log !~= "^#.*" 

// extract log fields which are separated by double quotes e.g., "user agent"
| alter quoted_fields = regextract(_raw_log, "\"(\S[^\"]+)") 

// inits a character that would be used as a temporary field separator to build a field list 
| alter field_separator = "#" 

// split the raw log into segments, using quotes as a segment delimiter 
| alter log_segments = split(_raw_log, "\"")

 // clean white spaces from the extracted segments
| alter log_segments_cleaned = arrayfilter(arraymap(log_segments, trim("@element")), len("@element") > 0)

// insert a delimiter between the different fields within each segment 
| alter field_delimited_log_segments = arraymap(log_segments_cleaned, 
        // if the segment is originally a quoted string, leave it as is: 
        if(quoted_fields contains trim("@element"), "@element", 
        // else, add the defined separator between each field in the segment (separated originally by a space)
        arraystring(regextract("@element", "\S+"), field_separator)))

// add the field separator between the segments and flatten them to a unified string
| alter flattened_field_list  = arraystring(field_delimited_log_segments, field_separator)

// split the delimited string of fields into an index-based array 
| alter field_list = split(flattened_field_list, field_separator)

| alter // Extract fields based on their relative location in the list
    time_taken = arrayindex(field_list, 2), // Time taken (in milliseconds) to process the request
    c_ip = arrayindex(field_list, 3), // IP address of the client
    sc_status = arrayindex(field_list, 4), // Protocol status code from appliance to client
    s_action = arrayindex(field_list, 5), // Type of action the Edge SWG (ProxySG) took to process this request (see https://techdocs.broadcom.com/us/en/symantec-security-software/web-and-network-security/edge-swg/7-4/getting-started/page-help-administration/page-help-logging/log-formats.html#concept26560_ActionF)
    sc_bytes = arrayindex(field_list, 6), // Number of bytes sent from appliance to client
    cs_bytes = arrayindex(field_list, 7), // Number of bytes sent from client to appliance
    cs_method = arrayindex(field_list, 8), // Request method that is used from client to appliance
    cs_uri_scheme = arrayindex(field_list, 9), // Scheme from the log URL.
    cs_host = arrayindex(field_list, 10), // Hostname from the log URL
    cs_uri_port = arrayindex(field_list, 11), // Port from the log URL.
    cs_uri_path = arrayindex(field_list, 12), // Path from the log URL. Does not include the query.
    cs_uri_query = arrayindex(field_list, 13), // Query from the log URL
    cs_username = arrayindex(field_list, 14), // username of a client authenticated to the proxy
    cs_auth_group = arrayindex(field_list, 15), // group to which an authenticated user belongs
    s_supplier_name = arrayindex(field_list, 16), // Hostname of the upstream host
    rs_content_type = arrayindex(field_list, 17), // Response header: Content-Type
    cs_referer = arrayindex(field_list, 18), // Request header: Referer 
    cs_user_agent = arrayindex(field_list, 19), // Request header: User-Agent
    sc_filter_result = arrayindex(field_list, 20), // Content filtering result: Denied, Proxied, or Observed 
    cs_categories = arrayindex(field_list, 21), // Content filtering category of the request URL
    x_virus_id = arrayindex(field_list, 22), // Identifier of a virus if one was detected.
    s_ip = arrayindex(field_list, 23) // IP address of the appliance on which the client established its connection

| alter // post extraction processing 
    // check IP addresses formats 
    c_ip_v4 = if(c_ip ~= "(?:\d{1,3}\.){3}\d{1,3}", c_ip),
    c_ip_v6 = if(c_ip ~= "(?:[a-fA-F\d]{0,4}\:){7}[\wa-fA-F]{0,4}", c_ip),
    s_ip_v4 = if(s_ip ~= "(?:\d{1,3}\.){3}\d{1,3}", s_ip),
    s_ip_v6 = if(s_ip ~= "(?:[a-fA-F\d]{0,4}\:){7}[\wa-fA-F]{0,4}", s_ip),

    // decode url-encoded spaces (%20) back to an ascii space   
    cs_username_decoded = replace(cs_username, "%20", " "),
    rs_content_type_decoded = replace(rs_content_type, "%20", " "),

    // assure uppercase values for enum mapping
    cs_http_method = uppercase(cs_method),
    cs_protocol = uppercase(cs_uri_scheme),

    // compose the full URL 
    cs_url = concat(cs_uri_scheme, "://", cs_host, ":", cs_uri_port, cs_uri_path, cs_uri_query)

| alter // XDM mappings 
    xdm.alert.original_threat_id = x_virus_id,
    xdm.event.duration = to_integer(time_taken),
    xdm.event.outcome = if(sc_filter_result = "DENIED", XDM_CONST.OUTCOME_FAILED, sc_filter_result = "OBSERVED", XDM_CONST.OUTCOME_SUCCESS, sc_filter_result = "PROXIED", XDM_CONST.OUTCOME_PARTIAL, sc_filter_result),
    xdm.event.outcome_reason = s_action,
    xdm.network.http.content_type = rs_content_type_decoded,
    xdm.network.http.domain = cs_host,
    xdm.network.http.method = if(cs_http_method = "GET", XDM_CONST.HTTP_METHOD_GET, cs_http_method = "POST", XDM_CONST.HTTP_METHOD_POST, cs_http_method = "PUT", XDM_CONST.HTTP_METHOD_PUT, cs_http_method = "OPTIONS", XDM_CONST.HTTP_METHOD_OPTIONS, cs_http_method = "CONNECT", XDM_CONST.HTTP_METHOD_CONNECT, cs_http_method = "ACL", XDM_CONST.HTTP_METHOD_ACL, cs_http_method = "BASELINE_CONTROL", XDM_CONST.HTTP_METHOD_BASELINE_CONTROL, cs_http_method = "BIND", XDM_CONST.HTTP_METHOD_BIND, cs_http_method = "CHECKIN", XDM_CONST.HTTP_METHOD_CHECKIN, cs_http_method = "CHECKOUT", XDM_CONST.HTTP_METHOD_CHECKOUT, cs_http_method = "COPY", XDM_CONST.HTTP_METHOD_COPY, cs_http_method = "DELETE", XDM_CONST.HTTP_METHOD_DELETE, cs_http_method = "HEAD", XDM_CONST.HTTP_METHOD_HEAD, cs_http_method = "LABEL", XDM_CONST.HTTP_METHOD_LABEL, cs_http_method = "LINK", XDM_CONST.HTTP_METHOD_LINK, cs_http_method = "LOCK", XDM_CONST.HTTP_METHOD_LOCK, cs_http_method = "MERGE", XDM_CONST.HTTP_METHOD_MERGE, cs_http_method = "MKACTIVITY", XDM_CONST.HTTP_METHOD_MKACTIVITY, cs_http_method = "MKCALENDAR", XDM_CONST.HTTP_METHOD_MKCALENDAR, cs_http_method = "MKCOL", XDM_CONST.HTTP_METHOD_MKCOL, cs_http_method = "MKREDIRECTREF", XDM_CONST.HTTP_METHOD_MKREDIRECTREF, cs_http_method = "MKWORKSPACE", XDM_CONST.HTTP_METHOD_MKWORKSPACE, cs_http_method = "MOVE", XDM_CONST.HTTP_METHOD_MOVE, cs_http_method = "ORDERPATCH", XDM_CONST.HTTP_METHOD_ORDERPATCH, cs_http_method = "PATCH", XDM_CONST.HTTP_METHOD_PATCH, cs_http_method = "PRI", XDM_CONST.HTTP_METHOD_PRI, cs_http_method = "PROPFIND", XDM_CONST.HTTP_METHOD_PROPFIND, cs_http_method = "PROPPATCH", XDM_CONST.HTTP_METHOD_PROPPATCH, cs_http_method = "REBIND", XDM_CONST.HTTP_METHOD_REBIND, cs_http_method = "REPORT", XDM_CONST.HTTP_METHOD_REPORT, cs_http_method = "SEARCH", XDM_CONST.HTTP_METHOD_SEARCH, cs_http_method = "TRACE", XDM_CONST.HTTP_METHOD_TRACE, cs_http_method = "UNBIND", XDM_CONST.HTTP_METHOD_UNBIND, cs_http_method = "UNCHECKOUT", XDM_CONST.HTTP_METHOD_UNCHECKOUT, cs_http_method = "UNLINK", XDM_CONST.HTTP_METHOD_UNLINK, cs_http_method = "UNLOCK", XDM_CONST.HTTP_METHOD_UNLOCK, cs_http_method = "UPDATE", XDM_CONST.HTTP_METHOD_UPDATE, cs_http_method = "UPDATEREDIRECTREF", XDM_CONST.HTTP_METHOD_UPDATEREDIRECTREF, cs_http_method = "VERSION_CONTROL", XDM_CONST.HTTP_METHOD_VERSION_CONTROL, cs_http_method),
    xdm.network.http.referrer = cs_referer,
    xdm.network.http.response_code = if(sc_status = "100", XDM_CONST.HTTP_RSP_CODE_CONTINUE, sc_status = "101", XDM_CONST.HTTP_RSP_CODE_SWITCHING_PROTOCOLS, sc_status = "102", XDM_CONST.HTTP_RSP_CODE_PROCESSING, sc_status = "103", XDM_CONST.HTTP_RSP_CODE_EARLY_HINTS, sc_status = "200", XDM_CONST.HTTP_RSP_CODE_OK, sc_status = "201", XDM_CONST.HTTP_RSP_CODE_CREATED, sc_status = "202", XDM_CONST.HTTP_RSP_CODE_ACCEPTED, sc_status = "203", XDM_CONST.HTTP_RSP_CODE_NON__AUTHORITATIVE_INFORMATION, sc_status = "204", XDM_CONST.HTTP_RSP_CODE_NO_CONTENT, sc_status = "205", XDM_CONST.HTTP_RSP_CODE_RESET_CONTENT, sc_status = "206", XDM_CONST.HTTP_RSP_CODE_PARTIAL_CONTENT, sc_status = "207", XDM_CONST.HTTP_RSP_CODE_MULTI__STATUS, sc_status = "208", XDM_CONST.HTTP_RSP_CODE_ALREADY_REPORTED, sc_status = "226", XDM_CONST.HTTP_RSP_CODE_IM_USED, sc_status = "300", XDM_CONST.HTTP_RSP_CODE_MULTIPLE_CHOICES, sc_status = "301", XDM_CONST.HTTP_RSP_CODE_MOVED_PERMANENTLY, sc_status = "302", XDM_CONST.HTTP_RSP_CODE_FOUND, sc_status = "303", XDM_CONST.HTTP_RSP_CODE_SEE_OTHER, sc_status = "304", XDM_CONST.HTTP_RSP_CODE_NOT_MODIFIED, sc_status = "305", XDM_CONST.HTTP_RSP_CODE_USE_PROXY, sc_status = "307", XDM_CONST.HTTP_RSP_CODE_TEMPORARY_REDIRECT, sc_status = "308", XDM_CONST.HTTP_RSP_CODE_PERMANENT_REDIRECT, sc_status = "400", XDM_CONST.HTTP_RSP_CODE_BAD_REQUEST, sc_status = "401", XDM_CONST.HTTP_RSP_CODE_UNAUTHORIZED, sc_status = "402", XDM_CONST.HTTP_RSP_CODE_PAYMENT_REQUIRED, sc_status = "403", XDM_CONST.HTTP_RSP_CODE_FORBIDDEN, sc_status = "404", XDM_CONST.HTTP_RSP_CODE_NOT_FOUND, sc_status = "405", XDM_CONST.HTTP_RSP_CODE_METHOD_NOT_ALLOWED, sc_status = "406", XDM_CONST.HTTP_RSP_CODE_NOT_ACCEPTABLE, sc_status = "407", XDM_CONST.HTTP_RSP_CODE_PROXY_AUTHENTICATION_REQUIRED, sc_status = "408", XDM_CONST.HTTP_RSP_CODE_REQUEST_TIMEOUT, sc_status = "409", XDM_CONST.HTTP_RSP_CODE_CONFLICT, sc_status = "410", XDM_CONST.HTTP_RSP_CODE_GONE, sc_status = "411", XDM_CONST.HTTP_RSP_CODE_LENGTH_REQUIRED, sc_status = "412", XDM_CONST.HTTP_RSP_CODE_PRECONDITION_FAILED, sc_status = "413", XDM_CONST.HTTP_RSP_CODE_CONTENT_TOO_LARGE, sc_status = "414", XDM_CONST.HTTP_RSP_CODE_URI_TOO_LONG, sc_status = "415", XDM_CONST.HTTP_RSP_CODE_UNSUPPORTED_MEDIA_TYPE, sc_status = "416", XDM_CONST.HTTP_RSP_CODE_RANGE_NOT_SATISFIABLE, sc_status = "417", XDM_CONST.HTTP_RSP_CODE_EXPECTATION_FAILED, sc_status = "421", XDM_CONST.HTTP_RSP_CODE_MISDIRECTED_REQUEST, sc_status = "422", XDM_CONST.HTTP_RSP_CODE_UNPROCESSABLE_CONTENT, sc_status = "423", XDM_CONST.HTTP_RSP_CODE_LOCKED, sc_status = "424", XDM_CONST.HTTP_RSP_CODE_FAILED_DEPENDENCY, sc_status = "425", XDM_CONST.HTTP_RSP_CODE_TOO_EARLY, sc_status = "426", XDM_CONST.HTTP_RSP_CODE_UPGRADE_REQUIRED, sc_status = "428", XDM_CONST.HTTP_RSP_CODE_PRECONDITION_REQUIRED, sc_status = "429", XDM_CONST.HTTP_RSP_CODE_TOO_MANY_REQUESTS, sc_status = "431", XDM_CONST.HTTP_RSP_CODE_REQUEST_HEADER_FIELDS_TOO_LARGE, sc_status = "451", XDM_CONST.HTTP_RSP_CODE_UNAVAILABLE_FOR_LEGAL_REASONS, sc_status = "500", XDM_CONST.HTTP_RSP_CODE_INTERNAL_SERVER_ERROR, sc_status = "501", XDM_CONST.HTTP_RSP_CODE_NOT_IMPLEMENTED, sc_status = "502", XDM_CONST.HTTP_RSP_CODE_BAD_GATEWAY, sc_status = "503", XDM_CONST.HTTP_RSP_CODE_SERVICE_UNAVAILABLE, sc_status = "504", XDM_CONST.HTTP_RSP_CODE_GATEWAY_TIMEOUT, sc_status = "505", XDM_CONST.HTTP_RSP_CODE_HTTP_VERSION_NOT_SUPPORTED, sc_status = "506", XDM_CONST.HTTP_RSP_CODE_VARIANT_ALSO_NEGOTIATES, sc_status = "507", XDM_CONST.HTTP_RSP_CODE_INSUFFICIENT_STORAGE, sc_status = "508", XDM_CONST.HTTP_RSP_CODE_LOOP_DETECTED, sc_status = "511", XDM_CONST.HTTP_RSP_CODE_NETWORK_AUTHENTICATION_REQUIRED, sc_status = null, null, sc_status),
    xdm.network.http.url = cs_url,
    xdm.network.http.url_category = cs_categories,
    xdm.network.ip_protocol = if(cs_protocol="TCP", XDM_CONST.IP_PROTOCOL_TCP, cs_protocol="UDP", XDM_CONST.IP_PROTOCOL_UDP, cs_protocol="ICMP",XDM_CONST.IP_PROTOCOL_ICMP, cs_protocol="HOPOPT",XDM_CONST.IP_PROTOCOL_HOPOPT, cs_protocol="IGMP",XDM_CONST.IP_PROTOCOL_IGMP, cs_protocol="GGP",XDM_CONST.IP_PROTOCOL_GGP, cs_protocol="IP",XDM_CONST.IP_PROTOCOL_IP, cs_protocol="ST",XDM_CONST.IP_PROTOCOL_ST, cs_protocol="CBT",XDM_CONST.IP_PROTOCOL_CBT, cs_protocol="EGP",XDM_CONST.IP_PROTOCOL_EGP, cs_protocol="IGP",XDM_CONST.IP_PROTOCOL_IGP, cs_protocol="BBN_RCC_MON",XDM_CONST.IP_PROTOCOL_BBN_RCC_MON, cs_protocol="NVP_II",XDM_CONST.IP_PROTOCOL_NVP_II, cs_protocol="PUP",XDM_CONST.IP_PROTOCOL_PUP, cs_protocol="ARGUS",XDM_CONST.IP_PROTOCOL_ARGUS, cs_protocol="EMCON",XDM_CONST.IP_PROTOCOL_EMCON, cs_protocol="XNET",XDM_CONST.IP_PROTOCOL_XNET, cs_protocol="CHAOS",XDM_CONST.IP_PROTOCOL_CHAOS, cs_protocol="MUX",XDM_CONST.IP_PROTOCOL_MUX, cs_protocol="DCN_MEAS",XDM_CONST.IP_PROTOCOL_DCN_MEAS, cs_protocol="HMP",XDM_CONST.IP_PROTOCOL_HMP, cs_protocol="PRM",XDM_CONST.IP_PROTOCOL_PRM, cs_protocol="XNS_IDP",XDM_CONST.IP_PROTOCOL_XNS_IDP, cs_protocol="TRUNK_1",XDM_CONST.IP_PROTOCOL_TRUNK_1, cs_protocol="TRUNK_2",XDM_CONST.IP_PROTOCOL_TRUNK_2, cs_protocol="LEAF_1",XDM_CONST.IP_PROTOCOL_LEAF_1, cs_protocol="LEAF_2",XDM_CONST.IP_PROTOCOL_LEAF_2, cs_protocol="RDP",XDM_CONST.IP_PROTOCOL_RDP, cs_protocol="IRTP",XDM_CONST.IP_PROTOCOL_IRTP, cs_protocol="ISO_TP4",XDM_CONST.IP_PROTOCOL_ISO_TP4, cs_protocol="NETBLT",XDM_CONST.IP_PROTOCOL_NETBLT, cs_protocol="MFE_NSP",XDM_CONST.IP_PROTOCOL_MFE_NSP, cs_protocol="MERIT_INP",XDM_CONST.IP_PROTOCOL_MERIT_INP, cs_protocol="DCCP",XDM_CONST.IP_PROTOCOL_DCCP, cs_protocol="3PC",XDM_CONST.IP_PROTOCOL_3PC, cs_protocol="IDPR",XDM_CONST.IP_PROTOCOL_IDPR, cs_protocol="XTP",XDM_CONST.IP_PROTOCOL_XTP, cs_protocol="DDP",XDM_CONST.IP_PROTOCOL_DDP, cs_protocol="IDPR_CMTP",XDM_CONST.IP_PROTOCOL_IDPR_CMTP, cs_protocol="TP",XDM_CONST.IP_PROTOCOL_TP, cs_protocol="IL",XDM_CONST.IP_PROTOCOL_IL, cs_protocol="IPV6",XDM_CONST.IP_PROTOCOL_IPV6, cs_protocol="SDRP",XDM_CONST.IP_PROTOCOL_SDRP, cs_protocol="IPV6_ROUTE",XDM_CONST.IP_PROTOCOL_IPV6_ROUTE, cs_protocol="IPV6_FRAG",XDM_CONST.IP_PROTOCOL_IPV6_FRAG, cs_protocol="IDRP",XDM_CONST.IP_PROTOCOL_IDRP, cs_protocol="RSVP",XDM_CONST.IP_PROTOCOL_RSVP, cs_protocol="GRE",XDM_CONST.IP_PROTOCOL_GRE, cs_protocol="DSR",XDM_CONST.IP_PROTOCOL_DSR, cs_protocol="BNA",XDM_CONST.IP_PROTOCOL_BNA, cs_protocol="ESP",XDM_CONST.IP_PROTOCOL_ESP, cs_protocol="AH",XDM_CONST.IP_PROTOCOL_AH, cs_protocol="I_NLSP",XDM_CONST.IP_PROTOCOL_I_NLSP, cs_protocol="SWIPE",XDM_CONST.IP_PROTOCOL_SWIPE, cs_protocol="NARP",XDM_CONST.IP_PROTOCOL_NARP, cs_protocol="MOBILE",XDM_CONST.IP_PROTOCOL_MOBILE, cs_protocol="TLSP",XDM_CONST.IP_PROTOCOL_TLSP, cs_protocol="SKIP",XDM_CONST.IP_PROTOCOL_SKIP, cs_protocol="IPV6_ICMP",XDM_CONST.IP_PROTOCOL_IPV6_ICMP, cs_protocol="IPV6_NONXT",XDM_CONST.IP_PROTOCOL_IPV6_NONXT, cs_protocol="IPV6_OPTS",XDM_CONST.IP_PROTOCOL_IPV6_OPTS, cs_protocol="CFTP",XDM_CONST.IP_PROTOCOL_CFTP, cs_protocol="SAT_EXPAK",XDM_CONST.IP_PROTOCOL_SAT_EXPAK, cs_protocol="KRYPTOLAN",XDM_CONST.IP_PROTOCOL_KRYPTOLAN, cs_protocol="RVD",XDM_CONST.IP_PROTOCOL_RVD, cs_protocol="IPPC",XDM_CONST.IP_PROTOCOL_IPPC, cs_protocol="SAT_MON",XDM_CONST.IP_PROTOCOL_SAT_MON, cs_protocol="VISA",XDM_CONST.IP_PROTOCOL_VISA, cs_protocol="IPCV",XDM_CONST.IP_PROTOCOL_IPCV, cs_protocol="CPNX",XDM_CONST.IP_PROTOCOL_CPNX, cs_protocol="CPHB",XDM_CONST.IP_PROTOCOL_CPHB, cs_protocol="WSN",XDM_CONST.IP_PROTOCOL_WSN, cs_protocol="PVP",XDM_CONST.IP_PROTOCOL_PVP, cs_protocol="BR_SAT_MON",XDM_CONST.IP_PROTOCOL_BR_SAT_MON, cs_protocol="SUN_ND",XDM_CONST.IP_PROTOCOL_SUN_ND, cs_protocol="WB_MON",XDM_CONST.IP_PROTOCOL_WB_MON, cs_protocol="WB_EXPAK",XDM_CONST.IP_PROTOCOL_WB_EXPAK, cs_protocol="ISO_IP",XDM_CONST.IP_PROTOCOL_ISO_IP, cs_protocol="VMTP",XDM_CONST.IP_PROTOCOL_VMTP, cs_protocol="SECURE_VMTP",XDM_CONST.IP_PROTOCOL_SECURE_VMTP, cs_protocol="VINES",XDM_CONST.IP_PROTOCOL_VINES, cs_protocol="TTP",XDM_CONST.IP_PROTOCOL_TTP, cs_protocol="NSFNET_IGP",XDM_CONST.IP_PROTOCOL_NSFNET_IGP, cs_protocol="DGP",XDM_CONST.IP_PROTOCOL_DGP, cs_protocol="TCF",XDM_CONST.IP_PROTOCOL_TCF, cs_protocol="EIGRP",XDM_CONST.IP_PROTOCOL_EIGRP, cs_protocol="OSPFIGP",XDM_CONST.IP_PROTOCOL_OSPFIGP, cs_protocol="SPRITE_RPC",XDM_CONST.IP_PROTOCOL_SPRITE_RPC, cs_protocol="LARP",XDM_CONST.IP_PROTOCOL_LARP, cs_protocol="MTP",XDM_CONST.IP_PROTOCOL_MTP, cs_protocol="AX25",XDM_CONST.IP_PROTOCOL_AX25, cs_protocol="IPIP",XDM_CONST.IP_PROTOCOL_IPIP, cs_protocol="MICP",XDM_CONST.IP_PROTOCOL_MICP, cs_protocol="SCC_SP",XDM_CONST.IP_PROTOCOL_SCC_SP, cs_protocol="ETHERIP",XDM_CONST.IP_PROTOCOL_ETHERIP, cs_protocol="ENCAP",XDM_CONST.IP_PROTOCOL_ENCAP, cs_protocol="GMTP",XDM_CONST.IP_PROTOCOL_GMTP, cs_protocol="IFMP",XDM_CONST.IP_PROTOCOL_IFMP, cs_protocol="PNNI",XDM_CONST.IP_PROTOCOL_PNNI, cs_protocol="PIM",XDM_CONST.IP_PROTOCOL_PIM, cs_protocol="ARIS",XDM_CONST.IP_PROTOCOL_ARIS, cs_protocol="SCPS",XDM_CONST.IP_PROTOCOL_SCPS, cs_protocol="QNX",XDM_CONST.IP_PROTOCOL_QNX, cs_protocol="AN",XDM_CONST.IP_PROTOCOL_AN, cs_protocol="IPCOMP",XDM_CONST.IP_PROTOCOL_IPCOMP, cs_protocol="SNP",XDM_CONST.IP_PROTOCOL_SNP, cs_protocol="COMPAQ_PEER",XDM_CONST.IP_PROTOCOL_COMPAQ_PEER, cs_protocol="IPX_IN_IP",XDM_CONST.IP_PROTOCOL_IPX_IN_IP, cs_protocol="VRRP",XDM_CONST.IP_PROTOCOL_VRRP, cs_protocol="PGM",XDM_CONST.IP_PROTOCOL_PGM, cs_protocol="L2TP",XDM_CONST.IP_PROTOCOL_L2TP, cs_protocol="DDX",XDM_CONST.IP_PROTOCOL_DDX, cs_protocol="IATP",XDM_CONST.IP_PROTOCOL_IATP, cs_protocol="STP",XDM_CONST.IP_PROTOCOL_STP, cs_protocol="SRP",XDM_CONST.IP_PROTOCOL_SRP, cs_protocol="UTI",XDM_CONST.IP_PROTOCOL_UTI, cs_protocol="SMP",XDM_CONST.IP_PROTOCOL_SMP, cs_protocol="SM",XDM_CONST.IP_PROTOCOL_SM, cs_protocol="PTP",XDM_CONST.IP_PROTOCOL_PTP, cs_protocol="ISIS",XDM_CONST.IP_PROTOCOL_ISIS, cs_protocol="FIRE",XDM_CONST.IP_PROTOCOL_FIRE, cs_protocol="CRTP",XDM_CONST.IP_PROTOCOL_CRTP, cs_protocol="CRUDP",XDM_CONST.IP_PROTOCOL_CRUDP, cs_protocol="SSCOPMCE",XDM_CONST.IP_PROTOCOL_SSCOPMCE, cs_protocol="IPLT",XDM_CONST.IP_PROTOCOL_IPLT, cs_protocol="SPS",XDM_CONST.IP_PROTOCOL_SPS, cs_protocol="PIPE",XDM_CONST.IP_PROTOCOL_PIPE, cs_protocol="SCTP",XDM_CONST.IP_PROTOCOL_SCTP, cs_protocol="FC",XDM_CONST.IP_PROTOCOL_FC, cs_protocol="RSVP_E2E_IGNORE",XDM_CONST.IP_PROTOCOL_RSVP_E2E_IGNORE, cs_protocol="MOBILITY",XDM_CONST.IP_PROTOCOL_MOBILITY, cs_protocol="UDPLITE",XDM_CONST.IP_PROTOCOL_UDPLITE, cs_protocol="MPLS_IN_IP",XDM_CONST.IP_PROTOCOL_MPLS_IN_IP, cs_protocol="MANET",XDM_CONST.IP_PROTOCOL_MANET, cs_protocol="HIP",XDM_CONST.IP_PROTOCOL_HIP, cs_protocol="SHIM6",XDM_CONST.IP_PROTOCOL_SHIM6, cs_protocol="WESP",XDM_CONST.IP_PROTOCOL_WESP, cs_protocol="ROHC",XDM_CONST.IP_PROTOCOL_ROHC, cs_protocol="RESERVED",XDM_CONST.IP_PROTOCOL_RESERVED,cs_protocol="0",XDM_CONST.IP_PROTOCOL_HOPOPT, cs_protocol="1",XDM_CONST.IP_PROTOCOL_ICMP, cs_protocol="2",XDM_CONST.IP_PROTOCOL_IGMP, cs_protocol="3",XDM_CONST.IP_PROTOCOL_GGP, cs_protocol="4",XDM_CONST.IP_PROTOCOL_IP, cs_protocol="5",XDM_CONST.IP_PROTOCOL_ST, cs_protocol="6",XDM_CONST.IP_PROTOCOL_TCP, cs_protocol="7",XDM_CONST.IP_PROTOCOL_CBT, cs_protocol="8",XDM_CONST.IP_PROTOCOL_EGP, cs_protocol="9",XDM_CONST.IP_PROTOCOL_IGP, cs_protocol="10",XDM_CONST.IP_PROTOCOL_BBN_RCC_MON, cs_protocol="11",XDM_CONST.IP_PROTOCOL_NVP_II, cs_protocol="12",XDM_CONST.IP_PROTOCOL_PUP, cs_protocol="13",XDM_CONST.IP_PROTOCOL_ARGUS, cs_protocol="14",XDM_CONST.IP_PROTOCOL_EMCON, cs_protocol="15",XDM_CONST.IP_PROTOCOL_XNET, cs_protocol="16",XDM_CONST.IP_PROTOCOL_CHAOS, cs_protocol="17",XDM_CONST.IP_PROTOCOL_UDP, cs_protocol="18",XDM_CONST.IP_PROTOCOL_MUX, cs_protocol="19",XDM_CONST.IP_PROTOCOL_DCN_MEAS, cs_protocol="20",XDM_CONST.IP_PROTOCOL_HMP, cs_protocol="21",XDM_CONST.IP_PROTOCOL_PRM, cs_protocol="22",XDM_CONST.IP_PROTOCOL_XNS_IDP, cs_protocol="23",XDM_CONST.IP_PROTOCOL_TRUNK_1, cs_protocol="24",XDM_CONST.IP_PROTOCOL_TRUNK_2, cs_protocol="25",XDM_CONST.IP_PROTOCOL_LEAF_1, cs_protocol="26",XDM_CONST.IP_PROTOCOL_LEAF_2, cs_protocol="27",XDM_CONST.IP_PROTOCOL_RDP, cs_protocol="28",XDM_CONST.IP_PROTOCOL_IRTP, cs_protocol="29",XDM_CONST.IP_PROTOCOL_ISO_TP4, cs_protocol="30",XDM_CONST.IP_PROTOCOL_NETBLT, cs_protocol="31",XDM_CONST.IP_PROTOCOL_MFE_NSP, cs_protocol="32",XDM_CONST.IP_PROTOCOL_MERIT_INP, cs_protocol="33",XDM_CONST.IP_PROTOCOL_DCCP, cs_protocol="34",XDM_CONST.IP_PROTOCOL_3PC, cs_protocol="35",XDM_CONST.IP_PROTOCOL_IDPR, cs_protocol="36",XDM_CONST.IP_PROTOCOL_XTP, cs_protocol="37",XDM_CONST.IP_PROTOCOL_DDP, cs_protocol="38",XDM_CONST.IP_PROTOCOL_IDPR_CMTP, cs_protocol="39",XDM_CONST.IP_PROTOCOL_TP, cs_protocol="40",XDM_CONST.IP_PROTOCOL_IL, cs_protocol="41",XDM_CONST.IP_PROTOCOL_IPV6, cs_protocol="42",XDM_CONST.IP_PROTOCOL_SDRP, cs_protocol="43",XDM_CONST.IP_PROTOCOL_IPV6_ROUTE, cs_protocol="44",XDM_CONST.IP_PROTOCOL_IPV6_FRAG, cs_protocol="45",XDM_CONST.IP_PROTOCOL_IDRP, cs_protocol="46",XDM_CONST.IP_PROTOCOL_RSVP, cs_protocol="47",XDM_CONST.IP_PROTOCOL_GRE, cs_protocol="48",XDM_CONST.IP_PROTOCOL_DSR, cs_protocol="49",XDM_CONST.IP_PROTOCOL_BNA, cs_protocol="50",XDM_CONST.IP_PROTOCOL_ESP, cs_protocol="51",XDM_CONST.IP_PROTOCOL_AH, cs_protocol="52",XDM_CONST.IP_PROTOCOL_I_NLSP, cs_protocol="53",XDM_CONST.IP_PROTOCOL_SWIPE, cs_protocol="54",XDM_CONST.IP_PROTOCOL_NARP, cs_protocol="55",XDM_CONST.IP_PROTOCOL_MOBILE, cs_protocol="56",XDM_CONST.IP_PROTOCOL_TLSP, cs_protocol="57",XDM_CONST.IP_PROTOCOL_SKIP, cs_protocol="58",XDM_CONST.IP_PROTOCOL_IPV6_ICMP, cs_protocol="59",XDM_CONST.IP_PROTOCOL_IPV6_NONXT, cs_protocol="60",XDM_CONST.IP_PROTOCOL_IPV6_OPTS, cs_protocol="62",XDM_CONST.IP_PROTOCOL_CFTP, cs_protocol="64",XDM_CONST.IP_PROTOCOL_SAT_EXPAK, cs_protocol="65",XDM_CONST.IP_PROTOCOL_KRYPTOLAN, cs_protocol="66",XDM_CONST.IP_PROTOCOL_RVD, cs_protocol="67",XDM_CONST.IP_PROTOCOL_IPPC, cs_protocol="69",XDM_CONST.IP_PROTOCOL_SAT_MON, cs_protocol="70",XDM_CONST.IP_PROTOCOL_VISA, cs_protocol="71",XDM_CONST.IP_PROTOCOL_IPCV, cs_protocol="72",XDM_CONST.IP_PROTOCOL_CPNX, cs_protocol="73",XDM_CONST.IP_PROTOCOL_CPHB, cs_protocol="74",XDM_CONST.IP_PROTOCOL_WSN, cs_protocol="75",XDM_CONST.IP_PROTOCOL_PVP, cs_protocol="76",XDM_CONST.IP_PROTOCOL_BR_SAT_MON, cs_protocol="77",XDM_CONST.IP_PROTOCOL_SUN_ND, cs_protocol="78",XDM_CONST.IP_PROTOCOL_WB_MON, cs_protocol="79",XDM_CONST.IP_PROTOCOL_WB_EXPAK, cs_protocol="80",XDM_CONST.IP_PROTOCOL_ISO_IP, cs_protocol="81",XDM_CONST.IP_PROTOCOL_VMTP, cs_protocol="82",XDM_CONST.IP_PROTOCOL_SECURE_VMTP, cs_protocol="83",XDM_CONST.IP_PROTOCOL_VINES, cs_protocol="84",XDM_CONST.IP_PROTOCOL_TTP, cs_protocol="85",XDM_CONST.IP_PROTOCOL_NSFNET_IGP, cs_protocol="86",XDM_CONST.IP_PROTOCOL_DGP, cs_protocol="87",XDM_CONST.IP_PROTOCOL_TCF, cs_protocol="88",XDM_CONST.IP_PROTOCOL_EIGRP, cs_protocol="89",XDM_CONST.IP_PROTOCOL_OSPFIGP, cs_protocol="90",XDM_CONST.IP_PROTOCOL_SPRITE_RPC, cs_protocol="91",XDM_CONST.IP_PROTOCOL_LARP, cs_protocol="92",XDM_CONST.IP_PROTOCOL_MTP, cs_protocol="93",XDM_CONST.IP_PROTOCOL_AX25, cs_protocol="94",XDM_CONST.IP_PROTOCOL_IPIP, cs_protocol="95",XDM_CONST.IP_PROTOCOL_MICP, cs_protocol="96",XDM_CONST.IP_PROTOCOL_SCC_SP, cs_protocol="97",XDM_CONST.IP_PROTOCOL_ETHERIP, cs_protocol="98",XDM_CONST.IP_PROTOCOL_ENCAP, cs_protocol="100",XDM_CONST.IP_PROTOCOL_GMTP, cs_protocol="101",XDM_CONST.IP_PROTOCOL_IFMP, cs_protocol="102",XDM_CONST.IP_PROTOCOL_PNNI, cs_protocol="103",XDM_CONST.IP_PROTOCOL_PIM, cs_protocol="104",XDM_CONST.IP_PROTOCOL_ARIS, cs_protocol="105",XDM_CONST.IP_PROTOCOL_SCPS, cs_protocol="106",XDM_CONST.IP_PROTOCOL_QNX, cs_protocol="107",XDM_CONST.IP_PROTOCOL_AN, cs_protocol="108",XDM_CONST.IP_PROTOCOL_IPCOMP, cs_protocol="109",XDM_CONST.IP_PROTOCOL_SNP, cs_protocol="110",XDM_CONST.IP_PROTOCOL_COMPAQ_PEER, cs_protocol="111",XDM_CONST.IP_PROTOCOL_IPX_IN_IP, cs_protocol="112",XDM_CONST.IP_PROTOCOL_VRRP, cs_protocol="113",XDM_CONST.IP_PROTOCOL_PGM, cs_protocol="115",XDM_CONST.IP_PROTOCOL_L2TP, cs_protocol="116",XDM_CONST.IP_PROTOCOL_DDX, cs_protocol="117",XDM_CONST.IP_PROTOCOL_IATP, cs_protocol="118",XDM_CONST.IP_PROTOCOL_STP, cs_protocol="119",XDM_CONST.IP_PROTOCOL_SRP, cs_protocol="120",XDM_CONST.IP_PROTOCOL_UTI, cs_protocol="121",XDM_CONST.IP_PROTOCOL_SMP, cs_protocol="122",XDM_CONST.IP_PROTOCOL_SM, cs_protocol="123",XDM_CONST.IP_PROTOCOL_PTP, cs_protocol="124",XDM_CONST.IP_PROTOCOL_ISIS, cs_protocol="125",XDM_CONST.IP_PROTOCOL_FIRE, cs_protocol="126",XDM_CONST.IP_PROTOCOL_CRTP, cs_protocol="127",XDM_CONST.IP_PROTOCOL_CRUDP, cs_protocol="128",XDM_CONST.IP_PROTOCOL_SSCOPMCE, cs_protocol="129",XDM_CONST.IP_PROTOCOL_IPLT, cs_protocol="130",XDM_CONST.IP_PROTOCOL_SPS, cs_protocol="131",XDM_CONST.IP_PROTOCOL_PIPE, cs_protocol="132",XDM_CONST.IP_PROTOCOL_SCTP, cs_protocol="133",XDM_CONST.IP_PROTOCOL_FC, cs_protocol="134",XDM_CONST.IP_PROTOCOL_RSVP_E2E_IGNORE, cs_protocol="135",XDM_CONST.IP_PROTOCOL_MOBILITY, cs_protocol="136",XDM_CONST.IP_PROTOCOL_UDPLITE, cs_protocol="137",XDM_CONST.IP_PROTOCOL_MPLS_IN_IP, cs_protocol="138",XDM_CONST.IP_PROTOCOL_MANET, cs_protocol="139",XDM_CONST.IP_PROTOCOL_HIP, cs_protocol="140",XDM_CONST.IP_PROTOCOL_SHIM6, cs_protocol="141",XDM_CONST.IP_PROTOCOL_WESP, cs_protocol="142",XDM_CONST.IP_PROTOCOL_ROHC, cs_protocol="255",XDM_CONST.IP_PROTOCOL_RESERVED, cs_protocol),
    xdm.observer.action = sc_filter_result,
    xdm.observer.name = s_supplier_name,
    xdm.intermediate.host.ipv4_addresses = if(s_ip_v4 != null, arraycreate(s_ip_v4)),
    xdm.intermediate.host.ipv6_addresses = if(s_ip_v6 != null, arraycreate(s_ip_v6)),
    xdm.source.ipv4 = c_ip_v4,
    xdm.source.ipv6 = c_ip_v6,
    xdm.target.port = to_integer(cs_uri_port),
    xdm.source.sent_bytes = to_integer(cs_bytes),
    xdm.source.user_agent = cs_user_agent,
    xdm.source.user.groups = if(cs_auth_group != null, arraycreate(cs_auth_group)),
    xdm.source.user.username = cs_username_decoded,
    xdm.target.host.hostname = cs_host,
    xdm.target.resource.name = cs_uri_path,
    xdm.target.sent_bytes = to_integer(sc_bytes), 
    xdm.target.url = cs_url;


[MODEL: dataset ="symantec_cloud_soc_raw", content_id="SymantecCloudSOC"]
alter browsers_array = json_extract_array(browsers, "$"),
      devices_array = json_extract_array(devices, "$")
| alter  len_browsers = array_length(browsers_array),
         len_devices = array_length(devices_array)
| alter xdm.alert.severity = severity,
    xdm.source.location.country = coalesce(country, arrayindex(regextract(locations , "\(([^\)]+)\)"),0)),
    xdm.source.location.city = coalesce(city, arrayindex(regextract(locations , "^(.*?)\s*\("),0)),
    xdm.source.location.latitude = to_float(latitude),
    xdm.source.location.longitude = to_float(longitude),
    xdm.source.host.ipv4_addresses = arraycreate(coalesce(hosts,host)),
    xdm.event.operation_sub_type = activity_type,
    xdm.target.application.name = service,
    xdm.target.resource.type = object_type,
    xdm.source.user.username = user_name,
    xdm.source.user.upn = user,
    xdm.network.http.browser = if(len_browsers >= 2 ,replace(arraystring(browsers_array, ","),"\"",""), replace(arrayindex(browsers_array,0),"\"","")),
    xdm.source.host.hostname = if(len_devices >= 2 ,replace(arraystring(devices_array, ","),"\"",""), replace(arrayindex(devices_array,0),"\"","")),
    xdm.event.type = type;


[MODEL: dataset = symantec_dlp_raw, content_id="SymantecDLP"]
filter _raw_log ~= "{.*\"APPLICATION_NAME\":"
| alter json_content = replex(arrayindex(regextract(_raw_log ,"(\{.*\})"),0), "\\+", "\\\\")
| alter
        DESTINATION_IP = json_extract_scalar(json_content, "$.DESTINATION_IP"),
        ENDPOINT_USERNAME = json_extract_scalar(json_content, "$.ENDPOINT_USERNAME"),
        MACHINE_IP = json_extract_scalar(json_content, "$.MACHINE_IP"),
        SEVERITY = json_extract_scalar(json_content, "$.SEVERITY"),
        json_TARGET = if(json_extract_scalar(json_content, "$.TARGET") != null and lowercase(json_extract_scalar(json_content, "$.TARGET")) != "n/a", json_extract_scalar(json_content, "$.TARGET"), null),
        json_SUBJECT = if(json_extract_scalar(json_content, "$.SUBJECT") != null and lowercase(json_extract_scalar(json_content, "$.SUBJECT")) != "n/a", json_extract_scalar(json_content, "$.SUBJECT"), null)
| alter
        xdm.source.application.name = json_extract_scalar(json_content, "$.APPLICATION_NAME"),
        xdm.intermediate.user.username = json_extract_scalar(json_content, "$.APPLICATION_USER"),
        xdm.target.file.filename = json_extract_scalar(json_content, "$.FILE_NAME"),
        xdm.target.file.path = json_extract_scalar(json_content, "$.PATH"),
        xdm.target.file.directory = json_extract_scalar(json_content, "$.PARENT_PATH"),
        xdm.observer.action = json_extract_scalar(json_content, "$.BLOCKED"),
        xdm.target.ipv4 = if(DESTINATION_IP ~= "\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}", DESTINATION_IP, null),
        xdm.target.ipv6 = if(DESTINATION_IP ~= "[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}", DESTINATION_IP, null),
        xdm.source.host.device_id = json_extract_scalar(json_content, "$.ENDPOINT_DEVICE_ID"),
        xdm.source.host.hostname = coalesce(json_extract_scalar(json_content, "$.ENDPOINT_MACHINE"), json_TARGET),
        xdm.source.user.username = if(ENDPOINT_USERNAME ~= ".*\.*", arrayindex(regextract(ENDPOINT_USERNAME, "\\(.*)"), 0), ENDPOINT_USERNAME),
        xdm.source.user.domain = if(ENDPOINT_USERNAME ~= ".*\.*", arrayindex(regextract(ENDPOINT_USERNAME, "(.*)\\"), 0), null),
        xdm.source.ipv4 = if(MACHINE_IP ~= "\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}", MACHINE_IP, null),
        xdm.source.ipv6 = if(MACHINE_IP ~= "[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}", MACHINE_IP, null),
        xdm.alert.original_alert_id = json_extract_scalar(json_content, "$.INCIDENT_ID"),
        xdm.alert.name = coalesce(json_extract_scalar(json_content, "$.POLICY"), json_SUBJECT),
        xdm.alert.subcategory = json_extract_scalar(json_content, "$.RULES"),
        xdm.alert.severity = if(SEVERITY contains ":", arrayindex(regextract(SEVERITY, ":(.*)"), 0), SEVERITY),
        xdm.alert.description = concat("User Justification: ", json_extract_scalar(json_content, "$.USER_JUSTIFICATION")),
        xdm.event.type = json_extract_scalar(json_content, "$.PROTOCOL"),
        xdm.observer.name = json_extract_scalar(json_content, "$.MONITOR_NAME"),
        xdm.target.url = json_extract_scalar(json_content, "$.RECIPIENTS");

filter _raw_log !~= "{.*\"APPLICATION_NAME\":"
| alter
        xdm.source.host.hostname = arrayindex(regextract(_raw_log, "\[([^\]]+)\]"), 0),
        xdm.event.type = arrayindex(regextract(_raw_log, "]\s([^-]+)\s-"), 0),
        xdm.event.description = arrayindex(regextract(_raw_log, "]\s[^-]+\s-\s(.*)"), 0);


[MODEL: dataset = tenable_io_raw, content_id="Tenable_io"]
alter 
    xdm.source.user.identifier = json_extract_scalar(actor, "$.id"),
    xdm.source.user.username = json_extract_scalar(actor, "$.name"),
    xdm.event.description = description,
    xdm.target.resource.id = json_extract_scalar(`target`, "$.id"),
    xdm.target.resource.name = json_extract_scalar(`target`, "$.name"),
    xdm.target.resource.type = json_extract_scalar(`target`, "$.type"),
    xdm.event.id = id,
    xdm.event.operation = action,
    xdm.event.type = action,
    xdm.source.ipv4 = arraystring(arraymap(json_extract_array(`fields`, "$."), if(json_extract_scalar("@element", "$.key") = "X-Forwarded-For",json_extract_scalar("@element", "$.value"), null)),","),
    xdm.source.agent.identifier = arraystring(arraymap(json_extract_array(`fields`, "$."), if(json_extract_scalar("@element", "$.key") = "X-Request-Uuid",json_extract_scalar("@element", "$.value"), null)),","),
    xdm.event.outcome_reason = arraystring(arraymap(json_extract_array(`fields`, "$."), if(json_extract_scalar("@element", "$.key") = "message",json_extract_scalar("@element", "$.value"), null)),","),
    xdm.event.operation_sub_type = arraystring(arraymap(json_extract_array(`fields`, "$."), if(json_extract_scalar("@element", "$.key") = "serviceName",json_extract_scalar("@element", "$.value"), null)),","),
    xdm.session_context_id = arraystring(arraymap(json_extract_array(`fields`, "$."), if(json_extract_scalar("@element", "$.key") = "X-Session-Uuid",json_extract_scalar("@element", "$.value"), null)),",");
[MODEL: dataset = tenable_io_vulnerabilities_raw, content_id="Tenable_io"]
alter
    xdm.target.host.hostname = replace(json_extract(asset,"$.hostname"),"\"",""),
    xdm.target.host.ipv4_addresses = arraycreate(replace(json_extract(asset,"$.ipv4"),"\"","")),
    xdm.target.host.device_id = replace(json_extract(asset,"$.uuid"),"\"",""),
    xdm.target.host.os = replace(arrayindex(json_extract_array(asset,"$.operating_system"),0),"\"",""),
    xdm.alert.description = replace(json_extract(plugin,"$.description"),"\"",""),
    xdm.alert.name = replace(json_extract(plugin,"$.name"),"\"",""),
    xdm.alert.severity = severity,
    xdm.event.description = output,
    xdm.source.host.fqdn = replace(json_extract(asset,"$.fqdn"),"\"",""),
    xdm.target.host.fqdn = replace(json_extract(asset,"$.fqdn"),"\"",""),
    xdm.alert.category = replace(json_extract(plugin,"$.family"),"\"",""),
    xdm.alert.original_alert_id = json_extract_scalar(plugin,"$.id");


[MODEL: dataset="thinkst_canary_raw", content_id="ThinkstCanary"]
filter
    _raw_log contains "incident" or _raw_log contains "alert"
| alter
    priority = arrayindex(regextract(_raw_log,"\<\d+\>"), 0),
    severity = arrayindex(regextract(_raw_log,"\<\d+\>(\d+)"), 0),
    customer = arrayindex(regextract(_raw_log,"([\w\-]+)\sThinkstCanary"),0),
    id = arrayindex(regextract(_raw_log,"ThinkstCanary\s(\d{4})"),0),
    eventid = arrayindex(regextract(_raw_log,"\seventid\=\"(\d+)\""),0), 
    ReverseDNS = arrayindex(regextract(_raw_log,"ReverseDNS\=\"([\w\-\.]+)\"\sCanaryName"),0),
    CanaryLocation = arrayindex(regextract(_raw_log,"CanaryLocation\=\"([\w\s]+)\""),0),
    Description = arrayindex(regextract(_raw_log,"Description\=\"([\w\s]+)\""),0),
   timestamp = arrayindex(regextract(_raw_log,"Timestamp\=\"([\d]+)\""),0),
    CanaryPort = arrayindex(regextract(_raw_log,"CanaryPort\=\"([\d]+)\""),0),
    CanaryIP = arrayindex(regextract(_raw_log," CanaryIP\=\"(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\""),0),
    SourceIP = arrayindex(regextract(_raw_log," SourceIP\=\"(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\""),0),
    FakeCreds = arrayindex(regextract(_raw_log,"FakeCreds\=\"([\s\w\d]+)\"\s"),0),
    CanaryID = arrayindex(regextract(_raw_log,"CanaryID\=\"([\s\w\d]+)\""),0),
    summary = arrayindex(regextract(_raw_log,"\]\s﻿(.*)"),0),
    Message = arrayindex(regextract(_raw_log,"Message\=\"([\w\s\d]+)\""),0)
| alter
    xdm.event.id = eventid,
    xdm.event.description = Description,
    xdm.event.outcome_reason = summary,
    xdm.target.host.ipv4_addresses = arraycreate(coalesce(CanaryIP,"")),
    xdm.source.host.device_id = CanaryID;


[RULE: tm_ds_common_fields_modeling content_id="TrendMicroDeepSecurity"]
/* Model fields that are common to all of TM DS event types. */
alter event_tags = regextract(TrendMicroDsTags, "[\w-]+")
| alter 
    xdm.observer.type = TrendMicroDsTenant,
    xdm.observer.unique_identifier = TrendMicroDsTenantId,
    xdm.observer.version = cefDeviceVersion,
    xdm.event.id  = cefDeviceEventClassId,
    xdm.event.description  = cefName,
    xdm.event.tags  = event_tags, 
    xdm.alert.name = cefName,
    xdm.alert.severity = cefSeverity,
    xdm.source.agent.type = TrendMicroDsTenant, 
    xdm.source.agent.identifier = TrendMicroDsTenantId
;
[RULE: tm_ds_agent_common_fields_modeling content_id="TrendMicroDeepSecurity"]
/* Model fields that are common to all of agent (security) event types. */
alter 
    xdm.observer.name = coalesce(dvchost, dvc),
    xdm.source.ipv4 = dvc, /* The IPv4 address of the agent. Does not appear if the source is an IPv6 address or hostname. (Uses dvchost instead.)*/
    xdm.source.ipv6 = if(dvchost ~= ":", dvchost, null), /* The hostname or IPv6 address of the agent. Does not appear if the source is an IPv4 address. (Uses dvc field instead.) */
    xdm.source.host.hostname = if(dvchost != null and dvchost !~= ":", dvchost, null),
    xdm.source.host.device_id = to_string(cn1) // The agent computers internal unique identifier 
;
[RULE: tm_ds_network_common_fields_modeling content_id="TrendMicroDeepSecurity"]
/* Model network fields that are common network event types, i.e., FW & IPS events. */
alter 
    outcome = uppercase(act),
    src_ipv4 = if(src !~= ":", src, null),
    src_ipv6 = if(src ~= ":", src, null),
    dst_ipv4 = if(dst !~= ":", dst, null),
    dst_ipv6 = if(dst ~= ":", dst, null),
    icmp_type_n_code = regextract(cs4, "\S+")
| alter 
    xdm.observer.action = act, 
    xdm.event.outcome = if(outcome ~= "DENY" or outcome ~= "BLOCK" or outcome ~= "DROP", XDM_CONST.OUTCOME_FAILED, outcome ~= "ALLOW" or outcome ~= "ACCEPT", XDM_CONST.OUTCOME_SUCCESS, outcome ~= "LOG" or outcome ~= "DETECT", XDM_CONST.OUTCOME_PARTIAL, to_string(act)),  
    xdm.source.interface = smac,
    xdm.source.port = spt,
    xdm.source.ipv4 = if(src_ipv4 != null, src_ipv4,  src ~= ":", null, dvc),
    xdm.source.ipv6 = if(src_ipv6 != null, src_ipv6, dvchost ~= ":" and src = null, dvchost, null),
    xdm.source.sent_packets = to_integer(cnt), // The number of times this event was sequentially repeated
    xdm.source.sent_bytes = to_integer(out), // outbound bytes read
    xdm.target.sent_bytes = to_integer(`in`), // inbound bytes read
    xdm.target.ipv4 = dst_ipv4,
    xdm.target.ipv6 = dst_ipv6,
    xdm.target.port = dpt,
    xdm.target.interface = dmac,
    xdm.network.icmp.type = to_integer(arrayindex(icmp_type_n_code, 0)),
    xdm.network.icmp.code = to_integer(arrayindex(icmp_type_n_code, 1))
;
[RULE: tm_ds_map_ip_protocol content_id="TrendMicroDeepSecurity"]
/* Map IP protocol from cef proto field to XDM enum field. */
alter ip_proto = uppercase(proto)
| alter xdm.network.ip_protocol = if(ip_proto="HOPOPT",XDM_CONST.IP_PROTOCOL_HOPOPT, ip_proto="ICMP",XDM_CONST.IP_PROTOCOL_ICMP, ip_proto="IGMP",XDM_CONST.IP_PROTOCOL_IGMP, ip_proto="GGP",XDM_CONST.IP_PROTOCOL_GGP, ip_proto="IP",XDM_CONST.IP_PROTOCOL_IP, ip_proto="ST",XDM_CONST.IP_PROTOCOL_ST, ip_proto="TCP",XDM_CONST.IP_PROTOCOL_TCP, ip_proto="CBT",XDM_CONST.IP_PROTOCOL_CBT, ip_proto="EGP",XDM_CONST.IP_PROTOCOL_EGP, ip_proto="IGP",XDM_CONST.IP_PROTOCOL_IGP, ip_proto="BBN_RCC_MON",XDM_CONST.IP_PROTOCOL_BBN_RCC_MON, ip_proto="NVP_II",XDM_CONST.IP_PROTOCOL_NVP_II, ip_proto="PUP",XDM_CONST.IP_PROTOCOL_PUP, ip_proto="ARGUS",XDM_CONST.IP_PROTOCOL_ARGUS, ip_proto="EMCON",XDM_CONST.IP_PROTOCOL_EMCON, ip_proto="XNET",XDM_CONST.IP_PROTOCOL_XNET, ip_proto="CHAOS",XDM_CONST.IP_PROTOCOL_CHAOS, ip_proto="UDP",XDM_CONST.IP_PROTOCOL_UDP, ip_proto="MUX",XDM_CONST.IP_PROTOCOL_MUX, ip_proto="DCN_MEAS",XDM_CONST.IP_PROTOCOL_DCN_MEAS, ip_proto="HMP",XDM_CONST.IP_PROTOCOL_HMP, ip_proto="PRM",XDM_CONST.IP_PROTOCOL_PRM, ip_proto="XNS_IDP",XDM_CONST.IP_PROTOCOL_XNS_IDP, ip_proto="TRUNK_1",XDM_CONST.IP_PROTOCOL_TRUNK_1, ip_proto="TRUNK_2",XDM_CONST.IP_PROTOCOL_TRUNK_2, ip_proto="LEAF_1",XDM_CONST.IP_PROTOCOL_LEAF_1, ip_proto="LEAF_2",XDM_CONST.IP_PROTOCOL_LEAF_2, ip_proto="RDP",XDM_CONST.IP_PROTOCOL_RDP, ip_proto="IRTP",XDM_CONST.IP_PROTOCOL_IRTP, ip_proto="ISO_TP4",XDM_CONST.IP_PROTOCOL_ISO_TP4, ip_proto="NETBLT",XDM_CONST.IP_PROTOCOL_NETBLT, ip_proto="MFE_NSP",XDM_CONST.IP_PROTOCOL_MFE_NSP, ip_proto="MERIT_INP",XDM_CONST.IP_PROTOCOL_MERIT_INP, ip_proto="DCCP",XDM_CONST.IP_PROTOCOL_DCCP, ip_proto="3PC",XDM_CONST.IP_PROTOCOL_3PC, ip_proto="IDPR",XDM_CONST.IP_PROTOCOL_IDPR, ip_proto="XTP",XDM_CONST.IP_PROTOCOL_XTP, ip_proto="DDP",XDM_CONST.IP_PROTOCOL_DDP, ip_proto="IDPR_CMTP",XDM_CONST.IP_PROTOCOL_IDPR_CMTP, ip_proto="TP",XDM_CONST.IP_PROTOCOL_TP, ip_proto="IL",XDM_CONST.IP_PROTOCOL_IL, ip_proto="IPV6",XDM_CONST.IP_PROTOCOL_IPV6, ip_proto="SDRP",XDM_CONST.IP_PROTOCOL_SDRP, ip_proto="IPV6_ROUTE",XDM_CONST.IP_PROTOCOL_IPV6_ROUTE, ip_proto="IPV6_FRAG",XDM_CONST.IP_PROTOCOL_IPV6_FRAG, ip_proto="IDRP",XDM_CONST.IP_PROTOCOL_IDRP, ip_proto="RSVP",XDM_CONST.IP_PROTOCOL_RSVP, ip_proto="GRE",XDM_CONST.IP_PROTOCOL_GRE, ip_proto="DSR",XDM_CONST.IP_PROTOCOL_DSR, ip_proto="BNA",XDM_CONST.IP_PROTOCOL_BNA, ip_proto="ESP",XDM_CONST.IP_PROTOCOL_ESP, ip_proto="AH",XDM_CONST.IP_PROTOCOL_AH, ip_proto="I_NLSP",XDM_CONST.IP_PROTOCOL_I_NLSP, ip_proto="SWIPE",XDM_CONST.IP_PROTOCOL_SWIPE, ip_proto="NARP",XDM_CONST.IP_PROTOCOL_NARP, ip_proto="MOBILE",XDM_CONST.IP_PROTOCOL_MOBILE, ip_proto="TLSP",XDM_CONST.IP_PROTOCOL_TLSP, ip_proto="SKIP",XDM_CONST.IP_PROTOCOL_SKIP, ip_proto="IPV6_ICMP",XDM_CONST.IP_PROTOCOL_IPV6_ICMP, ip_proto="IPV6_NONXT",XDM_CONST.IP_PROTOCOL_IPV6_NONXT, ip_proto="IPV6_OPTS",XDM_CONST.IP_PROTOCOL_IPV6_OPTS, ip_proto="CFTP",XDM_CONST.IP_PROTOCOL_CFTP, ip_proto="SAT_EXPAK",XDM_CONST.IP_PROTOCOL_SAT_EXPAK, ip_proto="KRYPTOLAN",XDM_CONST.IP_PROTOCOL_KRYPTOLAN, ip_proto="RVD",XDM_CONST.IP_PROTOCOL_RVD, ip_proto="IPPC",XDM_CONST.IP_PROTOCOL_IPPC, ip_proto="SAT_MON",XDM_CONST.IP_PROTOCOL_SAT_MON, ip_proto="VISA",XDM_CONST.IP_PROTOCOL_VISA, ip_proto="IPCV",XDM_CONST.IP_PROTOCOL_IPCV, ip_proto="CPNX",XDM_CONST.IP_PROTOCOL_CPNX, ip_proto="CPHB",XDM_CONST.IP_PROTOCOL_CPHB, ip_proto="WSN",XDM_CONST.IP_PROTOCOL_WSN, ip_proto="PVP",XDM_CONST.IP_PROTOCOL_PVP, ip_proto="BR_SAT_MON",XDM_CONST.IP_PROTOCOL_BR_SAT_MON, ip_proto="SUN_ND",XDM_CONST.IP_PROTOCOL_SUN_ND, ip_proto="WB_MON",XDM_CONST.IP_PROTOCOL_WB_MON, ip_proto="WB_EXPAK",XDM_CONST.IP_PROTOCOL_WB_EXPAK, ip_proto="ISO_IP",XDM_CONST.IP_PROTOCOL_ISO_IP, ip_proto="VMTP",XDM_CONST.IP_PROTOCOL_VMTP, ip_proto="SECURE_VMTP",XDM_CONST.IP_PROTOCOL_SECURE_VMTP, ip_proto="VINES",XDM_CONST.IP_PROTOCOL_VINES, ip_proto="TTP",XDM_CONST.IP_PROTOCOL_TTP, ip_proto="NSFNET_IGP",XDM_CONST.IP_PROTOCOL_NSFNET_IGP, ip_proto="DGP",XDM_CONST.IP_PROTOCOL_DGP, ip_proto="TCF",XDM_CONST.IP_PROTOCOL_TCF, ip_proto="EIGRP",XDM_CONST.IP_PROTOCOL_EIGRP, ip_proto="OSPFIGP",XDM_CONST.IP_PROTOCOL_OSPFIGP, ip_proto="SPRITE_RPC",XDM_CONST.IP_PROTOCOL_SPRITE_RPC, ip_proto="LARP",XDM_CONST.IP_PROTOCOL_LARP, ip_proto="MTP",XDM_CONST.IP_PROTOCOL_MTP, ip_proto="AX25",XDM_CONST.IP_PROTOCOL_AX25, ip_proto="IPIP",XDM_CONST.IP_PROTOCOL_IPIP, ip_proto="MICP",XDM_CONST.IP_PROTOCOL_MICP, ip_proto="SCC_SP",XDM_CONST.IP_PROTOCOL_SCC_SP, ip_proto="ETHERIP",XDM_CONST.IP_PROTOCOL_ETHERIP, ip_proto="ENCAP",XDM_CONST.IP_PROTOCOL_ENCAP, ip_proto="GMTP",XDM_CONST.IP_PROTOCOL_GMTP, ip_proto="IFMP",XDM_CONST.IP_PROTOCOL_IFMP, ip_proto="PNNI",XDM_CONST.IP_PROTOCOL_PNNI, ip_proto="PIM",XDM_CONST.IP_PROTOCOL_PIM, ip_proto="ARIS",XDM_CONST.IP_PROTOCOL_ARIS, ip_proto="SCPS",XDM_CONST.IP_PROTOCOL_SCPS, ip_proto="QNX",XDM_CONST.IP_PROTOCOL_QNX, ip_proto="AN",XDM_CONST.IP_PROTOCOL_AN, ip_proto="IPCOMP",XDM_CONST.IP_PROTOCOL_IPCOMP, ip_proto="SNP",XDM_CONST.IP_PROTOCOL_SNP, ip_proto="COMPAQ_PEER",XDM_CONST.IP_PROTOCOL_COMPAQ_PEER, ip_proto="IPX_IN_IP",XDM_CONST.IP_PROTOCOL_IPX_IN_IP, ip_proto="VRRP",XDM_CONST.IP_PROTOCOL_VRRP, ip_proto="PGM",XDM_CONST.IP_PROTOCOL_PGM, ip_proto="L2TP",XDM_CONST.IP_PROTOCOL_L2TP, ip_proto="DDX",XDM_CONST.IP_PROTOCOL_DDX, ip_proto="IATP",XDM_CONST.IP_PROTOCOL_IATP, ip_proto="STP",XDM_CONST.IP_PROTOCOL_STP, ip_proto="SRP",XDM_CONST.IP_PROTOCOL_SRP, ip_proto="UTI",XDM_CONST.IP_PROTOCOL_UTI, ip_proto="SMP",XDM_CONST.IP_PROTOCOL_SMP, ip_proto="SM",XDM_CONST.IP_PROTOCOL_SM, ip_proto="PTP",XDM_CONST.IP_PROTOCOL_PTP, ip_proto="ISIS",XDM_CONST.IP_PROTOCOL_ISIS, ip_proto="FIRE",XDM_CONST.IP_PROTOCOL_FIRE, ip_proto="CRTP",XDM_CONST.IP_PROTOCOL_CRTP, ip_proto="CRUDP",XDM_CONST.IP_PROTOCOL_CRUDP, ip_proto="SSCOPMCE",XDM_CONST.IP_PROTOCOL_SSCOPMCE, ip_proto="IPLT",XDM_CONST.IP_PROTOCOL_IPLT, ip_proto="SPS",XDM_CONST.IP_PROTOCOL_SPS, ip_proto="PIPE",XDM_CONST.IP_PROTOCOL_PIPE, ip_proto="SCTP",XDM_CONST.IP_PROTOCOL_SCTP, ip_proto="FC",XDM_CONST.IP_PROTOCOL_FC, ip_proto="RSVP_E2E_IGNORE",XDM_CONST.IP_PROTOCOL_RSVP_E2E_IGNORE, ip_proto="MOBILITY",XDM_CONST.IP_PROTOCOL_MOBILITY, ip_proto="UDPLITE",XDM_CONST.IP_PROTOCOL_UDPLITE, ip_proto="MPLS_IN_IP",XDM_CONST.IP_PROTOCOL_MPLS_IN_IP, ip_proto="MANET",XDM_CONST.IP_PROTOCOL_MANET, ip_proto="HIP",XDM_CONST.IP_PROTOCOL_HIP, ip_proto="SHIM6",XDM_CONST.IP_PROTOCOL_SHIM6, ip_proto="WESP",XDM_CONST.IP_PROTOCOL_WESP, ip_proto="ROHC",XDM_CONST.IP_PROTOCOL_ROHC, ip_proto="RESERVED",XDM_CONST.IP_PROTOCOL_RESERVED,ip_proto="0",XDM_CONST.IP_PROTOCOL_HOPOPT, ip_proto="1",XDM_CONST.IP_PROTOCOL_ICMP, ip_proto="2",XDM_CONST.IP_PROTOCOL_IGMP, ip_proto="3",XDM_CONST.IP_PROTOCOL_GGP, ip_proto="4",XDM_CONST.IP_PROTOCOL_IP, ip_proto="5",XDM_CONST.IP_PROTOCOL_ST, ip_proto="6",XDM_CONST.IP_PROTOCOL_TCP, ip_proto="7",XDM_CONST.IP_PROTOCOL_CBT, ip_proto="8",XDM_CONST.IP_PROTOCOL_EGP, ip_proto="9",XDM_CONST.IP_PROTOCOL_IGP, ip_proto="10",XDM_CONST.IP_PROTOCOL_BBN_RCC_MON, ip_proto="11",XDM_CONST.IP_PROTOCOL_NVP_II, ip_proto="12",XDM_CONST.IP_PROTOCOL_PUP, ip_proto="13",XDM_CONST.IP_PROTOCOL_ARGUS, ip_proto="14",XDM_CONST.IP_PROTOCOL_EMCON, ip_proto="15",XDM_CONST.IP_PROTOCOL_XNET, ip_proto="16",XDM_CONST.IP_PROTOCOL_CHAOS, ip_proto="17",XDM_CONST.IP_PROTOCOL_UDP, ip_proto="18",XDM_CONST.IP_PROTOCOL_MUX, ip_proto="19",XDM_CONST.IP_PROTOCOL_DCN_MEAS, ip_proto="20",XDM_CONST.IP_PROTOCOL_HMP, ip_proto="21",XDM_CONST.IP_PROTOCOL_PRM, ip_proto="22",XDM_CONST.IP_PROTOCOL_XNS_IDP, ip_proto="23",XDM_CONST.IP_PROTOCOL_TRUNK_1, ip_proto="24",XDM_CONST.IP_PROTOCOL_TRUNK_2, ip_proto="25",XDM_CONST.IP_PROTOCOL_LEAF_1, ip_proto="26",XDM_CONST.IP_PROTOCOL_LEAF_2, ip_proto="27",XDM_CONST.IP_PROTOCOL_RDP, ip_proto="28",XDM_CONST.IP_PROTOCOL_IRTP, ip_proto="29",XDM_CONST.IP_PROTOCOL_ISO_TP4, ip_proto="30",XDM_CONST.IP_PROTOCOL_NETBLT, ip_proto="31",XDM_CONST.IP_PROTOCOL_MFE_NSP, ip_proto="32",XDM_CONST.IP_PROTOCOL_MERIT_INP, ip_proto="33",XDM_CONST.IP_PROTOCOL_DCCP, ip_proto="34",XDM_CONST.IP_PROTOCOL_3PC, ip_proto="35",XDM_CONST.IP_PROTOCOL_IDPR, ip_proto="36",XDM_CONST.IP_PROTOCOL_XTP, ip_proto="37",XDM_CONST.IP_PROTOCOL_DDP, ip_proto="38",XDM_CONST.IP_PROTOCOL_IDPR_CMTP, ip_proto="39",XDM_CONST.IP_PROTOCOL_TP, ip_proto="40",XDM_CONST.IP_PROTOCOL_IL, ip_proto="41",XDM_CONST.IP_PROTOCOL_IPV6, ip_proto="42",XDM_CONST.IP_PROTOCOL_SDRP, ip_proto="43",XDM_CONST.IP_PROTOCOL_IPV6_ROUTE, ip_proto="44",XDM_CONST.IP_PROTOCOL_IPV6_FRAG, ip_proto="45",XDM_CONST.IP_PROTOCOL_IDRP, ip_proto="46",XDM_CONST.IP_PROTOCOL_RSVP, ip_proto="47",XDM_CONST.IP_PROTOCOL_GRE, ip_proto="48",XDM_CONST.IP_PROTOCOL_DSR, ip_proto="49",XDM_CONST.IP_PROTOCOL_BNA, ip_proto="50",XDM_CONST.IP_PROTOCOL_ESP, ip_proto="51",XDM_CONST.IP_PROTOCOL_AH, ip_proto="52",XDM_CONST.IP_PROTOCOL_I_NLSP, ip_proto="53",XDM_CONST.IP_PROTOCOL_SWIPE, ip_proto="54",XDM_CONST.IP_PROTOCOL_NARP, ip_proto="55",XDM_CONST.IP_PROTOCOL_MOBILE, ip_proto="56",XDM_CONST.IP_PROTOCOL_TLSP, ip_proto="57",XDM_CONST.IP_PROTOCOL_SKIP, ip_proto="58",XDM_CONST.IP_PROTOCOL_IPV6_ICMP, ip_proto="59",XDM_CONST.IP_PROTOCOL_IPV6_NONXT, ip_proto="60",XDM_CONST.IP_PROTOCOL_IPV6_OPTS, ip_proto="62",XDM_CONST.IP_PROTOCOL_CFTP, ip_proto="64",XDM_CONST.IP_PROTOCOL_SAT_EXPAK, ip_proto="65",XDM_CONST.IP_PROTOCOL_KRYPTOLAN, ip_proto="66",XDM_CONST.IP_PROTOCOL_RVD, ip_proto="67",XDM_CONST.IP_PROTOCOL_IPPC, ip_proto="69",XDM_CONST.IP_PROTOCOL_SAT_MON, ip_proto="70",XDM_CONST.IP_PROTOCOL_VISA, ip_proto="71",XDM_CONST.IP_PROTOCOL_IPCV, ip_proto="72",XDM_CONST.IP_PROTOCOL_CPNX, ip_proto="73",XDM_CONST.IP_PROTOCOL_CPHB, ip_proto="74",XDM_CONST.IP_PROTOCOL_WSN, ip_proto="75",XDM_CONST.IP_PROTOCOL_PVP, ip_proto="76",XDM_CONST.IP_PROTOCOL_BR_SAT_MON, ip_proto="77",XDM_CONST.IP_PROTOCOL_SUN_ND, ip_proto="78",XDM_CONST.IP_PROTOCOL_WB_MON, ip_proto="79",XDM_CONST.IP_PROTOCOL_WB_EXPAK, ip_proto="80",XDM_CONST.IP_PROTOCOL_ISO_IP, ip_proto="81",XDM_CONST.IP_PROTOCOL_VMTP, ip_proto="82",XDM_CONST.IP_PROTOCOL_SECURE_VMTP, ip_proto="83",XDM_CONST.IP_PROTOCOL_VINES, ip_proto="84",XDM_CONST.IP_PROTOCOL_TTP, ip_proto="85",XDM_CONST.IP_PROTOCOL_NSFNET_IGP, ip_proto="86",XDM_CONST.IP_PROTOCOL_DGP, ip_proto="87",XDM_CONST.IP_PROTOCOL_TCF, ip_proto="88",XDM_CONST.IP_PROTOCOL_EIGRP, ip_proto="89",XDM_CONST.IP_PROTOCOL_OSPFIGP, ip_proto="90",XDM_CONST.IP_PROTOCOL_SPRITE_RPC, ip_proto="91",XDM_CONST.IP_PROTOCOL_LARP, ip_proto="92",XDM_CONST.IP_PROTOCOL_MTP, ip_proto="93",XDM_CONST.IP_PROTOCOL_AX25, ip_proto="94",XDM_CONST.IP_PROTOCOL_IPIP, ip_proto="95",XDM_CONST.IP_PROTOCOL_MICP, ip_proto="96",XDM_CONST.IP_PROTOCOL_SCC_SP, ip_proto="97",XDM_CONST.IP_PROTOCOL_ETHERIP, ip_proto="98",XDM_CONST.IP_PROTOCOL_ENCAP, ip_proto="100",XDM_CONST.IP_PROTOCOL_GMTP, ip_proto="101",XDM_CONST.IP_PROTOCOL_IFMP, ip_proto="102",XDM_CONST.IP_PROTOCOL_PNNI, ip_proto="103",XDM_CONST.IP_PROTOCOL_PIM, ip_proto="104",XDM_CONST.IP_PROTOCOL_ARIS, ip_proto="105",XDM_CONST.IP_PROTOCOL_SCPS, ip_proto="106",XDM_CONST.IP_PROTOCOL_QNX, ip_proto="107",XDM_CONST.IP_PROTOCOL_AN, ip_proto="108",XDM_CONST.IP_PROTOCOL_IPCOMP, ip_proto="109",XDM_CONST.IP_PROTOCOL_SNP, ip_proto="110",XDM_CONST.IP_PROTOCOL_COMPAQ_PEER, ip_proto="111",XDM_CONST.IP_PROTOCOL_IPX_IN_IP, ip_proto="112",XDM_CONST.IP_PROTOCOL_VRRP, ip_proto="113",XDM_CONST.IP_PROTOCOL_PGM, ip_proto="115",XDM_CONST.IP_PROTOCOL_L2TP, ip_proto="116",XDM_CONST.IP_PROTOCOL_DDX, ip_proto="117",XDM_CONST.IP_PROTOCOL_IATP, ip_proto="118",XDM_CONST.IP_PROTOCOL_STP, ip_proto="119",XDM_CONST.IP_PROTOCOL_SRP, ip_proto="120",XDM_CONST.IP_PROTOCOL_UTI, ip_proto="121",XDM_CONST.IP_PROTOCOL_SMP, ip_proto="122",XDM_CONST.IP_PROTOCOL_SM, ip_proto="123",XDM_CONST.IP_PROTOCOL_PTP, ip_proto="124",XDM_CONST.IP_PROTOCOL_ISIS, ip_proto="125",XDM_CONST.IP_PROTOCOL_FIRE, ip_proto="126",XDM_CONST.IP_PROTOCOL_CRTP, ip_proto="127",XDM_CONST.IP_PROTOCOL_CRUDP, ip_proto="128",XDM_CONST.IP_PROTOCOL_SSCOPMCE, ip_proto="129",XDM_CONST.IP_PROTOCOL_IPLT, ip_proto="130",XDM_CONST.IP_PROTOCOL_SPS, ip_proto="131",XDM_CONST.IP_PROTOCOL_PIPE, ip_proto="132",XDM_CONST.IP_PROTOCOL_SCTP, ip_proto="133",XDM_CONST.IP_PROTOCOL_FC, ip_proto="134",XDM_CONST.IP_PROTOCOL_RSVP_E2E_IGNORE, ip_proto="135",XDM_CONST.IP_PROTOCOL_MOBILITY, ip_proto="136",XDM_CONST.IP_PROTOCOL_UDPLITE, ip_proto="137",XDM_CONST.IP_PROTOCOL_MPLS_IN_IP, ip_proto="138",XDM_CONST.IP_PROTOCOL_MANET, ip_proto="139",XDM_CONST.IP_PROTOCOL_HIP, ip_proto="140",XDM_CONST.IP_PROTOCOL_SHIM6, ip_proto="141",XDM_CONST.IP_PROTOCOL_WESP, ip_proto="142",XDM_CONST.IP_PROTOCOL_ROHC, ip_proto="255",XDM_CONST.IP_PROTOCOL_RESERVED,to_string(ip_proto))
;
[RULE: tm_ds_convert_cef_event_id_to_int content_id="TrendMicroDeepSecurity"]
/* Utility rule for filtering events more effeciently */
alter event_id = to_integer(cefDeviceEventClassId)
;


/*********************************************/
/* DSM (Deep Security Manager) System Events */
/*********************************************/
[MODEL: dataset="trend_micro_deep_security_manager_raw", content_id="TrendMicroDeepSecurity"]
filter cefDeviceProduct = "Deep Security Manager" 
| call tm_ds_common_fields_modeling
| alter 
    target_type = uppercase(targetType)
| alter 
    xdm.event.type = "System",
    xdm.alert.description = msg, 
    xdm.source.user.username = suser,
    xdm.source.ipv4 = if(src !~= ":", src, null),
    xdm.source.ipv6 = if(src ~= ":", src, null),
    xdm.target.resource.type = targetType,
    xdm.target.resource.id = targetID, 
    xdm.target.resource.value = `target`,
    xdm.target.user.username = if(target_type ~= "USER", `target`, null),
    xdm.target.user.identifier = if(target_type ~= "USER", targetID, null),
    xdm.target.host.hostname =  if(target_type ~= "HOST", `target`, null),
    xdm.target.host.device_id = if(target_type ~= "HOST", targetID, null)
;


/*********************************************/
/* DSA (Deep Security Agent) Security Events */
/*********************************************/
[MODEL: dataset="trend_micro_deep_security_agent_raw", content_id="TrendMicroDeepSecurity"]

/* FW Events := cefDeviceEventClassId in ([20-21], [100-199]) */
call tm_ds_convert_cef_event_id_to_int
| filter cefDeviceProduct  = "Deep Security Agent" 
    and ((event_id in (20, 21) )
    or (event_id >= 100 and event_id < 200))
| alter xdm.event.type = "Firewall"
| call tm_ds_common_fields_modeling
| call tm_ds_agent_common_fields_modeling
| call tm_ds_network_common_fields_modeling
| call tm_ds_map_ip_protocol
;

/* IPS Events := cefDeviceEventClassId in ([10], [200-299], [500-899], [1000000-1999999]) */ 
call tm_ds_convert_cef_event_id_to_int
| filter cefDeviceProduct = "Deep Security Agent" 
    and ((event_id = 10)
    or (event_id >= 200 and event_id < 300)
    or (event_id >= 500 and event_id < 900)
    or (event_id >= 1000000 and event_id < 2000000))
| alter xdm.event.type = "IPS"
| call tm_ds_common_fields_modeling
| call tm_ds_agent_common_fields_modeling
| call tm_ds_network_common_fields_modeling
| call tm_ds_map_ip_protocol
| alter
    xdm.network.http.http_header.value = xff,
    xdm.network.http.http_header.header = if(xff != null, "X-Forwarded-For", null)
;

/* Integrity Monitoring Events := cefDeviceEventClassId in ([30], [2000000-2999999]) */
call tm_ds_convert_cef_event_id_to_int
| filter cefDeviceProduct = "Deep Security Agent" 
    and ((event_id = 30) 
    or (event_id >= 2000000 and event_id < 3000000))
| alter xdm.event.type = "IntegrityMonitoring"
| call tm_ds_common_fields_modeling
| call tm_ds_agent_common_fields_modeling
| alter 
    operation = uppercase(act),
    process_file_name =  if(sproc != null and sproc != "N/A", arrayindex(regextract(sproc, "[\/\\]([\w-\.]+)$"), 0), null)
| alter 
    process_extension =  arrayindex(regextract(process_file_name, "\.(\S+)$"), 0)
| alter 
    xdm.observer.action = act, // The action detected by the integrity rule: created/updated/deleted/renamed
    xdm.event.operation= if(operation ~= "CREATE", XDM_CONST.OPERATION_TYPE_FILE_CREATE, operation ~= "UPDATE", XDM_CONST.OPERATION_TYPE_FILE_WRITE,  operation ~= "DELETE", XDM_CONST.OPERATION_TYPE_FILE_REMOVE, operation ~= "RENAME", XDM_CONST.OPERATION_TYPE_FILE_RENAME, to_string(act)),  
    xdm.event.operation_sub_type = msg, // List of changed attribute names. Relevant only for act="renamed"
    xdm.source.user.username = suser,
    xdm.source.process.executable.path = sproc,
    xdm.source.process.executable.filename = process_file_name,
    xdm.source.process.executable.extension = process_extension,
    xdm.target.file.path = filePath, 
    xdm.target.file_before.path = oldfilePath
;

/* Log Inspection Events := cefDeviceEventClassId in ([40], [3000000-3999999]) */
call tm_ds_convert_cef_event_id_to_int
| filter cefDeviceProduct = "Deep Security Agent" 
    and ((event_id = 40) 
    or (event_id >= 3000000 and event_id < 4000000))
| alter xdm.event.type = "LogInspection" 
| call tm_ds_common_fields_modeling
| call tm_ds_agent_common_fields_modeling
| alter 
    src_ipv4 = if(src !~= ":" and src ~= "\d", src, null),
    src_ipv6 = if(src ~= ":", src, null)
| alter 
    xdm.alert.name = cs1, 
    xdm.alert.description = msg, 
    xdm.source.ipv4 = if(src_ipv4 != null, src_ipv4, src_ipv6 != null, null, dvc),
    xdm.source.ipv6 = if(src_ipv6 != null, src_ipv6, src_ipv4 != null, null, dvchost ~= ":", dvchost, null),
    xdm.source.host.hostname = if(shost != null, shost, dvchost !~= ":" and src = null, dvchost, null),
    xdm.target.user.username = duser, 
    xdm.target.resource.value = fname // Rule target entity: a file, directory path, registry key, etc.
;
    
/* Anti-Malware Events := cefDeviceEventClassId in [4000000-4999999] */
call tm_ds_convert_cef_event_id_to_int
| filter cefDeviceProduct = "Deep Security Agent" 
    and (event_id >= 4000000 and event_id < 5000000)
| alter xdm.event.type = "AntiMalware"
| call tm_ds_common_fields_modeling
| call tm_ds_agent_common_fields_modeling
| alter 
    event_tags = regextract(TrendMicroDsTags, "[\w-]+"),
    container_id = arrayindex(regextract(cs6, "[^\|]+\|[^\|]+\|\s*(\S+)"), 0), 
    process_file_name =  arrayindex(regextract(filePath, "[\/\\]([\w-\.]+)$"), 0),
    cve_list = regextract(TrendMicroDsCve, "[\w-]+"),
    mitre_techniques_list = regextract(TrendMicroDsMitre, "\w+"),
    malware_target_type = uppercase(TrendMicroDsMalwareTargetType),
    spyware_infected_resource = cs3, /* Spyware item path. This field is only for spyware detection events.  */
    spyware_infected_resource_type = if(cs4="10", "Files and Directories", cs4="11", "System Registry", cs4="12", "Internet Cookies", cs4="13", "Internet URL Shortcut", cs4="14", "Programs in Memory", cs4="15", "Program Startup Areas", cs4="16", "Browser Helper Object", cs4="17", "Layered Service Provider", cs4="18", "Hosts File", cs4="19", "Windows Policy Settings", cs4="20", "Browser", cs4="23", "Windows Shell Setting", cs4="24", "IE Downloaded Program Files", cs4="25", "Add/Remove Programs", cs4="26", "Services", "Other")
| alter 
    process_extension = arrayindex(regextract(process_file_name, "\.(\S+)$"), 0)
| alter 
    xdm.observer.action = act,  /* Action performed by the Anti-Malware engine: Deny Access, Quarantine, Delete, Pass, Clean, Terminate, and Unspecified. */
    xdm.event.operation = if(act in ("Deny Access", "Quarantine"), XDM_CONST.OPERATION_TYPE_FILE_SET_SECURITY, act in ("Delete", "Clean"), XDM_CONST.OPERATION_TYPE_FILE_REMOVE, act="Pass", XDM_CONST.OPERATION_TYPE_FILE_STATS, act="Terminate", XDM_CONST.OPERATION_TYPE_PROCESS_TERMINATE, to_string(act)),   
    xdm.event.outcome = if(act="Delete", XDM_CONST.OUTCOME_SUCCESS, act in ("Clean", "Deny Access", "Quarantine", "Terminate"), XDM_CONST.OUTCOME_PARTIAL, act="Pass", XDM_CONST.OUTCOME_FAILED, act="Unspecified", XDM_CONST.OUTCOME_UNKNOWN, result != null, to_string(result), to_string(act)),  /* The result of the failed Anti-Malware action (Deleted, Quarantined). */
    xdm.event.tags = arrayconcat(event_tags, cve_list),
    xdm.alert.name = coalesce(TrendMicroDsRelevantDetectionNames, cefName), /* Indicates the most likely type of threat contained in the file after Predictive ML compared the analysis to other known threats(separated by ";" ) */ 
    xdm.alert.original_threat_id = TrendMicroDsBehaviorRuleID, /* The behavior monitoring rule ID for internal malware case tracking. */ 
    xdm.alert.category = TrendMicroDsBehaviorType, /* The type of behavior monitoring event detected. */ 
    xdm.alert.mitre_techniques = mitre_techniques_list,
    xdm.source.user.username = suser,
    xdm.source.process.container_id = container_id,
    xdm.source.process.name = TrendMicroDsProcess, 
    xdm.source.process.command_line = TrendMicroDsCommandLine,
    xdm.source.process.executable.size = to_integer(cn2),  /* The size of the quarantine file. */
    xdm.source.process.executable.path = filePath, 
    xdm.source.process.executable.filename = process_file_name,
    xdm.source.process.executable.extension = process_extension,
    xdm.source.process.executable.md5 = TrendMicroDsFileMD5,
    xdm.source.process.executable.sha256 = TrendMicroDsFileSHA256, 
    xdm.target.resource.type = coalesce(spyware_infected_resource_type, TrendMicroDsMalwareTargetType), /* The type of system resource that this malware was trying to affect, such as the file system, a process, or Windows registry. */
    xdm.target.resource.value = coalesce(spyware_infected_resource, TrendMicroDsMalwareTarget), /* The file, process, or registry key (if any) that the malware was trying to affect. If the malware was trying to affect more than one, this field will contain the value "Multiple." */
    xdm.target.file.path = if(malware_target_type ~= "FILE", TrendMicroDsMalwareTarget, null),
    xdm.target.registry.key = if(malware_target_type ~= "REGISTRY", TrendMicroDsMalwareTarget, null),    
    xdm.target.process.name = if(malware_target_type ~= "PROCESS", TrendMicroDsMalwareTarget, null)
    ;

/* Web_Reputation Events := cefDeviceEventClassId in [5000000-5999999] */
call tm_ds_convert_cef_event_id_to_int
| filter cefDeviceProduct = "Deep Security Agent" 
    and (event_id >= 5000000 and event_id < 6000000)
| alter xdm.event.type = "WebReputation"
| call tm_ds_common_fields_modeling
| call tm_ds_agent_common_fields_modeling
| alter 
    outcome = uppercase(msg)
| alter 
    xdm.target.url = request, 
    xdm.observer.action = msg,
    xdm.event.outcome = if(outcome ~= "BLOCKED", XDM_CONST.OUTCOME_FAILED, outcome ~= "PERMIT" or outcome ~= "ALLOW", XDM_CONST.OUTCOME_SUCCESS, to_string(msg)) 
;

/*  Application Control Events := cefDeviceEventClassId in [6000000-6999999] */
call tm_ds_convert_cef_event_id_to_int 
| filter cefDeviceProduct = "Deep Security Agent" 
    and (event_id >= 6000000 and event_id < 7000000)
| alter xdm.event.type = "ApplicationControl"
| call tm_ds_common_fields_modeling
| call tm_ds_agent_common_fields_modeling
| alter
    outcome = uppercase(act),
    process_file_name = arrayindex(regextract(filePath, "[\/\\]([\w-\.]+)$"), 0)
| alter 
    process_extension = arrayindex(regextract(process_file_name, "\.(\S+)$"), 0)
| alter 
    xdm.observer.action = act,
    xdm.event.outcome = if(outcome ~= "BLOCKED", XDM_CONST.OUTCOME_FAILED, outcome ~= "ALLOWED", XDM_CONST.OUTCOME_SUCCESS,  outcome ~= "DETECT", XDM_CONST.OUTCOME_PARTIAL, to_string(act)),  
    xdm.event.outcome_reason = cs1, 
    xdm.source.user.identifier = suid, 
    xdm.source.user.username = suser, 
    xdm.source.process.executable.md5 = cs3, 
    xdm.source.process.executable.sha256 = fileHash, 
    xdm.source.process.executable.path = filePath, 
    xdm.source.process.executable.filename = process_file_name,
    xdm.source.process.executable.extension = process_extension,
    xdm.source.process.executable.size = to_integer(fsize) 
;

/*  Application Control Events := cefDeviceEventClassId in [6000000-6999999] */
call tm_ds_convert_cef_event_id_to_int 
| filter cefDeviceProduct = "Deep Security Agent" 
    and (event_id >= 6000000 and event_id < 7000000)
| alter xdm.event.type = "ApplicationControl"
| call tm_ds_common_fields_modeling
| call tm_ds_agent_common_fields_modeling
| alter
    outcome = uppercase(act),
    process_file_name = arrayindex(regextract(filePath, "[\/\\]([\w-\.]+)$"), 0)
| alter 
    process_extension = arrayindex(regextract(process_file_name, "\.(\S+)$"), 0)
| alter 
    xdm.observer.action = act,
    xdm.event.outcome = if(outcome ~= "BLOCKED", XDM_CONST.OUTCOME_FAILED, outcome ~= "ALLOWED", XDM_CONST.OUTCOME_SUCCESS,  outcome ~= "DETECT", XDM_CONST.OUTCOME_PARTIAL, to_string(act)),  
    xdm.event.outcome_reason = cs1, 
    xdm.source.user.identifier = suid, 
    xdm.source.user.username = suser, 
    xdm.source.process.executable.md5 = cs3, 
    xdm.source.process.executable.sha256 = fileHash, 
    xdm.source.process.executable.path = filePath, 
    xdm.source.process.executable.filename = process_file_name,
    xdm.source.process.executable.extension = process_extension,
    xdm.source.process.executable.size = to_integer(fsize) 
;

/* Fallback handling for all other DSA event */
call tm_ds_convert_cef_event_id_to_int
| filter cefDeviceProduct = "Deep Security Agent" 
    and (((event_id < 100) 
        or (event_id >= 400 and event_id < 500) 
        or (event_id >= 900 and event_id < 1000000)
        or (event_id >= 7000000))
    and (event_id not in (10, 20, 21, 30, 40)))
| alter xdm.event.type = "N/A"
| call tm_ds_common_fields_modeling
| call tm_ds_agent_common_fields_modeling
;


[MODEL:dataset="vectra_vectra_raw", content_id="Vectra_AI"]
filter id != null |
    alter
        xdm.event.type = detection_type, 
        xdm.alert.original_alert_id = to_string(id),
        xdm.alert.category = if(
            category = "botnet", XDM_CONST.THREAT_CATEGORY_BOTNET, 
            category = null, null, to_string(category)
        ),
        xdm.alert.mitre_tactics = arraycreate(if(
            category = "command", XDM_CONST.MITRE_TACTIC_COMMAND_AND_CONTROL,
            category = "lateral", XDM_CONST.MITRE_TACTIC_LATERAL_MOVEMENT,
            category = "reconnaissance", XDM_CONST.MITRE_TACTIC_RECONNAISSANCE,
            category = "exfiltration", XDM_CONST.MITRE_TACTIC_EXFILTRATION,
            category = null, null, to_string(category))),
        xdm.alert.mitre_techniques = arraycreate(if(
            detection_type = "External Remote Access", XDM_CONST.MITRE_TECHNIQUE_REMOTE_ACCESS_SOFTWARE,
            detection_type = "Hidden DNS Tunnel", XDM_CONST.MITRE_TECHNIQUE_PROTOCOL_TUNNELING,
            detection_type = "Hidden HTTP Tunnel", XDM_CONST.MITRE_TECHNIQUE_PROTOCOL_TUNNELING,
            detection_type = "Hidden HTTPS Tunnel", XDM_CONST.MITRE_TECHNIQUE_PROTOCOL_TUNNELING,
            detection_type = "Suspect Domain Activity", XDM_CONST.MITRE_TECHNIQUE_DOMAIN_POLICY_MODIFICATION,
            detection_type = "TOR Activity", XDM_CONST.MITRE_TECHNIQUE_PROXY_MULTI_HOP_PROXY,
            detection_type = "Multi-home Fronted Tunnel", XDM_CONST.MITRE_TECHNIQUE_PROTOCOL_TUNNELING,
            detection_type = "Brute-Force", XDM_CONST.MITRE_TECHNIQUE_BRUTE_FORCE,
            detection_type = "Outbound DoS", XDM_CONST.MITRE_TECHNIQUE_NETWORK_DENIAL_OF_SERVICE,
            detection_type = "Outbound Port Sweep", XDM_CONST.MITRE_TECHNIQUE_ACTIVE_SCANNING,
            detection_type = "Outbound Spam", XDM_CONST.MITRE_TECHNIQUE_PHISHING,
            detection_type = "File Share Enumeration", XDM_CONST.MITRE_TECHNIQUE_NETWORK_SHARE_DISCOVERY,
            detection_type = "Kerberoasting: SPN Sweep", XDM_CONST.MITRE_TECHNIQUE_STEAL_OR_FORGE_KERBEROS_TICKETS_KERBEROASTING,
            detection_type = "Port Scan", XDM_CONST.MITRE_TECHNIQUE_ACTIVE_SCANNING,
            detection_type = "Port Sweep", XDM_CONST.MITRE_TECHNIQUE_ACTIVE_SCANNING,
            detection_type = "SMB Account Scan", XDM_CONST.MITRE_TECHNIQUE_ACCOUNT_DISCOVERY,
            detection_type = "RDP Recon", XDM_CONST.MITRE_TECHNIQUE_REMOTE_SERVICES_REMOTE_DESKTOP_PROTOCOL,
            detection_type = "RDP Recon", XDM_CONST.MITRE_TECHNIQUE_REMOTE_SERVICES_REMOTE_DESKTOP_PROTOCOL,
            detection_type = "Kerberos Brute-Force", XDM_CONST.MITRE_TECHNIQUE_BRUTE_FORCE,
            detection_type = "Ransomware File Activity", XDM_CONST.MITRE_TECHNIQUE_DATA_ENCRYPTED_FOR_IMPACT,
            detection_type = "Shell Knocker Client", XDM_CONST.MITRE_TECHNIQUE_TRAFFIC_SIGNALING_PORT_KNOCKING,
            detection_type = "Shell Knocker Server", XDM_CONST.MITRE_TECHNIQUE_TRAFFIC_SIGNALING_PORT_KNOCKING,
            detection_type = "SMB Brute-Force", XDM_CONST.MITRE_TECHNIQUE_BRUTE_FORCE,
            detection_type = "Data Smuggler", XDM_CONST.MITRE_TECHNIQUE_OBFUSCATED_FILES_OR_INFORMATION_HTML_SMUGGLING,
            detection_type = null, null, to_string(detection_type))),
        xdm.alert.original_threat_name = detection_type,
        xdm.source.ipv4 = src_ip,
        xdm.source.host.hostname = json_extract_scalar(src_host, "$.name"),
        xdm.source.agent.identifier = json_extract_scalar(src_host, "$.id"),
        xdm.event.description = coalesce(description, json_extract_scalar(summary, "$.description")),
        xdm.event.is_completed = if(state = "fixed"),
        xdm.alert.severity = to_string(threat);
filter id = null  |
    alter
        xdm.event.type = "AUDIT",
        xdm.source.user.user_type = role ,
        xdm.source.user.username = user,
        xdm.event.outcome = if(
            result = "success", XDM_CONST.OUTCOME_SUCCESS,
            result = "failure", XDM_CONST.OUTCOME_FAILED,
            result = null, null, to_string(result)),
        xdm.target.host.hostname = dvchost,
        xdm.target.application.version = version,
        xdm.target.ipv4  = headend_addr,
        xdm.source.ipv4 = source_ip,
        xdm.event.description = message,
        xdm.event.is_completed = if(result != "pending");


[MODEL: dataset="VMware_ESXi_raw", content_id="VMwareESXi"]
alter event_type = arrayindex( regextract(_raw_log ,"\d+-\d+-\d+T\d+:\d+:\d+\.*\d*Z[\s|\|]\s*([a-zA-Z0-9-_]+)"),0)
    ,username = arrayindex( regextract(_raw_log ,"User\s\'([a-zA-Z]+)\'"),0) 
    ,command_line = arrayindex( regextract(_raw_log ,"command\s\'([^\']+)\'"),0) 
    ,source_ip = arrayindex( regextract(_raw_log ,"from\s(\d+\.\d+\.\d+\.\d+)\s"),0) 
    ,source_port = arrayindex( regextract(_raw_log ,"from\s\d+\.\d+\.\d+\.\d+\sport\s(\d+)"),0) 
    ,msg_1 = arrayindex( regextract(_raw_log ,"T\d+\:\d+\:\d+\.*\d*Z\s*\w+\:\s+(.*)$"),0) 
    ,msg_2 = arrayindex( regextract(_raw_log ,"T\d+\:\d+\:\d+\.*\d*Z\|\s[a-zA-Z0-9\-\_]+\|\s\w+\:\s*(.*)"),0)
    , msg_3 = arrayindex(regextract(_raw_log ,"line \d+\:(.*)$"),0)
| alter msg = coalesce(msg_1, msg_2 )
| alter path_1 = arrayindex( regextract(_raw_log ,"path\:\s*(\S+)"),0)
    ,path_2 = arrayindex( regextract(_raw_log ,"on\s(\/\S+)"),0)
| alter path = coalesce(path_1 , path_2 )
    ,mac_address = arrayindex( regextract(_raw_log , "MAC Address:\s([a-zA-Z0-9]+\:[a-zA-Z0-9]+\:[a-zA-Z0-9]+\:[a-zA-Z0-9]+\:[a-zA-Z0-9]+\:[a-zA-Z0-9]+)"),0)
| alter xdm.event.type = event_type,
    xdm.source.user.username = username,
    xdm.target.process.command_line = command_line,
    xdm.source.ipv4 = source_ip,
    xdm.source.port = to_number(source_port),
    xdm.event.description = msg,
    xdm.target.process.executable.path = path,
    xdm.source.host.mac_addresses = arraycreate(coalesce(mac_address ,""));


[MODEL: dataset = "vmware_vcenter_raw", content_id="VMwareVCenter"]
// sps (Storage management service) events 
alter event_type = arrayindex(regextract(_raw_log, "^\<\d{1,3}\>\d+\s+\S+\s+\S+\s+(\S+)"), 0)
| filter event_type = "sps"
| alter 
    syslog_priority = to_integer(arrayindex(regextract(_raw_log, "^\<(\d{1,3})\>\S+"), 0)),
    syslog_hostname = arrayindex(regextract(_raw_log, "\<\d{1,3}\>\S+\s+\S+\s+(\S+)"), 0), 
    syslog_msg = arrayindex(regextract(_raw_log, "^\<\d{1,3}\>\d+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+(.+)"), 0)
| alter
    process_identifier = arrayindex(regextract(syslog_msg, "\[([\w-]+)\]\s+\w+\s+opId="), 0),
    thread_id = to_integer(arrayindex(regextract(syslog_msg, "thread\-(\d+)\]"), 0)),
    msg_severity = arrayindex(regextract(syslog_msg, "\[[\w-]+\]\s+(\w+)"), 0),
    operation_id = arrayindex(regextract(syslog_msg, "opId=(\S+)"), 0),
    app_component = arrayindex(regextract(syslog_msg, "opId=\S*\s+(\S+)"), 0),
    event_payload = arrayindex(regextract(syslog_msg, "opId=\S*\s+\S+\s+\-\s+(.+)"), 0)
| alter 
    // map the msg severity to RFC 5424 standard values, if the log does not include an explicit severity, extract it from the syslog header priority field   
    severity = if(msg_severity = null, to_string(subtract(syslog_priority, multiply(floor(divide(syslog_priority, 8)), 8))), msg_severity ~= "DEBUG|VERBOSE", "7", msg_severity ~= "INFO", "6", msg_severity ~= "NOTICE", "5", msg_severity ~= "WARN", "4", msg_severity ~= "ERROR", "3", msg_severity ~= "CRITICAL", "2", msg_severity ~= "ALERT", "1", msg_severity ~= "EMERGENCY", "0", msg_severity),
    datastore = arrayindex(regextract(event_payload, "datastore=(\S+)"), 0),
    duration_ms = to_integer(coalesce(arrayindex(regextract(event_payload, "took\s+(\d+)\s+millis"), 0),
                   arrayindex(regextract(event_payload, "Time\s+taken:\s+(\d+)\s+ms"), 0))),
    url = arrayindex(regextract(event_payload, "(https:\S+)"), 0)
| alter 
    port = to_integer(arrayindex(regextract(url, ":(\d+)"), 0))
| alter
    xdm.alert.severity = severity,
    xdm.event.type = event_type,
    xdm.event.description = syslog_msg,
    xdm.event.duration = duration_ms,
    xdm.event.log_level = if(severity = "0", XDM_CONST.LOG_LEVEL_EMERGENCY , severity = "1", XDM_CONST.LOG_LEVEL_ALERT , severity = "2", XDM_CONST.LOG_LEVEL_CRITICAL, severity = "3", XDM_CONST.LOG_LEVEL_ERROR, severity = "4", XDM_CONST.LOG_LEVEL_WARNING, severity = "5", XDM_CONST.LOG_LEVEL_NOTICE, severity = "6", XDM_CONST.LOG_LEVEL_INFORMATIONAL, severity = "7", XDM_CONST.LOG_LEVEL_DEBUG, severity),
    xdm.session_context_id = operation_id,
    xdm.source.application.name = app_component, 
    xdm.source.host.hostname = syslog_hostname, 
    xdm.source.process.thread_id = thread_id,
    xdm.source.process.name = event_type,
    xdm.source.process.identifier = process_identifier,  
    xdm.target.port = port,
    xdm.target.url = url,
    xdm.target.resource.type = if(datastore != null, "datastore"),
    xdm.target.resource.value = datastore;

// vpxd-svcs-perf events 
alter event_type = arrayindex(regextract(_raw_log, "^\<\d{1,3}\>\d+\s+\S+\s+\S+\s+(\S+)"), 0)
| filter event_type = "vpxd-svcs-perf"
| alter 
    syslog_priority = to_integer(arrayindex(regextract(_raw_log, "^\<(\d{1,3})\>\S+"), 0)),
    syslog_hostname = arrayindex(regextract(_raw_log, "\<\d{1,3}\>\S+\s+\S+\s+(\S+)"), 0), 
    syslog_msg = arrayindex(regextract(_raw_log, "^\<\d{1,3}\>\d+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+(.+)"), 0)
| alter 
    process_identifier = arrayindex(regextract(syslog_msg, "\w+\s+\[(\S+)"), 0),
    thread_id = to_integer(arrayindex(regextract(syslog_msg, "pool\-\d+\-thread\-(\d+)"), 0)),
    msg_severity = arrayindex(regextract(syslog_msg, "(\w+)\s+\S+\s+opId="), 0),
    app_component = arrayindex(regextract(syslog_msg, "\w+\s+(\S+)\s+opId="), 0),
    operation_id = arrayindex(regextract(syslog_msg, "opId=([^\]]+)"), 0),
    operation = arrayindex(regextract(syslog_msg, "Operation (\S+) took"), 0), 
    event_payload = arrayindex(regextract(syslog_msg, "opId=\S*\]\s+(.+)"), 0), 
    duration_ms = to_integer(arrayindex(regextract(syslog_msg, "took\s+(\d+)\s+ms"), 0)) 
| alter // map the msg severity to RFC 5424 standard values, if the log does not include an explicit severity, extract it from the syslog header priority field 
    severity = if(msg_severity = null, to_string(subtract(syslog_priority, multiply(floor(divide(syslog_priority, 8)), 8))), msg_severity ~= "DEBUG|VERBOSE", "7", msg_severity ~= "INFO", "6", msg_severity ~= "NOTICE", "5", msg_severity ~= "WARN", "4", msg_severity ~= "ERROR", "3", msg_severity ~= "CRITICAL", "2", msg_severity ~= "ALERT", "1", msg_severity ~= "EMERGENCY", "0", msg_severity)
| alter
    xdm.alert.severity = severity,
    xdm.event.type = event_type,
    xdm.event.description = syslog_msg,
    xdm.event.operation_sub_type = operation, 
    xdm.event.duration = duration_ms,
    xdm.event.log_level = if(severity = "0", XDM_CONST.LOG_LEVEL_EMERGENCY , severity = "1", XDM_CONST.LOG_LEVEL_ALERT , severity = "2", XDM_CONST.LOG_LEVEL_CRITICAL, severity = "3", XDM_CONST.LOG_LEVEL_ERROR, severity = "4", XDM_CONST.LOG_LEVEL_WARNING, severity = "5", XDM_CONST.LOG_LEVEL_NOTICE, severity = "6", XDM_CONST.LOG_LEVEL_INFORMATIONAL, severity = "7", XDM_CONST.LOG_LEVEL_DEBUG, severity),
    xdm.network.application_protocol = if(event_payload ~= "LDAP", "LDAP"),
    xdm.network.ldap.operation = if(event_payload ~= "Requesting LDAP connection", XDM_CONST.LDAP_OPERATION_BIND_REQUEST), 
    xdm.session_context_id = operation_id,
    xdm.source.process.thread_id = thread_id,
    xdm.source.process.name = event_type,
    xdm.source.process.identifier = process_identifier,
    xdm.source.application.name = app_component, 
    xdm.source.host.hostname = syslog_hostname;

// vpxd-main (VMware vCenter-Services), vsan-health-main (virtual storage area network health service) & vum-vmacore (vSphere Update Manager) events 
alter event_type = arrayindex(regextract(_raw_log, "^\<\d{1,3}\>\d+\s+\S+\s+\S+\s+(\S+)"), 0)
| filter event_type in( "vsan-health-main", "vpxd-main", "vum-vmacore", "StatsMonitor", "vdtc-main")
| alter 
    syslog_priority = to_integer(arrayindex(regextract(_raw_log, "^\<(\d{1,3})\>\S+"), 0)),
    syslog_hostname = arrayindex(regextract(_raw_log, "\<\d{1,3}\>\S+\s+\S+\s+(\S+)"), 0), 
    syslog_msg = arrayindex(regextract(_raw_log, "^\<\d{1,3}\>\d+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+(.+)"), 0)
| alter
    msg_severity = uppercase(arrayindex(regextract(syslog_msg, "(\w+)\s+[\w-]+\[\d+"), 0)),
    pid = to_integer(arrayindex(regextract(syslog_msg, "[\w-]+\[(\d+)\]"), 0)),
    operation_id = arrayindex(regextract(syslog_msg, "opI[dD]=([\w-]+)"), 0),
    sub_module = arrayindex(regextract(syslog_msg, "sub=([\w-]+)"), 0),
    user = coalesce(arrayindex(regextract(syslog_msg, "GetUserInfo\w+\(([^,]+)"), 0), arrayindex(regextract(syslog_msg, "user:\s*(\S+)"), 0)),
    http_response_code = arrayindex(regextract(syslog_msg, "code:\s+(\d+)"), 0),
    event_payload = coalesce(arrayindex(regextract(syslog_msg, "\w+=\S+\]\s+(.+)"), 0), trim(arrayindex(regextract(syslog_msg, "v\[\d+\]\s+\[.+?\]\s+(.+)"), 0), "--"), syslog_msg )
| alter 
    // map the msg severity to RFC 5424 standard values, if the log does not include an explicit severity, extract it from the syslog header priority field   
    severity = if(msg_severity = null, to_string(subtract(syslog_priority, multiply(floor(divide(syslog_priority, 8)), 8))), msg_severity ~= "DEBUG|VERBOSE", "7", msg_severity ~= "INFO", "6", msg_severity ~= "NOTICE", "5", msg_severity ~= "WARN", "4", msg_severity ~= "ERROR", "3", msg_severity ~= "CRITICAL", "2", msg_severity ~= "ALERT", "1", msg_severity ~= "EMERGENCY", "0", msg_severity),
    session_id = coalesce(arrayindex(regextract(event_payload, "session[\:\s\[\<]*([a-fA-F\d\-]{8,})"), 0), arrayindex(regextract(event_payload, "--\s+([a-fA-F\d-]{8,})"), 0))
| alter
    xdm.alert.severity = severity,
    xdm.event.type = event_type,
    xdm.event.description = syslog_msg,
    xdm.event.log_level = if(severity = "0", XDM_CONST.LOG_LEVEL_EMERGENCY , severity = "1", XDM_CONST.LOG_LEVEL_ALERT , severity = "2", XDM_CONST.LOG_LEVEL_CRITICAL, severity = "3", XDM_CONST.LOG_LEVEL_ERROR, severity = "4", XDM_CONST.LOG_LEVEL_WARNING, severity = "5", XDM_CONST.LOG_LEVEL_NOTICE, severity = "6", XDM_CONST.LOG_LEVEL_INFORMATIONAL, severity = "7", XDM_CONST.LOG_LEVEL_DEBUG, severity),
    xdm.network.session_id = session_id,
    xdm.network.http.response_code = if(http_response_code = "100", XDM_CONST.HTTP_RSP_CODE_CONTINUE, http_response_code = "101", XDM_CONST.HTTP_RSP_CODE_SWITCHING_PROTOCOLS, http_response_code = "102", XDM_CONST.HTTP_RSP_CODE_PROCESSING, http_response_code = "103", XDM_CONST.HTTP_RSP_CODE_EARLY_HINTS, http_response_code = "200", XDM_CONST.HTTP_RSP_CODE_OK, http_response_code = "201", XDM_CONST.HTTP_RSP_CODE_CREATED, http_response_code = "202", XDM_CONST.HTTP_RSP_CODE_ACCEPTED, http_response_code = "203", XDM_CONST.HTTP_RSP_CODE_NON__AUTHORITATIVE_INFORMATION, http_response_code = "204", XDM_CONST.HTTP_RSP_CODE_NO_CONTENT, http_response_code = "205", XDM_CONST.HTTP_RSP_CODE_RESET_CONTENT, http_response_code = "206", XDM_CONST.HTTP_RSP_CODE_PARTIAL_CONTENT, http_response_code = "207", XDM_CONST.HTTP_RSP_CODE_MULTI__STATUS, http_response_code = "208", XDM_CONST.HTTP_RSP_CODE_ALREADY_REPORTED, http_response_code = "226", XDM_CONST.HTTP_RSP_CODE_IM_USED, http_response_code = "300", XDM_CONST.HTTP_RSP_CODE_MULTIPLE_CHOICES, http_response_code = "301", XDM_CONST.HTTP_RSP_CODE_MOVED_PERMANENTLY, http_response_code = "302", XDM_CONST.HTTP_RSP_CODE_FOUND, http_response_code = "303", XDM_CONST.HTTP_RSP_CODE_SEE_OTHER, http_response_code = "304", XDM_CONST.HTTP_RSP_CODE_NOT_MODIFIED, http_response_code = "305", XDM_CONST.HTTP_RSP_CODE_USE_PROXY, http_response_code = "307", XDM_CONST.HTTP_RSP_CODE_TEMPORARY_REDIRECT, http_response_code = "308", XDM_CONST.HTTP_RSP_CODE_PERMANENT_REDIRECT, http_response_code = "400", XDM_CONST.HTTP_RSP_CODE_BAD_REQUEST, http_response_code = "401", XDM_CONST.HTTP_RSP_CODE_UNAUTHORIZED, http_response_code = "402", XDM_CONST.HTTP_RSP_CODE_PAYMENT_REQUIRED, http_response_code = "403", XDM_CONST.HTTP_RSP_CODE_FORBIDDEN, http_response_code = "404", XDM_CONST.HTTP_RSP_CODE_NOT_FOUND, http_response_code = "405", XDM_CONST.HTTP_RSP_CODE_METHOD_NOT_ALLOWED, http_response_code = "406", XDM_CONST.HTTP_RSP_CODE_NOT_ACCEPTABLE, http_response_code = "407", XDM_CONST.HTTP_RSP_CODE_PROXY_AUTHENTICATION_REQUIRED, http_response_code = "408", XDM_CONST.HTTP_RSP_CODE_REQUEST_TIMEOUT, http_response_code = "409", XDM_CONST.HTTP_RSP_CODE_CONFLICT, http_response_code = "410", XDM_CONST.HTTP_RSP_CODE_GONE, http_response_code = "411", XDM_CONST.HTTP_RSP_CODE_LENGTH_REQUIRED, http_response_code = "412", XDM_CONST.HTTP_RSP_CODE_PRECONDITION_FAILED, http_response_code = "413", XDM_CONST.HTTP_RSP_CODE_CONTENT_TOO_LARGE, http_response_code = "414", XDM_CONST.HTTP_RSP_CODE_URI_TOO_LONG, http_response_code = "415", XDM_CONST.HTTP_RSP_CODE_UNSUPPORTED_MEDIA_TYPE, http_response_code = "416", XDM_CONST.HTTP_RSP_CODE_RANGE_NOT_SATISFIABLE, http_response_code = "417", XDM_CONST.HTTP_RSP_CODE_EXPECTATION_FAILED, http_response_code = "421", XDM_CONST.HTTP_RSP_CODE_MISDIRECTED_REQUEST, http_response_code = "422", XDM_CONST.HTTP_RSP_CODE_UNPROCESSABLE_CONTENT, http_response_code = "423", XDM_CONST.HTTP_RSP_CODE_LOCKED, http_response_code = "424", XDM_CONST.HTTP_RSP_CODE_FAILED_DEPENDENCY, http_response_code = "425", XDM_CONST.HTTP_RSP_CODE_TOO_EARLY, http_response_code = "426", XDM_CONST.HTTP_RSP_CODE_UPGRADE_REQUIRED, http_response_code = "428", XDM_CONST.HTTP_RSP_CODE_PRECONDITION_REQUIRED, http_response_code = "429", XDM_CONST.HTTP_RSP_CODE_TOO_MANY_REQUESTS, http_response_code = "431", XDM_CONST.HTTP_RSP_CODE_REQUEST_HEADER_FIELDS_TOO_LARGE, http_response_code = "451", XDM_CONST.HTTP_RSP_CODE_UNAVAILABLE_FOR_LEGAL_REASONS, http_response_code = "500", XDM_CONST.HTTP_RSP_CODE_INTERNAL_SERVER_ERROR, http_response_code = "501", XDM_CONST.HTTP_RSP_CODE_NOT_IMPLEMENTED, http_response_code = "502", XDM_CONST.HTTP_RSP_CODE_BAD_GATEWAY, http_response_code = "503", XDM_CONST.HTTP_RSP_CODE_SERVICE_UNAVAILABLE, http_response_code = "504", XDM_CONST.HTTP_RSP_CODE_GATEWAY_TIMEOUT, http_response_code = "505", XDM_CONST.HTTP_RSP_CODE_HTTP_VERSION_NOT_SUPPORTED, http_response_code = "506", XDM_CONST.HTTP_RSP_CODE_VARIANT_ALSO_NEGOTIATES, http_response_code = "507", XDM_CONST.HTTP_RSP_CODE_INSUFFICIENT_STORAGE, http_response_code = "508", XDM_CONST.HTTP_RSP_CODE_LOOP_DETECTED, http_response_code = "511", XDM_CONST.HTTP_RSP_CODE_NETWORK_AUTHENTICATION_REQUIRED, http_response_code = null, null, to_string(http_response_code)),
    xdm.session_context_id = operation_id, 
    xdm.source.user.username = user, 
    xdm.source.process.pid = pid, 
    xdm.source.process.name = event_type,
    xdm.source.application.name = sub_module, 
    xdm.source.host.hostname = syslog_hostname;

// dnsmasq events 
alter event_type = arrayindex(regextract(_raw_log, "^\<\d{1,3}\>\d+\s+\S+\s+\S+\s+(\S+)"), 0)
| filter event_type = "dnsmasq"
| alter 
    syslog_priority = to_integer(arrayindex(regextract(_raw_log, "^\<(\d{1,3})\>\S+"), 0)),
    syslog_hostname = arrayindex(regextract(_raw_log, "\<\d{1,3}\>\S+\s+\S+\s+(\S+)"), 0), 
    syslog_msg = arrayindex(regextract(_raw_log, "^\<\d{1,3}\>\d+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+(.+)"), 0)
| alter
    pid = to_integer(arrayindex(regextract(syslog_msg, "[\w-]+\[(\d+)\]"), 0)),
    event_payload = arrayindex(regextract(syslog_msg, "dnsmasq\[\d+\]:\s+(.+)"), 0)
| alter 
    // extract the severity from the syslog header priority field   
    severity = to_string(subtract(syslog_priority, multiply(floor(divide(syslog_priority, 8)), 8))),
    dns_event_fields = regextract(event_payload, "(\S+)")
| alter 
    dns_operation = arrayindex(dns_event_fields, 0),
    dns_record_name = arrayindex(dns_event_fields, 1),
    dns_direction_context = arrayindex(dns_event_fields, 2),
    dns_record_value = arrayindex(dns_event_fields, 3)
| alter 
    dns_query_type = arrayindex(regextract(dns_operation, "query\[([^\]]+)"), 0),
    dns_client_ipv4 = if(dns_direction_context = "from" and dns_record_value ~= "\d+\.", dns_record_value),
    dns_client_ipv6 = if(dns_direction_context = "from" and dns_record_value ~= "[\da-fA-F]+:", dns_record_value),
    dns_forwarder_ipv4 = if(dns_operation = "forwarded" and dns_record_value ~= "\d+\.", dns_record_value),
    dns_forwarder_ipv6 = if(dns_operation = "forwarded" and dns_record_value ~= "[\da-fA-F]+:", dns_record_value)
| alter 
    xdm.alert.severity = severity,
    xdm.event.type = event_type,
    xdm.event.description = syslog_msg,
    xdm.event.operation_sub_type = dns_operation, 
    xdm.event.log_level = if(severity = "0", XDM_CONST.LOG_LEVEL_EMERGENCY , severity = "1", XDM_CONST.LOG_LEVEL_ALERT , severity = "2", XDM_CONST.LOG_LEVEL_CRITICAL, severity = "3", XDM_CONST.LOG_LEVEL_ERROR, severity = "4", XDM_CONST.LOG_LEVEL_WARNING, severity = "5", XDM_CONST.LOG_LEVEL_NOTICE, severity = "6", XDM_CONST.LOG_LEVEL_INFORMATIONAL, severity = "7", XDM_CONST.LOG_LEVEL_DEBUG, severity),
    xdm.intermediate.ipv4 = dns_forwarder_ipv4, 
    xdm.intermediate.ipv6 = dns_forwarder_ipv6,
    xdm.network.application_protocol = "DNS",
    xdm.network.dns.dns_resource_record.type = if(dns_record_value ~= "CNAME", XDM_CONST.DNS_RECORD_TYPE_CNAME), 
    xdm.network.dns.dns_resource_record.name = dns_record_name, 
    xdm.network.dns.dns_resource_record.value = if(dns_direction_context = "is", dns_record_value), 
    xdm.network.dns.dns_question.type = if(dns_query_type="A",XDM_CONST.DNS_RECORD_TYPE_A, dns_query_type="AAAA",XDM_CONST.DNS_RECORD_TYPE_AAAA, dns_query_type="AFSDB",XDM_CONST.DNS_RECORD_TYPE_AFSDB, dns_query_type="APL",XDM_CONST.DNS_RECORD_TYPE_APL, dns_query_type="CAA",XDM_CONST.DNS_RECORD_TYPE_CAA, dns_query_type="CDNSKEY",XDM_CONST.DNS_RECORD_TYPE_CDNSKEY, dns_query_type="CDS",XDM_CONST.DNS_RECORD_TYPE_CDS, dns_query_type="CERT",XDM_CONST.DNS_RECORD_TYPE_CERT, dns_query_type="CNAME",XDM_CONST.DNS_RECORD_TYPE_CNAME, dns_query_type="CSYNC",XDM_CONST.DNS_RECORD_TYPE_CSYNC, dns_query_type="DHCID",XDM_CONST.DNS_RECORD_TYPE_DHCID, dns_query_type="DLV",XDM_CONST.DNS_RECORD_TYPE_DLV, dns_query_type="DNAME",XDM_CONST.DNS_RECORD_TYPE_DNAME, dns_query_type="DNSKEY",XDM_CONST.DNS_RECORD_TYPE_DNSKEY, dns_query_type="DS",XDM_CONST.DNS_RECORD_TYPE_DS, dns_query_type="EUI48",XDM_CONST.DNS_RECORD_TYPE_EUI48, dns_query_type="EUI64",XDM_CONST.DNS_RECORD_TYPE_EUI64, dns_query_type="HINFO",XDM_CONST.DNS_RECORD_TYPE_HINFO, dns_query_type="HIP",XDM_CONST.DNS_RECORD_TYPE_HIP, dns_query_type="HTTPS",XDM_CONST.DNS_RECORD_TYPE_HTTPS, dns_query_type="IPSECKEY",XDM_CONST.DNS_RECORD_TYPE_IPSECKEY, dns_query_type="KEY",XDM_CONST.DNS_RECORD_TYPE_KEY, dns_query_type="KX",XDM_CONST.DNS_RECORD_TYPE_KX, dns_query_type="LOC",XDM_CONST.DNS_RECORD_TYPE_LOC, dns_query_type="MX",XDM_CONST.DNS_RECORD_TYPE_MX, dns_query_type="NAPTR",XDM_CONST.DNS_RECORD_TYPE_NAPTR, dns_query_type="NS",XDM_CONST.DNS_RECORD_TYPE_NS, dns_query_type="NSEC",XDM_CONST.DNS_RECORD_TYPE_NSEC, dns_query_type="NSEC3",XDM_CONST.DNS_RECORD_TYPE_NSEC3, dns_query_type="NSEC3PARAM",XDM_CONST.DNS_RECORD_TYPE_NSEC3PARAM, dns_query_type="OPENPGPKEY",XDM_CONST.DNS_RECORD_TYPE_OPENPGPKEY, dns_query_type="PTR",XDM_CONST.DNS_RECORD_TYPE_PTR, dns_query_type="RRSIG",XDM_CONST.DNS_RECORD_TYPE_RRSIG, dns_query_type="RP",XDM_CONST.DNS_RECORD_TYPE_RP, dns_query_type="SIG",XDM_CONST.DNS_RECORD_TYPE_SIG, dns_query_type="SMIMEA",XDM_CONST.DNS_RECORD_TYPE_SMIMEA, dns_query_type="SOA",XDM_CONST.DNS_RECORD_TYPE_SOA, dns_query_type="SRV",XDM_CONST.DNS_RECORD_TYPE_SRV, dns_query_type="SSHFP",XDM_CONST.DNS_RECORD_TYPE_SSHFP, dns_query_type="SVCB",XDM_CONST.DNS_RECORD_TYPE_SVCB, dns_query_type="TA",XDM_CONST.DNS_RECORD_TYPE_TA, dns_query_type="TKEY",XDM_CONST.DNS_RECORD_TYPE_TKEY, dns_query_type="TLSA",XDM_CONST.DNS_RECORD_TYPE_TLSA, dns_query_type="TSIG",XDM_CONST.DNS_RECORD_TYPE_TSIG, dns_query_type="TXT",XDM_CONST.DNS_RECORD_TYPE_TXT, dns_query_type="URI",XDM_CONST.DNS_RECORD_TYPE_URI, dns_query_type="ZONEMD",XDM_CONST.DNS_RECORD_TYPE_ZONEMD, to_string(dns_query_type)),
    xdm.source.process.pid = pid, 
    xdm.source.process.name = event_type,
    xdm.source.ipv4 = dns_client_ipv4, 
    xdm.source.ipv6 = dns_client_ipv6,
    xdm.source.host.hostname = syslog_hostname;

// analytics events 
alter event_type = arrayindex(regextract(_raw_log, "^\<\d{1,3}\>\d+\s+\S+\s+\S+\s+(\S+)"), 0)
| filter event_type = "analytics"
| alter 
    syslog_priority = to_integer(arrayindex(regextract(_raw_log, "^\<(\d{1,3})\>\S+"), 0)),
    syslog_hostname = arrayindex(regextract(_raw_log, "\<\d{1,3}\>\S+\s+\S+\s+(\S+)"), 0), 
    syslog_msg = arrayindex(regextract(_raw_log, "^\<\d{1,3}\>\d+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+(.+)"), 0)
| alter 
    msg_internal_header =  arrayfilter(split(arrayindex(regextract(syslog_msg, "(\d{4}\-\S+\s+\S+\s+\S+\s+\S+)"), 0)), len("@element") > 0),
    event_payload = arrayindex(regextract(syslog_msg, "\d{4}\-\S+\s+\S+\s+\S+\s+\S+(.+)"), 0),
    json_payload = arrayindex(regextract(syslog_msg, "\-\-\>(\{.+\})"), 0)
| alter 
    // internal header fields 
    thread_identifier = arrayindex(msg_internal_header, 1),
    msg_severity = uppercase(arrayindex(msg_internal_header, 2)), 
    application_component_class = arrayindex(msg_internal_header, 3)
| alter 
    // payload fields 
    target_url =  arrayindex(regextract(event_payload, "(https?\S+)"), 0), 
    collectorID = coalesce(arrayindex(regextract(event_payload, "collectorId[:=]([\w\.\-]+\w)"), 0), arrayindex(regextract(event_payload, "spec\s+for\s+([\w\.\-]+\w)"), 0)),
    collectorInstanceID = arrayindex(regextract(event_payload, "[iI]nstanceId[:=]([\w\.\-]+)"), 0),
    trust_store_path = arrayindex(regextract(event_payload, "trust\s+store\s+at\s+path:\s+(\S+)"), 0),
    reason = coalesce(arrayindex(regextract(event_payload, "Reason\:\s*(\S{3}.+)"), 0), arrayindex(regextract(event_payload, "The\s+reason[^\:]+\:(.+);"), 0)),
    // map the msg severity to RFC 5424 standard values, if the log does not include an explicit severity, extract it from the syslog header priority field   
    severity = if(msg_severity = null, to_string(subtract(syslog_priority, multiply(floor(divide(syslog_priority, 8)), 8))), msg_severity ~= "DEBUG|VERBOSE", "7", msg_severity ~= "INFO", "6", msg_severity ~= "NOTICE", "5", msg_severity ~= "WARN", "4", msg_severity ~= "ERROR", "3", msg_severity ~= "CRITICAL", "2", msg_severity ~= "ALERT", "1", msg_severity ~= "EMERGENCY", "0", msg_severity),
    http_response_code = json_payload -> status, // for json payloads 
    api_endpoint_path = json_payload -> path // for json payloads 
| alter
    xdm.alert.severity = severity,
    xdm.event.type = event_type,
    xdm.event.description = coalesce(json_payload, syslog_msg),
    xdm.event.outcome = if(event_payload ~= "fail", XDM_CONST.OUTCOME_FAILED),
    xdm.event.outcome_reason = reason,
    xdm.event.log_level = if(severity = "0", XDM_CONST.LOG_LEVEL_EMERGENCY , severity = "1", XDM_CONST.LOG_LEVEL_ALERT , severity = "2", XDM_CONST.LOG_LEVEL_CRITICAL, severity = "3", XDM_CONST.LOG_LEVEL_ERROR, severity = "4", XDM_CONST.LOG_LEVEL_WARNING, severity = "5", XDM_CONST.LOG_LEVEL_NOTICE, severity = "6", XDM_CONST.LOG_LEVEL_INFORMATIONAL, severity = "7", XDM_CONST.LOG_LEVEL_DEBUG, severity),
    xdm.network.http.url = coalesce(target_url, api_endpoint_path),
    xdm.network.http.response_code = if(http_response_code = "100", XDM_CONST.HTTP_RSP_CODE_CONTINUE, http_response_code = "101", XDM_CONST.HTTP_RSP_CODE_SWITCHING_PROTOCOLS, http_response_code = "102", XDM_CONST.HTTP_RSP_CODE_PROCESSING, http_response_code = "103", XDM_CONST.HTTP_RSP_CODE_EARLY_HINTS, http_response_code = "200", XDM_CONST.HTTP_RSP_CODE_OK, http_response_code = "201", XDM_CONST.HTTP_RSP_CODE_CREATED, http_response_code = "202", XDM_CONST.HTTP_RSP_CODE_ACCEPTED, http_response_code = "203", XDM_CONST.HTTP_RSP_CODE_NON__AUTHORITATIVE_INFORMATION, http_response_code = "204", XDM_CONST.HTTP_RSP_CODE_NO_CONTENT, http_response_code = "205", XDM_CONST.HTTP_RSP_CODE_RESET_CONTENT, http_response_code = "206", XDM_CONST.HTTP_RSP_CODE_PARTIAL_CONTENT, http_response_code = "207", XDM_CONST.HTTP_RSP_CODE_MULTI__STATUS, http_response_code = "208", XDM_CONST.HTTP_RSP_CODE_ALREADY_REPORTED, http_response_code = "226", XDM_CONST.HTTP_RSP_CODE_IM_USED, http_response_code = "300", XDM_CONST.HTTP_RSP_CODE_MULTIPLE_CHOICES, http_response_code = "301", XDM_CONST.HTTP_RSP_CODE_MOVED_PERMANENTLY, http_response_code = "302", XDM_CONST.HTTP_RSP_CODE_FOUND, http_response_code = "303", XDM_CONST.HTTP_RSP_CODE_SEE_OTHER, http_response_code = "304", XDM_CONST.HTTP_RSP_CODE_NOT_MODIFIED, http_response_code = "305", XDM_CONST.HTTP_RSP_CODE_USE_PROXY, http_response_code = "307", XDM_CONST.HTTP_RSP_CODE_TEMPORARY_REDIRECT, http_response_code = "308", XDM_CONST.HTTP_RSP_CODE_PERMANENT_REDIRECT, http_response_code = "400", XDM_CONST.HTTP_RSP_CODE_BAD_REQUEST, http_response_code = "401", XDM_CONST.HTTP_RSP_CODE_UNAUTHORIZED, http_response_code = "402", XDM_CONST.HTTP_RSP_CODE_PAYMENT_REQUIRED, http_response_code = "403", XDM_CONST.HTTP_RSP_CODE_FORBIDDEN, http_response_code = "404", XDM_CONST.HTTP_RSP_CODE_NOT_FOUND, http_response_code = "405", XDM_CONST.HTTP_RSP_CODE_METHOD_NOT_ALLOWED, http_response_code = "406", XDM_CONST.HTTP_RSP_CODE_NOT_ACCEPTABLE, http_response_code = "407", XDM_CONST.HTTP_RSP_CODE_PROXY_AUTHENTICATION_REQUIRED, http_response_code = "408", XDM_CONST.HTTP_RSP_CODE_REQUEST_TIMEOUT, http_response_code = "409", XDM_CONST.HTTP_RSP_CODE_CONFLICT, http_response_code = "410", XDM_CONST.HTTP_RSP_CODE_GONE, http_response_code = "411", XDM_CONST.HTTP_RSP_CODE_LENGTH_REQUIRED, http_response_code = "412", XDM_CONST.HTTP_RSP_CODE_PRECONDITION_FAILED, http_response_code = "413", XDM_CONST.HTTP_RSP_CODE_CONTENT_TOO_LARGE, http_response_code = "414", XDM_CONST.HTTP_RSP_CODE_URI_TOO_LONG, http_response_code = "415", XDM_CONST.HTTP_RSP_CODE_UNSUPPORTED_MEDIA_TYPE, http_response_code = "416", XDM_CONST.HTTP_RSP_CODE_RANGE_NOT_SATISFIABLE, http_response_code = "417", XDM_CONST.HTTP_RSP_CODE_EXPECTATION_FAILED, http_response_code = "421", XDM_CONST.HTTP_RSP_CODE_MISDIRECTED_REQUEST, http_response_code = "422", XDM_CONST.HTTP_RSP_CODE_UNPROCESSABLE_CONTENT, http_response_code = "423", XDM_CONST.HTTP_RSP_CODE_LOCKED, http_response_code = "424", XDM_CONST.HTTP_RSP_CODE_FAILED_DEPENDENCY, http_response_code = "425", XDM_CONST.HTTP_RSP_CODE_TOO_EARLY, http_response_code = "426", XDM_CONST.HTTP_RSP_CODE_UPGRADE_REQUIRED, http_response_code = "428", XDM_CONST.HTTP_RSP_CODE_PRECONDITION_REQUIRED, http_response_code = "429", XDM_CONST.HTTP_RSP_CODE_TOO_MANY_REQUESTS, http_response_code = "431", XDM_CONST.HTTP_RSP_CODE_REQUEST_HEADER_FIELDS_TOO_LARGE, http_response_code = "451", XDM_CONST.HTTP_RSP_CODE_UNAVAILABLE_FOR_LEGAL_REASONS, http_response_code = "500", XDM_CONST.HTTP_RSP_CODE_INTERNAL_SERVER_ERROR, http_response_code = "501", XDM_CONST.HTTP_RSP_CODE_NOT_IMPLEMENTED, http_response_code = "502", XDM_CONST.HTTP_RSP_CODE_BAD_GATEWAY, http_response_code = "503", XDM_CONST.HTTP_RSP_CODE_SERVICE_UNAVAILABLE, http_response_code = "504", XDM_CONST.HTTP_RSP_CODE_GATEWAY_TIMEOUT, http_response_code = "505", XDM_CONST.HTTP_RSP_CODE_HTTP_VERSION_NOT_SUPPORTED, http_response_code = "506", XDM_CONST.HTTP_RSP_CODE_VARIANT_ALSO_NEGOTIATES, http_response_code = "507", XDM_CONST.HTTP_RSP_CODE_INSUFFICIENT_STORAGE, http_response_code = "508", XDM_CONST.HTTP_RSP_CODE_LOOP_DETECTED, http_response_code = "511", XDM_CONST.HTTP_RSP_CODE_NETWORK_AUTHENTICATION_REQUIRED, http_response_code = null, null, to_string(http_response_code)), 
    xdm.observer.name = collectorID,
    xdm.observer.unique_identifier = collectorInstanceID,
    xdm.source.process.identifier = thread_identifier,
    xdm.source.process.name = event_type,
    xdm.source.application.name = application_component_class, 
    xdm.source.host.hostname = syslog_hostname,
    xdm.target.resource.type = if(trust_store_path != null, "Trust Store Path"),
    xdm.target.resource.value = trust_store_path;

// eam-access (VMware ESX Agent Manager Access) events 
alter event_type = arrayindex(regextract(_raw_log, "^\<\d{1,3}\>\d+\s+\S+\s+\S+\s+(\S+)"), 0)
| filter event_type = "eam-access"
| alter 
    syslog_priority = to_integer(arrayindex(regextract(_raw_log, "^\<(\d{1,3})\>\S+"), 0)),
    syslog_hostname = arrayindex(regextract(_raw_log, "\<\d{1,3}\>\S+\s+\S+\s+(\S+)"), 0), 
    syslog_msg = arrayindex(regextract(_raw_log, "^\<\d{1,3}\>\d+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+(.+)"), 0)
| alter tomcat_access_log_fields = arrayindex(regextract(syslog_msg, "(\".+)"), 0)
| alter 
    client_remote_machine = arrayindex(regextract(syslog_msg, "\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}"), 0),
    server_local_address = arrayindex(regextract(syslog_msg, "\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}"), 1),
    thread_identifier = arrayindex(regextract(syslog_msg, "\[(\S+)\]"), 0),
    http_method = arrayindex(regextract(tomcat_access_log_fields, "\"(\w+)"), 0),
    uri = arrayindex(regextract(tomcat_access_log_fields, "\"\w+\s+(\S+)"), 0),
    http_response_code = arrayindex(regextract(tomcat_access_log_fields, "\"\s+(\d+)"), 0),
    bytes_sent = to_number(arrayindex(regextract(tomcat_access_log_fields, "\d+\s+(\d+)"), 0)),
    process_time_ms = to_integer(arrayindex(regextract(_raw_log, "time\s+(\d+)\s+msec"), 0)),
    user_agent = arrayindex(regextract(tomcat_access_log_fields, "\]\s+\"([^\"]+)"), 0),
    // extract the severity from the syslog header priority field   
    severity = to_string(subtract(syslog_priority, multiply(floor(divide(syslog_priority, 8)), 8)))
| alter
    xdm.alert.severity = severity,
    xdm.event.type = event_type,
    xdm.event.description = syslog_msg,
    xdm.event.duration = process_time_ms,
    xdm.event.log_level = if(severity = "0", XDM_CONST.LOG_LEVEL_EMERGENCY , severity = "1", XDM_CONST.LOG_LEVEL_ALERT , severity = "2", XDM_CONST.LOG_LEVEL_CRITICAL, severity = "3", XDM_CONST.LOG_LEVEL_ERROR, severity = "4", XDM_CONST.LOG_LEVEL_WARNING, severity = "5", XDM_CONST.LOG_LEVEL_NOTICE, severity = "6", XDM_CONST.LOG_LEVEL_INFORMATIONAL, severity = "7", XDM_CONST.LOG_LEVEL_DEBUG, severity),
    xdm.network.http.url = uri, 
    xdm.network.http.method = if(http_method = "ACL", XDM_CONST.HTTP_METHOD_ACL, http_method = "BASELINE_CONTROL", XDM_CONST.HTTP_METHOD_BASELINE_CONTROL, http_method = "BIND", XDM_CONST.HTTP_METHOD_BIND, http_method = "CHECKIN", XDM_CONST.HTTP_METHOD_CHECKIN, http_method = "CHECKOUT", XDM_CONST.HTTP_METHOD_CHECKOUT, http_method = "CONNECT", XDM_CONST.HTTP_METHOD_CONNECT, http_method = "COPY", XDM_CONST.HTTP_METHOD_COPY, http_method = "DELETE", XDM_CONST.HTTP_METHOD_DELETE, http_method = "GET", XDM_CONST.HTTP_METHOD_GET, http_method = "HEAD", XDM_CONST.HTTP_METHOD_HEAD, http_method = "LABEL", XDM_CONST.HTTP_METHOD_LABEL, http_method = "LINK", XDM_CONST.HTTP_METHOD_LINK, http_method = "LOCK", XDM_CONST.HTTP_METHOD_LOCK, http_method = "MERGE", XDM_CONST.HTTP_METHOD_MERGE, http_method = "MKACTIVITY", XDM_CONST.HTTP_METHOD_MKACTIVITY, http_method = "MKCALENDAR", XDM_CONST.HTTP_METHOD_MKCALENDAR, http_method = "MKCOL", XDM_CONST.HTTP_METHOD_MKCOL, http_method = "MKREDIRECTREF", XDM_CONST.HTTP_METHOD_MKREDIRECTREF, http_method = "MKWORKSPACE", XDM_CONST.HTTP_METHOD_MKWORKSPACE, http_method = "MOVE", XDM_CONST.HTTP_METHOD_MOVE, http_method = "OPTIONS", XDM_CONST.HTTP_METHOD_OPTIONS, http_method = "ORDERPATCH", XDM_CONST.HTTP_METHOD_ORDERPATCH, http_method = "PATCH", XDM_CONST.HTTP_METHOD_PATCH, http_method = "POST", XDM_CONST.HTTP_METHOD_POST, http_method = "PRI", XDM_CONST.HTTP_METHOD_PRI, http_method = "PROPFIND", XDM_CONST.HTTP_METHOD_PROPFIND, http_method = "PROPPATCH", XDM_CONST.HTTP_METHOD_PROPPATCH, http_method = "PUT", XDM_CONST.HTTP_METHOD_PUT, http_method = "REBIND", XDM_CONST.HTTP_METHOD_REBIND, http_method = "REPORT", XDM_CONST.HTTP_METHOD_REPORT, http_method = "SEARCH", XDM_CONST.HTTP_METHOD_SEARCH, http_method = "TRACE", XDM_CONST.HTTP_METHOD_TRACE, http_method = "UNBIND", XDM_CONST.HTTP_METHOD_UNBIND, http_method = "UNCHECKOUT", XDM_CONST.HTTP_METHOD_UNCHECKOUT, http_method = "UNLINK", XDM_CONST.HTTP_METHOD_UNLINK, http_method = "UNLOCK", XDM_CONST.HTTP_METHOD_UNLOCK, http_method = "UPDATE", XDM_CONST.HTTP_METHOD_UPDATE, http_method = "UPDATEREDIRECTREF", XDM_CONST.HTTP_METHOD_UPDATEREDIRECTREF, http_method = "VERSION_CONTROL", XDM_CONST.HTTP_METHOD_VERSION_CONTROL, to_string(http_method)),
    xdm.network.http.response_code = if(http_response_code = "100", XDM_CONST.HTTP_RSP_CODE_CONTINUE, http_response_code = "101", XDM_CONST.HTTP_RSP_CODE_SWITCHING_PROTOCOLS, http_response_code = "102", XDM_CONST.HTTP_RSP_CODE_PROCESSING, http_response_code = "103", XDM_CONST.HTTP_RSP_CODE_EARLY_HINTS, http_response_code = "200", XDM_CONST.HTTP_RSP_CODE_OK, http_response_code = "201", XDM_CONST.HTTP_RSP_CODE_CREATED, http_response_code = "202", XDM_CONST.HTTP_RSP_CODE_ACCEPTED, http_response_code = "203", XDM_CONST.HTTP_RSP_CODE_NON__AUTHORITATIVE_INFORMATION, http_response_code = "204", XDM_CONST.HTTP_RSP_CODE_NO_CONTENT, http_response_code = "205", XDM_CONST.HTTP_RSP_CODE_RESET_CONTENT, http_response_code = "206", XDM_CONST.HTTP_RSP_CODE_PARTIAL_CONTENT, http_response_code = "207", XDM_CONST.HTTP_RSP_CODE_MULTI__STATUS, http_response_code = "208", XDM_CONST.HTTP_RSP_CODE_ALREADY_REPORTED, http_response_code = "226", XDM_CONST.HTTP_RSP_CODE_IM_USED, http_response_code = "300", XDM_CONST.HTTP_RSP_CODE_MULTIPLE_CHOICES, http_response_code = "301", XDM_CONST.HTTP_RSP_CODE_MOVED_PERMANENTLY, http_response_code = "302", XDM_CONST.HTTP_RSP_CODE_FOUND, http_response_code = "303", XDM_CONST.HTTP_RSP_CODE_SEE_OTHER, http_response_code = "304", XDM_CONST.HTTP_RSP_CODE_NOT_MODIFIED, http_response_code = "305", XDM_CONST.HTTP_RSP_CODE_USE_PROXY, http_response_code = "307", XDM_CONST.HTTP_RSP_CODE_TEMPORARY_REDIRECT, http_response_code = "308", XDM_CONST.HTTP_RSP_CODE_PERMANENT_REDIRECT, http_response_code = "400", XDM_CONST.HTTP_RSP_CODE_BAD_REQUEST, http_response_code = "401", XDM_CONST.HTTP_RSP_CODE_UNAUTHORIZED, http_response_code = "402", XDM_CONST.HTTP_RSP_CODE_PAYMENT_REQUIRED, http_response_code = "403", XDM_CONST.HTTP_RSP_CODE_FORBIDDEN, http_response_code = "404", XDM_CONST.HTTP_RSP_CODE_NOT_FOUND, http_response_code = "405", XDM_CONST.HTTP_RSP_CODE_METHOD_NOT_ALLOWED, http_response_code = "406", XDM_CONST.HTTP_RSP_CODE_NOT_ACCEPTABLE, http_response_code = "407", XDM_CONST.HTTP_RSP_CODE_PROXY_AUTHENTICATION_REQUIRED, http_response_code = "408", XDM_CONST.HTTP_RSP_CODE_REQUEST_TIMEOUT, http_response_code = "409", XDM_CONST.HTTP_RSP_CODE_CONFLICT, http_response_code = "410", XDM_CONST.HTTP_RSP_CODE_GONE, http_response_code = "411", XDM_CONST.HTTP_RSP_CODE_LENGTH_REQUIRED, http_response_code = "412", XDM_CONST.HTTP_RSP_CODE_PRECONDITION_FAILED, http_response_code = "413", XDM_CONST.HTTP_RSP_CODE_CONTENT_TOO_LARGE, http_response_code = "414", XDM_CONST.HTTP_RSP_CODE_URI_TOO_LONG, http_response_code = "415", XDM_CONST.HTTP_RSP_CODE_UNSUPPORTED_MEDIA_TYPE, http_response_code = "416", XDM_CONST.HTTP_RSP_CODE_RANGE_NOT_SATISFIABLE, http_response_code = "417", XDM_CONST.HTTP_RSP_CODE_EXPECTATION_FAILED, http_response_code = "421", XDM_CONST.HTTP_RSP_CODE_MISDIRECTED_REQUEST, http_response_code = "422", XDM_CONST.HTTP_RSP_CODE_UNPROCESSABLE_CONTENT, http_response_code = "423", XDM_CONST.HTTP_RSP_CODE_LOCKED, http_response_code = "424", XDM_CONST.HTTP_RSP_CODE_FAILED_DEPENDENCY, http_response_code = "425", XDM_CONST.HTTP_RSP_CODE_TOO_EARLY, http_response_code = "426", XDM_CONST.HTTP_RSP_CODE_UPGRADE_REQUIRED, http_response_code = "428", XDM_CONST.HTTP_RSP_CODE_PRECONDITION_REQUIRED, http_response_code = "429", XDM_CONST.HTTP_RSP_CODE_TOO_MANY_REQUESTS, http_response_code = "431", XDM_CONST.HTTP_RSP_CODE_REQUEST_HEADER_FIELDS_TOO_LARGE, http_response_code = "451", XDM_CONST.HTTP_RSP_CODE_UNAVAILABLE_FOR_LEGAL_REASONS, http_response_code = "500", XDM_CONST.HTTP_RSP_CODE_INTERNAL_SERVER_ERROR, http_response_code = "501", XDM_CONST.HTTP_RSP_CODE_NOT_IMPLEMENTED, http_response_code = "502", XDM_CONST.HTTP_RSP_CODE_BAD_GATEWAY, http_response_code = "503", XDM_CONST.HTTP_RSP_CODE_SERVICE_UNAVAILABLE, http_response_code = "504", XDM_CONST.HTTP_RSP_CODE_GATEWAY_TIMEOUT, http_response_code = "505", XDM_CONST.HTTP_RSP_CODE_HTTP_VERSION_NOT_SUPPORTED, http_response_code = "506", XDM_CONST.HTTP_RSP_CODE_VARIANT_ALSO_NEGOTIATES, http_response_code = "507", XDM_CONST.HTTP_RSP_CODE_INSUFFICIENT_STORAGE, http_response_code = "508", XDM_CONST.HTTP_RSP_CODE_LOOP_DETECTED, http_response_code = "511", XDM_CONST.HTTP_RSP_CODE_NETWORK_AUTHENTICATION_REQUIRED, http_response_code = null, null, to_string(http_response_code)), 
    xdm.source.ipv4 = client_remote_machine,
    xdm.source.user_agent = user_agent, 
    xdm.source.sent_bytes = bytes_sent, 
    xdm.source.process.identifier = thread_identifier,
    xdm.source.process.name = event_type,
    xdm.source.host.hostname = syslog_hostname,
    xdm.target.resource.value = uri,
    xdm.target.ipv4 = server_local_address;

// envoy-access events 
alter event_type = arrayindex(regextract(_raw_log, "^\<\d{1,3}\>\d+\s+\S+\s+\S+\s+(\S+)"), 0)
| filter event_type = "envoy-access"
| alter 
    syslog_priority = to_integer(arrayindex(regextract(_raw_log, "^\<(\d{1,3})\>\S+"), 0)),
    syslog_hostname = arrayindex(regextract(_raw_log, "\<\d{1,3}\>\S+\s+\S+\s+(\S+)"), 0), 
    syslog_msg = arrayindex(regextract(_raw_log, "^\<\d{1,3}\>\d+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+(.+)"), 0)
| alter
    msg_severity = uppercase(arrayindex(regextract(syslog_msg, "(\w+)\s+[\w-]+\[\d+"), 0)),
    pid = to_integer(arrayindex(regextract(syslog_msg, "[\w-]+\[(\d+)\]"), 0)),
    sub_module = arrayindex(regextract(syslog_msg, "sub=([\w-]+)"), 0),
    event_payload = coalesce(arrayindex(regextract(syslog_msg, "\w+=\S+\]\s+(.+)"), 0), trim(arrayindex(regextract(syslog_msg, "v\[\d+\]\s+\[.+?\]\s+(.+)"), 0), "--"), syslog_msg )
| alter envoy_proxy_access_log_fields = regextract(event_payload, "\S+")
| alter 
    // map the msg severity to RFC 5424 standard values, if the log does not include an explicit severity, extract it from the syslog header priority field   
    severity = if(msg_severity = null, to_string(subtract(syslog_priority, multiply(floor(divide(syslog_priority, 8)), 8))), msg_severity ~= "DEBUG|VERBOSE", "7", msg_severity ~= "INFO", "6", msg_severity ~= "NOTICE", "5", msg_severity ~= "WARN", "4", msg_severity ~= "ERROR", "3", msg_severity ~= "CRITICAL", "2", msg_severity ~= "ALERT", "1", msg_severity ~= "EMERGENCY", "0", msg_severity),
    http_method = ltrim(arrayindex(envoy_proxy_access_log_fields, 1), "\""),
    uri = arrayindex(envoy_proxy_access_log_fields, 2),
    http_protocol = rtrim(arrayindex(envoy_proxy_access_log_fields, 3), "\""),
    http_response_code = arrayindex(envoy_proxy_access_log_fields, 4),
    bytes_received = to_number(arrayindex(envoy_proxy_access_log_fields, 7)),
    bytes_sent = to_number(arrayindex(envoy_proxy_access_log_fields, 8)),
    client_ip = arrayindex(regextract(arrayindex(envoy_proxy_access_log_fields, 12), "(\d+[^\:]+)"), 0),
    client_port = arrayindex(regextract(arrayindex(envoy_proxy_access_log_fields, 12), ":(\d{1,5})"), 0),
    server_ip = arrayindex(regextract(arrayindex(envoy_proxy_access_log_fields, 13), "(\d+[^\:]+)"), 0),
    server_port = arrayindex(regextract(arrayindex(envoy_proxy_access_log_fields, 13), ":(\d{1,5})"), 0),
    client2_ip = arrayindex(regextract(arrayindex(envoy_proxy_access_log_fields, 14), "(\d+[^\:]+)"), 0),
    proxy_ip = arrayindex(regextract(arrayindex(envoy_proxy_access_log_fields, 15), "(\d+[^\:]+)"), 0),
    proxy_port = to_integer(arrayindex(regextract(arrayindex(envoy_proxy_access_log_fields, 15), ":(\d{1,5})"), 0))
| alter
    xdm.alert.severity = severity,
    xdm.event.type = event_type,
    xdm.event.description = syslog_msg,
    xdm.event.log_level = if(severity = "0", XDM_CONST.LOG_LEVEL_EMERGENCY , severity = "1", XDM_CONST.LOG_LEVEL_ALERT , severity = "2", XDM_CONST.LOG_LEVEL_CRITICAL, severity = "3", XDM_CONST.LOG_LEVEL_ERROR, severity = "4", XDM_CONST.LOG_LEVEL_WARNING, severity = "5", XDM_CONST.LOG_LEVEL_NOTICE, severity = "6", XDM_CONST.LOG_LEVEL_INFORMATIONAL, severity = "7", XDM_CONST.LOG_LEVEL_DEBUG, severity),
    xdm.intermediate.ipv4 = proxy_ip, 
    xdm.intermediate.host.ipv4_addresses = arraycreate(proxy_ip),
    xdm.intermediate.port = proxy_port,
    xdm.network.application_protocol = http_protocol, 
    xdm.network.http.url = uri, 
    xdm.network.http.method = if(http_method = "ACL", XDM_CONST.HTTP_METHOD_ACL, http_method = "BASELINE_CONTROL", XDM_CONST.HTTP_METHOD_BASELINE_CONTROL, http_method = "BIND", XDM_CONST.HTTP_METHOD_BIND, http_method = "CHECKIN", XDM_CONST.HTTP_METHOD_CHECKIN, http_method = "CHECKOUT", XDM_CONST.HTTP_METHOD_CHECKOUT, http_method = "CONNECT", XDM_CONST.HTTP_METHOD_CONNECT, http_method = "COPY", XDM_CONST.HTTP_METHOD_COPY, http_method = "DELETE", XDM_CONST.HTTP_METHOD_DELETE, http_method = "GET", XDM_CONST.HTTP_METHOD_GET, http_method = "HEAD", XDM_CONST.HTTP_METHOD_HEAD, http_method = "LABEL", XDM_CONST.HTTP_METHOD_LABEL, http_method = "LINK", XDM_CONST.HTTP_METHOD_LINK, http_method = "LOCK", XDM_CONST.HTTP_METHOD_LOCK, http_method = "MERGE", XDM_CONST.HTTP_METHOD_MERGE, http_method = "MKACTIVITY", XDM_CONST.HTTP_METHOD_MKACTIVITY, http_method = "MKCALENDAR", XDM_CONST.HTTP_METHOD_MKCALENDAR, http_method = "MKCOL", XDM_CONST.HTTP_METHOD_MKCOL, http_method = "MKREDIRECTREF", XDM_CONST.HTTP_METHOD_MKREDIRECTREF, http_method = "MKWORKSPACE", XDM_CONST.HTTP_METHOD_MKWORKSPACE, http_method = "MOVE", XDM_CONST.HTTP_METHOD_MOVE, http_method = "OPTIONS", XDM_CONST.HTTP_METHOD_OPTIONS, http_method = "ORDERPATCH", XDM_CONST.HTTP_METHOD_ORDERPATCH, http_method = "PATCH", XDM_CONST.HTTP_METHOD_PATCH, http_method = "POST", XDM_CONST.HTTP_METHOD_POST, http_method = "PRI", XDM_CONST.HTTP_METHOD_PRI, http_method = "PROPFIND", XDM_CONST.HTTP_METHOD_PROPFIND, http_method = "PROPPATCH", XDM_CONST.HTTP_METHOD_PROPPATCH, http_method = "PUT", XDM_CONST.HTTP_METHOD_PUT, http_method = "REBIND", XDM_CONST.HTTP_METHOD_REBIND, http_method = "REPORT", XDM_CONST.HTTP_METHOD_REPORT, http_method = "SEARCH", XDM_CONST.HTTP_METHOD_SEARCH, http_method = "TRACE", XDM_CONST.HTTP_METHOD_TRACE, http_method = "UNBIND", XDM_CONST.HTTP_METHOD_UNBIND, http_method = "UNCHECKOUT", XDM_CONST.HTTP_METHOD_UNCHECKOUT, http_method = "UNLINK", XDM_CONST.HTTP_METHOD_UNLINK, http_method = "UNLOCK", XDM_CONST.HTTP_METHOD_UNLOCK, http_method = "UPDATE", XDM_CONST.HTTP_METHOD_UPDATE, http_method = "UPDATEREDIRECTREF", XDM_CONST.HTTP_METHOD_UPDATEREDIRECTREF, http_method = "VERSION_CONTROL", XDM_CONST.HTTP_METHOD_VERSION_CONTROL, to_string(http_method)),
    xdm.network.http.response_code = if(http_response_code = "100", XDM_CONST.HTTP_RSP_CODE_CONTINUE, http_response_code = "101", XDM_CONST.HTTP_RSP_CODE_SWITCHING_PROTOCOLS, http_response_code = "102", XDM_CONST.HTTP_RSP_CODE_PROCESSING, http_response_code = "103", XDM_CONST.HTTP_RSP_CODE_EARLY_HINTS, http_response_code = "200", XDM_CONST.HTTP_RSP_CODE_OK, http_response_code = "201", XDM_CONST.HTTP_RSP_CODE_CREATED, http_response_code = "202", XDM_CONST.HTTP_RSP_CODE_ACCEPTED, http_response_code = "203", XDM_CONST.HTTP_RSP_CODE_NON__AUTHORITATIVE_INFORMATION, http_response_code = "204", XDM_CONST.HTTP_RSP_CODE_NO_CONTENT, http_response_code = "205", XDM_CONST.HTTP_RSP_CODE_RESET_CONTENT, http_response_code = "206", XDM_CONST.HTTP_RSP_CODE_PARTIAL_CONTENT, http_response_code = "207", XDM_CONST.HTTP_RSP_CODE_MULTI__STATUS, http_response_code = "208", XDM_CONST.HTTP_RSP_CODE_ALREADY_REPORTED, http_response_code = "226", XDM_CONST.HTTP_RSP_CODE_IM_USED, http_response_code = "300", XDM_CONST.HTTP_RSP_CODE_MULTIPLE_CHOICES, http_response_code = "301", XDM_CONST.HTTP_RSP_CODE_MOVED_PERMANENTLY, http_response_code = "302", XDM_CONST.HTTP_RSP_CODE_FOUND, http_response_code = "303", XDM_CONST.HTTP_RSP_CODE_SEE_OTHER, http_response_code = "304", XDM_CONST.HTTP_RSP_CODE_NOT_MODIFIED, http_response_code = "305", XDM_CONST.HTTP_RSP_CODE_USE_PROXY, http_response_code = "307", XDM_CONST.HTTP_RSP_CODE_TEMPORARY_REDIRECT, http_response_code = "308", XDM_CONST.HTTP_RSP_CODE_PERMANENT_REDIRECT, http_response_code = "400", XDM_CONST.HTTP_RSP_CODE_BAD_REQUEST, http_response_code = "401", XDM_CONST.HTTP_RSP_CODE_UNAUTHORIZED, http_response_code = "402", XDM_CONST.HTTP_RSP_CODE_PAYMENT_REQUIRED, http_response_code = "403", XDM_CONST.HTTP_RSP_CODE_FORBIDDEN, http_response_code = "404", XDM_CONST.HTTP_RSP_CODE_NOT_FOUND, http_response_code = "405", XDM_CONST.HTTP_RSP_CODE_METHOD_NOT_ALLOWED, http_response_code = "406", XDM_CONST.HTTP_RSP_CODE_NOT_ACCEPTABLE, http_response_code = "407", XDM_CONST.HTTP_RSP_CODE_PROXY_AUTHENTICATION_REQUIRED, http_response_code = "408", XDM_CONST.HTTP_RSP_CODE_REQUEST_TIMEOUT, http_response_code = "409", XDM_CONST.HTTP_RSP_CODE_CONFLICT, http_response_code = "410", XDM_CONST.HTTP_RSP_CODE_GONE, http_response_code = "411", XDM_CONST.HTTP_RSP_CODE_LENGTH_REQUIRED, http_response_code = "412", XDM_CONST.HTTP_RSP_CODE_PRECONDITION_FAILED, http_response_code = "413", XDM_CONST.HTTP_RSP_CODE_CONTENT_TOO_LARGE, http_response_code = "414", XDM_CONST.HTTP_RSP_CODE_URI_TOO_LONG, http_response_code = "415", XDM_CONST.HTTP_RSP_CODE_UNSUPPORTED_MEDIA_TYPE, http_response_code = "416", XDM_CONST.HTTP_RSP_CODE_RANGE_NOT_SATISFIABLE, http_response_code = "417", XDM_CONST.HTTP_RSP_CODE_EXPECTATION_FAILED, http_response_code = "421", XDM_CONST.HTTP_RSP_CODE_MISDIRECTED_REQUEST, http_response_code = "422", XDM_CONST.HTTP_RSP_CODE_UNPROCESSABLE_CONTENT, http_response_code = "423", XDM_CONST.HTTP_RSP_CODE_LOCKED, http_response_code = "424", XDM_CONST.HTTP_RSP_CODE_FAILED_DEPENDENCY, http_response_code = "425", XDM_CONST.HTTP_RSP_CODE_TOO_EARLY, http_response_code = "426", XDM_CONST.HTTP_RSP_CODE_UPGRADE_REQUIRED, http_response_code = "428", XDM_CONST.HTTP_RSP_CODE_PRECONDITION_REQUIRED, http_response_code = "429", XDM_CONST.HTTP_RSP_CODE_TOO_MANY_REQUESTS, http_response_code = "431", XDM_CONST.HTTP_RSP_CODE_REQUEST_HEADER_FIELDS_TOO_LARGE, http_response_code = "451", XDM_CONST.HTTP_RSP_CODE_UNAVAILABLE_FOR_LEGAL_REASONS, http_response_code = "500", XDM_CONST.HTTP_RSP_CODE_INTERNAL_SERVER_ERROR, http_response_code = "501", XDM_CONST.HTTP_RSP_CODE_NOT_IMPLEMENTED, http_response_code = "502", XDM_CONST.HTTP_RSP_CODE_BAD_GATEWAY, http_response_code = "503", XDM_CONST.HTTP_RSP_CODE_SERVICE_UNAVAILABLE, http_response_code = "504", XDM_CONST.HTTP_RSP_CODE_GATEWAY_TIMEOUT, http_response_code = "505", XDM_CONST.HTTP_RSP_CODE_HTTP_VERSION_NOT_SUPPORTED, http_response_code = "506", XDM_CONST.HTTP_RSP_CODE_VARIANT_ALSO_NEGOTIATES, http_response_code = "507", XDM_CONST.HTTP_RSP_CODE_INSUFFICIENT_STORAGE, http_response_code = "508", XDM_CONST.HTTP_RSP_CODE_LOOP_DETECTED, http_response_code = "511", XDM_CONST.HTTP_RSP_CODE_NETWORK_AUTHENTICATION_REQUIRED, http_response_code = null, null, to_string(http_response_code)), 
    xdm.source.application.name = sub_module, 
    xdm.source.ipv4 = client_ip,
    xdm.source.port = to_integer(client_port), 
    xdm.source.host.ipv4_addresses = arraycreate(client_ip, client2_ip),
    xdm.source.sent_bytes = bytes_sent, 
    xdm.source.process.pid = pid, 
    xdm.source.process.name = event_type,
    xdm.source.host.hostname = syslog_hostname,
    xdm.target.sent_bytes = bytes_received,
    xdm.target.resource.value = uri,
    xdm.target.port = to_integer(server_port),
    xdm.target.ipv4 = server_ip,
    xdm.target.host.ipv4_addresses = arraycreate(server_ip);

//  trustmanagement-gc 
alter event_type = arrayindex(regextract(_raw_log, "^\<\d{1,3}\>\d+\s+\S+\s+\S+\s+(\S+)"), 0)
| filter event_type = "trustmanagement-gc"
| alter 
    syslog_priority = to_integer(arrayindex(regextract(_raw_log, "^\<(\d{1,3})\>\S+"), 0)),
    syslog_hostname = arrayindex(regextract(_raw_log, "\<\d{1,3}\>\S+\s+\S+\s+(\S+)"), 0), 
    syslog_msg = arrayindex(regextract(_raw_log, "^\<\d{1,3}\>\d+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+(.+)"), 0)
| alter 
    // since the log does not include an explicit severity, extract it from the syslog header priority field   
    severity = to_string(subtract(syslog_priority, multiply(floor(divide(syslog_priority, 8)), 8)))
| alter
    xdm.alert.severity = severity,
    xdm.event.type = event_type,
    xdm.event.description = syslog_msg,
    xdm.event.log_level = if(severity = "0", XDM_CONST.LOG_LEVEL_EMERGENCY , severity = "1", XDM_CONST.LOG_LEVEL_ALERT , severity = "2", XDM_CONST.LOG_LEVEL_CRITICAL, severity = "3", XDM_CONST.LOG_LEVEL_ERROR, severity = "4", XDM_CONST.LOG_LEVEL_WARNING, severity = "5", XDM_CONST.LOG_LEVEL_NOTICE, severity = "6", XDM_CONST.LOG_LEVEL_INFORMATIONAL, severity = "7", XDM_CONST.LOG_LEVEL_DEBUG, severity),
    xdm.source.process.name = event_type,
    xdm.source.host.hostname = syslog_hostname;

// trustmanagement-svcs
alter event_type = arrayindex(regextract(_raw_log, "^\<\d{1,3}\>\d+\s+\S+\s+\S+\s+(\S+)"), 0)
| filter event_type = "trustmanagement-svcs"
| alter 
    syslog_priority = to_integer(arrayindex(regextract(_raw_log, "^\<(\d{1,3})\>\S+"), 0)),
    syslog_hostname = arrayindex(regextract(_raw_log, "\<\d{1,3}\>\S+\s+\S+\s+(\S+)"), 0), 
    syslog_msg = arrayindex(regextract(_raw_log, "^\<\d{1,3}\>\d+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+(.+)"), 0)
| alter 
    thread_identifier = arrayindex(regextract(syslog_msg, "\w+\s+\[([\w-]+)\s+"), 0),
    msg_severity = arrayindex(regextract(syslog_msg, "(\w+)\s+\S+\s+opId="), 0),
    app_class_component = arrayindex(regextract(syslog_msg, "\w+\s+(\S+)\s+opId="), 0),
    operation_id = arrayindex(regextract(syslog_msg, "opId=([^\]]+)"), 0),
    event_payload = arrayindex(regextract(syslog_msg, "opId=\S*\]\s+(.+)"), 0)
| alter 
    user = coalesce(arrayindex(regextract(event_payload, "User (\S+)"), 0), arrayindex(regextract(event_payload, "\[value=([^,]+)"), 0)),
    group = regextract(event_payload, "group (\S+)"),
    ms = to_integer(coalesce( arrayindex(regextract(event_payload, "(?:ms|Ms|MS)(?:\W+|\s+)(\d+)"), 0), arrayindex(regextract(event_payload, "(\d+)\s+ms"), 0))),
    // map the msg severity to RFC 5424 standard values, if the log does not include an explicit severity, extract it from the syslog header priority field   
    severity = if(msg_severity = null, to_string(subtract(syslog_priority, multiply(floor(divide(syslog_priority, 8)), 8))), msg_severity ~= "DEBUG|VERBOSE", "7", msg_severity ~= "INFO", "6", msg_severity ~= "NOTICE", "5", msg_severity ~= "WARN", "4", msg_severity ~= "ERROR", "3", msg_severity ~= "CRITICAL", "2", msg_severity ~= "ALERT", "1", msg_severity ~= "EMERGENCY", "0", msg_severity)
| alter
    xdm.alert.severity = severity, 
    xdm.event.type = event_type,
    xdm.event.description = syslog_msg,
    xdm.event.duration = ms, 
    xdm.event.log_level = if(severity = "0", XDM_CONST.LOG_LEVEL_EMERGENCY , severity = "1", XDM_CONST.LOG_LEVEL_ALERT , severity = "2", XDM_CONST.LOG_LEVEL_CRITICAL, severity = "3", XDM_CONST.LOG_LEVEL_ERROR, severity = "4", XDM_CONST.LOG_LEVEL_WARNING, severity = "5", XDM_CONST.LOG_LEVEL_NOTICE, severity = "6", XDM_CONST.LOG_LEVEL_INFORMATIONAL, severity = "7", XDM_CONST.LOG_LEVEL_DEBUG, severity),
    xdm.session_context_id = operation_id,
    xdm.source.application.name = app_class_component, 
    xdm.source.process.identifier = thread_identifier,
    xdm.source.process.name = event_type,
    xdm.source.user.username = user, 
    xdm.source.user.groups = group, 
    xdm.source.host.hostname = syslog_hostname;

// eam-api
alter event_type = arrayindex(regextract(_raw_log, "^\<\d{1,3}\>\d+\s+\S+\s+\S+\s+(\S+)"), 0)
| filter event_type = "eam-api" 
| alter 
    syslog_priority = to_integer(arrayindex(regextract(_raw_log, "^\<(\d{1,3})\>\S+"), 0)),
    syslog_hostname = arrayindex(regextract(_raw_log, "\<\d{1,3}\>\S+\s+\S+\s+(\S+)"), 0), 
    syslog_msg = arrayindex(regextract(_raw_log, "^\<\d{1,3}\>\d+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+(.+)"), 0)
| alter 
    msg_severity = arrayindex(regextract(syslog_msg, "\|\s*(\w+)"), 0),
    module = arrayindex(regextract(syslog_msg, "\|\s*(\w+)"), 1),
    app_component = arrayindex(regextract(syslog_msg, "\|\s*(\S+)"), 2),
    pid = to_integer(arrayindex(regextract(syslog_msg, "\|\s*(\d+)\s*\|"), 0)),
    event_payload = arrayindex(regextract(syslog_msg, "\|\s*([^\|]+)"), 4)
| alter 
    // map the msg severity to RFC 5424 standard values, if the log does not include an explicit severity, extract it from the syslog header priority field   
    severity = if(msg_severity = null, to_string(subtract(syslog_priority, multiply(floor(divide(syslog_priority, 8)), 8))), msg_severity ~= "DEBUG|VERBOSE", "7", msg_severity ~= "INFO", "6", msg_severity ~= "NOTICE", "5", msg_severity ~= "WARN", "4", msg_severity ~= "ERROR", "3", msg_severity ~= "CRITICAL", "2", msg_severity ~= "ALERT", "1", msg_severity ~= "EMERGENCY", "0", msg_severity),
    operation_id = arrayindex(regextract(event_payload, "opId=([\w\-]+)"), 0),
    session_id = arrayindex(regextract(event_payload, "sessionId=([\w\-]+)"), 0)
| alter
    xdm.alert.severity = severity, 
    xdm.event.type = event_type,
    xdm.event.description = syslog_msg,
    xdm.event.log_level = if(severity = "0", XDM_CONST.LOG_LEVEL_EMERGENCY , severity = "1", XDM_CONST.LOG_LEVEL_ALERT , severity = "2", XDM_CONST.LOG_LEVEL_CRITICAL, severity = "3", XDM_CONST.LOG_LEVEL_ERROR, severity = "4", XDM_CONST.LOG_LEVEL_WARNING, severity = "5", XDM_CONST.LOG_LEVEL_NOTICE, severity = "6", XDM_CONST.LOG_LEVEL_INFORMATIONAL, severity = "7", XDM_CONST.LOG_LEVEL_DEBUG, severity),
    xdm.network.session_id = session_id,
    xdm.session_context_id = operation_id,
    xdm.source.application.name = coalesce(app_component, module),
    xdm.source.process.pid = pid, 
    xdm.source.process.name = event_type,
    xdm.source.host.hostname = syslog_hostname;

// wcpsvc
alter event_type = arrayindex(regextract(_raw_log, "^\<\d{1,3}\>\d+\s+\S+\s+\S+\s+(\S+)"), 0)
| filter event_type = "wcpsvc" 
| alter 
    syslog_priority = to_integer(arrayindex(regextract(_raw_log, "^\<(\d{1,3})\>\S+"), 0)),
    syslog_hostname = arrayindex(regextract(_raw_log, "\<\d{1,3}\>\S+\s+\S+\s+(\S+)"), 0), 
    syslog_msg = arrayindex(regextract(_raw_log, "^\<\d{1,3}\>\d+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+(.+)"), 0)
| alter 
    msg_severity = uppercase(arrayindex(regextract(syslog_msg, "\S+\s+(\w+)"), 0)),
    module = arrayindex(regextract(syslog_msg, "\S+\s+\w+\s+(\w+)"), 0),
    module_id = arrayindex(regextract(syslog_msg, "\w+\s+\[([^\]]+)\]"), 0),
    operation_id = arrayindex(regextract(syslog_msg, "opId=([\w\-]+)"), 0),
    target_hosts = regextract(syslog_msg, "Hostname:(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})"),
    target_port = to_integer(arrayindex(regextract(syslog_msg, "Port:(\d+)"), 0))
| alter // map the msg severity to RFC 5424 standard values, if the log does not include an explicit severity, extract it from the syslog header priority field   
    severity = if(msg_severity = null, to_string(subtract(syslog_priority, multiply(floor(divide(syslog_priority, 8)), 8))), msg_severity ~= "DEBUG|VERBOSE", "7", msg_severity ~= "INFO", "6", msg_severity ~= "NOTICE", "5", msg_severity ~= "WARN", "4", msg_severity ~= "ERROR", "3", msg_severity ~= "CRITICAL", "2", msg_severity ~= "ALERT", "1", msg_severity ~= "EMERGENCY", "0", msg_severity)
| alter
    xdm.alert.severity = severity, 
    xdm.event.type = event_type,
    xdm.event.description = syslog_msg,
    xdm.event.log_level = if(severity = "0", XDM_CONST.LOG_LEVEL_EMERGENCY , severity = "1", XDM_CONST.LOG_LEVEL_ALERT , severity = "2", XDM_CONST.LOG_LEVEL_CRITICAL, severity = "3", XDM_CONST.LOG_LEVEL_ERROR, severity = "4", XDM_CONST.LOG_LEVEL_WARNING, severity = "5", XDM_CONST.LOG_LEVEL_NOTICE, severity = "6", XDM_CONST.LOG_LEVEL_INFORMATIONAL, severity = "7", XDM_CONST.LOG_LEVEL_DEBUG, severity),
    xdm.session_context_id = operation_id,
    xdm.source.application.name = coalesce(module, module_id),
    xdm.source.process.identifier = module_id,
    xdm.source.process.name = event_type,
    xdm.source.host.hostname = syslog_hostname,
    xdm.target.port = target_port,
    xdm.target.host.ipv4_addresses = target_hosts;

// ui-threadmonitor
alter event_type = arrayindex(regextract(_raw_log, "^\<\d{1,3}\>\d+\s+\S+\s+\S+\s+(\S+)"), 0)
| filter event_type = "ui-threadmonitor" 
| alter 
    syslog_priority = to_integer(arrayindex(regextract(_raw_log, "^\<(\d{1,3})\>\S+"), 0)),
    syslog_hostname = arrayindex(regextract(_raw_log, "\<\d{1,3}\>\S+\s+\S+\s+(\S+)"), 0), 
    syslog_msg = arrayindex(regextract(_raw_log, "^\<\d{1,3}\>\d+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+(.+)"), 0)
| alter 
    msg_severity = uppercase(arrayindex(regextract(syslog_msg, "\S+\s+\[\s*(\w+)"), 0)),
    module = arrayindex(regextract(syslog_msg, "\]\s+([\w\-]+)"), 0),
    application_component = arrayindex(regextract(syslog_msg, "\]\s+[\w\-]+\s+(\S+)"), 0)
| alter // map the msg severity to RFC 5424 standard values, if the log does not include an explicit severity, extract it from the syslog header priority field   
    severity = if(msg_severity = null, to_string(subtract(syslog_priority, multiply(floor(divide(syslog_priority, 8)), 8))), msg_severity ~= "DEBUG|VERBOSE", "7", msg_severity ~= "INFO", "6", msg_severity ~= "NOTICE", "5", msg_severity ~= "WARN", "4", msg_severity ~= "ERROR", "3", msg_severity ~= "CRITICAL", "2", msg_severity ~= "ALERT", "1", msg_severity ~= "EMERGENCY", "0", msg_severity)
| alter
    xdm.alert.severity = severity, 
    xdm.event.type = event_type,
    xdm.event.description = syslog_msg,
    xdm.event.log_level = if(severity = "0", XDM_CONST.LOG_LEVEL_EMERGENCY , severity = "1", XDM_CONST.LOG_LEVEL_ALERT , severity = "2", XDM_CONST.LOG_LEVEL_CRITICAL, severity = "3", XDM_CONST.LOG_LEVEL_ERROR, severity = "4", XDM_CONST.LOG_LEVEL_WARNING, severity = "5", XDM_CONST.LOG_LEVEL_NOTICE, severity = "6", XDM_CONST.LOG_LEVEL_INFORMATIONAL, severity = "7", XDM_CONST.LOG_LEVEL_DEBUG, severity),
    xdm.source.application.name = coalesce(application_component, module),
    xdm.source.process.name = event_type,
    xdm.source.host.hostname = syslog_hostname;

// ssoadminserver 
alter event_type = arrayindex(regextract(_raw_log, "^\<\d{1,3}\>\d+\s+\S+\s+\S+\s+(\S+)"), 0)
| filter event_type = "ssoadminserver" 
| alter 
    syslog_priority = to_integer(arrayindex(regextract(_raw_log, "^\<(\d{1,3})\>\S+"), 0)),
    syslog_hostname = arrayindex(regextract(_raw_log, "\<\d{1,3}\>\S+\s+\S+\s+(\S+)"), 0), 
    syslog_msg = arrayindex(regextract(_raw_log, "^\<\d{1,3}\>\d+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+(.+)"), 0)
| alter
    process_identifier = arrayindex(regextract(syslog_msg, "\S+\s+\w+\s+\w+\[([^\]]+)"), 0),
    thread_id = to_integer(arrayindex(regextract(syslog_msg, "thread\-(\d+)\]"), 0)),
    msg_severity = arrayindex(regextract(syslog_msg, "\S+\s+(\w+)"), 0),
    operation_id = arrayindex(regextract(syslog_msg, "opId=([a-fA-F\-\d]+)"), 0),
    app_component = arrayindex(regextract(syslog_msg, "opId=\S*\s+\[(\S+)\]"), 0),
    user = coalesce(arrayindex(regextract(syslog_msg, "User\s*\{Name:\s*([^,]+)"), 0), 
                arrayindex(regextract(syslog_msg, "SubjectNameId\s*\[value=([^\,]+)"), 0), 
                arrayindex(regextract(syslog_msg, "User\s+(\S+)\s+is"), 0)),
    user_domain = coalesce(arrayindex(regextract(syslog_msg, "Domain:\s*([\w\.]+)"), 0),
                  arrayindex(regextract(syslog_msg, "SubjectNameId\s*\[value=[^\@]+\@([^\,]+)"), 0)),
    user_role = regextract(syslog_msg, "role\s+\'([^\']+)")
| alter // map the msg severity to RFC 5424 standard values, if the log does not include an explicit severity, extract it from the syslog header priority field   
    severity = if(msg_severity = null, to_string(subtract(syslog_priority, multiply(floor(divide(syslog_priority, 8)), 8))), msg_severity ~= "DEBUG|VERBOSE", "7", msg_severity ~= "INFO", "6", msg_severity ~= "NOTICE", "5", msg_severity ~= "WARN", "4", msg_severity ~= "ERROR", "3", msg_severity ~= "CRITICAL", "2", msg_severity ~= "ALERT", "1", msg_severity ~= "EMERGENCY", "0", msg_severity)
| alter
    xdm.alert.severity = severity, 
    xdm.event.type = event_type,
    xdm.event.description = syslog_msg,
    xdm.event.log_level = if(severity = "0", XDM_CONST.LOG_LEVEL_EMERGENCY , severity = "1", XDM_CONST.LOG_LEVEL_ALERT , severity = "2", XDM_CONST.LOG_LEVEL_CRITICAL, severity = "3", XDM_CONST.LOG_LEVEL_ERROR, severity = "4", XDM_CONST.LOG_LEVEL_WARNING, severity = "5", XDM_CONST.LOG_LEVEL_NOTICE, severity = "6", XDM_CONST.LOG_LEVEL_INFORMATIONAL, severity = "7", XDM_CONST.LOG_LEVEL_DEBUG, severity),
    xdm.source.process.thread_id = thread_id,
    xdm.source.application.name = coalesce(app_component),
    xdm.session_context_id = operation_id,
    xdm.source.process.identifier = process_identifier,
    xdm.source.process.name = event_type,
    xdm.source.user.username = user,
    xdm.source.user.domain = user_domain,
    xdm.source.user.groups = user_role, 
    xdm.source.host.hostname = syslog_hostname;

// ui-main 
alter event_type = arrayindex(regextract(_raw_log, "^\<\d{1,3}\>\d+\s+\S+\s+\S+\s+(\S+)"), 0)
| filter event_type = "ui-main" 
| alter 
    syslog_priority = to_integer(arrayindex(regextract(_raw_log, "^\<(\d{1,3})\>\S+"), 0)),
    syslog_hostname = arrayindex(regextract(_raw_log, "\<\d{1,3}\>\S+\s+\S+\s+(\S+)"), 0), 
    syslog_msg = arrayindex(regextract(_raw_log, "^\<\d{1,3}\>\d+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+(.+)"), 0)
| alter
    msg_severity = arrayindex(regextract(syslog_msg, "\S+\s+\[\s*(\w+)\s*\]"), 0),
    module_identifier = arrayindex(regextract(syslog_msg, "\S+\s+\[\s*\w+\s*\]\s+(\S+)"), 0),
    event_payload = arrayindex(regextract(syslog_msg, "\S+\s+\[\s*\w+\s*\]\s+\S+\s+(.+)"), 0)
| alter 
    // map the msg severity to RFC 5424 standard values, if the log does not include an explicit severity, extract it from the syslog header priority field   
    severity = if(msg_severity = null, to_string(subtract(syslog_priority, multiply(floor(divide(syslog_priority, 8)), 8))), msg_severity ~= "DEBUG|VERBOSE", "7", msg_severity ~= "INFO", "6", msg_severity ~= "NOTICE", "5", msg_severity ~= "WARN", "4", msg_severity ~= "ERROR", "3", msg_severity ~= "CRITICAL", "2", msg_severity ~= "ALERT", "1", msg_severity ~= "EMERGENCY", "0", msg_severity),
    session_id = coalesce(arrayindex(regextract(event_payload, "\S+\s+(\d+)\s+\S+\s+\S+"), 0), 
                          arrayindex(regextract(event_payload, "session\s+(\d+)"), 0),
                          arrayindex(regextract(event_payload, "session\s+id:\s*(\d+)"), 0),
                          arrayindex(regextract(event_payload, "sessionId\s*(\d+)"), 0)),
    ms = to_integer(arrayindex(regextract(event_payload, "(\d+)\s+ms"), 0)),
    application_component = coalesce(arrayindex(regextract(event_payload, "\S+\s+\S+\s+\S+\s+(\w+\.\w+\S+)"), 0),
                                     arrayindex(regextract(event_payload, "(\w+\.\w+\S+)"), 0))
| alter
    xdm.alert.severity = severity, 
    xdm.event.type = event_type,
    xdm.event.description = syslog_msg,
    xdm.event.duration = ms,
    xdm.event.log_level = if(severity = "0", XDM_CONST.LOG_LEVEL_EMERGENCY , severity = "1", XDM_CONST.LOG_LEVEL_ALERT , severity = "2", XDM_CONST.LOG_LEVEL_CRITICAL, severity = "3", XDM_CONST.LOG_LEVEL_ERROR, severity = "4", XDM_CONST.LOG_LEVEL_WARNING, severity = "5", XDM_CONST.LOG_LEVEL_NOTICE, severity = "6", XDM_CONST.LOG_LEVEL_INFORMATIONAL, severity = "7", XDM_CONST.LOG_LEVEL_DEBUG, severity),
    xdm.network.session_id = session_id,
    xdm.source.application.name = application_component,
    xdm.source.process.identifier = module_identifier,
    xdm.source.process.name = event_type,
    xdm.source.host.hostname = syslog_hostname;

// procstate
alter event_type = arrayindex(regextract(_raw_log, "^\<\d{1,3}\>\d+\s+\S+\s+\S+\s+(\S+)"), 0)
| filter event_type = "procstate" 
| alter 
    syslog_priority = to_integer(arrayindex(regextract(_raw_log, "^\<(\d{1,3})\>\S+"), 0)),
    syslog_hostname = arrayindex(regextract(_raw_log, "\<\d{1,3}\>\S+\s+\S+\s+(\S+)"), 0), 
    syslog_msg = arrayindex(regextract(_raw_log, "^\<\d{1,3}\>\d+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+(.+)"), 0)
| alter // since the log does not include an explicit severity, extract it from the syslog header priority field   
    severity = to_string(subtract(syslog_priority, multiply(floor(divide(syslog_priority, 8)), 8)))
| alter
    xdm.alert.severity = severity,
    xdm.event.type = event_type,
    xdm.event.description = syslog_msg,
    xdm.event.log_level = if(severity = "0", XDM_CONST.LOG_LEVEL_EMERGENCY , severity = "1", XDM_CONST.LOG_LEVEL_ALERT , severity = "2", XDM_CONST.LOG_LEVEL_CRITICAL, severity = "3", XDM_CONST.LOG_LEVEL_ERROR, severity = "4", XDM_CONST.LOG_LEVEL_WARNING, severity = "5", XDM_CONST.LOG_LEVEL_NOTICE, severity = "6", XDM_CONST.LOG_LEVEL_INFORMATIONAL, severity = "7", XDM_CONST.LOG_LEVEL_DEBUG, severity),
    xdm.source.process.name = event_type,
    xdm.source.host.hostname = syslog_hostname;

// content-library
alter event_type = arrayindex(regextract(_raw_log, "^\<\d{1,3}\>\d+\s+\S+\s+\S+\s+(\S+)"), 0)
| filter event_type = "content-library" 
| alter 
    syslog_priority = to_integer(arrayindex(regextract(_raw_log, "^\<(\d{1,3})\>\S+"), 0)),
    syslog_hostname = arrayindex(regextract(_raw_log, "\<\d{1,3}\>\S+\s+\S+\s+(\S+)"), 0), 
    syslog_msg = arrayindex(regextract(_raw_log, "^\<\d{1,3}\>\d+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+(.+)"), 0)
| alter 
    internal_header_fields = regextract(syslog_msg, "\|\s*(\S+)"),
    event_payload =  arrayindex(regextract(syslog_msg, "\|\s*([^\|]+)"), 4)
| alter 
    msg_severity = arrayindex(internal_header_fields, 0),
    operation_id = arrayindex(internal_header_fields, 1),
    thread_identifier = arrayindex(internal_header_fields, 2),
    module = arrayindex(internal_header_fields, 3)
| alter 
    http_method = arrayindex(regextract(event_payload, "method:\s*(\S+)"), 0),
    url = arrayindex(regextract(event_payload, "url:\s*(\S+)"), 0),
    target_service = arrayindex(regextract(event_payload, "service\s+\'([^\']+)"), 0),
    operation = arrayindex(regextract(event_payload, "operation\s+\'([^\']+)"), 0),  
    wsdl_name = arrayindex(regextract(event_payload, "wsdlName=(\S+)"), 0),
    // map the msg severity to RFC 5424 standard values, if the log does not include an explicit severity, extract it from the syslog header priority field   
    severity = if(msg_severity = null, to_string(subtract(syslog_priority, multiply(floor(divide(syslog_priority, 8)), 8))), msg_severity ~= "DEBUG|VERBOSE", "7", msg_severity ~= "INFO", "6", msg_severity ~= "NOTICE", "5", msg_severity ~= "WARN", "4", msg_severity ~= "ERROR", "3", msg_severity ~= "CRITICAL", "2", msg_severity ~= "ALERT", "1", msg_severity ~= "EMERGENCY", "0", msg_severity)
| alter
    xdm.alert.severity = severity, 
    xdm.event.type = event_type,
    xdm.event.description = syslog_msg,
    xdm.event.operation_sub_type = operation, 
    xdm.event.log_level = if(severity = "0", XDM_CONST.LOG_LEVEL_EMERGENCY , severity = "1", XDM_CONST.LOG_LEVEL_ALERT , severity = "2", XDM_CONST.LOG_LEVEL_CRITICAL, severity = "3", XDM_CONST.LOG_LEVEL_ERROR, severity = "4", XDM_CONST.LOG_LEVEL_WARNING, severity = "5", XDM_CONST.LOG_LEVEL_NOTICE, severity = "6", XDM_CONST.LOG_LEVEL_INFORMATIONAL, severity = "7", XDM_CONST.LOG_LEVEL_DEBUG, severity),
    xdm.network.http.method = if(http_method = "ACL", XDM_CONST.HTTP_METHOD_ACL, http_method = "BASELINE_CONTROL", XDM_CONST.HTTP_METHOD_BASELINE_CONTROL, http_method = "BIND", XDM_CONST.HTTP_METHOD_BIND, http_method = "CHECKIN", XDM_CONST.HTTP_METHOD_CHECKIN, http_method = "CHECKOUT", XDM_CONST.HTTP_METHOD_CHECKOUT, http_method = "CONNECT", XDM_CONST.HTTP_METHOD_CONNECT, http_method = "COPY", XDM_CONST.HTTP_METHOD_COPY, http_method = "DELETE", XDM_CONST.HTTP_METHOD_DELETE, http_method = "GET", XDM_CONST.HTTP_METHOD_GET, http_method = "HEAD", XDM_CONST.HTTP_METHOD_HEAD, http_method = "LABEL", XDM_CONST.HTTP_METHOD_LABEL, http_method = "LINK", XDM_CONST.HTTP_METHOD_LINK, http_method = "LOCK", XDM_CONST.HTTP_METHOD_LOCK, http_method = "MERGE", XDM_CONST.HTTP_METHOD_MERGE, http_method = "MKACTIVITY", XDM_CONST.HTTP_METHOD_MKACTIVITY, http_method = "MKCALENDAR", XDM_CONST.HTTP_METHOD_MKCALENDAR, http_method = "MKCOL", XDM_CONST.HTTP_METHOD_MKCOL, http_method = "MKREDIRECTREF", XDM_CONST.HTTP_METHOD_MKREDIRECTREF, http_method = "MKWORKSPACE", XDM_CONST.HTTP_METHOD_MKWORKSPACE, http_method = "MOVE", XDM_CONST.HTTP_METHOD_MOVE, http_method = "OPTIONS", XDM_CONST.HTTP_METHOD_OPTIONS, http_method = "ORDERPATCH", XDM_CONST.HTTP_METHOD_ORDERPATCH, http_method = "PATCH", XDM_CONST.HTTP_METHOD_PATCH, http_method = "POST", XDM_CONST.HTTP_METHOD_POST, http_method = "PRI", XDM_CONST.HTTP_METHOD_PRI, http_method = "PROPFIND", XDM_CONST.HTTP_METHOD_PROPFIND, http_method = "PROPPATCH", XDM_CONST.HTTP_METHOD_PROPPATCH, http_method = "PUT", XDM_CONST.HTTP_METHOD_PUT, http_method = "REBIND", XDM_CONST.HTTP_METHOD_REBIND, http_method = "REPORT", XDM_CONST.HTTP_METHOD_REPORT, http_method = "SEARCH", XDM_CONST.HTTP_METHOD_SEARCH, http_method = "TRACE", XDM_CONST.HTTP_METHOD_TRACE, http_method = "UNBIND", XDM_CONST.HTTP_METHOD_UNBIND, http_method = "UNCHECKOUT", XDM_CONST.HTTP_METHOD_UNCHECKOUT, http_method = "UNLINK", XDM_CONST.HTTP_METHOD_UNLINK, http_method = "UNLOCK", XDM_CONST.HTTP_METHOD_UNLOCK, http_method = "UPDATE", XDM_CONST.HTTP_METHOD_UPDATE, http_method = "UPDATEREDIRECTREF", XDM_CONST.HTTP_METHOD_UPDATEREDIRECTREF, http_method = "VERSION_CONTROL", XDM_CONST.HTTP_METHOD_VERSION_CONTROL, to_string(http_method)),
    xdm.network.http.url = url,
    xdm.source.application.name = module,
    xdm.session_context_id = operation_id,
    xdm.source.process.identifier = thread_identifier,
    xdm.source.process.name = event_type,
    xdm.source.host.hostname = syslog_hostname,
    xdm.target.resource.value = coalesce(target_service, wsdl_name),
    xdm.target.resource.type = if(target_service != null, "Service Name", wsdl_name != null, "WSDL Name");

// vpxd-svcs-access
alter event_type = arrayindex(regextract(_raw_log, "^\<\d{1,3}\>\d+\s+\S+\s+\S+\s+(\S+)"), 0)
| filter event_type = "vpxd-svcs-access" 
| alter 
    syslog_priority = to_integer(arrayindex(regextract(_raw_log, "^\<(\d{1,3})\>\S+"), 0)),
    syslog_hostname = arrayindex(regextract(_raw_log, "\<\d{1,3}\>\S+\s+\S+\s+(\S+)"), 0), 
    syslog_msg = arrayindex(regextract(_raw_log, "^\<\d{1,3}\>\d+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+(.+)"), 0)
| alter 
    event_payload = arrayindex(regextract(syslog_msg, "\S+\s+(.+)"), 0),
    // since the log does not include an explicit severity, extract it from the syslog header priority field   
    severity = to_string(subtract(syslog_priority, multiply(floor(divide(syslog_priority, 8)), 8)))
| alter 
    thread_identifier =  arrayindex(regextract(event_payload, "\S+\s+\S+\s+(\S+)"), 0),
    http_response_code = arrayindex(regextract(event_payload, "\S+\s+\S+\s+\S+\s+(\d+)"), 0),
    user_agent = arrayindex(regextract(event_payload, "\d{3}\s+\"([^\"]+)"), 0),
    http_method = arrayindex(regextract(event_payload, "\"\s+(\w+)"), 0),
    uri = arrayindex(regextract(event_payload, "\"\s+\w+\s+(\S+)"), 0),
    http_version = arrayindex(regextract(event_payload, "\/\S+\s+(HTTP\S+)"), 0)
| alter
    xdm.alert.severity = severity,
    xdm.event.type = event_type,
    xdm.event.description = syslog_msg,
    xdm.event.log_level = if(severity = "0", XDM_CONST.LOG_LEVEL_EMERGENCY , severity = "1", XDM_CONST.LOG_LEVEL_ALERT , severity = "2", XDM_CONST.LOG_LEVEL_CRITICAL, severity = "3", XDM_CONST.LOG_LEVEL_ERROR, severity = "4", XDM_CONST.LOG_LEVEL_WARNING, severity = "5", XDM_CONST.LOG_LEVEL_NOTICE, severity = "6", XDM_CONST.LOG_LEVEL_INFORMATIONAL, severity = "7", XDM_CONST.LOG_LEVEL_DEBUG, severity),
    xdm.network.http.method = if(http_method = "ACL", XDM_CONST.HTTP_METHOD_ACL, http_method = "BASELINE_CONTROL", XDM_CONST.HTTP_METHOD_BASELINE_CONTROL, http_method = "BIND", XDM_CONST.HTTP_METHOD_BIND, http_method = "CHECKIN", XDM_CONST.HTTP_METHOD_CHECKIN, http_method = "CHECKOUT", XDM_CONST.HTTP_METHOD_CHECKOUT, http_method = "CONNECT", XDM_CONST.HTTP_METHOD_CONNECT, http_method = "COPY", XDM_CONST.HTTP_METHOD_COPY, http_method = "DELETE", XDM_CONST.HTTP_METHOD_DELETE, http_method = "GET", XDM_CONST.HTTP_METHOD_GET, http_method = "HEAD", XDM_CONST.HTTP_METHOD_HEAD, http_method = "LABEL", XDM_CONST.HTTP_METHOD_LABEL, http_method = "LINK", XDM_CONST.HTTP_METHOD_LINK, http_method = "LOCK", XDM_CONST.HTTP_METHOD_LOCK, http_method = "MERGE", XDM_CONST.HTTP_METHOD_MERGE, http_method = "MKACTIVITY", XDM_CONST.HTTP_METHOD_MKACTIVITY, http_method = "MKCALENDAR", XDM_CONST.HTTP_METHOD_MKCALENDAR, http_method = "MKCOL", XDM_CONST.HTTP_METHOD_MKCOL, http_method = "MKREDIRECTREF", XDM_CONST.HTTP_METHOD_MKREDIRECTREF, http_method = "MKWORKSPACE", XDM_CONST.HTTP_METHOD_MKWORKSPACE, http_method = "MOVE", XDM_CONST.HTTP_METHOD_MOVE, http_method = "OPTIONS", XDM_CONST.HTTP_METHOD_OPTIONS, http_method = "ORDERPATCH", XDM_CONST.HTTP_METHOD_ORDERPATCH, http_method = "PATCH", XDM_CONST.HTTP_METHOD_PATCH, http_method = "POST", XDM_CONST.HTTP_METHOD_POST, http_method = "PRI", XDM_CONST.HTTP_METHOD_PRI, http_method = "PROPFIND", XDM_CONST.HTTP_METHOD_PROPFIND, http_method = "PROPPATCH", XDM_CONST.HTTP_METHOD_PROPPATCH, http_method = "PUT", XDM_CONST.HTTP_METHOD_PUT, http_method = "REBIND", XDM_CONST.HTTP_METHOD_REBIND, http_method = "REPORT", XDM_CONST.HTTP_METHOD_REPORT, http_method = "SEARCH", XDM_CONST.HTTP_METHOD_SEARCH, http_method = "TRACE", XDM_CONST.HTTP_METHOD_TRACE, http_method = "UNBIND", XDM_CONST.HTTP_METHOD_UNBIND, http_method = "UNCHECKOUT", XDM_CONST.HTTP_METHOD_UNCHECKOUT, http_method = "UNLINK", XDM_CONST.HTTP_METHOD_UNLINK, http_method = "UNLOCK", XDM_CONST.HTTP_METHOD_UNLOCK, http_method = "UPDATE", XDM_CONST.HTTP_METHOD_UPDATE, http_method = "UPDATEREDIRECTREF", XDM_CONST.HTTP_METHOD_UPDATEREDIRECTREF, http_method = "VERSION_CONTROL", XDM_CONST.HTTP_METHOD_VERSION_CONTROL, to_string(http_method)),
    xdm.network.http.response_code = if(http_response_code = "100", XDM_CONST.HTTP_RSP_CODE_CONTINUE, http_response_code = "101", XDM_CONST.HTTP_RSP_CODE_SWITCHING_PROTOCOLS, http_response_code = "102", XDM_CONST.HTTP_RSP_CODE_PROCESSING, http_response_code = "103", XDM_CONST.HTTP_RSP_CODE_EARLY_HINTS, http_response_code = "200", XDM_CONST.HTTP_RSP_CODE_OK, http_response_code = "201", XDM_CONST.HTTP_RSP_CODE_CREATED, http_response_code = "202", XDM_CONST.HTTP_RSP_CODE_ACCEPTED, http_response_code = "203", XDM_CONST.HTTP_RSP_CODE_NON__AUTHORITATIVE_INFORMATION, http_response_code = "204", XDM_CONST.HTTP_RSP_CODE_NO_CONTENT, http_response_code = "205", XDM_CONST.HTTP_RSP_CODE_RESET_CONTENT, http_response_code = "206", XDM_CONST.HTTP_RSP_CODE_PARTIAL_CONTENT, http_response_code = "207", XDM_CONST.HTTP_RSP_CODE_MULTI__STATUS, http_response_code = "208", XDM_CONST.HTTP_RSP_CODE_ALREADY_REPORTED, http_response_code = "226", XDM_CONST.HTTP_RSP_CODE_IM_USED, http_response_code = "300", XDM_CONST.HTTP_RSP_CODE_MULTIPLE_CHOICES, http_response_code = "301", XDM_CONST.HTTP_RSP_CODE_MOVED_PERMANENTLY, http_response_code = "302", XDM_CONST.HTTP_RSP_CODE_FOUND, http_response_code = "303", XDM_CONST.HTTP_RSP_CODE_SEE_OTHER, http_response_code = "304", XDM_CONST.HTTP_RSP_CODE_NOT_MODIFIED, http_response_code = "305", XDM_CONST.HTTP_RSP_CODE_USE_PROXY, http_response_code = "307", XDM_CONST.HTTP_RSP_CODE_TEMPORARY_REDIRECT, http_response_code = "308", XDM_CONST.HTTP_RSP_CODE_PERMANENT_REDIRECT, http_response_code = "400", XDM_CONST.HTTP_RSP_CODE_BAD_REQUEST, http_response_code = "401", XDM_CONST.HTTP_RSP_CODE_UNAUTHORIZED, http_response_code = "402", XDM_CONST.HTTP_RSP_CODE_PAYMENT_REQUIRED, http_response_code = "403", XDM_CONST.HTTP_RSP_CODE_FORBIDDEN, http_response_code = "404", XDM_CONST.HTTP_RSP_CODE_NOT_FOUND, http_response_code = "405", XDM_CONST.HTTP_RSP_CODE_METHOD_NOT_ALLOWED, http_response_code = "406", XDM_CONST.HTTP_RSP_CODE_NOT_ACCEPTABLE, http_response_code = "407", XDM_CONST.HTTP_RSP_CODE_PROXY_AUTHENTICATION_REQUIRED, http_response_code = "408", XDM_CONST.HTTP_RSP_CODE_REQUEST_TIMEOUT, http_response_code = "409", XDM_CONST.HTTP_RSP_CODE_CONFLICT, http_response_code = "410", XDM_CONST.HTTP_RSP_CODE_GONE, http_response_code = "411", XDM_CONST.HTTP_RSP_CODE_LENGTH_REQUIRED, http_response_code = "412", XDM_CONST.HTTP_RSP_CODE_PRECONDITION_FAILED, http_response_code = "413", XDM_CONST.HTTP_RSP_CODE_CONTENT_TOO_LARGE, http_response_code = "414", XDM_CONST.HTTP_RSP_CODE_URI_TOO_LONG, http_response_code = "415", XDM_CONST.HTTP_RSP_CODE_UNSUPPORTED_MEDIA_TYPE, http_response_code = "416", XDM_CONST.HTTP_RSP_CODE_RANGE_NOT_SATISFIABLE, http_response_code = "417", XDM_CONST.HTTP_RSP_CODE_EXPECTATION_FAILED, http_response_code = "421", XDM_CONST.HTTP_RSP_CODE_MISDIRECTED_REQUEST, http_response_code = "422", XDM_CONST.HTTP_RSP_CODE_UNPROCESSABLE_CONTENT, http_response_code = "423", XDM_CONST.HTTP_RSP_CODE_LOCKED, http_response_code = "424", XDM_CONST.HTTP_RSP_CODE_FAILED_DEPENDENCY, http_response_code = "425", XDM_CONST.HTTP_RSP_CODE_TOO_EARLY, http_response_code = "426", XDM_CONST.HTTP_RSP_CODE_UPGRADE_REQUIRED, http_response_code = "428", XDM_CONST.HTTP_RSP_CODE_PRECONDITION_REQUIRED, http_response_code = "429", XDM_CONST.HTTP_RSP_CODE_TOO_MANY_REQUESTS, http_response_code = "431", XDM_CONST.HTTP_RSP_CODE_REQUEST_HEADER_FIELDS_TOO_LARGE, http_response_code = "451", XDM_CONST.HTTP_RSP_CODE_UNAVAILABLE_FOR_LEGAL_REASONS, http_response_code = "500", XDM_CONST.HTTP_RSP_CODE_INTERNAL_SERVER_ERROR, http_response_code = "501", XDM_CONST.HTTP_RSP_CODE_NOT_IMPLEMENTED, http_response_code = "502", XDM_CONST.HTTP_RSP_CODE_BAD_GATEWAY, http_response_code = "503", XDM_CONST.HTTP_RSP_CODE_SERVICE_UNAVAILABLE, http_response_code = "504", XDM_CONST.HTTP_RSP_CODE_GATEWAY_TIMEOUT, http_response_code = "505", XDM_CONST.HTTP_RSP_CODE_HTTP_VERSION_NOT_SUPPORTED, http_response_code = "506", XDM_CONST.HTTP_RSP_CODE_VARIANT_ALSO_NEGOTIATES, http_response_code = "507", XDM_CONST.HTTP_RSP_CODE_INSUFFICIENT_STORAGE, http_response_code = "508", XDM_CONST.HTTP_RSP_CODE_LOOP_DETECTED, http_response_code = "511", XDM_CONST.HTTP_RSP_CODE_NETWORK_AUTHENTICATION_REQUIRED, http_response_code = null, null, to_string(http_response_code)),
    xdm.network.http.url = uri,
    xdm.network.application_protocol = http_version,
    xdm.source.user_agent = user_agent,
    xdm.source.process.identifier = thread_identifier,
    xdm.source.process.name = event_type,
    xdm.source.host.hostname = syslog_hostname,
    xdm.target.resource.value = uri;

// sso-tomcat & lookupsvc-localhost_access events 
alter event_type = arrayindex(regextract(_raw_log, "^\<\d{1,3}\>\d+\s+\S+\s+\S+\s+(\S+)"), 0)
| filter event_type in ("sso-tomcat", "lookupsvc-localhost_access")
| alter 
    syslog_priority = to_integer(arrayindex(regextract(_raw_log, "^\<(\d{1,3})\>\S+"), 0)),
    syslog_hostname = arrayindex(regextract(_raw_log, "\<\d{1,3}\>\S+\s+\S+\s+(\S+)"), 0), 
    syslog_msg = arrayindex(regextract(_raw_log, "^\<\d{1,3}\>\d+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+(.+)"), 0)
| alter 
    // since the log does not include an explicit severity, extract it from the syslog header priority field   
    severity = to_string(subtract(syslog_priority, multiply(floor(divide(syslog_priority, 8)), 8))),
    event_payload = arrayindex(regextract(syslog_msg, "\[[^\]]+\]\s+(.+)"), 0),
    http_request_line = regextract(arrayindex(regextract(syslog_msg, "HTTP\S+\s+\w+\s+\/\S+"), 0), "(\S+)")
| alter 
    thread_identifier =  arrayindex(regextract(event_payload, "(\S+)"), 0),
    user_agent = arrayindex(regextract(event_payload, "Request\]\s+\"([^\"]+)"), 0),
    client_ip =  coalesce(arrayindex(regextract(event_payload, "Request\]\s+(\S+):\d{1,5}"), 0), 
                          arrayindex(regextract(event_payload, "Request\]\s+\"[^\"]+\"\s+[^\/]+\/(\S+):\d{1,5}"), 0)),
    client_port =  coalesce(arrayindex(regextract(event_payload, "Request\]\s+\S+:(\d{1,5})"), 0), 
                          arrayindex(regextract(event_payload, "Request\]\s+\"[^\"]+\"\s+[^\/]+\/\S+:(\d{1,5})"), 0)),
    server_ip = arrayindex(regextract(event_payload, "\"\s+(\d+[^\/]+)[^\:]+\:\d{1,5}"), 0),
    server_port = to_integer(arrayindex(regextract(event_payload, "to\s+local\s+(\d{1,5})"), 0)),
    http_version = arrayindex(http_request_line, 0),
    http_method = arrayindex(http_request_line, 1),
    uri = arrayindex(http_request_line, 2),
    bytes = to_number(arrayindex(regextract(event_payload, "(\d+)\s+bytes"), 0)),
    http_response_code = arrayindex(regextract(event_payload, "Response\]\s+(\d+)"), 0),
    process_duration_ms = to_integer(arrayindex(regextract(event_payload, "(\d+)ms"), 0))
| alter
    xdm.alert.severity = severity,
    xdm.event.type = event_type,
    xdm.event.description = syslog_msg, 
    xdm.event.duration = process_duration_ms,
    xdm.event.log_level = if(severity = "0", XDM_CONST.LOG_LEVEL_EMERGENCY , severity = "1", XDM_CONST.LOG_LEVEL_ALERT , severity = "2", XDM_CONST.LOG_LEVEL_CRITICAL, severity = "3", XDM_CONST.LOG_LEVEL_ERROR, severity = "4", XDM_CONST.LOG_LEVEL_WARNING, severity = "5", XDM_CONST.LOG_LEVEL_NOTICE, severity = "6", XDM_CONST.LOG_LEVEL_INFORMATIONAL, severity = "7", XDM_CONST.LOG_LEVEL_DEBUG, severity),
    xdm.network.http.method = if(http_method = "ACL", XDM_CONST.HTTP_METHOD_ACL, http_method = "BASELINE_CONTROL", XDM_CONST.HTTP_METHOD_BASELINE_CONTROL, http_method = "BIND", XDM_CONST.HTTP_METHOD_BIND, http_method = "CHECKIN", XDM_CONST.HTTP_METHOD_CHECKIN, http_method = "CHECKOUT", XDM_CONST.HTTP_METHOD_CHECKOUT, http_method = "CONNECT", XDM_CONST.HTTP_METHOD_CONNECT, http_method = "COPY", XDM_CONST.HTTP_METHOD_COPY, http_method = "DELETE", XDM_CONST.HTTP_METHOD_DELETE, http_method = "GET", XDM_CONST.HTTP_METHOD_GET, http_method = "HEAD", XDM_CONST.HTTP_METHOD_HEAD, http_method = "LABEL", XDM_CONST.HTTP_METHOD_LABEL, http_method = "LINK", XDM_CONST.HTTP_METHOD_LINK, http_method = "LOCK", XDM_CONST.HTTP_METHOD_LOCK, http_method = "MERGE", XDM_CONST.HTTP_METHOD_MERGE, http_method = "MKACTIVITY", XDM_CONST.HTTP_METHOD_MKACTIVITY, http_method = "MKCALENDAR", XDM_CONST.HTTP_METHOD_MKCALENDAR, http_method = "MKCOL", XDM_CONST.HTTP_METHOD_MKCOL, http_method = "MKREDIRECTREF", XDM_CONST.HTTP_METHOD_MKREDIRECTREF, http_method = "MKWORKSPACE", XDM_CONST.HTTP_METHOD_MKWORKSPACE, http_method = "MOVE", XDM_CONST.HTTP_METHOD_MOVE, http_method = "OPTIONS", XDM_CONST.HTTP_METHOD_OPTIONS, http_method = "ORDERPATCH", XDM_CONST.HTTP_METHOD_ORDERPATCH, http_method = "PATCH", XDM_CONST.HTTP_METHOD_PATCH, http_method = "POST", XDM_CONST.HTTP_METHOD_POST, http_method = "PRI", XDM_CONST.HTTP_METHOD_PRI, http_method = "PROPFIND", XDM_CONST.HTTP_METHOD_PROPFIND, http_method = "PROPPATCH", XDM_CONST.HTTP_METHOD_PROPPATCH, http_method = "PUT", XDM_CONST.HTTP_METHOD_PUT, http_method = "REBIND", XDM_CONST.HTTP_METHOD_REBIND, http_method = "REPORT", XDM_CONST.HTTP_METHOD_REPORT, http_method = "SEARCH", XDM_CONST.HTTP_METHOD_SEARCH, http_method = "TRACE", XDM_CONST.HTTP_METHOD_TRACE, http_method = "UNBIND", XDM_CONST.HTTP_METHOD_UNBIND, http_method = "UNCHECKOUT", XDM_CONST.HTTP_METHOD_UNCHECKOUT, http_method = "UNLINK", XDM_CONST.HTTP_METHOD_UNLINK, http_method = "UNLOCK", XDM_CONST.HTTP_METHOD_UNLOCK, http_method = "UPDATE", XDM_CONST.HTTP_METHOD_UPDATE, http_method = "UPDATEREDIRECTREF", XDM_CONST.HTTP_METHOD_UPDATEREDIRECTREF, http_method = "VERSION_CONTROL", XDM_CONST.HTTP_METHOD_VERSION_CONTROL, to_string(http_method)),
    xdm.network.http.response_code = if(http_response_code = "100", XDM_CONST.HTTP_RSP_CODE_CONTINUE, http_response_code = "101", XDM_CONST.HTTP_RSP_CODE_SWITCHING_PROTOCOLS, http_response_code = "102", XDM_CONST.HTTP_RSP_CODE_PROCESSING, http_response_code = "103", XDM_CONST.HTTP_RSP_CODE_EARLY_HINTS, http_response_code = "200", XDM_CONST.HTTP_RSP_CODE_OK, http_response_code = "201", XDM_CONST.HTTP_RSP_CODE_CREATED, http_response_code = "202", XDM_CONST.HTTP_RSP_CODE_ACCEPTED, http_response_code = "203", XDM_CONST.HTTP_RSP_CODE_NON__AUTHORITATIVE_INFORMATION, http_response_code = "204", XDM_CONST.HTTP_RSP_CODE_NO_CONTENT, http_response_code = "205", XDM_CONST.HTTP_RSP_CODE_RESET_CONTENT, http_response_code = "206", XDM_CONST.HTTP_RSP_CODE_PARTIAL_CONTENT, http_response_code = "207", XDM_CONST.HTTP_RSP_CODE_MULTI__STATUS, http_response_code = "208", XDM_CONST.HTTP_RSP_CODE_ALREADY_REPORTED, http_response_code = "226", XDM_CONST.HTTP_RSP_CODE_IM_USED, http_response_code = "300", XDM_CONST.HTTP_RSP_CODE_MULTIPLE_CHOICES, http_response_code = "301", XDM_CONST.HTTP_RSP_CODE_MOVED_PERMANENTLY, http_response_code = "302", XDM_CONST.HTTP_RSP_CODE_FOUND, http_response_code = "303", XDM_CONST.HTTP_RSP_CODE_SEE_OTHER, http_response_code = "304", XDM_CONST.HTTP_RSP_CODE_NOT_MODIFIED, http_response_code = "305", XDM_CONST.HTTP_RSP_CODE_USE_PROXY, http_response_code = "307", XDM_CONST.HTTP_RSP_CODE_TEMPORARY_REDIRECT, http_response_code = "308", XDM_CONST.HTTP_RSP_CODE_PERMANENT_REDIRECT, http_response_code = "400", XDM_CONST.HTTP_RSP_CODE_BAD_REQUEST, http_response_code = "401", XDM_CONST.HTTP_RSP_CODE_UNAUTHORIZED, http_response_code = "402", XDM_CONST.HTTP_RSP_CODE_PAYMENT_REQUIRED, http_response_code = "403", XDM_CONST.HTTP_RSP_CODE_FORBIDDEN, http_response_code = "404", XDM_CONST.HTTP_RSP_CODE_NOT_FOUND, http_response_code = "405", XDM_CONST.HTTP_RSP_CODE_METHOD_NOT_ALLOWED, http_response_code = "406", XDM_CONST.HTTP_RSP_CODE_NOT_ACCEPTABLE, http_response_code = "407", XDM_CONST.HTTP_RSP_CODE_PROXY_AUTHENTICATION_REQUIRED, http_response_code = "408", XDM_CONST.HTTP_RSP_CODE_REQUEST_TIMEOUT, http_response_code = "409", XDM_CONST.HTTP_RSP_CODE_CONFLICT, http_response_code = "410", XDM_CONST.HTTP_RSP_CODE_GONE, http_response_code = "411", XDM_CONST.HTTP_RSP_CODE_LENGTH_REQUIRED, http_response_code = "412", XDM_CONST.HTTP_RSP_CODE_PRECONDITION_FAILED, http_response_code = "413", XDM_CONST.HTTP_RSP_CODE_CONTENT_TOO_LARGE, http_response_code = "414", XDM_CONST.HTTP_RSP_CODE_URI_TOO_LONG, http_response_code = "415", XDM_CONST.HTTP_RSP_CODE_UNSUPPORTED_MEDIA_TYPE, http_response_code = "416", XDM_CONST.HTTP_RSP_CODE_RANGE_NOT_SATISFIABLE, http_response_code = "417", XDM_CONST.HTTP_RSP_CODE_EXPECTATION_FAILED, http_response_code = "421", XDM_CONST.HTTP_RSP_CODE_MISDIRECTED_REQUEST, http_response_code = "422", XDM_CONST.HTTP_RSP_CODE_UNPROCESSABLE_CONTENT, http_response_code = "423", XDM_CONST.HTTP_RSP_CODE_LOCKED, http_response_code = "424", XDM_CONST.HTTP_RSP_CODE_FAILED_DEPENDENCY, http_response_code = "425", XDM_CONST.HTTP_RSP_CODE_TOO_EARLY, http_response_code = "426", XDM_CONST.HTTP_RSP_CODE_UPGRADE_REQUIRED, http_response_code = "428", XDM_CONST.HTTP_RSP_CODE_PRECONDITION_REQUIRED, http_response_code = "429", XDM_CONST.HTTP_RSP_CODE_TOO_MANY_REQUESTS, http_response_code = "431", XDM_CONST.HTTP_RSP_CODE_REQUEST_HEADER_FIELDS_TOO_LARGE, http_response_code = "451", XDM_CONST.HTTP_RSP_CODE_UNAVAILABLE_FOR_LEGAL_REASONS, http_response_code = "500", XDM_CONST.HTTP_RSP_CODE_INTERNAL_SERVER_ERROR, http_response_code = "501", XDM_CONST.HTTP_RSP_CODE_NOT_IMPLEMENTED, http_response_code = "502", XDM_CONST.HTTP_RSP_CODE_BAD_GATEWAY, http_response_code = "503", XDM_CONST.HTTP_RSP_CODE_SERVICE_UNAVAILABLE, http_response_code = "504", XDM_CONST.HTTP_RSP_CODE_GATEWAY_TIMEOUT, http_response_code = "505", XDM_CONST.HTTP_RSP_CODE_HTTP_VERSION_NOT_SUPPORTED, http_response_code = "506", XDM_CONST.HTTP_RSP_CODE_VARIANT_ALSO_NEGOTIATES, http_response_code = "507", XDM_CONST.HTTP_RSP_CODE_INSUFFICIENT_STORAGE, http_response_code = "508", XDM_CONST.HTTP_RSP_CODE_LOOP_DETECTED, http_response_code = "511", XDM_CONST.HTTP_RSP_CODE_NETWORK_AUTHENTICATION_REQUIRED, http_response_code = null, null, to_string(http_response_code)),
    xdm.network.http.url = uri,
    xdm.network.application_protocol = http_version,
    xdm.source.ipv4 = client_ip,
    xdm.source.port = to_integer(client_port), 
    xdm.source.user_agent = user_agent,
    xdm.source.sent_bytes = bytes, 
    xdm.source.process.identifier = thread_identifier,
    xdm.source.process.name = event_type,
    xdm.source.host.hostname = syslog_hostname,
    xdm.target.resource.value = uri,
    xdm.target.ipv4 = server_ip, 
    xdm.target.port = server_port;

// vmon
alter event_type = arrayindex(regextract(_raw_log, "^\<\d{1,3}\>\d+\s+\S+\s+\S+\s+(\S+)"), 0)
| filter event_type = "vmon" 
| alter 
    syslog_priority = to_integer(arrayindex(regextract(_raw_log, "^\<(\d{1,3})\>\S+"), 0)),
    syslog_hostname = arrayindex(regextract(_raw_log, "\<\d{1,3}\>\S+\s+\S+\s+(\S+)"), 0), 
    syslog_msg = arrayindex(regextract(_raw_log, "^\<\d{1,3}\>\d+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+(.+)"), 0)
| alter 
    event_payload = arrayindex(regextract(syslog_msg, "\S+\s+(.+)"), 0),
     // since the log does not include an explicit severity, extract it from the syslog header priority field   
    severity = to_string(subtract(syslog_priority, multiply(floor(divide(syslog_priority, 8)), 8)))
| alter
    host_id = arrayindex(regextract(event_payload, "(host-\w+)"), 0),
    service = arrayindex(regextract(event_payload, "ֿ\s+\<([\w\-]+)"), 0),
    user = arrayindex(regextract(event_payload, "as user (\S+)"), 0),
    command = coalesce(arrayindex(regextract(syslog_msg, "Constructed command:\s*(.+)"), 0),
                    arrayindex(regextract(syslog_msg, "Running\s+the\s+(.+)\s+command"), 0)),
    state =  arrayindex(regextract(event_payload, "State (\w+)"), 0),
    op = arrayindex(regextract(event_payload, "service\s+batch\s+op\s+(\w+)"), 0)
| alter
    xdm.alert.severity = severity,
    xdm.event.type = event_type,
    xdm.event.description = syslog_msg,
    xdm.event.operation_sub_type = op, 
    xdm.event.outcome = state,
    xdm.event.log_level = if(severity = "0", XDM_CONST.LOG_LEVEL_EMERGENCY , severity = "1", XDM_CONST.LOG_LEVEL_ALERT , severity = "2", XDM_CONST.LOG_LEVEL_CRITICAL, severity = "3", XDM_CONST.LOG_LEVEL_ERROR, severity = "4", XDM_CONST.LOG_LEVEL_WARNING, severity = "5", XDM_CONST.LOG_LEVEL_NOTICE, severity = "6", XDM_CONST.LOG_LEVEL_INFORMATIONAL, severity = "7", XDM_CONST.LOG_LEVEL_DEBUG, severity),
    xdm.source.host.device_id = host_id, 
    xdm.source.process.command_line = command, 
    xdm.source.application.name = service, 
    xdm.source.user.username = user,
    xdm.source.process.name = event_type,
    xdm.source.host.hostname = syslog_hostname;

// rhttpproxy-main
alter event_type = arrayindex(regextract(_raw_log, "^\<\d{1,3}\>\d+\s+\S+\s+\S+\s+(\S+)"), 0)
| filter event_type = "rhttpproxy-main" 
| alter 
    syslog_priority = to_integer(arrayindex(regextract(_raw_log, "^\<(\d{1,3})\>\S+"), 0)),
    syslog_hostname = arrayindex(regextract(_raw_log, "\<\d{1,3}\>\S+\s+\S+\s+(\S+)"), 0), 
    syslog_msg = arrayindex(regextract(_raw_log, "^\<\d{1,3}\>\d+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+(.+)"), 0)
| alter
    msg_severity = uppercase(arrayindex(regextract(syslog_msg, "(\w+)\s+[\w-]+\[\d+"), 0)),
    pid = to_integer(arrayindex(regextract(syslog_msg, "[\w-]+\[(\d+)\]"), 0)),
    sub_module = arrayindex(regextract(syslog_msg, "sub=([\w-]+)"), 0)
| alter // map the msg severity to RFC 5424 standard values, if the log does not include an explicit severity, extract it from the syslog header priority field   
    severity = if(msg_severity = null, to_string(subtract(syslog_priority, multiply(floor(divide(syslog_priority, 8)), 8))), msg_severity ~= "DEBUG|VERBOSE", "7", msg_severity ~= "INFO", "6", msg_severity ~= "NOTICE", "5", msg_severity ~= "WARN", "4", msg_severity ~= "ERROR", "3", msg_severity ~= "CRITICAL", "2", msg_severity ~= "ALERT", "1", msg_severity ~= "EMERGENCY", "0", msg_severity)
| alter
    xdm.alert.severity = severity, 
    xdm.event.type = event_type,
    xdm.event.description = syslog_msg,
    xdm.event.log_level = if(severity = "0", XDM_CONST.LOG_LEVEL_EMERGENCY , severity = "1", XDM_CONST.LOG_LEVEL_ALERT , severity = "2", XDM_CONST.LOG_LEVEL_CRITICAL, severity = "3", XDM_CONST.LOG_LEVEL_ERROR, severity = "4", XDM_CONST.LOG_LEVEL_WARNING, severity = "5", XDM_CONST.LOG_LEVEL_NOTICE, severity = "6", XDM_CONST.LOG_LEVEL_INFORMATIONAL, severity = "7", XDM_CONST.LOG_LEVEL_DEBUG, severity),
    xdm.source.process.pid = pid,
    xdm.source.application.name = sub_module, 
    xdm.source.process.name = event_type,
    xdm.source.host.hostname = syslog_hostname;

// sudo
alter event_type = arrayindex(regextract(_raw_log, "^\<\d{1,3}\>\d+\s+\S+\s+\S+\s+(\S+)"), 0)
| filter event_type = "sudo" 
| alter 
    syslog_priority = to_integer(arrayindex(regextract(_raw_log, "^\<(\d{1,3})\>\S+"), 0)),
    syslog_hostname = arrayindex(regextract(_raw_log, "\<\d{1,3}\>\S+\s+\S+\s+(\S+)"), 0), 
    syslog_msg = arrayindex(regextract(_raw_log, "^\<\d{1,3}\>\d+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+(.+)"), 0)
| alter
    user = coalesce(arrayindex(regextract(syslog_msg, "USER=(\w+)"), 0),
                    arrayindex(regextract(syslog_msg, "for\s+user\s+(\w+)"), 0)),
    uid = arrayindex(regextract(syslog_msg, "uid=(\d+)"), 0),
    command = arrayindex(regextract(syslog_msg, "COMMAND=(\S+)"), 0),
    working_directory = arrayindex(regextract(syslog_msg, "PWD=(\S+)"), 0),
    process = rtrim(arrayindex(regextract(syslog_msg, "(\S+)"), 0), ":"),
    // since the log does not include an explicit severity, extract it from the syslog header priority field   
    severity = to_string(subtract(syslog_priority, multiply(floor(divide(syslog_priority, 8)), 8)))
| alter
    xdm.alert.severity = severity,
    xdm.event.type = event_type,
    xdm.event.description = syslog_msg,
    xdm.event.log_level = if(severity = "0", XDM_CONST.LOG_LEVEL_EMERGENCY , severity = "1", XDM_CONST.LOG_LEVEL_ALERT , severity = "2", XDM_CONST.LOG_LEVEL_CRITICAL, severity = "3", XDM_CONST.LOG_LEVEL_ERROR, severity = "4", XDM_CONST.LOG_LEVEL_WARNING, severity = "5", XDM_CONST.LOG_LEVEL_NOTICE, severity = "6", XDM_CONST.LOG_LEVEL_INFORMATIONAL, severity = "7", XDM_CONST.LOG_LEVEL_DEBUG, severity),
    xdm.source.user.username = user, 
    xdm.source.user.identifier = uid, 
    xdm.source.process.command_line = command, 
    xdm.source.process.executable.directory = working_directory, 
    xdm.source.process.name = coalesce(process, event_type),
    xdm.source.host.hostname = syslog_hostname;

// sca-vmon.std
alter event_type = arrayindex(regextract(_raw_log, "^\<\d{1,3}\>\d+\s+\S+\s+\S+\s+(\S+)"), 0)
| filter event_type = "sca-vmon.std" 
| alter 
    syslog_priority = to_integer(arrayindex(regextract(_raw_log, "^\<(\d{1,3})\>\S+"), 0)),
    syslog_hostname = arrayindex(regextract(_raw_log, "\<\d{1,3}\>\S+\s+\S+\s+(\S+)"), 0), 
    syslog_msg = arrayindex(regextract(_raw_log, "^\<\d{1,3}\>\d+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+(.+)"), 0)
| alter
    msg_severity = arrayindex(regextract(syslog_msg, "(\w+):\s+"), 0),
    module = arrayindex(regextract(syslog_msg, "\w+:\s+(\w+):"), 0),
    event_payload = coalesce(arrayindex(regextract(syslog_msg, "\w+:\s+\w+:\s+(.+)"), 0),
                             arrayindex(regextract(syslog_msg, "\w{3}\s+\d{1,2},\s+\d{4}\s+\S+\s+[AP]M\s+(.+)"), 0),
                             syslog_msg)
| alter 
    user =  arrayindex(regextract(event_payload, "\'([^\']+)\'\s+on\ssession"), 0),
    session_id =  arrayindex(regextract(event_payload, "on\ssession\s+([a-fA-F\d\-]+)"), 0),
    // map the msg severity to RFC 5424 standard values, if the log does not include an explicit severity, extract it from the syslog header priority field   
    severity = if(msg_severity = null, to_string(subtract(syslog_priority, multiply(floor(divide(syslog_priority, 8)), 8))), msg_severity ~= "DEBUG|VERBOSE", "7", msg_severity ~= "INFO", "6", msg_severity ~= "NOTICE", "5", msg_severity ~= "WARN", "4", msg_severity ~= "ERROR", "3", msg_severity ~= "CRITICAL", "2", msg_severity ~= "ALERT", "1", msg_severity ~= "EMERGENCY", "0", msg_severity)
| alter
    xdm.alert.severity = severity, 
    xdm.event.type = event_type,
    xdm.event.description = syslog_msg,
    xdm.event.outcome = if(event_payload contains "Successfully", XDM_CONST.OUTCOME_SUCCESS),
    xdm.event.log_level = if(severity = "0", XDM_CONST.LOG_LEVEL_EMERGENCY , severity = "1", XDM_CONST.LOG_LEVEL_ALERT , severity = "2", XDM_CONST.LOG_LEVEL_CRITICAL, severity = "3", XDM_CONST.LOG_LEVEL_ERROR, severity = "4", XDM_CONST.LOG_LEVEL_WARNING, severity = "5", XDM_CONST.LOG_LEVEL_NOTICE, severity = "6", XDM_CONST.LOG_LEVEL_INFORMATIONAL, severity = "7", XDM_CONST.LOG_LEVEL_DEBUG, severity),
    xdm.network.session_id = session_id, 
    xdm.source.user.username = user, 
    xdm.source.application.name = module,  
    xdm.source.process.name = event_type,
    xdm.source.host.hostname = syslog_hostname;

// applmgmt
alter event_type = arrayindex(regextract(_raw_log, "^\<\d{1,3}\>\d+\s+\S+\s+\S+\s+(\S+)"), 0)
| filter event_type = "applmgmt" 
| alter 
    syslog_priority = to_integer(arrayindex(regextract(_raw_log, "^\<(\d{1,3})\>\S+"), 0)),
    syslog_hostname = arrayindex(regextract(_raw_log, "\<\d{1,3}\>\S+\s+\S+\s+(\S+)"), 0), 
    syslog_msg = arrayindex(regextract(_raw_log, "^\<\d{1,3}\>\d+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+(.+)"), 0)
| alter
    pid = to_integer(arrayindex(regextract(syslog_msg, "\[(\d+)\]"), 0)),
    msg_severity = arrayindex(regextract(syslog_msg, "\[\d+\]\s*(\w+)\:"), 0),
    event_payload = arrayindex(regextract(syslog_msg, "\[\d+\]\s*\w+\:(.+)"), 0)
| alter 
    user =  arrayindex(regextract(event_payload, "User=([^,]+)"), 0),
    groups = arrayfilter(regextract(arrayindex(regextract(event_payload, "groups=\{([^\}]+\})"), 0), "\'([^\']+)"), len("@element") > 2),
    file =  arrayindex(regextract(event_payload, "file\s+(\/\S+)"), 0),
    // map the msg severity to RFC 5424 standard values, if the log does not include an explicit severity, extract it from the syslog header priority field   
    severity = if(msg_severity = null, to_string(subtract(syslog_priority, multiply(floor(divide(syslog_priority, 8)), 8))), msg_severity ~= "DEBUG|VERBOSE", "7", msg_severity ~= "INFO", "6", msg_severity ~= "NOTICE", "5", msg_severity ~= "WARN", "4", msg_severity ~= "ERROR", "3", msg_severity ~= "CRITICAL", "2", msg_severity ~= "ALERT", "1", msg_severity ~= "EMERGENCY", "0", msg_severity)
| alter
    xdm.alert.severity = severity, 
    xdm.event.type = event_type,
    xdm.event.description = syslog_msg,
    xdm.event.log_level = if(severity = "0", XDM_CONST.LOG_LEVEL_EMERGENCY , severity = "1", XDM_CONST.LOG_LEVEL_ALERT , severity = "2", XDM_CONST.LOG_LEVEL_CRITICAL, severity = "3", XDM_CONST.LOG_LEVEL_ERROR, severity = "4", XDM_CONST.LOG_LEVEL_WARNING, severity = "5", XDM_CONST.LOG_LEVEL_NOTICE, severity = "6", XDM_CONST.LOG_LEVEL_INFORMATIONAL, severity = "7", XDM_CONST.LOG_LEVEL_DEBUG, severity),
    xdm.source.user.username = user, 
    xdm.source.user.groups = groups, 
    xdm.source.process.name = event_type,
    xdm.source.process.pid = pid,
    xdm.source.host.hostname = syslog_hostname,
    xdm.target.file.filename = file; 

// vstats
alter event_type = arrayindex(regextract(_raw_log, "^\<\d{1,3}\>\d+\s+\S+\s+\S+\s+(\S+)"), 0)
| filter event_type = "vstats" 
| alter 
    syslog_priority = to_integer(arrayindex(regextract(_raw_log, "^\<(\d{1,3})\>\S+"), 0)),
    syslog_hostname = arrayindex(regextract(_raw_log, "\<\d{1,3}\>\S+\s+\S+\s+(\S+)"), 0), 
    syslog_msg = arrayindex(regextract(_raw_log, "^\<\d{1,3}\>\d+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+(.+)"), 0)
| alter 
    event_payload = arrayindex(regextract(syslog_msg, "\S+\s+\w+\s+\S+\s+(.+)"), 0),
    // since the log does not include an explicit severity, extract it from the syslog header priority field   
    severity = to_string(subtract(syslog_priority, multiply(floor(divide(syslog_priority, 8)), 8)))
| alter 
    resource_name = arrayindex(regextract(event_payload, "\{\"([^\"]+)"), 0),
    resource_value = arrayindex(regextract(event_payload, "\{\"[^\"]+\"\:\s*\"([^\"]+)"), 0)
| alter
    xdm.alert.severity = severity,
    xdm.event.type = event_type,
    xdm.event.description = syslog_msg,
    xdm.event.log_level = if(severity = "0", XDM_CONST.LOG_LEVEL_EMERGENCY , severity = "1", XDM_CONST.LOG_LEVEL_ALERT , severity = "2", XDM_CONST.LOG_LEVEL_CRITICAL, severity = "3", XDM_CONST.LOG_LEVEL_ERROR, severity = "4", XDM_CONST.LOG_LEVEL_WARNING, severity = "5", XDM_CONST.LOG_LEVEL_NOTICE, severity = "6", XDM_CONST.LOG_LEVEL_INFORMATIONAL, severity = "7", XDM_CONST.LOG_LEVEL_DEBUG, severity),
    xdm.source.process.name = event_type,
    xdm.source.host.hostname = syslog_hostname,
    xdm.target.resource.name = resource_name,
    xdm.target.resource.value = resource_value;

// vmafdd
alter event_type = arrayindex(regextract(_raw_log, "^\<\d{1,3}\>\d+\s+\S+\s+\S+\s+(\S+)"), 0)
| filter event_type = "vmafdd" 
| alter 
    syslog_priority = to_integer(arrayindex(regextract(_raw_log, "^\<(\d{1,3})\>\S+"), 0)),
    syslog_hostname = arrayindex(regextract(_raw_log, "\<\d{1,3}\>\S+\s+\S+\s+(\S+)"), 0), 
    syslog_msg = arrayindex(regextract(_raw_log, "^\<\d{1,3}\>\d+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+(.+)"), 0)
| alter 
    process_name = arrayindex(regextract(syslog_msg, "\[([^\]]+)"), 0),
    msg_severity = arrayindex(regextract(syslog_msg, "\]\[(\w+)"), 0)
| alter // map the msg severity to RFC 5424 standard values, if the log does not include an explicit severity, extract it from the syslog header priority field   
    severity = if(msg_severity = null, to_string(subtract(syslog_priority, multiply(floor(divide(syslog_priority, 8)), 8))), msg_severity ~= "DEBUG|VERBOSE", "7", msg_severity ~= "INFO", "6", msg_severity ~= "NOTICE", "5", msg_severity ~= "WARN", "4", msg_severity ~= "ERROR", "3", msg_severity ~= "CRITICAL", "2", msg_severity ~= "ALERT", "1", msg_severity ~= "EMERGENCY", "0", msg_severity)
| alter
    xdm.alert.severity = severity, 
    xdm.event.type = event_type,
    xdm.event.description = syslog_msg,
    xdm.event.log_level = if(severity = "0", XDM_CONST.LOG_LEVEL_EMERGENCY , severity = "1", XDM_CONST.LOG_LEVEL_ALERT , severity = "2", XDM_CONST.LOG_LEVEL_CRITICAL, severity = "3", XDM_CONST.LOG_LEVEL_ERROR, severity = "4", XDM_CONST.LOG_LEVEL_WARNING, severity = "5", XDM_CONST.LOG_LEVEL_NOTICE, severity = "6", XDM_CONST.LOG_LEVEL_INFORMATIONAL, severity = "7", XDM_CONST.LOG_LEVEL_DEBUG, severity),
    xdm.source.process.name = coalesce(process_name, event_type),
    xdm.source.host.hostname = syslog_hostname;

// certificatemanagement-svcs
alter event_type = arrayindex(regextract(_raw_log, "^\<\d{1,3}\>\d+\s+\S+\s+\S+\s+(\S+)"), 0)
| filter event_type = "certificatemanagement-svcs" 
| alter 
    syslog_priority = to_integer(arrayindex(regextract(_raw_log, "^\<(\d{1,3})\>\S+"), 0)),
    syslog_hostname = arrayindex(regextract(_raw_log, "\<\d{1,3}\>\S+\s+\S+\s+(\S+)"), 0), 
    syslog_msg = arrayindex(regextract(_raw_log, "^\<\d{1,3}\>\d+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+(.+)"), 0)
| alter 
    process_identifier = arrayindex(regextract(syslog_msg, "\w+\s+\[(\S+)"), 0),
    thread_id = to_integer(arrayindex(regextract(syslog_msg, "pool\-\d+\-thread\-(\d+)"), 0)),
    msg_severity = arrayindex(regextract(syslog_msg, "(\w+)\s+\S+\s+opId="), 0),
    app_component = arrayindex(regextract(syslog_msg, "\w+\s+(\S+)\s+opId="), 0),
    operation_id = arrayindex(regextract(syslog_msg, "opId=([^\]]+)"), 0),
    operation = arrayindex(regextract(syslog_msg, "Operation (\S+) took"), 0), 
    ms = to_integer(arrayindex(regextract(syslog_msg, "took\s+(\d+)\s+ms"), 0)) 
| alter // map the msg severity to RFC 5424 standard values, if the log does not include an explicit severity, extract it from the syslog header priority field   
    severity = if(msg_severity = null, to_string(subtract(syslog_priority, multiply(floor(divide(syslog_priority, 8)), 8))), msg_severity ~= "DEBUG|VERBOSE", "7", msg_severity ~= "INFO", "6", msg_severity ~= "NOTICE", "5", msg_severity ~= "WARN", "4", msg_severity ~= "ERROR", "3", msg_severity ~= "CRITICAL", "2", msg_severity ~= "ALERT", "1", msg_severity ~= "EMERGENCY", "0", msg_severity)
| alter 
    xdm.alert.severity = severity, 
    xdm.event.type = event_type,
    xdm.event.description = syslog_msg,
    xdm.event.operation_sub_type = operation,
    xdm.event.duration = ms, 
    xdm.event.log_level = if(severity = "0", XDM_CONST.LOG_LEVEL_EMERGENCY , severity = "1", XDM_CONST.LOG_LEVEL_ALERT , severity = "2", XDM_CONST.LOG_LEVEL_CRITICAL, severity = "3", XDM_CONST.LOG_LEVEL_ERROR, severity = "4", XDM_CONST.LOG_LEVEL_WARNING, severity = "5", XDM_CONST.LOG_LEVEL_NOTICE, severity = "6", XDM_CONST.LOG_LEVEL_INFORMATIONAL, severity = "7", XDM_CONST.LOG_LEVEL_DEBUG, severity),
    xdm.session_context_id = operation_id,
    xdm.source.application.name = app_component, 
    xdm.source.process.thread_id = thread_id, 
    xdm.source.process.identifier = process_identifier,
    xdm.source.process.name = event_type,
    xdm.source.host.hostname = syslog_hostname;

// cis-license
alter event_type = arrayindex(regextract(_raw_log, "^\<\d{1,3}\>\d+\s+\S+\s+\S+\s+(\S+)"), 0)
| filter event_type = "cis-license" 
| alter 
    syslog_priority = to_integer(arrayindex(regextract(_raw_log, "^\<(\d{1,3})\>\S+"), 0)),
    syslog_hostname = arrayindex(regextract(_raw_log, "\<\d{1,3}\>\S+\s+\S+\s+(\S+)"), 0), 
    syslog_msg = arrayindex(regextract(_raw_log, "^\<\d{1,3}\>\d+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+(.+)"), 0)
| alter 
    thread_id = to_integer(arrayindex(regextract(syslog_msg, "\S+\s+(\S+)"), 0)),
    msg_severity = coalesce(arrayindex(regextract(syslog_msg, "\S+\s+\S+\s+(\w+)\s+"), 0),
                            arrayindex(regextract(syslog_msg, "\S+\s+\S+\s+\S+\s+(\w+)\s+"), 0)),
    app_component = coalesce(arrayindex(regextract(syslog_msg, "\S+\s+\S+\s+\w+\s+(\w+\.\S+)"), 0),
                            arrayindex(regextract(syslog_msg, "\S+\s+\S+\s+\S+\s+\w+\s+(\w+\.\S+)"), 0)),
    operation_id = arrayindex(regextract(syslog_msg, "operationID=(\S+)"), 0),
    user = arrayindex(regextract(syslog_msg, "User\s+\'([^\']+)"), 0)
| alter // map the msg severity to RFC 5424 standard values, if the log does not include an explicit severity, extract it from the syslog header priority field   
    severity = if(msg_severity = null, to_string(subtract(syslog_priority, multiply(floor(divide(syslog_priority, 8)), 8))), msg_severity ~= "DEBUG|VERBOSE", "7", msg_severity ~= "INFO", "6", msg_severity ~= "NOTICE", "5", msg_severity ~= "WARN", "4", msg_severity ~= "ERROR", "3", msg_severity ~= "CRITICAL", "2", msg_severity ~= "ALERT", "1", msg_severity ~= "EMERGENCY", "0", msg_severity)
| alter 
    xdm.alert.severity = severity, 
    xdm.event.type = event_type,
    xdm.event.description = syslog_msg,
    xdm.event.log_level = if(severity = "0", XDM_CONST.LOG_LEVEL_EMERGENCY , severity = "1", XDM_CONST.LOG_LEVEL_ALERT , severity = "2", XDM_CONST.LOG_LEVEL_CRITICAL, severity = "3", XDM_CONST.LOG_LEVEL_ERROR, severity = "4", XDM_CONST.LOG_LEVEL_WARNING, severity = "5", XDM_CONST.LOG_LEVEL_NOTICE, severity = "6", XDM_CONST.LOG_LEVEL_INFORMATIONAL, severity = "7", XDM_CONST.LOG_LEVEL_DEBUG, severity),
    xdm.session_context_id = operation_id,
    xdm.source.application.name = app_component, 
    xdm.source.process.thread_id = thread_id, 
    xdm.source.process.name = event_type,
    xdm.source.user.username = user, 
    xdm.source.host.hostname = syslog_hostname;

// vdtc-main
alter event_type = arrayindex(regextract(_raw_log, "^\<\d{1,3}\>\d+\s+\S+\s+\S+\s+(\S+)"), 0)
| filter event_type = "vdtc-main" 
| alter 
    syslog_priority = to_integer(arrayindex(regextract(_raw_log, "^\<(\d{1,3})\>\S+"), 0)),
    syslog_hostname = arrayindex(regextract(_raw_log, "\<\d{1,3}\>\S+\s+\S+\s+(\S+)"), 0), 
    syslog_msg = arrayindex(regextract(_raw_log, "^\<\d{1,3}\>\d+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+(.+)"), 0)
| alter
    msg_severity = uppercase(arrayindex(regextract(syslog_msg, "(\w+)\s+[\w-]+\[\d+"), 0)),
    pid = to_integer(arrayindex(regextract(syslog_msg, "[\w-]+\[(\d+)\]"), 0)),
    sub_module = arrayindex(regextract(syslog_msg, "sub=([\w-]+)"), 0)
| alter // map the msg severity to RFC 5424 standard values, if the log does not include an explicit severity, extract it from the syslog header priority field   
    severity = if(msg_severity = null, to_string(subtract(syslog_priority, multiply(floor(divide(syslog_priority, 8)), 8))), msg_severity ~= "DEBUG|VERBOSE", "7", msg_severity ~= "INFO", "6", msg_severity ~= "NOTICE", "5", msg_severity ~= "WARN", "4", msg_severity ~= "ERROR", "3", msg_severity ~= "CRITICAL", "2", msg_severity ~= "ALERT", "1", msg_severity ~= "EMERGENCY", "0", msg_severity)
| alter 
    xdm.alert.severity = severity, 
    xdm.event.type = event_type,
    xdm.event.description = syslog_msg,
    xdm.event.log_level = if(severity = "0", XDM_CONST.LOG_LEVEL_EMERGENCY , severity = "1", XDM_CONST.LOG_LEVEL_ALERT , severity = "2", XDM_CONST.LOG_LEVEL_CRITICAL, severity = "3", XDM_CONST.LOG_LEVEL_ERROR, severity = "4", XDM_CONST.LOG_LEVEL_WARNING, severity = "5", XDM_CONST.LOG_LEVEL_NOTICE, severity = "6", XDM_CONST.LOG_LEVEL_INFORMATIONAL, severity = "7", XDM_CONST.LOG_LEVEL_DEBUG, severity),
    xdm.source.application.name = sub_module, 
    xdm.source.process.pid = pid,
    xdm.source.process.name = event_type,
    xdm.source.host.hostname = syslog_hostname;

// applmgmt-audit
alter event_type = arrayindex(regextract(_raw_log, "^\<\d{1,3}\>\d+\s+\S+\s+\S+\s+(\S+)"), 0)
| filter event_type = "applmgmt-audit" 
| alter 
    syslog_priority = to_integer(arrayindex(regextract(_raw_log, "^\<(\d{1,3})\>\S+"), 0)),
    syslog_hostname = arrayindex(regextract(_raw_log, "\<\d{1,3}\>\S+\s+\S+\s+(\S+)"), 0), 
    syslog_msg = arrayindex(regextract(_raw_log, "^\<\d{1,3}\>\d+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+(.+)"), 0)
| alter
    msg_severity = arrayindex(regextract(syslog_msg, "\S+\s+(\w+)"), 0),
    event_payload = arrayindex(regextract(syslog_msg, "\S+\s+\w+\s+(.+)"), 0)
| alter 
    user = coalesce(arrayindex(regextract(event_payload, "User=([^,]+)"), 0), 
                    rtrim(arrayindex(regextract(event_payload, "user\s*:\s*(\S+)"), 0), ".")),
    auth_method = arrayindex(regextract(event_payload, "method=(\w+)"), 0), 
    status = arrayindex(regextract(event_payload, "Status\s*:\s*(\w+)"), 0), 
    is_authorized = arrayindex(regextract(event_payload, "authorized=(\w+)"), 0), 
    privileges = regextract(event_payload, "priv=(\w+)"),
    service_id = arrayindex(regextract(event_payload, "service_id:\s*([\w\.]+)"), 0),
    operation_id = arrayindex(regextract(event_payload, "operation_id:\s*([\w\.]+)"), 0),
    // map the msg severity to RFC 5424 standard values, if the log does not include an explicit severity, extract it from the syslog header priority field   
    severity = if(msg_severity = null, to_string(subtract(syslog_priority, multiply(floor(divide(syslog_priority, 8)), 8))), msg_severity ~= "DEBUG|VERBOSE", "7", msg_severity ~= "INFO", "6", msg_severity ~= "NOTICE", "5", msg_severity ~= "WARN", "4", msg_severity ~= "ERROR", "3", msg_severity ~= "CRITICAL", "2", msg_severity ~= "ALERT", "1", msg_severity ~= "EMERGENCY", "0", msg_severity)
| alter 
    xdm.alert.severity = severity, 
    xdm.auth.auth_method = auth_method,
    xdm.event.type = event_type,
    xdm.event.description = syslog_msg,
    xdm.event.outcome = if(status = "Success" or is_authorized = "True", XDM_CONST.OUTCOME_SUCCESS, is_authorized = "False", XDM_CONST.OUTCOME_FAILED, status),
    xdm.event.log_level = if(severity = "0", XDM_CONST.LOG_LEVEL_EMERGENCY , severity = "1", XDM_CONST.LOG_LEVEL_ALERT , severity = "2", XDM_CONST.LOG_LEVEL_CRITICAL, severity = "3", XDM_CONST.LOG_LEVEL_ERROR, severity = "4", XDM_CONST.LOG_LEVEL_WARNING, severity = "5", XDM_CONST.LOG_LEVEL_NOTICE, severity = "6", XDM_CONST.LOG_LEVEL_INFORMATIONAL, severity = "7", XDM_CONST.LOG_LEVEL_DEBUG, severity),
    xdm.session_context_id = operation_id,
    xdm.source.process.name = event_type,
    xdm.intermediate.process.identifier = service_id,
    xdm.source.user.username = user, 
    xdm.source.user.groups = privileges,
    xdm.source.host.hostname = syslog_hostname;

// vapi-endpoint-access
alter event_type = arrayindex(regextract(_raw_log, "^\<\d{1,3}\>\d+\s+\S+\s+\S+\s+(\S+)"), 0)
| filter event_type = "vapi-endpoint-access" 
| alter 
    syslog_priority = to_integer(arrayindex(regextract(_raw_log, "^\<(\d{1,3})\>\S+"), 0)),
    syslog_hostname = arrayindex(regextract(_raw_log, "\<\d{1,3}\>\S+\s+\S+\s+(\S+)"), 0), 
    syslog_msg = arrayindex(regextract(_raw_log, "^\<\d{1,3}\>\d+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+(.+)"), 0)
| alter
    // since the log does not include an explicit severity, extract it from the syslog header priority field   
    severity = to_string(subtract(syslog_priority, multiply(floor(divide(syslog_priority, 8)), 8))),
    thread_identifier = arrayindex(regextract(syslog_msg, "\|\s*(\S+)"), 0),
    event_payload = arrayindex(regextract(syslog_msg, "\|\s*[^\|]+\s+\|\s*(.+)"), 0),
    http_request_line = regextract(arrayindex(regextract(syslog_msg, "\"(\w+\s+\/\S+\s+HTTP\S[^\"]+)"), 0), "(\S+)")
| alter 
    http_method = arrayindex(http_request_line, 0), 
    uri = arrayindex(http_request_line, 1), 
    http_version = arrayindex(http_request_line, 2),
    http_response_code = arrayindex(regextract(event_payload, "\"\s+(\d+)\s+\d+"), 0),
    bytes = to_integer(arrayindex(regextract(event_payload, "\"\s+\d+\s+(\d+)"), 0)),
    user_agent = arrayindex(regextract(event_payload, "\"\s+\"([^\"]+)\"\s+\d+"), 0),
    session_id = arrayindex(regextract(event_payload, "id\s+([a-fA-F\d\-]+)"), 0),
    service = arrayindex(regextract(event_payload, "service\s+([\w\.]+)"), 0)
| alter
    xdm.alert.severity = severity,
    xdm.event.type = event_type,
    xdm.event.description = syslog_msg,
    xdm.event.log_level = if(severity = "0", XDM_CONST.LOG_LEVEL_EMERGENCY , severity = "1", XDM_CONST.LOG_LEVEL_ALERT , severity = "2", XDM_CONST.LOG_LEVEL_CRITICAL, severity = "3", XDM_CONST.LOG_LEVEL_ERROR, severity = "4", XDM_CONST.LOG_LEVEL_WARNING, severity = "5", XDM_CONST.LOG_LEVEL_NOTICE, severity = "6", XDM_CONST.LOG_LEVEL_INFORMATIONAL, severity = "7", XDM_CONST.LOG_LEVEL_DEBUG, severity),
    xdm.network.session_id = session_id, 
    xdm.network.http.method = if(http_method = "ACL", XDM_CONST.HTTP_METHOD_ACL, http_method = "BASELINE_CONTROL", XDM_CONST.HTTP_METHOD_BASELINE_CONTROL, http_method = "BIND", XDM_CONST.HTTP_METHOD_BIND, http_method = "CHECKIN", XDM_CONST.HTTP_METHOD_CHECKIN, http_method = "CHECKOUT", XDM_CONST.HTTP_METHOD_CHECKOUT, http_method = "CONNECT", XDM_CONST.HTTP_METHOD_CONNECT, http_method = "COPY", XDM_CONST.HTTP_METHOD_COPY, http_method = "DELETE", XDM_CONST.HTTP_METHOD_DELETE, http_method = "GET", XDM_CONST.HTTP_METHOD_GET, http_method = "HEAD", XDM_CONST.HTTP_METHOD_HEAD, http_method = "LABEL", XDM_CONST.HTTP_METHOD_LABEL, http_method = "LINK", XDM_CONST.HTTP_METHOD_LINK, http_method = "LOCK", XDM_CONST.HTTP_METHOD_LOCK, http_method = "MERGE", XDM_CONST.HTTP_METHOD_MERGE, http_method = "MKACTIVITY", XDM_CONST.HTTP_METHOD_MKACTIVITY, http_method = "MKCALENDAR", XDM_CONST.HTTP_METHOD_MKCALENDAR, http_method = "MKCOL", XDM_CONST.HTTP_METHOD_MKCOL, http_method = "MKREDIRECTREF", XDM_CONST.HTTP_METHOD_MKREDIRECTREF, http_method = "MKWORKSPACE", XDM_CONST.HTTP_METHOD_MKWORKSPACE, http_method = "MOVE", XDM_CONST.HTTP_METHOD_MOVE, http_method = "OPTIONS", XDM_CONST.HTTP_METHOD_OPTIONS, http_method = "ORDERPATCH", XDM_CONST.HTTP_METHOD_ORDERPATCH, http_method = "PATCH", XDM_CONST.HTTP_METHOD_PATCH, http_method = "POST", XDM_CONST.HTTP_METHOD_POST, http_method = "PRI", XDM_CONST.HTTP_METHOD_PRI, http_method = "PROPFIND", XDM_CONST.HTTP_METHOD_PROPFIND, http_method = "PROPPATCH", XDM_CONST.HTTP_METHOD_PROPPATCH, http_method = "PUT", XDM_CONST.HTTP_METHOD_PUT, http_method = "REBIND", XDM_CONST.HTTP_METHOD_REBIND, http_method = "REPORT", XDM_CONST.HTTP_METHOD_REPORT, http_method = "SEARCH", XDM_CONST.HTTP_METHOD_SEARCH, http_method = "TRACE", XDM_CONST.HTTP_METHOD_TRACE, http_method = "UNBIND", XDM_CONST.HTTP_METHOD_UNBIND, http_method = "UNCHECKOUT", XDM_CONST.HTTP_METHOD_UNCHECKOUT, http_method = "UNLINK", XDM_CONST.HTTP_METHOD_UNLINK, http_method = "UNLOCK", XDM_CONST.HTTP_METHOD_UNLOCK, http_method = "UPDATE", XDM_CONST.HTTP_METHOD_UPDATE, http_method = "UPDATEREDIRECTREF", XDM_CONST.HTTP_METHOD_UPDATEREDIRECTREF, http_method = "VERSION_CONTROL", XDM_CONST.HTTP_METHOD_VERSION_CONTROL, to_string(http_method)),
    xdm.network.http.response_code = if(http_response_code = "100", XDM_CONST.HTTP_RSP_CODE_CONTINUE, http_response_code = "101", XDM_CONST.HTTP_RSP_CODE_SWITCHING_PROTOCOLS, http_response_code = "102", XDM_CONST.HTTP_RSP_CODE_PROCESSING, http_response_code = "103", XDM_CONST.HTTP_RSP_CODE_EARLY_HINTS, http_response_code = "200", XDM_CONST.HTTP_RSP_CODE_OK, http_response_code = "201", XDM_CONST.HTTP_RSP_CODE_CREATED, http_response_code = "202", XDM_CONST.HTTP_RSP_CODE_ACCEPTED, http_response_code = "203", XDM_CONST.HTTP_RSP_CODE_NON__AUTHORITATIVE_INFORMATION, http_response_code = "204", XDM_CONST.HTTP_RSP_CODE_NO_CONTENT, http_response_code = "205", XDM_CONST.HTTP_RSP_CODE_RESET_CONTENT, http_response_code = "206", XDM_CONST.HTTP_RSP_CODE_PARTIAL_CONTENT, http_response_code = "207", XDM_CONST.HTTP_RSP_CODE_MULTI__STATUS, http_response_code = "208", XDM_CONST.HTTP_RSP_CODE_ALREADY_REPORTED, http_response_code = "226", XDM_CONST.HTTP_RSP_CODE_IM_USED, http_response_code = "300", XDM_CONST.HTTP_RSP_CODE_MULTIPLE_CHOICES, http_response_code = "301", XDM_CONST.HTTP_RSP_CODE_MOVED_PERMANENTLY, http_response_code = "302", XDM_CONST.HTTP_RSP_CODE_FOUND, http_response_code = "303", XDM_CONST.HTTP_RSP_CODE_SEE_OTHER, http_response_code = "304", XDM_CONST.HTTP_RSP_CODE_NOT_MODIFIED, http_response_code = "305", XDM_CONST.HTTP_RSP_CODE_USE_PROXY, http_response_code = "307", XDM_CONST.HTTP_RSP_CODE_TEMPORARY_REDIRECT, http_response_code = "308", XDM_CONST.HTTP_RSP_CODE_PERMANENT_REDIRECT, http_response_code = "400", XDM_CONST.HTTP_RSP_CODE_BAD_REQUEST, http_response_code = "401", XDM_CONST.HTTP_RSP_CODE_UNAUTHORIZED, http_response_code = "402", XDM_CONST.HTTP_RSP_CODE_PAYMENT_REQUIRED, http_response_code = "403", XDM_CONST.HTTP_RSP_CODE_FORBIDDEN, http_response_code = "404", XDM_CONST.HTTP_RSP_CODE_NOT_FOUND, http_response_code = "405", XDM_CONST.HTTP_RSP_CODE_METHOD_NOT_ALLOWED, http_response_code = "406", XDM_CONST.HTTP_RSP_CODE_NOT_ACCEPTABLE, http_response_code = "407", XDM_CONST.HTTP_RSP_CODE_PROXY_AUTHENTICATION_REQUIRED, http_response_code = "408", XDM_CONST.HTTP_RSP_CODE_REQUEST_TIMEOUT, http_response_code = "409", XDM_CONST.HTTP_RSP_CODE_CONFLICT, http_response_code = "410", XDM_CONST.HTTP_RSP_CODE_GONE, http_response_code = "411", XDM_CONST.HTTP_RSP_CODE_LENGTH_REQUIRED, http_response_code = "412", XDM_CONST.HTTP_RSP_CODE_PRECONDITION_FAILED, http_response_code = "413", XDM_CONST.HTTP_RSP_CODE_CONTENT_TOO_LARGE, http_response_code = "414", XDM_CONST.HTTP_RSP_CODE_URI_TOO_LONG, http_response_code = "415", XDM_CONST.HTTP_RSP_CODE_UNSUPPORTED_MEDIA_TYPE, http_response_code = "416", XDM_CONST.HTTP_RSP_CODE_RANGE_NOT_SATISFIABLE, http_response_code = "417", XDM_CONST.HTTP_RSP_CODE_EXPECTATION_FAILED, http_response_code = "421", XDM_CONST.HTTP_RSP_CODE_MISDIRECTED_REQUEST, http_response_code = "422", XDM_CONST.HTTP_RSP_CODE_UNPROCESSABLE_CONTENT, http_response_code = "423", XDM_CONST.HTTP_RSP_CODE_LOCKED, http_response_code = "424", XDM_CONST.HTTP_RSP_CODE_FAILED_DEPENDENCY, http_response_code = "425", XDM_CONST.HTTP_RSP_CODE_TOO_EARLY, http_response_code = "426", XDM_CONST.HTTP_RSP_CODE_UPGRADE_REQUIRED, http_response_code = "428", XDM_CONST.HTTP_RSP_CODE_PRECONDITION_REQUIRED, http_response_code = "429", XDM_CONST.HTTP_RSP_CODE_TOO_MANY_REQUESTS, http_response_code = "431", XDM_CONST.HTTP_RSP_CODE_REQUEST_HEADER_FIELDS_TOO_LARGE, http_response_code = "451", XDM_CONST.HTTP_RSP_CODE_UNAVAILABLE_FOR_LEGAL_REASONS, http_response_code = "500", XDM_CONST.HTTP_RSP_CODE_INTERNAL_SERVER_ERROR, http_response_code = "501", XDM_CONST.HTTP_RSP_CODE_NOT_IMPLEMENTED, http_response_code = "502", XDM_CONST.HTTP_RSP_CODE_BAD_GATEWAY, http_response_code = "503", XDM_CONST.HTTP_RSP_CODE_SERVICE_UNAVAILABLE, http_response_code = "504", XDM_CONST.HTTP_RSP_CODE_GATEWAY_TIMEOUT, http_response_code = "505", XDM_CONST.HTTP_RSP_CODE_HTTP_VERSION_NOT_SUPPORTED, http_response_code = "506", XDM_CONST.HTTP_RSP_CODE_VARIANT_ALSO_NEGOTIATES, http_response_code = "507", XDM_CONST.HTTP_RSP_CODE_INSUFFICIENT_STORAGE, http_response_code = "508", XDM_CONST.HTTP_RSP_CODE_LOOP_DETECTED, http_response_code = "511", XDM_CONST.HTTP_RSP_CODE_NETWORK_AUTHENTICATION_REQUIRED, http_response_code = null, null, to_string(http_response_code)),
    xdm.network.http.url = uri,
    xdm.network.application_protocol = http_version,
    xdm.source.user_agent = user_agent,
    xdm.source.sent_bytes = bytes,
    xdm.source.process.identifier = thread_identifier,
    xdm.source.process.name = event_type,
    xdm.source.host.hostname = syslog_hostname,
    xdm.target.resource.value = uri,
    xdm.target.application.name = service;

// crond
alter event_type = arrayindex(regextract(_raw_log, "^\<\d{1,3}\>\d+\s+\S+\s+\S+\s+(\S+)"), 0)
| filter event_type = "crond" 
| alter 
    syslog_priority = to_integer(arrayindex(regextract(_raw_log, "^\<(\d{1,3})\>\S+"), 0)),
    syslog_hostname = arrayindex(regextract(_raw_log, "\<\d{1,3}\>\S+\s+\S+\s+(\S+)"), 0), 
    syslog_msg = arrayindex(regextract(_raw_log, "^\<\d{1,3}\>\d+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+(.+)"), 0)
| alter
    // since the log does not include an explicit severity, extract it from the syslog header priority field   
    severity = to_string(subtract(syslog_priority, multiply(floor(divide(syslog_priority, 8)), 8))),
    user = arrayindex(regextract(syslog_msg, "\(([^\)]+)"), 0),
    command = arrayindex(regextract(syslog_msg, "CMD\s+\(\s*([^\)]+)"), 0)
| alter 
    xdm.alert.severity = severity,
    xdm.event.type = event_type,
    xdm.event.description = syslog_msg,
    xdm.event.log_level = if(severity = "0", XDM_CONST.LOG_LEVEL_EMERGENCY , severity = "1", XDM_CONST.LOG_LEVEL_ALERT , severity = "2", XDM_CONST.LOG_LEVEL_CRITICAL, severity = "3", XDM_CONST.LOG_LEVEL_ERROR, severity = "4", XDM_CONST.LOG_LEVEL_WARNING, severity = "5", XDM_CONST.LOG_LEVEL_NOTICE, severity = "6", XDM_CONST.LOG_LEVEL_INFORMATIONAL, severity = "7", XDM_CONST.LOG_LEVEL_DEBUG, severity),
    xdm.source.process.name = event_type,
    xdm.source.user.username = user, 
    xdm.source.process.command_line = command,
    xdm.source.host.hostname = syslog_hostname;

// general fallback mapping for all other event types which are currently not mapped explicitly 
alter event_type = arrayindex(regextract(_raw_log, "^\<\d{1,3}\>\d+\s+\S+\s+\S+\s+(\S+)"), 0)
| filter event_type NOT IN ("analytics", "applmgmt", "applmgmt-audit", "certificatemanagement-svcs", "cis-license", "content-library", "crond", "dnsmasq", "eam-access", "eam-api", "envoy-access", "lookupsvc-localhost_access", "procstate", "rhttpproxy-main", "sca-vmon.std", "sps", "sso-tomcat", "ssoadminserver", "StatsMonitor", "sudo", "trustmanagement-gc", "trustmanagement-svcs", "ui-main", "ui-threadmonitor", "vapi-endpoint-access", "vdtc-main", "vmafdd", "vmon", "vpxd-main", "vpxd-svcs-access", "vpxd-svcs-perf", "vsan-health-main", "vstats", "vum-vmacore", "vum-vmacore", "wcpsvc")
| alter 
    syslog_priority = to_integer(arrayindex(regextract(_raw_log, "^\<(\d{1,3})\>\S+"), 0)),
    syslog_hostname = arrayindex(regextract(_raw_log, "\<\d{1,3}\>\S+\s+\S+\s+(\S+)"), 0), 
    syslog_msg = arrayindex(regextract(_raw_log, "^\<\d{1,3}\>\d+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+(.+)"), 0)
| alter
    operation_id = arrayindex(regextract(syslog_msg, "opI[dD]=([\w\-]+)"), 0),
    severity = to_string(subtract(syslog_priority, multiply(floor(divide(syslog_priority, 8)), 8))),
    username = coalesce(arrayindex(regextract(syslog_msg, "USER=(\w+)"), 0),
                    arrayindex(regextract(syslog_msg, "for\s+user\s+(\w+)"), 0),
                    arrayindex(regextract(_raw_log, "User\s\'*([^\@]+)\@"),0),
                    arrayindex(regextract(_raw_log, "Username=\'([^\']+)\'"),0))
| alter 
    xdm.event.type = event_type,
    xdm.event.description = syslog_msg,
    xdm.event.log_level = if(severity = "0", XDM_CONST.LOG_LEVEL_EMERGENCY , severity = "1", XDM_CONST.LOG_LEVEL_ALERT , severity = "2", XDM_CONST.LOG_LEVEL_CRITICAL, severity = "3", XDM_CONST.LOG_LEVEL_ERROR, severity = "4", XDM_CONST.LOG_LEVEL_WARNING, severity = "5", XDM_CONST.LOG_LEVEL_NOTICE, severity = "6", XDM_CONST.LOG_LEVEL_INFORMATIONAL, severity = "7", XDM_CONST.LOG_LEVEL_DEBUG, severity),
    xdm.source.process.name = event_type,
    xdm.source.user.username = username, 
    xdm.session_context_id = operation_id,
    xdm.source.host.hostname = syslog_hostname;


[MODEL: dataset=zscaler_nssweblog_raw, content_id="Zscaler"]
alter 

	xdm.alert.category = cs4,

	xdm.alert.name = cs5,

	xdm.alert.severity = to_string(cn1),

	xdm.event.outcome_reason = reason,

	xdm.event.type = ZscalerNSSWeblogURLClass,

	xdm.network.application_protocol_category = cat,

	xdm.network.http.content_type = contenttype,

	xdm.network.http.domain = dhost,

	xdm.network.http.method = requestMethod,

	xdm.network.http.response_code = if(outcome = "100", XDM_CONST.HTTP_RSP_CODE_CONTINUE, outcome = "101", XDM_CONST.HTTP_RSP_CODE_SWITCHING_PROTOCOLS, outcome = "102", XDM_CONST.HTTP_RSP_CODE_PROCESSING, outcome = "103", XDM_CONST.HTTP_RSP_CODE_EARLY_HINTS, outcome = "200", XDM_CONST.HTTP_RSP_CODE_OK, outcome = "201", XDM_CONST.HTTP_RSP_CODE_CREATED, outcome = "202", XDM_CONST.HTTP_RSP_CODE_ACCEPTED, outcome = "203", XDM_CONST.HTTP_RSP_CODE_NON__AUTHORITATIVE_INFORMATION, outcome = "204", XDM_CONST.HTTP_RSP_CODE_NO_CONTENT, outcome = "205", XDM_CONST.HTTP_RSP_CODE_RESET_CONTENT, outcome = "206", XDM_CONST.HTTP_RSP_CODE_PARTIAL_CONTENT, outcome = "207", XDM_CONST.HTTP_RSP_CODE_MULTI__STATUS, outcome = "208", XDM_CONST.HTTP_RSP_CODE_ALREADY_REPORTED, outcome = "226", XDM_CONST.HTTP_RSP_CODE_IM_USED, outcome = "300", XDM_CONST.HTTP_RSP_CODE_MULTIPLE_CHOICES, outcome = "301", XDM_CONST.HTTP_RSP_CODE_MOVED_PERMANENTLY, outcome = "302", XDM_CONST.HTTP_RSP_CODE_FOUND, outcome = "303", XDM_CONST.HTTP_RSP_CODE_SEE_OTHER, outcome = "304", XDM_CONST.HTTP_RSP_CODE_NOT_MODIFIED, outcome = "305", XDM_CONST.HTTP_RSP_CODE_USE_PROXY, outcome = "307", XDM_CONST.HTTP_RSP_CODE_TEMPORARY_REDIRECT, outcome = "308", XDM_CONST.HTTP_RSP_CODE_PERMANENT_REDIRECT, outcome = "400", XDM_CONST.HTTP_RSP_CODE_BAD_REQUEST, outcome = "401", XDM_CONST.HTTP_RSP_CODE_UNAUTHORIZED, outcome = "402", XDM_CONST.HTTP_RSP_CODE_PAYMENT_REQUIRED, outcome = "403", XDM_CONST.HTTP_RSP_CODE_FORBIDDEN, outcome = "404", XDM_CONST.HTTP_RSP_CODE_NOT_FOUND, outcome = "405", XDM_CONST.HTTP_RSP_CODE_METHOD_NOT_ALLOWED, outcome = "406", XDM_CONST.HTTP_RSP_CODE_NOT_ACCEPTABLE, outcome = "407", XDM_CONST.HTTP_RSP_CODE_PROXY_AUTHENTICATION_REQUIRED, outcome = "408", XDM_CONST.HTTP_RSP_CODE_REQUEST_TIMEOUT, outcome = "409", XDM_CONST.HTTP_RSP_CODE_CONFLICT, outcome = "410", XDM_CONST.HTTP_RSP_CODE_GONE, outcome = "411", XDM_CONST.HTTP_RSP_CODE_LENGTH_REQUIRED, outcome = "412", XDM_CONST.HTTP_RSP_CODE_PRECONDITION_FAILED, outcome = "413", XDM_CONST.HTTP_RSP_CODE_CONTENT_TOO_LARGE, outcome = "414", XDM_CONST.HTTP_RSP_CODE_URI_TOO_LONG, outcome = "415", XDM_CONST.HTTP_RSP_CODE_UNSUPPORTED_MEDIA_TYPE, outcome = "416", XDM_CONST.HTTP_RSP_CODE_RANGE_NOT_SATISFIABLE, outcome = "417", XDM_CONST.HTTP_RSP_CODE_EXPECTATION_FAILED, outcome = "421", XDM_CONST.HTTP_RSP_CODE_MISDIRECTED_REQUEST, outcome = "422", XDM_CONST.HTTP_RSP_CODE_UNPROCESSABLE_CONTENT, outcome = "423", XDM_CONST.HTTP_RSP_CODE_LOCKED, outcome = "424", XDM_CONST.HTTP_RSP_CODE_FAILED_DEPENDENCY, outcome = "425", XDM_CONST.HTTP_RSP_CODE_TOO_EARLY, outcome = "426", XDM_CONST.HTTP_RSP_CODE_UPGRADE_REQUIRED, outcome = "428", XDM_CONST.HTTP_RSP_CODE_PRECONDITION_REQUIRED, outcome = "429", XDM_CONST.HTTP_RSP_CODE_TOO_MANY_REQUESTS, outcome = "431", XDM_CONST.HTTP_RSP_CODE_REQUEST_HEADER_FIELDS_TOO_LARGE, outcome = "451", XDM_CONST.HTTP_RSP_CODE_UNAVAILABLE_FOR_LEGAL_REASONS, outcome = "500", XDM_CONST.HTTP_RSP_CODE_INTERNAL_SERVER_ERROR, outcome = "501", XDM_CONST.HTTP_RSP_CODE_NOT_IMPLEMENTED, outcome = "502", XDM_CONST.HTTP_RSP_CODE_BAD_GATEWAY, outcome = "503", XDM_CONST.HTTP_RSP_CODE_SERVICE_UNAVAILABLE, outcome = "504", XDM_CONST.HTTP_RSP_CODE_GATEWAY_TIMEOUT, outcome = "505", XDM_CONST.HTTP_RSP_CODE_HTTP_VERSION_NOT_SUPPORTED, outcome = "506", XDM_CONST.HTTP_RSP_CODE_VARIANT_ALSO_NEGOTIATES, outcome = "507", XDM_CONST.HTTP_RSP_CODE_INSUFFICIENT_STORAGE, outcome = "508", XDM_CONST.HTTP_RSP_CODE_LOOP_DETECTED, outcome = "511", XDM_CONST.HTTP_RSP_CODE_NETWORK_AUTHENTICATION_REQUIRED, outcome = null, null, to_string(outcome)),

	xdm.network.http.url = request,

	xdm.network.http.url_category = cs2,

	xdm.network.protocol_layers = arraycreate(coalesce(app, "")),

	xdm.observer.action = act,

	xdm.session_context_id = externalId,

	xdm.source.host.hostname = devicehostname,

	xdm.source.host.ipv4_addresses = arraycreate(coalesce(src, "")),

	xdm.source.ipv4 = sourceTranslatedAddress,

	xdm.source.user_agent = requestClientApplication,

	xdm.source.user.username = suser,

	xdm.source.zone = spriv,

	xdm.target.host.ipv4_addresses = arraycreate(coalesce(dst, "")),

	xdm.target.interface = destinationServiceName,

	xdm.target.ipv4=dst,

	xdm.target.process.executable.file_type = fileType,

	xdm.target.sent_bytes = to_integer(out);
[MODEL: dataset="zscaler_nssfwlog_raw", content_id="Zscaler"]
alter cs5=uppercase(cs5)
| alter 

	xdm.alert.category=cat,

	xdm.alert.name=cs6,

	xdm.alert.severity=cefSeverity,

	xdm.event.duration=to_integer(cn1),

	xdm.event.outcome_reason=reason,

	xdm.event.type=cefName,

	xdm.network.application_protocol=cs3,

	xdm.network.http.url_category = if(cs5 contains "ABORTION", XDM_CONST.URL_CATEGORY_ABORTION, cs5 contains "DRUGS", XDM_CONST.URL_CATEGORY_ABUSED_DRUGS, cs5 contains "ADULT", XDM_CONST.URL_CATEGORY_ADULT, cs5 contains "ALCOHOL" or cs5 contains "TOBACCO", XDM_CONST.URL_CATEGORY_ALCOHOL_AND_TOBACCO, cs5 contains "AUCTIONS", XDM_CONST.URL_CATEGORY_AUCTIONS, cs5 contains "BUSINESS" or cs5 contains "ECONOMY", XDM_CONST.URL_CATEGORY_BUSINESS_AND_ECONOMY, cs5 contains "COMMAND AND CONTROL" or cs5 contains "C&C", XDM_CONST.URL_CATEGORY_COMMAND_AND_CONTROL, cs5 contains "COMPUTER" or cs5 contains "INTERNET", XDM_CONST.URL_CATEGORY_COMPUTER_AND_INTERNET_INFO, cs5 contains "CONTENT DELIVERY NETWORKS" or cs5 contains "CDN", XDM_CONST.URL_CATEGORY_CONTENT_DELIVERY_NETWORKS, cs5 contains "COPYRIGHT", XDM_CONST.URL_CATEGORY_COPYRIGHT_INFRINGEMENT, cs5 contains "CRYPTO", XDM_CONST.URL_CATEGORY_CRYPTOCURRENCY, cs5 contains "DATING", XDM_CONST.URL_CATEGORY_DATING, cs5 contains "DYNAMIC DNS", XDM_CONST.URL_CATEGORY_DYNAMIC_DNS, cs5 contains "EDUCATIONAL INSTITUTIONS", XDM_CONST.URL_CATEGORY_EDUCATIONAL_INSTITUTIONS, cs5 contains "ENTERTAINMENT" and cs5 contains "ARTS", XDM_CONST.URL_CATEGORY_ENTERTAINMENT_AND_ARTS, cs5 contains "EXTREMISM", XDM_CONST.URL_CATEGORY_EXTREMISM, cs5 contains "FINANCIAL" or cs5 contains "FINANCE", XDM_CONST.URL_CATEGORY_FINANCIAL_SERVICES, cs5 contains "GAMBLING", XDM_CONST.URL_CATEGORY_GAMBLING, cs5 contains "GAMES", XDM_CONST.URL_CATEGORY_GAMES, cs5 contains "GOVERNMENT", XDM_CONST.URL_CATEGORY_GOVERNMENT, cs5 contains "GRAYWARE", XDM_CONST.URL_CATEGORY_GRAYWARE, cs5 contains "HACKING", XDM_CONST.URL_CATEGORY_HACKING, cs5 contains "HEALTH" or cs5 contains "MEDICINE", XDM_CONST.URL_CATEGORY_HEALTH_AND_MEDICINE, cs5 contains "HOME" or cs5 contains "GARDEN", XDM_CONST.URL_CATEGORY_HOME_AND_GARDEN, cs5 contains "HUNTING" or cs5 contains "FISHING", XDM_CONST.URL_CATEGORY_HUNTING_AND_FISHING, cs5 contains "INSUFFICIENT CONTENT", XDM_CONST.URL_CATEGORY_INSUFFICIENT_CONTENT, cs5 contains "INTERNET COMMUNICATIONS" and cs5 contains "TELEPHONY", XDM_CONST.URL_CATEGORY_INTERNET_COMMUNICATIONS_AND_TELEPHONY, cs5 contains "PORTALS", XDM_CONST.URL_CATEGORY_INTERNET_PORTALS, cs5 contains "JOB", XDM_CONST.URL_CATEGORY_JOB_SEARCH, cs5 contains "LEGAL", XDM_CONST.URL_CATEGORY_LEGAL, cs5 contains "MALWARE", XDM_CONST.URL_CATEGORY_MALWARE, cs5 contains "MILITARY", XDM_CONST.URL_CATEGORY_MILITARY, cs5 contains "MOTOR VEHICLES", XDM_CONST.URL_CATEGORY_MOTOR_VEHICLES, cs5 contains "MUSIC", XDM_CONST.URL_CATEGORY_MUSIC, cs5 contains "DOMAIN" and cs5 contains "REGIST", XDM_CONST.URL_CATEGORY_NEWLY_REGISTERED_DOMAIN, cs5 contains "NEWS", XDM_CONST.URL_CATEGORY_NEWS, cs5 contains "NOT RESOLVED", XDM_CONST.URL_CATEGORY_NOT_RESOLVED, cs5 contains "NUDITY", XDM_CONST.URL_CATEGORY_NUDITY, cs5 contains "ONLINE STORAGE" and cs5 contains "BACKUP", XDM_CONST.URL_CATEGORY_ONLINE_STORAGE_AND_BACKUP, cs5 contains "PARKED", XDM_CONST.URL_CATEGORY_PARKED, cs5 contains "PEER TO PEER", XDM_CONST.URL_CATEGORY_PEER_TO_PEER, cs5 contains "PERSONAL SITES" or cs5 contains "BLOG", XDM_CONST.URL_CATEGORY_PERSONAL_SITES_AND_BLOGS, cs5 contains "PHILOSOPHY" or cs5 contains "POLITICAL ADVOCACY", XDM_CONST.URL_CATEGORY_PHILOSOPHY_AND_POLITICAL_ADVOCACY, cs5 contains "PHISHING", XDM_CONST.URL_CATEGORY_PHISHING, cs5 contains "PRIVATE IP ADDRESSES", XDM_CONST.URL_CATEGORY_PRIVATE_IP_ADDRESSES, cs5 contains "PROXY" or cs5 contains "ANONYMIZERS", XDM_CONST.URL_CATEGORY_PROXY_AVOIDANCE_AND_ANONYMIZERS, cs5 contains "QUESTIONABLE", XDM_CONST.URL_CATEGORY_QUESTIONABLE, cs5 contains "REAL ESTATE", XDM_CONST.URL_CATEGORY_REAL_ESTATE, cs5 contains "HOBBIES" or cs5 contains "RECREATION", XDM_CONST.URL_CATEGORY_RECREATION_AND_HOBBIES, cs5 contains "REFERENCE", XDM_CONST.URL_CATEGORY_REFERENCE_AND_RESEARCH, cs5 contains "RELIGION", XDM_CONST.URL_CATEGORY_RELIGION, cs5 contains "SEARCH ENGINES", XDM_CONST.URL_CATEGORY_SEARCH_ENGINES, cs5 contains "SEX EDUCATION", XDM_CONST.URL_CATEGORY_SEX_EDUCATION, cs5 contains "SHAREWARE" and cs5 contains "FREEWARE", XDM_CONST.URL_CATEGORY_SHAREWARE_AND_FREEWARE, cs5 contains "SHOPPING", XDM_CONST.URL_CATEGORY_SHOPPING, cs5 contains "SOCIAL_NETWORK", XDM_CONST.URL_CATEGORY_SOCIAL_NETWORKING, cs5 contains "SOCIETY", XDM_CONST.URL_CATEGORY_SOCIETY, cs5 contains "SPORTS", XDM_CONST.URL_CATEGORY_SPORTS, cs5 contains "STOCK", XDM_CONST.URL_CATEGORY_STOCK_ADVICE_AND_TOOLS, cs5 contains "MEDIA" and cs5 contains "STREAM", XDM_CONST.URL_CATEGORY_STREAMING_MEDIA, cs5 contains "INTIMATE APPAREL", XDM_CONST.URL_CATEGORY_SWIMSUITS_AND_INTIMATE_APPAREL, cs5 contains "TRAINING" and cs5 contains "Sport", XDM_CONST.URL_CATEGORY_TRAINING_AND_TOOLS, cs5 contains "TRANSLATION", XDM_CONST.URL_CATEGORY_TRANSLATION, cs5 contains "TRAVEL", XDM_CONST.URL_CATEGORY_TRAVEL, cs5 contains "UNKNOWN", XDM_CONST.URL_CATEGORY_UNKNOWN, cs5 contains "WEAPONS", XDM_CONST.URL_CATEGORY_WEAPONS, cs5 contains "ADVERTISING", XDM_CONST.URL_CATEGORY_WEB_ADVERTISEMENTS, cs5 contains "WEB HOST", XDM_CONST.URL_CATEGORY_WEB_HOSTING, cs5 contains "WEBMAIL", XDM_CONST.URL_CATEGORY_WEB_BASED_EMAIL, to_string(cs5)),

	xdm.network.ip_protocol=if(proto="0",XDM_CONST.IP_PROTOCOL_HOPOPT, proto="1",XDM_CONST.IP_PROTOCOL_ICMP, proto="2",XDM_CONST.IP_PROTOCOL_IGMP, proto="3",XDM_CONST.IP_PROTOCOL_GGP, proto="4",XDM_CONST.IP_PROTOCOL_IP, proto="5",XDM_CONST.IP_PROTOCOL_ST, proto="6",XDM_CONST.IP_PROTOCOL_TCP, proto="7",XDM_CONST.IP_PROTOCOL_CBT, proto="8",XDM_CONST.IP_PROTOCOL_EGP, proto="9",XDM_CONST.IP_PROTOCOL_IGP, proto="10",XDM_CONST.IP_PROTOCOL_BBN_RCC_MON, proto="11",XDM_CONST.IP_PROTOCOL_NVP_II, proto="12",XDM_CONST.IP_PROTOCOL_PUP, proto="13",XDM_CONST.IP_PROTOCOL_ARGUS, proto="14",XDM_CONST.IP_PROTOCOL_EMCON, proto="15",XDM_CONST.IP_PROTOCOL_XNET, proto="16",XDM_CONST.IP_PROTOCOL_CHAOS, proto="17",XDM_CONST.IP_PROTOCOL_UDP, proto="18",XDM_CONST.IP_PROTOCOL_MUX, proto="19",XDM_CONST.IP_PROTOCOL_DCN_MEAS, proto="20",XDM_CONST.IP_PROTOCOL_HMP, proto="21",XDM_CONST.IP_PROTOCOL_PRM, proto="22",XDM_CONST.IP_PROTOCOL_XNS_IDP, proto="23",XDM_CONST.IP_PROTOCOL_TRUNK_1, proto="24",XDM_CONST.IP_PROTOCOL_TRUNK_2, proto="25",XDM_CONST.IP_PROTOCOL_LEAF_1, proto="26",XDM_CONST.IP_PROTOCOL_LEAF_2, proto="27",XDM_CONST.IP_PROTOCOL_RDP, proto="28",XDM_CONST.IP_PROTOCOL_IRTP, proto="29",XDM_CONST.IP_PROTOCOL_ISO_TP4, proto="30",XDM_CONST.IP_PROTOCOL_NETBLT, proto="31",XDM_CONST.IP_PROTOCOL_MFE_NSP, proto="32",XDM_CONST.IP_PROTOCOL_MERIT_INP, proto="33",XDM_CONST.IP_PROTOCOL_DCCP, proto="34",XDM_CONST.IP_PROTOCOL_3PC, proto="35",XDM_CONST.IP_PROTOCOL_IDPR, proto="36",XDM_CONST.IP_PROTOCOL_XTP, proto="37",XDM_CONST.IP_PROTOCOL_DDP, proto="38",XDM_CONST.IP_PROTOCOL_IDPR_CMTP, proto="39",XDM_CONST.IP_PROTOCOL_TP, proto="40",XDM_CONST.IP_PROTOCOL_IL, proto="41",XDM_CONST.IP_PROTOCOL_IPV6, proto="42",XDM_CONST.IP_PROTOCOL_SDRP, proto="43",XDM_CONST.IP_PROTOCOL_IPV6_ROUTE, proto="44",XDM_CONST.IP_PROTOCOL_IPV6_FRAG, proto="45",XDM_CONST.IP_PROTOCOL_IDRP, proto="46",XDM_CONST.IP_PROTOCOL_RSVP, proto="47",XDM_CONST.IP_PROTOCOL_GRE, proto="48",XDM_CONST.IP_PROTOCOL_DSR, proto="49",XDM_CONST.IP_PROTOCOL_BNA, proto="50",XDM_CONST.IP_PROTOCOL_ESP, proto="51",XDM_CONST.IP_PROTOCOL_AH, proto="52",XDM_CONST.IP_PROTOCOL_I_NLSP, proto="53",XDM_CONST.IP_PROTOCOL_SWIPE, proto="54",XDM_CONST.IP_PROTOCOL_NARP, proto="55",XDM_CONST.IP_PROTOCOL_MOBILE, proto="56",XDM_CONST.IP_PROTOCOL_TLSP, proto="57",XDM_CONST.IP_PROTOCOL_SKIP, proto="58",XDM_CONST.IP_PROTOCOL_IPV6_ICMP, proto="59",XDM_CONST.IP_PROTOCOL_IPV6_NONXT, proto="60",XDM_CONST.IP_PROTOCOL_IPV6_OPTS, proto="62",XDM_CONST.IP_PROTOCOL_CFTP, proto="64",XDM_CONST.IP_PROTOCOL_SAT_EXPAK, proto="65",XDM_CONST.IP_PROTOCOL_KRYPTOLAN, proto="66",XDM_CONST.IP_PROTOCOL_RVD, proto="67",XDM_CONST.IP_PROTOCOL_IPPC, proto="69",XDM_CONST.IP_PROTOCOL_SAT_MON, proto="70",XDM_CONST.IP_PROTOCOL_VISA, proto="71",XDM_CONST.IP_PROTOCOL_IPCV, proto="72",XDM_CONST.IP_PROTOCOL_CPNX, proto="73",XDM_CONST.IP_PROTOCOL_CPHB, proto="74",XDM_CONST.IP_PROTOCOL_WSN, proto="75",XDM_CONST.IP_PROTOCOL_PVP, proto="76",XDM_CONST.IP_PROTOCOL_BR_SAT_MON, proto="77",XDM_CONST.IP_PROTOCOL_SUN_ND, proto="78",XDM_CONST.IP_PROTOCOL_WB_MON, proto="79",XDM_CONST.IP_PROTOCOL_WB_EXPAK, proto="80",XDM_CONST.IP_PROTOCOL_ISO_IP, proto="81",XDM_CONST.IP_PROTOCOL_VMTP, proto="82",XDM_CONST.IP_PROTOCOL_SECURE_VMTP, proto="83",XDM_CONST.IP_PROTOCOL_VINES, proto="84",XDM_CONST.IP_PROTOCOL_TTP, proto="85",XDM_CONST.IP_PROTOCOL_NSFNET_IGP, proto="86",XDM_CONST.IP_PROTOCOL_DGP, proto="87",XDM_CONST.IP_PROTOCOL_TCF, proto="88",XDM_CONST.IP_PROTOCOL_EIGRP, proto="89",XDM_CONST.IP_PROTOCOL_OSPFIGP, proto="90",XDM_CONST.IP_PROTOCOL_SPRITE_RPC, proto="91",XDM_CONST.IP_PROTOCOL_LARP, proto="92",XDM_CONST.IP_PROTOCOL_MTP, proto="93",XDM_CONST.IP_PROTOCOL_AX25, proto="94",XDM_CONST.IP_PROTOCOL_IPIP, proto="95",XDM_CONST.IP_PROTOCOL_MICP, proto="96",XDM_CONST.IP_PROTOCOL_SCC_SP, proto="97",XDM_CONST.IP_PROTOCOL_ETHERIP, proto="98",XDM_CONST.IP_PROTOCOL_ENCAP, proto="100",XDM_CONST.IP_PROTOCOL_GMTP, proto="101",XDM_CONST.IP_PROTOCOL_IFMP, proto="102",XDM_CONST.IP_PROTOCOL_PNNI, proto="103",XDM_CONST.IP_PROTOCOL_PIM, proto="104",XDM_CONST.IP_PROTOCOL_ARIS, proto="105",XDM_CONST.IP_PROTOCOL_SCPS, proto="106",XDM_CONST.IP_PROTOCOL_QNX, proto="107",XDM_CONST.IP_PROTOCOL_AN, proto="108",XDM_CONST.IP_PROTOCOL_IPCOMP, proto="109",XDM_CONST.IP_PROTOCOL_SNP, proto="110",XDM_CONST.IP_PROTOCOL_COMPAQ_PEER, proto="111",XDM_CONST.IP_PROTOCOL_IPX_IN_IP, proto="112",XDM_CONST.IP_PROTOCOL_VRRP, proto="113",XDM_CONST.IP_PROTOCOL_PGM, proto="115",XDM_CONST.IP_PROTOCOL_L2TP, proto="116",XDM_CONST.IP_PROTOCOL_DDX, proto="117",XDM_CONST.IP_PROTOCOL_IATP, proto="118",XDM_CONST.IP_PROTOCOL_STP, proto="119",XDM_CONST.IP_PROTOCOL_SRP, proto="120",XDM_CONST.IP_PROTOCOL_UTI, proto="121",XDM_CONST.IP_PROTOCOL_SMP, proto="122",XDM_CONST.IP_PROTOCOL_SM, proto="123",XDM_CONST.IP_PROTOCOL_PTP, proto="124",XDM_CONST.IP_PROTOCOL_ISIS, proto="125",XDM_CONST.IP_PROTOCOL_FIRE, proto="126",XDM_CONST.IP_PROTOCOL_CRTP, proto="127",XDM_CONST.IP_PROTOCOL_CRUDP, proto="128",XDM_CONST.IP_PROTOCOL_SSCOPMCE, proto="129",XDM_CONST.IP_PROTOCOL_IPLT, proto="130",XDM_CONST.IP_PROTOCOL_SPS, proto="131",XDM_CONST.IP_PROTOCOL_PIPE, proto="132",XDM_CONST.IP_PROTOCOL_SCTP, proto="133",XDM_CONST.IP_PROTOCOL_FC, proto="134",XDM_CONST.IP_PROTOCOL_RSVP_E2E_IGNORE, proto="135",XDM_CONST.IP_PROTOCOL_MOBILITY, proto="136",XDM_CONST.IP_PROTOCOL_UDPLITE, proto="137",XDM_CONST.IP_PROTOCOL_MPLS_IN_IP, proto="138",XDM_CONST.IP_PROTOCOL_MANET, proto="139",XDM_CONST.IP_PROTOCOL_HIP, proto="140",XDM_CONST.IP_PROTOCOL_SHIM6, proto="141",XDM_CONST.IP_PROTOCOL_WESP, proto="142",XDM_CONST.IP_PROTOCOL_ROHC, proto="255",XDM_CONST.IP_PROTOCOL_RESERVED,to_string(proto)),

	xdm.network.rule=cs2,

	xdm.observer.action=act,

	xdm.observer.content_version=cefVersion,

	xdm.source.host.ipv4_addresses=arraycreate(sourceTranslatedAddress),

	xdm.source.ipv4=src,

	xdm.source.port=to_integer(spt),

	xdm.source.sent_bytes=to_integer(`in`),

	xdm.source.user.groups=arraycreate(spriv),

	xdm.source.user.username=suser,

	xdm.target.host.ipv4_addresses=arraycreate(destinationTranslatedAddress),

	xdm.target.ipv4=dst,

	xdm.target.location.country=destCountry,

	xdm.target.port=to_integer(dpt),

	xdm.target.sent_bytes=to_integer(`out`);


/* ---------------------------------
   Cloud NSS Modeling (JSON Records)
   --------------------------------*/
[MODEL: dataset="zscaler_cloudnss_raw", content_id="Zscaler"]
/* --------------------------------------------------------------------------------
   Cloud NSS DNS Logs (https://help.zscaler.com/zia/nss-feed-output-format-dns-logs)
   -------------------------------------------------------------------------------*/
filter sourcetype = "zscalernss-dns"
| alter // extract data 

	user = _raw_log -> user, // The login name in email address format

	department = _raw_log -> department, // the user's department

	location = replace(_raw_log -> location, "%20", " "), // The gateway location or sub-location of the source

	reqaction = _raw_log -> reqaction, // The name of the action that was applied to the DNS request

	resaction = _raw_log -> resaction, // The name of the action that was applied to the DNS response

	reqrulelabel = _raw_log -> reqrulelabel, // The name of the rule that was applied to the DNS request

	resrulelabel = _raw_log -> resrulelabel, // The name of the rule that was applied to the DNS response

	dns_reqtype = _raw_log -> dns_reqtype, // The DNS request type

	dns_req = _raw_log -> dns_req, // The Fully Qualified Domain Name (FQDN) in the DNS request

	dns_resp = _raw_log -> dns_resp, // The name of the rule that was applied to the DNS response

	srv_dport = to_integer(_raw_log -> srv_dport), // The server port of the request

	durationms = to_integer(_raw_log -> durationms), // The duration of the DNS request in milliseconds

	clt_sip = _raw_log -> clt_sip, // The IP address of the user. This can be the internal IP address if it is visible (e.g., traffic sent through a GRE tunnel or an internal IP address indicated using XFF). Otherwise, it's the client's internet (NATed Public) IP address.

	srv_dip = _raw_log -> srv_dip, // The server IP address of the request

	category = coalesce(_raw_log -> category, _raw_log -> domcat), // The URL Category of the FQDN in the DNS request

	respipcategory = _raw_log -> respipcategory, // The URL Category of the FQDN in the DNS response

	deviceowner = _raw_log -> deviceowner, // The owner of the device

	devicehostname = _raw_log -> devicehostname // The host name of the device

| alter // post extraction processing 

	normalized_dns_record_type = if(dns_reqtype = "A", XDM_CONST.DNS_RECORD_TYPE_A, dns_reqtype = "AAAA", XDM_CONST.DNS_RECORD_TYPE_AAAA, dns_reqtype = "AFSDB", XDM_CONST.DNS_RECORD_TYPE_AFSDB, dns_reqtype = "APL", XDM_CONST.DNS_RECORD_TYPE_APL, dns_reqtype = "CAA", XDM_CONST.DNS_RECORD_TYPE_CAA, dns_reqtype = "CDNSKEY", XDM_CONST.DNS_RECORD_TYPE_CDNSKEY, dns_reqtype = "CDS", XDM_CONST.DNS_RECORD_TYPE_CDS, dns_reqtype = "CERT", XDM_CONST.DNS_RECORD_TYPE_CERT, dns_reqtype = "CNAME", XDM_CONST.DNS_RECORD_TYPE_CNAME, dns_reqtype = "CSYNC", XDM_CONST.DNS_RECORD_TYPE_CSYNC, dns_reqtype = "DHCID", XDM_CONST.DNS_RECORD_TYPE_DHCID, dns_reqtype = "DLV", XDM_CONST.DNS_RECORD_TYPE_DLV, dns_reqtype = "DNAME", XDM_CONST.DNS_RECORD_TYPE_DNAME, dns_reqtype = "DNSKEY", XDM_CONST.DNS_RECORD_TYPE_DNSKEY, dns_reqtype = "DS", XDM_CONST.DNS_RECORD_TYPE_DS, dns_reqtype = "EUI48", XDM_CONST.DNS_RECORD_TYPE_EUI48, dns_reqtype = "EUI64", XDM_CONST.DNS_RECORD_TYPE_EUI64, dns_reqtype = "HINFO", XDM_CONST.DNS_RECORD_TYPE_HINFO, dns_reqtype = "HIP", XDM_CONST.DNS_RECORD_TYPE_HIP, dns_reqtype = "HTTPS", XDM_CONST.DNS_RECORD_TYPE_HTTPS, dns_reqtype = "IPSECKEY", XDM_CONST.DNS_RECORD_TYPE_IPSECKEY, dns_reqtype = "KEY", XDM_CONST.DNS_RECORD_TYPE_KEY, dns_reqtype = "KX", XDM_CONST.DNS_RECORD_TYPE_KX, dns_reqtype = "LOC", XDM_CONST.DNS_RECORD_TYPE_LOC, dns_reqtype = "MX", XDM_CONST.DNS_RECORD_TYPE_MX, dns_reqtype = "NAPTR", XDM_CONST.DNS_RECORD_TYPE_NAPTR, dns_reqtype = "NS", XDM_CONST.DNS_RECORD_TYPE_NS, dns_reqtype = "NSEC", XDM_CONST.DNS_RECORD_TYPE_NSEC, dns_reqtype = "NSEC3", XDM_CONST.DNS_RECORD_TYPE_NSEC3, dns_reqtype = "NSEC3PARAM", XDM_CONST.DNS_RECORD_TYPE_NSEC3PARAM, dns_reqtype = "OPENPGPKEY", XDM_CONST.DNS_RECORD_TYPE_OPENPGPKEY, dns_reqtype = "PTR", XDM_CONST.DNS_RECORD_TYPE_PTR, dns_reqtype = "RRSIG", XDM_CONST.DNS_RECORD_TYPE_RRSIG, dns_reqtype = "RP", XDM_CONST.DNS_RECORD_TYPE_RP, dns_reqtype = "SIG", XDM_CONST.DNS_RECORD_TYPE_SIG, dns_reqtype = "SMIMEA", XDM_CONST.DNS_RECORD_TYPE_SMIMEA, dns_reqtype = "SOA", XDM_CONST.DNS_RECORD_TYPE_SOA, dns_reqtype = "SRV", XDM_CONST.DNS_RECORD_TYPE_SRV, dns_reqtype = "SSHFP", XDM_CONST.DNS_RECORD_TYPE_SSHFP, dns_reqtype = "SVCB", XDM_CONST.DNS_RECORD_TYPE_SVCB, dns_reqtype = "TA", XDM_CONST.DNS_RECORD_TYPE_TA, dns_reqtype = "TKEY", XDM_CONST.DNS_RECORD_TYPE_TKEY, dns_reqtype = "TLSA", XDM_CONST.DNS_RECORD_TYPE_TLSA, dns_reqtype = "TSIG", XDM_CONST.DNS_RECORD_TYPE_TSIG, dns_reqtype = "TXT", XDM_CONST.DNS_RECORD_TYPE_TXT, dns_reqtype = "URI", XDM_CONST.DNS_RECORD_TYPE_URI, dns_reqtype = "ZONEMD", XDM_CONST.DNS_RECORD_TYPE_ZONEMD, dns_reqtype),

	client_ipv4 = if(clt_sip ~= "\.", clt_sip),

	client_ipv6 = if(clt_sip ~= "\:", clt_sip),

	server_ipv4 = if(srv_dip ~= "\.", srv_dip),

	server_ipv6 = if(srv_dip ~= "\:", srv_dip),

	url_category = coalesce(respipcategory, category)

| call zscaler_nss_map_url_category // map url category to enum values 
| alter // XDM mapping

	xdm.event.duration = durationms,

	xdm.event.outcome = if(reqaction ~= "(?i)BLOC", XDM_CONST.OUTCOME_FAILED, resaction ~= "(?i)ALLOW", XDM_CONST.OUTCOME_SUCCESS, reqaction ~= "(?i)ALLOW" and resaction ~= "(?i)BLOC", XDM_CONST.OUTCOME_PARTIAL),

	xdm.event.type = sourcetype,

	xdm.network.dns.dns_question.name = dns_req,

	xdm.network.dns.dns_question.type = normalized_dns_record_type,

	xdm.network.dns.dns_resource_record.name = dns_req, 

	xdm.network.dns.dns_resource_record.type = normalized_dns_record_type,

	xdm.network.dns.dns_resource_record.value = dns_resp, 

	xdm.network.dns.response_code = if(dns_resp = "NOERROR", XDM_CONST.DNS_RESPONSE_CODE_NO_ERROR, dns_resp = "FORMERR", XDM_CONST.DNS_RESPONSE_CODE_FORMAT_ERROR, dns_resp = "SERVFAIL", XDM_CONST.DNS_RESPONSE_CODE_SERVER_FAILURE, dns_resp = "NXDOMAIN", XDM_CONST.DNS_RESPONSE_CODE_NON_EXISTENT_DOMAIN, dns_resp = "NOTIMP", XDM_CONST.DNS_RESPONSE_CODE_NOT_IMPLEMENTED, dns_resp ~= "REFUSED", XDM_CONST.DNS_RESPONSE_CODE_QUERY_REFUSED, dns_resp ~= "YXDOMAIN", XDM_CONST.DNS_RESPONSE_CODE_NAME_EXISTS_WHEN_IT_SHOULD_NOT, dns_resp = "YXRRSET", XDM_CONST.DNS_RESPONSE_CODE_RR_SET_EXISTS_WHEN_IT_SHOULD_NOT, dns_resp = "NXRRSET", XDM_CONST.DNS_RESPONSE_CODE_RR_SET_THAT_SHOULD_EXIST_DOES_NOT, dns_resp = "NOTAUTH", XDM_CONST.DNS_RESPONSE_CODE_SERVER_NOT_AUTHORITATIVE_FOR_ZONE, dns_resp = "NOTZONE", XDM_CONST.DNS_RESPONSE_CODE_NAME_NOT_CONTAINED_IN_ZONE, dns_resp = "BADVERS", XDM_CONST.DNS_RESPONSE_CODE_BAD_OPT_VERSION, dns_resp = "BADSIG", XDM_CONST.DNS_RESPONSE_CODE_TSIG_SIGNATURE_FAILURE, dns_resp = "BADKEY", XDM_CONST.DNS_RESPONSE_CODE_KEY_NOT_RECOGNIZED, dns_resp = "BADTIME", XDM_CONST.DNS_RESPONSE_CODE_SIGNATURE_OUT_OF_TIME_WINDOW, dns_resp = "BADMODE", XDM_CONST.DNS_RESPONSE_CODE_BAD_TKEY_MODE, dns_resp = "BADNAME", XDM_CONST.DNS_RESPONSE_CODE_DUPLICATE_KEY_NAME, dns_resp = "BADALG", XDM_CONST.DNS_RESPONSE_CODE_ALGORITHM_NOT_SUPPORTED, dns_resp = "BADTRUNC", XDM_CONST.DNS_RESPONSE_CODE_BAD_TRUNCATION, dns_resp ~= "[A-Z_]+", dns_resp, dns_resp ~= "[\.\:]+", XDM_CONST.DNS_RESPONSE_CODE_NO_ERROR),

	xdm.network.rule = arraystring(arrayfilter(arraydistinct(arraycreate(reqrulelabel, resrulelabel)), "@element" != "None"), ";"),

	xdm.observer.action = resaction, 

	xdm.observer.name = location,

	xdm.source.host.hostname = devicehostname,

	xdm.source.host.ipv4_addresses = if(client_ipv4 != null, arraycreate(client_ipv4)),

	xdm.source.host.ipv6_addresses = if(client_ipv6 != null, arraycreate(client_ipv6)),

	xdm.source.ipv4 = client_ipv4,

	xdm.source.ipv6 = client_ipv6,

	xdm.source.user.ou = department,

	xdm.source.user.username = coalesce(user, deviceowner),

	xdm.target.host.ipv4_addresses = if(server_ipv4 != null, arraycreate(server_ipv4)),

	xdm.target.host.ipv6_addresses = if(server_ipv6 != null, arraycreate(server_ipv6)),

	xdm.target.ipv4 = server_ipv4,

	xdm.target.ipv6 = server_ipv6,

	xdm.target.port = srv_dport;


/* ------------------------------------------------------------------------------------------------
   Cloud NSS Admin Audit Logs (https://help.zscaler.com/zia/nss-feed-output-format-admin-audit-logs)
   -----------------------------------------------------------------------------------------------*/
filter sourcetype = "zscalernss-audit"
| alter // extract data

	action = _raw_log -> action, // The action performed by the admin in the ZIA Admin Portal

	adminid = _raw_log -> adminid, // The admin's login ID

	auditlogtype = _raw_log -> auditlogtype, // The Admin Audit log type

	clientip = _raw_log -> clientip, // The source IP address for the admin

	errorcode = _raw_log -> errorcode, // An optional field that exists only if the result is a failure

	preaction = _raw_log -> preaction, // Data before any policy or configuration changes

	postaction = _raw_log -> postaction, // Data after any policy or configuration changes

	recordid = _raw_log -> recordid, // The unique record identifier for each log

	resource = _raw_log -> resource, // The specific location within a sub-category

	result = _raw_log -> result // The outcome of an action

| alter // post extraction processing 

	adminid_domain = arrayindex(regextract(adminid, "@(.+)$"), -1),

	client_ipv4 = if(clientip ~= "\.", clientip),

	client_ipv6 = if(clientip ~= "\:", clientip)

| alter // XDM Mappings

	xdm.event.id = to_string(recordid),

	xdm.event.operation_sub_type = action,

	xdm.event.outcome = if(result = "SUCCESS", XDM_CONST.OUTCOME_SUCCESS, result ~= "FAIL" or (errorcode != null and errorcode != "" and errorcode != "None"), XDM_CONST.OUTCOME_FAILED, to_string(result)),

	xdm.event.outcome_reason = if(errorcode != "None", errorcode),

	xdm.event.type = sourcetype,

	xdm.source.application.name = auditlogtype,

	xdm.source.host.ipv4_addresses = if(client_ipv4 != null, arraycreate(client_ipv4)),

	xdm.source.host.ipv6_addresses = if(client_ipv6 != null, arraycreate(client_ipv6)),

	xdm.source.ipv4 = client_ipv4,

	xdm.source.ipv6 = client_ipv6,

	xdm.source.user.domain = adminid_domain,

	xdm.source.user.username = adminid,

	xdm.target.resource.type = resource, 

	xdm.target.resource_before.value = coalesce(to_json_string(preaction), to_string(preaction)),

	xdm.target.resource.value = coalesce(to_json_string(postaction), to_string(postaction));


/* --------------------------------------------------------------------------------
   Cloud NSS Web Logs (https://help.zscaler.com/zia/nss-feed-output-format-web-logs)
   -------------------------------------------------------------------------------*/
filter sourcetype = "zscalernss-web" 
| alter // extract data

	application_protocol = coalesce(_raw_log -> protocol, _raw_log -> proto), // The protocol type of the transaction

	client_device_hostname = _raw_log -> devicehostname,// The hostname of the device

	client_ip = coalesce(_raw_log -> ClientIP, _raw_log -> cip), // The IP address of the user. It can be the internal IP address if it's visible (e.g., traffic sent through a GRE tunnel or an internal IP address indicated using XFF). Otherwise, same as %s{cintip}.

	client_public_ip = coalesce(_raw_log -> clientpublicIP, _raw_log -> cpubip), // The client public IP address

	client_source_port = to_integer(_raw_log -> clt_sport), // The client source port

	client_tls_version = _raw_log -> clienttlsversion, // The TLS version used for communication between the client and Zscaler

	cloud_application_name = _raw_log -> appname, // The name of the cloud application

	device_os_type = _raw_log -> deviceostype, // The OS type of the device

	device_os_version = _raw_log -> deviceosversion, // The OS version the device uses

	dlp_incident_id = to_string(_raw_log -> dlpidentifier), // The unique identifier of the DLP incident

	dlp_rule_name = _raw_log -> dlprulename, // The name of the DLP rule applied to the transaction. Applies only to Allow rules, not Block. 

	event_id = to_string(coalesce(_raw_log -> event_id, _raw_log -> recordid)), // The unique record identifier for each log

	external_device_id = _raw_log -> external_devid, // The external device ID that associates a user’s device with the mobile device management (MDM) solution

	file_scannable_type = _raw_log -> filetype, // The type of file downloaded during the transaction

	file_unscannable_type = _raw_log -> unscannabletype, // The unscannable file type: Encrypted or password-protected (e.g., GZIP, PDF) Unscannable (e.g., corrupt archive) Undetectable (unable to determine the file type, based on multiple methods)

	gateway_location_name = replace(_raw_log -> location, "%20", " "), // The gateway location or sub-location of the source.

	gateway_ip = _raw_log -> fwd_gw_ip, // The IP address of the gateway used

	http_content_type = _raw_log -> contenttype, // The name of the content type

	http_host = coalesce(_raw_log -> hostname, _raw_log -> host), // The destination hostname. If present, the host value in the HTTP request line populates this field. If the host value in the HTTP request line is not present, the host header is used.

	http_referer = coalesce(_raw_log -> refererURL, _raw_log -> referer), // The HTTP referer URL

	http_method = coalesce(_raw_log -> requestmethod, _raw_log -> reqmethod), // The HTTP request method

	http_request_size = to_integer(coalesce(_raw_log -> requestsize, _raw_log -> reqdatasize)), // The size of the HTTP request payload, excluding the headers, in bytes

	http_status = coalesce(_raw_log -> status, _raw_log -> respcode), // The HTTP response code sent to the client. The service generates a 403-Forbidden response for blocked transactions.

	http_response_size = to_integer(coalesce(_raw_log -> responsesize, _raw_log -> respdatasize)), // The size of the HTTP response payload, excluding the headers, in bytes

	http_url = _raw_log -> url, // The destination URL. It excludes the protocol identifier (e.g., http:// or https://).

	http_user_agent = replace(coalesce(_raw_log -> useragent, _raw_log -> ua), "%20", " "), // The full user agent string for both known and unknown agents. The user agent string contains browser and system information that the destination server can use to provide appropriate content.

	policy_action = _raw_log -> action, // The action that the service took on the transaction

	policy_application_rule = _raw_log -> apprulelabel, // The name of the rule that was applied to the application

	policy_reason = _raw_log -> reason, // The action that the service took and the policy that was applied, if the transaction was blocked

	policy_redirect_rule = _raw_log -> rdr_rulename, // The name of the redirect/forwarding policy

	policy_transaction_rule = _raw_log -> rulelabel, // The name of the rule that was applied to the transaction. Applies only to Block rules, not Allow.

	policy_url_filter_rule = _raw_log -> urlfilterrulelabel, // The name of the rule that was applied to the URL filter

	sandbox_file_md5 = _raw_log -> bamd5, // The MD5 hash of the malware file that was detected in the transaction, or the MD5 of the file that was sent for analysis to the Sandbox engine

	sandbox_file_sha256 = _raw_log -> ["sha256"], // The hash of identical files

	server_ip = coalesce(_raw_log -> serverip, _raw_log -> sip), // The destination server IP address. This displays 0.0.0.0 if the request was blocked.

	server_tls_version = _raw_log -> srvtlsversion, // The TLS/SSL version used for communication between the ZIA Public Service Edge and the server

	threat_category = coalesce(_raw_log -> threatcategory, _raw_log -> malwarecat), // Adware, Benign, Trojan, Sandbox Adware, Sandbox Anonymizer, Sandbox Malware The full list is under the Threat Category filter on the Web Insights page (Analytics > Web Insights).The Threat Category Sent for Analysis is equivalent to “Submitted to Sandbox” in the SIEM output. Additionally, Other Virus is equivalent to "Virus" for backward compatibility.

	threat_name = _raw_log -> threatname, // The name of the threat that was detected in the transaction, if any

	threat_severity = _raw_log -> threatseverity, // The severity of the threat that was detected in the transaction, if any. The severity relates to the Page Risk Index score. For example, if the value of %d{riskscore} is between 90 and 100, then the value of %s{threatseverity} is Critical. Scale is: Critical (90–100) High (75–89) Medium (46–74) Low (1–45) None (0).

	url_sub_category = coalesce(_raw_log -> urlcategory, _raw_log -> urlcat), // The category of the destination URL

	url_super_category = coalesce(_raw_log -> urlsupercategory, _raw_log -> urlsupercat), // The super category of the destination URL

	user = coalesce(_raw_log -> user, _raw_log -> login), // The user's login name in email address format

	user_department = replace(coalesce(_raw_log -> department, _raw_log -> dept), "%20", " ") // The department of the user

| alter // post extraction processing 

	client_ipv4 = if(client_ip ~= "\.",  client_ip),

	client_ipv6 = if(client_ip ~= ":",  client_ip),

	client_public_ipv4 = if(client_public_ip ~= "\.",  client_public_ip),

	client_public_ipv6 = if(client_public_ip ~= ":",  client_public_ip),

	gateway_ipv4 = if(gateway_ip ~= "\.",  gateway_ip),

	gateway_ipv6 = if(gateway_ip ~= "\.",  gateway_ip),
    server_ipv4 = if(server_ip ~= "\.",  server_ip),
    server_ipv6 = if(server_ip ~= ":",  server_ip),
	url_category = if(url_super_category != "User-defined", url_super_category, url_sub_category),

	user_domain = arrayindex(regextract(user, "@(.+)$"), 0),

	device_os = arraystring(arraycreate(device_os_type, device_os_version), " "),

	os_upper = uppercase(device_os_type)

| call zscaler_nss_map_url_category // map url category 
| alter // XDM mapping 

	xdm.alert.original_alert_id = dlp_incident_id,

	xdm.alert.original_threat_name = if(threat_name != "None", threat_name),

	xdm.alert.severity = threat_severity,

	xdm.alert.subcategory = if(threat_category != "None", threat_category),

	xdm.event.id = event_id,

	xdm.event.outcome = if(policy_action ~= "(?i)Allowed", XDM_CONST.OUTCOME_SUCCESS, policy_action ~= "(?i)Blocked", XDM_CONST.OUTCOME_FAILED, policy_action),

	xdm.event.outcome_reason = policy_reason,

	xdm.event.type = sourcetype,

	xdm.intermediate.host.hostname = gateway_location_name,

	xdm.intermediate.host.ipv4_addresses = if(gateway_ipv4 != null, arraycreate(gateway_ipv4)),

	xdm.intermediate.host.ipv6_addresses = if(gateway_ipv6 != null, arraycreate(gateway_ipv6)),

	xdm.intermediate.ipv4 = gateway_ipv4,

	xdm.intermediate.ipv6 = gateway_ipv6,

	xdm.network.application_protocol = application_protocol,

	xdm.network.http.content_type = http_content_type,

	xdm.network.http.domain = http_host,

	xdm.network.http.method = if(http_method = "GET", XDM_CONST.HTTP_METHOD_GET, http_method = "POST", XDM_CONST.HTTP_METHOD_POST,http_method = "PUT", XDM_CONST.HTTP_METHOD_PUT, http_method = "PATCH", XDM_CONST.HTTP_METHOD_PATCH, http_method = "OPTIONS", XDM_CONST.HTTP_METHOD_OPTIONS, http_method = "HEAD", XDM_CONST.HTTP_METHOD_HEAD, http_method = "ACL", XDM_CONST.HTTP_METHOD_ACL, http_method = "BASELINE_CONTROL", XDM_CONST.HTTP_METHOD_BASELINE_CONTROL, http_method = "BIND", XDM_CONST.HTTP_METHOD_BIND, http_method = "CHECKIN", XDM_CONST.HTTP_METHOD_CHECKIN, http_method = "CHECKOUT", XDM_CONST.HTTP_METHOD_CHECKOUT, http_method = "CONNECT", XDM_CONST.HTTP_METHOD_CONNECT, http_method = "COPY", XDM_CONST.HTTP_METHOD_COPY, http_method = "DELETE", XDM_CONST.HTTP_METHOD_DELETE, http_method = "LABEL", XDM_CONST.HTTP_METHOD_LABEL, http_method = "LINK", XDM_CONST.HTTP_METHOD_LINK, http_method = "LOCK", XDM_CONST.HTTP_METHOD_LOCK, http_method = "MERGE", XDM_CONST.HTTP_METHOD_MERGE, http_method = "MKACTIVITY", XDM_CONST.HTTP_METHOD_MKACTIVITY, http_method = "MKCALENDAR", XDM_CONST.HTTP_METHOD_MKCALENDAR, http_method = "MKCOL", XDM_CONST.HTTP_METHOD_MKCOL, http_method = "MKREDIRECTREF", XDM_CONST.HTTP_METHOD_MKREDIRECTREF, http_method = "MKWORKSPACE", XDM_CONST.HTTP_METHOD_MKWORKSPACE, http_method = "MOVE", XDM_CONST.HTTP_METHOD_MOVE,  http_method = "ORDERPATCH", XDM_CONST.HTTP_METHOD_ORDERPATCH,   http_method = "PRI", XDM_CONST.HTTP_METHOD_PRI, http_method = "PROPFIND", XDM_CONST.HTTP_METHOD_PROPFIND, http_method = "PROPPATCH", XDM_CONST.HTTP_METHOD_PROPPATCH,  http_method = "REBIND", XDM_CONST.HTTP_METHOD_REBIND, http_method = "REPORT", XDM_CONST.HTTP_METHOD_REPORT, http_method = "SEARCH", XDM_CONST.HTTP_METHOD_SEARCH, http_method = "TRACE", XDM_CONST.HTTP_METHOD_TRACE, http_method = "UNBIND", XDM_CONST.HTTP_METHOD_UNBIND, http_method = "UNCHECKOUT", XDM_CONST.HTTP_METHOD_UNCHECKOUT, http_method = "UNLINK", XDM_CONST.HTTP_METHOD_UNLINK, http_method = "UNLOCK", XDM_CONST.HTTP_METHOD_UNLOCK, http_method = "UPDATE", XDM_CONST.HTTP_METHOD_UPDATE, http_method = "UPDATEREDIRECTREF", XDM_CONST.HTTP_METHOD_UPDATEREDIRECTREF, http_method = "VERSION_CONTROL", XDM_CONST.HTTP_METHOD_VERSION_CONTROL, to_string(http_method)),

	xdm.network.http.referrer = if(http_referer != "None", http_referer),
    xdm.network.http.response_code = if(http_status = "200", XDM_CONST.HTTP_RSP_CODE_OK, http_status = "201", XDM_CONST.HTTP_RSP_CODE_CREATED, http_status = "302", XDM_CONST.HTTP_RSP_CODE_FOUND, http_status = "401", XDM_CONST.HTTP_RSP_CODE_UNAUTHORIZED, http_status = "403", XDM_CONST.HTTP_RSP_CODE_FORBIDDEN, http_status = "404", XDM_CONST.HTTP_RSP_CODE_NOT_FOUND, http_status = "500", XDM_CONST.HTTP_RSP_CODE_INTERNAL_SERVER_ERROR, http_status = "501", XDM_CONST.HTTP_RSP_CODE_NOT_IMPLEMENTED, http_status = "502", XDM_CONST.HTTP_RSP_CODE_BAD_GATEWAY, http_status = "503", XDM_CONST.HTTP_RSP_CODE_SERVICE_UNAVAILABLE, http_status = "504", XDM_CONST.HTTP_RSP_CODE_GATEWAY_TIMEOUT, http_status = "505", XDM_CONST.HTTP_RSP_CODE_HTTP_VERSION_NOT_SUPPORTED, http_status = "506", XDM_CONST.HTTP_RSP_CODE_VARIANT_ALSO_NEGOTIATES, http_status = "507", XDM_CONST.HTTP_RSP_CODE_INSUFFICIENT_STORAGE, http_status = "508", XDM_CONST.HTTP_RSP_CODE_LOOP_DETECTED, http_status = "511", XDM_CONST.HTTP_RSP_CODE_NETWORK_AUTHENTICATION_REQUIRED, http_status = "100", XDM_CONST.HTTP_RSP_CODE_CONTINUE, http_status = "101", XDM_CONST.HTTP_RSP_CODE_SWITCHING_PROTOCOLS, http_status = "102", XDM_CONST.HTTP_RSP_CODE_PROCESSING, http_status = "103", XDM_CONST.HTTP_RSP_CODE_EARLY_HINTS, http_status = "202", XDM_CONST.HTTP_RSP_CODE_ACCEPTED, http_status = "203", XDM_CONST.HTTP_RSP_CODE_NON__AUTHORITATIVE_INFORMATION, http_status = "204", XDM_CONST.HTTP_RSP_CODE_NO_CONTENT, http_status = "205", XDM_CONST.HTTP_RSP_CODE_RESET_CONTENT, http_status = "206", XDM_CONST.HTTP_RSP_CODE_PARTIAL_CONTENT, http_status = "207", XDM_CONST.HTTP_RSP_CODE_MULTI__STATUS, http_status = "208", XDM_CONST.HTTP_RSP_CODE_ALREADY_REPORTED, http_status = "226", XDM_CONST.HTTP_RSP_CODE_IM_USED, http_status = "300", XDM_CONST.HTTP_RSP_CODE_MULTIPLE_CHOICES, http_status = "301", XDM_CONST.HTTP_RSP_CODE_MOVED_PERMANENTLY, http_status = "303", XDM_CONST.HTTP_RSP_CODE_SEE_OTHER, http_status = "304", XDM_CONST.HTTP_RSP_CODE_NOT_MODIFIED, http_status = "305", XDM_CONST.HTTP_RSP_CODE_USE_PROXY, http_status = "307", XDM_CONST.HTTP_RSP_CODE_TEMPORARY_REDIRECT, http_status = "308", XDM_CONST.HTTP_RSP_CODE_PERMANENT_REDIRECT, http_status = "400", XDM_CONST.HTTP_RSP_CODE_BAD_REQUEST, http_status = "402", XDM_CONST.HTTP_RSP_CODE_PAYMENT_REQUIRED, http_status = "405", XDM_CONST.HTTP_RSP_CODE_METHOD_NOT_ALLOWED, http_status = "406", XDM_CONST.HTTP_RSP_CODE_NOT_ACCEPTABLE, http_status = "407", XDM_CONST.HTTP_RSP_CODE_PROXY_AUTHENTICATION_REQUIRED, http_status = "408", XDM_CONST.HTTP_RSP_CODE_REQUEST_TIMEOUT, http_status = "409", XDM_CONST.HTTP_RSP_CODE_CONFLICT, http_status = "410", XDM_CONST.HTTP_RSP_CODE_GONE, http_status = "411", XDM_CONST.HTTP_RSP_CODE_LENGTH_REQUIRED, http_status = "412", XDM_CONST.HTTP_RSP_CODE_PRECONDITION_FAILED, http_status = "413", XDM_CONST.HTTP_RSP_CODE_CONTENT_TOO_LARGE, http_status = "414", XDM_CONST.HTTP_RSP_CODE_URI_TOO_LONG, http_status = "415", XDM_CONST.HTTP_RSP_CODE_UNSUPPORTED_MEDIA_TYPE, http_status = "416", XDM_CONST.HTTP_RSP_CODE_RANGE_NOT_SATISFIABLE, http_status = "417", XDM_CONST.HTTP_RSP_CODE_EXPECTATION_FAILED, http_status = "421", XDM_CONST.HTTP_RSP_CODE_MISDIRECTED_REQUEST, http_status = "422", XDM_CONST.HTTP_RSP_CODE_UNPROCESSABLE_CONTENT, http_status = "423", XDM_CONST.HTTP_RSP_CODE_LOCKED, http_status = "424", XDM_CONST.HTTP_RSP_CODE_FAILED_DEPENDENCY, http_status = "425", XDM_CONST.HTTP_RSP_CODE_TOO_EARLY, http_status = "426", XDM_CONST.HTTP_RSP_CODE_UPGRADE_REQUIRED, http_status = "428", XDM_CONST.HTTP_RSP_CODE_PRECONDITION_REQUIRED, http_status = "429", XDM_CONST.HTTP_RSP_CODE_TOO_MANY_REQUESTS, http_status = "431", XDM_CONST.HTTP_RSP_CODE_REQUEST_HEADER_FIELDS_TOO_LARGE, http_status = "451", XDM_CONST.HTTP_RSP_CODE_UNAVAILABLE_FOR_LEGAL_REASONS, http_status),
	xdm.network.http.url = http_url,

	xdm.network.rule = arraystring(arrayfilter(arraycreate(policy_transaction_rule, policy_application_rule, policy_redirect_rule, policy_url_filter_rule, dlp_rule_name), "@element" != "None"), " "),

	xdm.network.tls.protocol_version = arraystring(arraydistinct(arraycreate(client_tls_version, server_tls_version)), ","),

	xdm.observer.action = policy_action,

	xdm.observer.name = gateway_location_name,

	xdm.source.host.device_id = external_device_id,

	xdm.source.ipv4 = client_ipv4,

	xdm.source.ipv6 = client_ipv6,

	xdm.source.host.os = device_os,

	xdm.source.host.os_family = if(os_upper contains "WINDOWS", XDM_CONST.OS_FAMILY_WINDOWS, os_upper contains "MAC", XDM_CONST.OS_FAMILY_MACOS, os_upper contains "LINUX", XDM_CONST.OS_FAMILY_LINUX, os_upper contains "ANDROID", XDM_CONST.OS_FAMILY_ANDROID, os_upper contains "IOS", XDM_CONST.OS_FAMILY_IOS, os_upper contains "UBUNTU", XDM_CONST.OS_FAMILY_UBUNTU, os_upper contains "DEBIAN", XDM_CONST.OS_FAMILY_DEBIAN, os_upper contains "FEDORA", XDM_CONST.OS_FAMILY_FEDORA, os_upper contains "CENTOS", XDM_CONST.OS_FAMILY_CENTOS, os_upper contains "CHROME", XDM_CONST.OS_FAMILY_CHROMEOS, os_upper contains "SOLARIS", XDM_CONST.OS_FAMILY_SOLARIS, os_upper contains "SCADA", XDM_CONST.OS_FAMILY_SCADA, os_upper),

	xdm.source.host.hostname = client_device_hostname,

	xdm.source.host.ipv4_addresses = arraydistinct(arraycreate(client_ipv4, client_public_ipv4)),

	xdm.source.host.ipv4_public_addresses = arraycreate(client_public_ipv4),

	xdm.source.host.ipv6_addresses = arraydistinct(arraycreate(client_ipv6, client_public_ipv6)),

	xdm.source.host.ipv6_public_addresses = arraycreate(client_public_ipv6),

	xdm.source.port = client_source_port,

	xdm.source.sent_bytes = http_request_size,

	xdm.source.user_agent = if(http_user_agent != "Unkown", http_user_agent),

	xdm.source.user.domain = user_domain,

	xdm.source.user.ou = user_department,

	xdm.source.user.username = user,

	xdm.target.application.name = cloud_application_name,

	xdm.target.file.file_type = arraystring(arraydistinct(arrayfilter(arraycreate(file_scannable_type, file_unscannable_type), "@element" != "None")), ","),

	xdm.target.file.md5 = sandbox_file_md5,

	xdm.target.file.sha256 = sandbox_file_sha256,

	xdm.target.host.ipv4_addresses = arraycreate(server_ipv4),

	xdm.target.host.ipv4_public_addresses = arraycreate(server_ipv4),

	xdm.target.host.ipv6_addresses = arraycreate(server_ipv6),

	xdm.target.host.ipv6_public_addresses = arraycreate(server_ipv6),

	xdm.target.ipv4 = server_ipv4,

	xdm.target.ipv6 = server_ipv6,

	xdm.target.sent_bytes = http_response_size,

	xdm.target.url = http_url;
[RULE: zscaler_nss_map_url_category content_id="Zscaler"]
/* This rule maps a url category value from url_category field to xdm.network.http.url_category. 
   If there is a match to one of the predefined enum values, it is mapped to the enum, otherwise, 
   it is just converted to uppercase and mapped as is.  
   usage prerequisite: init a field "url_category" with the url category value. */
alter url_category = uppercase(url_category)
| alter xdm.network.http.url_category = if(url_category contains "ABORTION", XDM_CONST.URL_CATEGORY_ABORTION, url_category contains "DRUGS", XDM_CONST.URL_CATEGORY_ABUSED_DRUGS, url_category contains "ADULT", XDM_CONST.URL_CATEGORY_ADULT, url_category contains "ALCOHOL" or url_category contains "TOBACCO", XDM_CONST.URL_CATEGORY_ALCOHOL_AND_TOBACCO, url_category contains "AUCTIONS", XDM_CONST.URL_CATEGORY_AUCTIONS, url_category contains "BUSINESS" or url_category contains "ECONOMY", XDM_CONST.URL_CATEGORY_BUSINESS_AND_ECONOMY, url_category contains "COMMAND AND CONTROL" or url_category contains "C&C", XDM_CONST.URL_CATEGORY_COMMAND_AND_CONTROL, url_category contains "COMPUTER" or url_category contains "INTERNET", XDM_CONST.URL_CATEGORY_COMPUTER_AND_INTERNET_INFO, url_category contains "CONTENT DELIVERY NETWORKS" or url_category contains "CDN", XDM_CONST.URL_CATEGORY_CONTENT_DELIVERY_NETWORKS, url_category contains "COPYRIGHT", XDM_CONST.URL_CATEGORY_COPYRIGHT_INFRINGEMENT, url_category contains "CRYPTO", XDM_CONST.URL_CATEGORY_CRYPTOCURRENCY, url_category contains "DATING", XDM_CONST.URL_CATEGORY_DATING, url_category contains "DYNAMIC DNS", XDM_CONST.URL_CATEGORY_DYNAMIC_DNS, url_category contains "EDUCATIONAL INSTITUTIONS", XDM_CONST.URL_CATEGORY_EDUCATIONAL_INSTITUTIONS, url_category contains "ENTERTAINMENT" and url_category contains "ARTS", XDM_CONST.URL_CATEGORY_ENTERTAINMENT_AND_ARTS, url_category contains "EXTREMISM", XDM_CONST.URL_CATEGORY_EXTREMISM, url_category contains "FINANCIAL" or url_category contains "FINANCE", XDM_CONST.URL_CATEGORY_FINANCIAL_SERVICES, url_category contains "GAMBLING", XDM_CONST.URL_CATEGORY_GAMBLING, url_category contains "GAMES", XDM_CONST.URL_CATEGORY_GAMES, url_category contains "GOVERNMENT", XDM_CONST.URL_CATEGORY_GOVERNMENT, url_category contains "GRAYWARE", XDM_CONST.URL_CATEGORY_GRAYWARE, url_category contains "HACKING", XDM_CONST.URL_CATEGORY_HACKING, url_category contains "HEALTH" or url_category contains "MEDICINE", XDM_CONST.URL_CATEGORY_HEALTH_AND_MEDICINE, url_category contains "HOME" or url_category contains "GARDEN", XDM_CONST.URL_CATEGORY_HOME_AND_GARDEN, url_category contains "HUNTING" or url_category contains "FISHING", XDM_CONST.URL_CATEGORY_HUNTING_AND_FISHING, url_category contains "INSUFFICIENT CONTENT", XDM_CONST.URL_CATEGORY_INSUFFICIENT_CONTENT, url_category contains "INTERNET COMMUNICATIONS" and url_category contains "TELEPHONY", XDM_CONST.URL_CATEGORY_INTERNET_COMMUNICATIONS_AND_TELEPHONY, url_category contains "INTERNET PORTALS", XDM_CONST.URL_CATEGORY_INTERNET_PORTALS, url_category contains "JOB", XDM_CONST.URL_CATEGORY_JOB_SEARCH, url_category contains "LEGAL", XDM_CONST.URL_CATEGORY_LEGAL, url_category contains "MALWARE", XDM_CONST.URL_CATEGORY_MALWARE, url_category contains "MILITARY", XDM_CONST.URL_CATEGORY_MILITARY, url_category contains "MOTOR VEHICLES", XDM_CONST.URL_CATEGORY_MOTOR_VEHICLES, url_category contains "MUSIC", XDM_CONST.URL_CATEGORY_MUSIC, url_category contains "DOMAIN" and url_category contains "REGIST", XDM_CONST.URL_CATEGORY_NEWLY_REGISTERED_DOMAIN, url_category contains "NEWS", XDM_CONST.URL_CATEGORY_NEWS, url_category contains "NOT RESOLVED", XDM_CONST.URL_CATEGORY_NOT_RESOLVED, url_category contains "NUDITY", XDM_CONST.URL_CATEGORY_NUDITY, url_category contains "ONLINE STORAGE" and url_category contains "BACKUP", XDM_CONST.URL_CATEGORY_ONLINE_STORAGE_AND_BACKUP, url_category contains "PARKED", XDM_CONST.URL_CATEGORY_PARKED, url_category contains "PEER TO PEER", XDM_CONST.URL_CATEGORY_PEER_TO_PEER, url_category contains "PERSONAL SITES" or url_category contains "BLOG", XDM_CONST.URL_CATEGORY_PERSONAL_SITES_AND_BLOGS, url_category contains "PHILOSOPHY" or url_category contains "POLITICAL ADVOCACY", XDM_CONST.URL_CATEGORY_PHILOSOPHY_AND_POLITICAL_ADVOCACY, url_category contains "PHISHING", XDM_CONST.URL_CATEGORY_PHISHING, url_category contains "PRIVATE IP ADDRESSES", XDM_CONST.URL_CATEGORY_PRIVATE_IP_ADDRESSES, url_category contains "PROXY" or url_category contains "ANONYMIZERS", XDM_CONST.URL_CATEGORY_PROXY_AVOIDANCE_AND_ANONYMIZERS, url_category contains "QUESTIONABLE", XDM_CONST.URL_CATEGORY_QUESTIONABLE, url_category contains "REAL ESTATE", XDM_CONST.URL_CATEGORY_REAL_ESTATE, url_category contains "HOBBIES" or url_category contains "RECREATION", XDM_CONST.URL_CATEGORY_RECREATION_AND_HOBBIES, url_category contains "REFERENCE", XDM_CONST.URL_CATEGORY_REFERENCE_AND_RESEARCH, url_category contains "RELIGION", XDM_CONST.URL_CATEGORY_RELIGION, url_category contains "SEARCH ENGINES", XDM_CONST.URL_CATEGORY_SEARCH_ENGINES, url_category contains "SEX EDUCATION", XDM_CONST.URL_CATEGORY_SEX_EDUCATION, url_category contains "SHAREWARE" and url_category contains "FREEWARE", XDM_CONST.URL_CATEGORY_SHAREWARE_AND_FREEWARE, url_category contains "SHOPPING", XDM_CONST.URL_CATEGORY_SHOPPING, url_category contains "SOCIAL_NETWORK", XDM_CONST.URL_CATEGORY_SOCIAL_NETWORKING, url_category contains "SOCIETY", XDM_CONST.URL_CATEGORY_SOCIETY, url_category contains "SPORTS", XDM_CONST.URL_CATEGORY_SPORTS, url_category contains "STOCK", XDM_CONST.URL_CATEGORY_STOCK_ADVICE_AND_TOOLS, url_category contains "MEDIA" and url_category contains "STREAM", XDM_CONST.URL_CATEGORY_STREAMING_MEDIA, url_category contains "INTIMATE APPAREL", XDM_CONST.URL_CATEGORY_SWIMSUITS_AND_INTIMATE_APPAREL, url_category contains "TRAINING" and url_category contains "Sport", XDM_CONST.URL_CATEGORY_TRAINING_AND_TOOLS, url_category contains "TRANSLATION", XDM_CONST.URL_CATEGORY_TRANSLATION, url_category contains "TRAVEL", XDM_CONST.URL_CATEGORY_TRAVEL, url_category contains "UNKNOWN", XDM_CONST.URL_CATEGORY_UNKNOWN, url_category contains "WEAPONS", XDM_CONST.URL_CATEGORY_WEAPONS, url_category contains "WEB ADVERTISEMENTS", XDM_CONST.URL_CATEGORY_WEB_ADVERTISEMENTS, url_category contains "WEB HOSTING", XDM_CONST.URL_CATEGORY_WEB_HOSTING, url_category contains "WEB BASED EMAIL", XDM_CONST.URL_CATEGORY_WEB_BASED_EMAIL, url_category);


[MODEL: dataset="zscaler_zpa_raw", content_id="ZscalerZPA"]
filter
    cat in ("ZPA User Status", "ZPA User Activity")
| alter
    proto_int = to_integer(proto)
| alter
    xdm.network.rule = policy,
    xdm.source.port = to_integer(0),
    xdm.target.ipv4 = if(cat="ZPA User Status", srcPreNAT, dst),
    xdm.target.port = if(cat="ZPA User Status", to_integer(0), to_integer(dstPort)),
    xdm.source.ipv4 = src,
    xdm.source.user.username = usrName,
    xdm.observer.name = Connector,
    xdm.network.application_protocol_category = AppGroup,
    xdm.observer.unique_identifier = ClientZEN,
    xdm.session_context_id = SessionID,
    xdm.event.outcome_reason = InternalReason,
    xdm.event.outcome = ConnectionStatus,
    xdm.network.tls.cipher = DoubleEncryption,
    xdm.source.location.country = ClientCountryCode,
    xdm.source.host.hostname = identHostName,
    xdm.source.agent.identifier = ConnectionID,
    xdm.event.type = cat,
    xdm.event.operation_sub_type = ApplicationSegment,
    xdm.source.host.ipv4_addresses = arraycreate(coalesce(srcPreNAT, "")),
    xdm.network.ip_protocol = if(proto_int = 0 ,XDM_CONST.IP_PROTOCOL_HOPOPT, proto_int = 1 ,XDM_CONST.IP_PROTOCOL_ICMP, proto_int = 2 ,XDM_CONST.IP_PROTOCOL_IGMP, proto_int = 3 ,XDM_CONST.IP_PROTOCOL_GGP, proto_int = 4 ,XDM_CONST.IP_PROTOCOL_IP, proto_int = 5 ,XDM_CONST.IP_PROTOCOL_ST, proto_int = 6 ,XDM_CONST.IP_PROTOCOL_TCP, proto_int = 7 ,XDM_CONST.IP_PROTOCOL_CBT, proto_int = 8 ,XDM_CONST.IP_PROTOCOL_EGP, proto_int = 9 ,XDM_CONST.IP_PROTOCOL_IGP, proto_int = 10 ,XDM_CONST.IP_PROTOCOL_BBN_RCC_MON, proto_int = 11 ,XDM_CONST.IP_PROTOCOL_NVP_II, proto_int = 12 ,XDM_CONST.IP_PROTOCOL_PUP, proto_int = 13 ,XDM_CONST.IP_PROTOCOL_ARGUS, proto_int = 14 ,XDM_CONST.IP_PROTOCOL_EMCON, proto_int = 15 ,XDM_CONST.IP_PROTOCOL_XNET, proto_int = 16 ,XDM_CONST.IP_PROTOCOL_CHAOS, proto_int = 17 ,XDM_CONST.IP_PROTOCOL_UDP, proto_int = 18 ,XDM_CONST.IP_PROTOCOL_MUX, proto_int = 19 ,XDM_CONST.IP_PROTOCOL_DCN_MEAS, proto_int = 20 ,XDM_CONST.IP_PROTOCOL_HMP, proto_int = 21 ,XDM_CONST.IP_PROTOCOL_PRM, proto_int = 22 ,XDM_CONST.IP_PROTOCOL_XNS_IDP, proto_int = 23 ,XDM_CONST.IP_PROTOCOL_TRUNK_1, proto_int = 24 ,XDM_CONST.IP_PROTOCOL_TRUNK_2, proto_int = 25 ,XDM_CONST.IP_PROTOCOL_LEAF_1, proto_int = 26 ,XDM_CONST.IP_PROTOCOL_LEAF_2, proto_int = 27 ,XDM_CONST.IP_PROTOCOL_RDP, proto_int = 28 ,XDM_CONST.IP_PROTOCOL_IRTP, proto_int = 29 ,XDM_CONST.IP_PROTOCOL_ISO_TP4, proto_int = 30 ,XDM_CONST.IP_PROTOCOL_NETBLT, proto_int = 31 ,XDM_CONST.IP_PROTOCOL_MFE_NSP, proto_int = 32 ,XDM_CONST.IP_PROTOCOL_MERIT_INP, proto_int = 33 ,XDM_CONST.IP_PROTOCOL_DCCP, proto_int = 34 ,XDM_CONST.IP_PROTOCOL_3PC, proto_int = 35 ,XDM_CONST.IP_PROTOCOL_IDPR, proto_int = 36 ,XDM_CONST.IP_PROTOCOL_XTP, proto_int = 37 ,XDM_CONST.IP_PROTOCOL_DDP, proto_int = 38 ,XDM_CONST.IP_PROTOCOL_IDPR_CMTP, proto_int = 39 ,XDM_CONST.IP_PROTOCOL_TP, proto_int = 40 ,XDM_CONST.IP_PROTOCOL_IL, proto_int = 41 ,XDM_CONST.IP_PROTOCOL_IPV6, proto_int = 42 ,XDM_CONST.IP_PROTOCOL_SDRP, proto_int = 43 ,XDM_CONST.IP_PROTOCOL_IPV6_ROUTE, proto_int = 44 ,XDM_CONST.IP_PROTOCOL_IPV6_FRAG, proto_int = 45 ,XDM_CONST.IP_PROTOCOL_IDRP, proto_int = 46 ,XDM_CONST.IP_PROTOCOL_RSVP, proto_int = 47 ,XDM_CONST.IP_PROTOCOL_GRE, proto_int = 48 ,XDM_CONST.IP_PROTOCOL_DSR, proto_int = 49 ,XDM_CONST.IP_PROTOCOL_BNA, proto_int = 50 ,XDM_CONST.IP_PROTOCOL_ESP, proto_int = 51 ,XDM_CONST.IP_PROTOCOL_AH, proto_int = 52 ,XDM_CONST.IP_PROTOCOL_I_NLSP, proto_int = 53 ,XDM_CONST.IP_PROTOCOL_SWIPE, proto_int = 54 ,XDM_CONST.IP_PROTOCOL_NARP, proto_int = 55 ,XDM_CONST.IP_PROTOCOL_MOBILE, proto_int = 56 ,XDM_CONST.IP_PROTOCOL_TLSP, proto_int = 57 ,XDM_CONST.IP_PROTOCOL_SKIP, proto_int = 58 ,XDM_CONST.IP_PROTOCOL_IPV6_ICMP, proto_int = 59 ,XDM_CONST.IP_PROTOCOL_IPV6_NONXT, proto_int = 60 ,XDM_CONST.IP_PROTOCOL_IPV6_OPTS, proto_int = 62 ,XDM_CONST.IP_PROTOCOL_CFTP, proto_int = 64 ,XDM_CONST.IP_PROTOCOL_SAT_EXPAK, proto_int = 65 ,XDM_CONST.IP_PROTOCOL_KRYPTOLAN, proto_int = 66 ,XDM_CONST.IP_PROTOCOL_RVD, proto_int = 67 ,XDM_CONST.IP_PROTOCOL_IPPC, proto_int = 69 ,XDM_CONST.IP_PROTOCOL_SAT_MON, proto_int = 70 ,XDM_CONST.IP_PROTOCOL_VISA, proto_int = 71 ,XDM_CONST.IP_PROTOCOL_IPCV, proto_int = 72 ,XDM_CONST.IP_PROTOCOL_CPNX, proto_int = 73 ,XDM_CONST.IP_PROTOCOL_CPHB, proto_int = 74 ,XDM_CONST.IP_PROTOCOL_WSN, proto_int = 75 ,XDM_CONST.IP_PROTOCOL_PVP, proto_int = 76 ,XDM_CONST.IP_PROTOCOL_BR_SAT_MON, proto_int = 77 ,XDM_CONST.IP_PROTOCOL_SUN_ND, proto_int = 78 ,XDM_CONST.IP_PROTOCOL_WB_MON, proto_int = 79 ,XDM_CONST.IP_PROTOCOL_WB_EXPAK, proto_int = 80 ,XDM_CONST.IP_PROTOCOL_ISO_IP, proto_int = 81 ,XDM_CONST.IP_PROTOCOL_VMTP, proto_int = 82 ,XDM_CONST.IP_PROTOCOL_SECURE_VMTP, proto_int = 83 ,XDM_CONST.IP_PROTOCOL_VINES, proto_int = 84 ,XDM_CONST.IP_PROTOCOL_TTP, proto_int = 85 ,XDM_CONST.IP_PROTOCOL_NSFNET_IGP, proto_int = 86 ,XDM_CONST.IP_PROTOCOL_DGP, proto_int = 87 ,XDM_CONST.IP_PROTOCOL_TCF, proto_int = 88 ,XDM_CONST.IP_PROTOCOL_EIGRP, proto_int = 89 ,XDM_CONST.IP_PROTOCOL_OSPFIGP, proto_int = 90 ,XDM_CONST.IP_PROTOCOL_SPRITE_RPC, proto_int = 91 ,XDM_CONST.IP_PROTOCOL_LARP, proto_int = 92 ,XDM_CONST.IP_PROTOCOL_MTP, proto_int = 93 ,XDM_CONST.IP_PROTOCOL_AX25, proto_int = 94 ,XDM_CONST.IP_PROTOCOL_IPIP, proto_int = 95 ,XDM_CONST.IP_PROTOCOL_MICP, proto_int = 96 ,XDM_CONST.IP_PROTOCOL_SCC_SP, proto_int = 97 ,XDM_CONST.IP_PROTOCOL_ETHERIP, proto_int = 98 ,XDM_CONST.IP_PROTOCOL_ENCAP, proto_int = 100 ,XDM_CONST.IP_PROTOCOL_GMTP, proto_int = 101 ,XDM_CONST.IP_PROTOCOL_IFMP, proto_int = 102 ,XDM_CONST.IP_PROTOCOL_PNNI, proto_int = 103 ,XDM_CONST.IP_PROTOCOL_PIM, proto_int = 104 ,XDM_CONST.IP_PROTOCOL_ARIS, proto_int = 105 ,XDM_CONST.IP_PROTOCOL_SCPS, proto_int = 106 ,XDM_CONST.IP_PROTOCOL_QNX, proto_int = 107 ,XDM_CONST.IP_PROTOCOL_AN, proto_int = 108 ,XDM_CONST.IP_PROTOCOL_IPCOMP, proto_int = 110 ,XDM_CONST.IP_PROTOCOL_COMPAQ_PEER, proto_int = 111 ,XDM_CONST.IP_PROTOCOL_IPX_IN_IP, proto_int = 112 ,XDM_CONST.IP_PROTOCOL_VRRP, proto_int = 113 ,XDM_CONST.IP_PROTOCOL_PGM, proto_int = 115 ,XDM_CONST.IP_PROTOCOL_L2TP, proto_int = 116 ,XDM_CONST.IP_PROTOCOL_DDX, proto_int = 117 ,XDM_CONST.IP_PROTOCOL_IATP, proto_int = 118 ,XDM_CONST.IP_PROTOCOL_STP, proto_int = 119 ,XDM_CONST.IP_PROTOCOL_SRP, proto_int = 120 ,XDM_CONST.IP_PROTOCOL_UTI, proto_int = 121 ,XDM_CONST.IP_PROTOCOL_SMP, proto_int = 122 ,XDM_CONST.IP_PROTOCOL_SM, proto_int = 123 ,XDM_CONST.IP_PROTOCOL_PTP, proto_int = 124 ,XDM_CONST.IP_PROTOCOL_ISIS, proto_int = 125 ,XDM_CONST.IP_PROTOCOL_FIRE, proto_int = 126 ,XDM_CONST.IP_PROTOCOL_CRTP, proto_int = 127 ,XDM_CONST.IP_PROTOCOL_CRUDP, proto_int = 128 ,XDM_CONST.IP_PROTOCOL_SSCOPMCE, proto_int = 129 ,XDM_CONST.IP_PROTOCOL_IPLT, proto_int = 130 ,XDM_CONST.IP_PROTOCOL_SPS, proto_int = 131 ,XDM_CONST.IP_PROTOCOL_PIPE, proto_int = 132 ,XDM_CONST.IP_PROTOCOL_SCTP, proto_int = 133 ,XDM_CONST.IP_PROTOCOL_FC, proto_int = 134 ,XDM_CONST.IP_PROTOCOL_RSVP_E2E_IGNORE, proto_int = 135 ,XDM_CONST.IP_PROTOCOL_MOBILITY, proto_int = 136 ,XDM_CONST.IP_PROTOCOL_UDPLITE, proto_int = 137 ,XDM_CONST.IP_PROTOCOL_MPLS_IN_IP,to_string(proto)),
    xdm.event.duration = to_integer(PolicyProcessingTime),
    xdm.target.process.name = ApplicationName,
    xdm.observer.version = leefProductVersion,
    xdm.event.id = SessionID,
    xdm.source.sent_bytes = to_integer(srcBytes),
    xdm.target.sent_bytes = to_integer(dstBytes),
    xdm.source.host.os_family = if(Platform = "windows",XDM_CONST.OS_FAMILY_WINDOWS, Platform = "mac", XDM_CONST.OS_FAMILY_MACOS , Platform ~= "el\d",XDM_CONST.OS_FAMILY_LINUX,to_string(Platform)),
    xdm.source.application.version = Version,
    xdm.event.description = SessionStatus,
    xdm.network.tls.client_certificate.subject = CertificateCN,
    xdm.auth.mfa.client_details = customer,
    xdm.target.host.hostname = ZEN,
    xdm.target.application.name = "Zscaler Private Access (ZPA)",
    xdm.auth.mfa.provider = Idp,
    xdm.event.tags = arraycreate("VPN");

filter cat in ("Connector Status")
| alter
    xdm.event.type = cat,
    xdm.source.agent.version = Version,
    xdm.target.resource_before.name = Connector,
    xdm.target.host.hostname = ZEN,
    xdm.source.ipv4 = src,
    xdm.target.resource_before.parent_id = Customer,
    xdm.session_context_id = SessionID,
    xdm.source.location.country = CountryCode,
    xdm.target.resource_before.type = SessionType;
