[INGEST:vendor="amp", product="edw", target_dataset="amp_edw_raw", no_hit = keep]
alter _time = if(EXTENDED_TIMESTAMP!=null, EXTENDED_TIMESTAMP , _insert_time ),
     // original_timestamp = EXTENDED_TIMESTAMP, 
      PROTOCOL = arrayindex(regextract(COMMENT_TEXT, "PROTOCOL=(\w+)"), 0),
      PORT = to_number(arrayindex(regextract(COMMENT_TEXT, "PORT=(\d+)"), 0)),
      action = if((ACTION_NAME="LOGON" and PRIV_USED="CREATE SESSION"), "success", (ACTION_NAME="LOGON" and PRIV_USED = null), "failure") 
;

[INGEST:vendor="ibm", product="tim", target_dataset="ibm_tim_raw"]
alter
    log_timestamp = parse_timestamp("%Y.%m.%d %H:%M:%S",arrayindex(regextract(_raw_log,"(\d{4}\.\d{2}\.\d{2} \d{2}\:\d{2}\:\d{2})"),0),"Australia/Sydney")
| alter
    _time = if(log_timestamp != null, log_timestamp, _insert_time),
    server_name = arrayindex(regextract(_raw_log,"<Server Format=\"IP\">(.+)</Server>"),0),
    ProductId = arrayindex(regextract(_raw_log,"<ProductId>(.+)</ProductId>"),0),
    Component = arrayindex(regextract(_raw_log,"<Component>(.+)</Component>"),0),
    ProductInstance = arrayindex(regextract(_raw_log," <ProductInstance>(.+)</ProductInstance>"),0),
    LogText = arrayindex(regextract(_raw_log,"<LogText><(.+)</LogText>"),0),
    Type = arrayindex(regextract(_raw_log,"Type=([^\s]+)"),0),
    Catalog = arrayindex(regextract(_raw_log,"Catalog=([^\s]+)"),0),
    MsgKey = arrayindex(regextract(_raw_log,"MsgKey=\"([^\"]+)\""),0),
    log_level = arrayindex(regextract(_raw_log,"Severity=\"(.+)\""),0)
| alter
  username = if(LogText contains "login successfully", arrayindex(split(LogText," "),1),
                                  LogText contains "password is not correct", arrayindex(split(LogText," "),7));
    

[INGEST:vendor="Cyber-Ark", product="Vault", target_dataset="cyber_ark_vault_raw", no_hit = keep]
filter _raw_log contains "CEF:"
| alter 
    timestamp = arrayindex(regextract(_raw_log,"\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}"),0)
| alter
    cefName = arrayindex(split(_raw_log, "|"),5),
    cefVersion = arrayindex(regextract(_raw_log,"CEF:{d}"),0),
    cefSeverity = arrayindex(split(_raw_log, "|"),6),
    cefDeviceVersion = arrayindex(split(_raw_log, "|"),3),
    cefDeviceEventClassId = arrayindex(split(_raw_log, "|"),4),
    cef_signature = arrayindex(split(_raw_log, "|"),4),
    _time = if(parse_timestamp("%Y-%m-%dT%H:%M:%S",timestamp,"Australia/Sydney")!=null,parse_timestamp("%Y-%m-%dT%H:%M:%S",timestamp,"Australia/Sydney"),_insert_time),
    act = arrayindex(regextract(_raw_log,"act=(.+) suser"),0),
    suser = arrayindex(regextract(_raw_log,"suser=(.+) fname"),0),
    fname = arrayindex(regextract(_raw_log,"fname=(.+) dvc"),0),
    dvc = arrayindex(regextract(_raw_log,"dvc=(.+) shost"),0),
    shost = arrayindex(regextract(_raw_log,"shost=(.+) dhost"),0),
    dhost = arrayindex(regextract(_raw_log,"dhost=(.+) duser"),0),
    duser = arrayindex(regextract(_raw_log,"duser=(.+) externalId"),0),
    externalId = arrayindex(regextract(_raw_log,"externalId=(.+) app"),0),
    app = arrayindex(regextract(_raw_log,"app=(.+) reason"),0),
    reason = arrayindex(regextract(_raw_log,"reason=(.+) cs1Label"),0),
    cs1Label = arrayindex(regextract(_raw_log,"cs1Label=(.+) cs1"),0),
    cs1 = arrayindex(regextract(_raw_log,"cs1=(.+) cs2Label"),0),
    cs2Label = arrayindex(regextract(_raw_log,"cs2Label=(.+) cs2"),0),
    cs2 = arrayindex(regextract(_raw_log,"cs2=(.+) cs3Label"),0),
    cs3Label = arrayindex(regextract(_raw_log,"cs3Label=(.+) cs3"),0),
    cs3 = arrayindex(regextract(_raw_log,"cs3=(.+) cs4Label"),0),
    cs4Label = arrayindex(regextract(_raw_log,"cs4Label=(.+) cs4"),0),
    cs4 = arrayindex(regextract(_raw_log,"cs4=(.+) cs5Label"),0),
    cs5Label = arrayindex(regextract(_raw_log,"cs5Label=(.+) cs5"),0),
    cs5 = arrayindex(regextract(_raw_log,"cs5=(.+) cn1Label"),0),
    cn1Label = arrayindex(regextract(_raw_log,"cn1Label=(.+) cn1"),0),
    cn1 = arrayindex(regextract(_raw_log,"cn1=(.+) cn2Label"),0),
    cn2Label = arrayindex(regextract(_raw_log,"cn2Label=(.+) cn2"),0),
    cn2 = arrayindex(regextract(_raw_log,"cn2=(.+) msg"),0),
    msg = arrayindex(regextract(_raw_log,"msg=(.+)"),0);

[INGEST:vendor="ibm", product="isam_rp_nonprod", target_dataset="ibm_isam_rp_nonprod_raw"]
alter json_data = arrayindex(regextract(_raw_log,"({.+})"),0)
| alter 
  c2app = json_data -> c2app,
  c2subapp = json_data -> c2subapp,
  c2env = json_data -> c2env,
  c2ttl = json_data -> c2ttl,
  c2sec = json_data -> c2sec,
  _time = if(parse_timestamp("%Y-%m-%dT%H:%M:%S",json_data-> ["@timestamp"],"Australia/Sydney")!= null,parse_timestamp("%Y-%m-%dT%H:%M:%S",json_data-> ["@timestamp"],"Australia/Sydney"),_insert_time),
  client_addr = json_data -> client_addr,
  source_ip = arrayindex(split(json_data -> ["X-Forwarded-For"],","),0),
  src = json_data -> ["X-Forwarded-For"],
  iv_user = json_data -> ["iv-user"],
  method = json_data -> method,
  host = json_data -> host,
  request = json_data -> request,
  junction = json_data -> junction,
  response_code = to_integer(json_data -> response_code),
  sent_byte = to_integer(json_data -> sent_bytes),
  response_time_s = to_integer(json_data -> response_time_s),
  response_time_m = to_integer(json_data -> response_time_m),
  x_request_id = json_data -> ["X-Request-ID"];

[INGEST:vendor="ibm", product="isam_rp_prod", target_dataset="ibm_isam_rp_prod_raw"]
alter json_data = arrayindex(regextract(_raw_log,"({.+})"),0)
| alter 
  c2app = json_data -> c2app,
  c2subapp = json_data -> c2subapp,
  c2env = json_data -> c2env,
  c2ttl = json_data -> c2ttl,
  c2sec = json_data -> c2sec,
  _time = if(parse_timestamp("%Y-%m-%dT%H:%M:%S",json_data-> ["@timestamp"],"Australia/Sydney")!= null,parse_timestamp("%Y-%m-%dT%H:%M:%S",json_data-> ["@timestamp"],"Australia/Sydney"),_insert_time),
  client_addr = json_data -> client_addr,
  source_ip = arrayindex(split(json_data -> ["X-Forwarded-For"],","),0),
  //src = arrayindex(split(json_data -> ["X-Forwarded-For"],","),1),
  src = json_data -> ["X-Forwarded-For"],
  iv_user = json_data -> ["iv-user"],
  method = json_data -> method,
  host = json_data -> host,
  request = json_data -> request,
  junction = json_data -> junction,
  //junction = replace(junction ,"/",""),
  response_code = to_integer(json_data -> response_code),
  sent_byte = to_integer(json_data -> sent_bytes),
  response_time_s = to_integer(json_data -> response_time_s),
  response_time_m = to_integer(json_data -> response_time_m),
  x_request_id = json_data -> ["X-Request-ID"];


[INGEST:vendor="megaport", product="vpn", target_dataset="megaport_vpn_raw"]
alter _time = if(to_timestamp(eventDate, "MILLIS") != null, to_timestamp(eventDate, "MILLIS"), _insert_time);
 

[INGEST:vendor="imperva", product="waf", target_dataset="imperva_waf_raw", no_hit = drop]
filter _raw_log contains "CEF:0|Incapsula|SIEMintegration"
| alter
    logsubtype = "WAF", 
    fileId = arrayindex(regextract(_raw_log, "fileId=([^\s]+)"),0),
    log_type = arrayindex(split(_raw_log,"|"),4),
    cefVersion = arrayindex(regextract(_raw_log, "CEF:(\d)"),0),
    cefSeverity = arrayindex(split(_raw_log,"|"),6),
    vendorsubtype = arrayindex(split(_raw_log,"|"),1),
    productsubtype = arrayindex(split(_raw_log,"|"),2),
    deviceVersion = arrayindex(split(_raw_log,"|"),3),
    cefSignature = arrayindex(split(_raw_log,"|"),4),
    cefName = arrayindex(split(_raw_log,"|"),5),
    sourceServiceName = arrayindex(regextract(_raw_log, "sourceServiceName=([^\s]+)"),0),
    siteid = arrayindex(regextract(_raw_log, "siteid=([^\s]+)"),0),
    suid = arrayindex(regextract(_raw_log, "suid=([^\s]+)"),0),
    requestClientApplication = arrayindex(regextract(_raw_log, "requestClientApplication=([^\=]+)\s"),0),
    deviceFacility = arrayindex(regextract(_raw_log, "deviceFacility=([^\s]+)"),0),
    CapSupport = arrayindex(regextract(_raw_log, "cs1=([^\s]+)"),0),
    //cs1Label = arrayindex(regextract(_raw_log, "cs1Label=([^\=]+)\s"),0),
    JavascriptSupport = arrayindex(regextract(_raw_log, "cs2=([^\s]+)"),0),
    //cs2Label = arrayindex(regextract(_raw_log, "cs2Label=([^\=]+)\s"),0),
    COSupport = arrayindex(regextract(_raw_log, "cs3=([^\s]+)"),0),
    //cs3Label = arrayindex(regextract(_raw_log, "cs3Label=([^\=]+)\s"),0), 
    VID = arrayindex(regextract(_raw_log, "cs4=([^\s]+)"),0),
    //cs4Label = arrayindex(regextract(_raw_log, "cs4Label=([^\=]+)\s"),0),
    clappsig = arrayindex(regextract(_raw_log, "cs5=([^\s]+)"),0),
    //cs5Label = arrayindex(regextract(_raw_log, "cs5Label=([^\=]+)\s"),0),
    clapp = arrayindex(regextract(_raw_log, "cs6=([^\s]+)"),0),
    //cs6Label = arrayindex(regextract(_raw_log, "cs6Label=([^\=]+)\s"),0),
    ccode = arrayindex(regextract(_raw_log, "ccode=([^\=]+)\s"),0),
    cicode = arrayindex(regextract(_raw_log, "cicode=([^\=]+)\s"),0),
    latitude = arrayindex(regextract(_raw_log, "cs7=([^\s]+)"),0),
    //cs7Label = arrayindex(regextract(_raw_log, "cs7Label=([^\=]+)\s"),0),
    longitude = arrayindex(regextract(_raw_log, "cs8=([^\s]+)"),0),
    //cs8Label = arrayindex(regextract(_raw_log, "cs8Label=([^\=]+)\s"),0),
    cs9 = arrayindex(regextract(_raw_log, "cs9=([^\s]+)"),0),
    cs9Label = arrayindex(regextract(_raw_log, "cs9Label=([^\=]+)\s"),0),
    RuleInfo = arrayindex(regextract(_raw_log, "cs10=([^\s]+)"),0),
    //cs10Label = arrayindex(regextract(_raw_log, "cs10Label=([^\=]+)\s"),0),
    Customer = arrayindex(regextract(_raw_log, "Customer=([^\=]+)\s"),0),
    start = to_timestamp(to_integer(arrayindex(regextract(_raw_log, "start=([^\=]+)\s"),0)),"MILLIS"),
    ref = arrayindex(regextract(_raw_log, "ref=([^\=]+)\s"),0),
    dproc = arrayindex(regextract(_raw_log, "dproc=([^\=]+)\s"),0),
    ver = arrayindex(regextract(_raw_log, "ver=([^\=]+)\s"),0),
    request = arrayindex(regextract(_raw_log, "request=([^\=]+)\s"),0),
    requestMethod = arrayindex(regextract(_raw_log, "requestMethod=([^\=]+)\s"),0),
    cn1 = arrayindex(regextract(_raw_log, "cn1=([^\=]+)\s"),0),
    app = arrayindex(regextract(_raw_log, "app=([^\=]+)\s"),0),
    act = arrayindex(regextract(_raw_log, "act=([^\=]+)\s"),0),
    deviceExternalId = arrayindex(regextract(_raw_log, "deviceExternalId=([^\=]+)\s"),0),
    sip = arrayindex(regextract(_raw_log, "sip=([^\=]+)\s"),0),
    spt = arrayindex(regextract(_raw_log, "spt=([^\=]+)\s"),0),
    bytes_in = arrayindex(regextract(_raw_log, "in=([^\=]+)\s"),0),
    xff = arrayindex(regextract(_raw_log, "xff=([^\=]+)\s"),0),
    cpt = arrayindex(regextract(_raw_log, "cpt=([^\=]+)\s"),0),
    src = arrayindex(regextract(_raw_log, "src=([^\=]+)\s"),0),
    end = to_timestamp(to_integer(arrayindex(regextract(_raw_log, "end=([^\=]+)\s"),0)),"MILLIS"),
    user = if(user!=null, user, 1=1, "unknown"),
    _time = if(end != null, end, _insert_time)
|alter
     action = if (act in ("REQ_CACHED_FRESH","REQ_CACHED_VALIDATED","REQ_CHALLENGE_CAPTCHA","REQ_CHALLENGE_COOKIE_RETRY","REQ_CHALLENGE_JAVASCRIPT","REQ_PASSED"),"allowed", act in ("REQ_BAD_SERVER_CLOSED_CONNECTION","REQ_BLOCKED_ACL","REQ_BLOCKED_COOKIELESS_SESSION","REQ_BLOCKED_SECURITY","REQ_BLOCKED_SESSION","REQ_BLOCKED_VISITOR"),"blocked",act in ("REQ_BAD_CLIENT_CLOSED_CONNECTION","REQ_BAD_PARSE_ERROR"),"dropped", act in ("REQ_BAD_RESP_CLIENT_STALLED","REQ_BAD_RESP_SERVER_STALLED","REQ_BAD_TIMEOUT_CONNECTION_TO_SERVER"),"timeout",""),
     status = cn1,
     http_method = requestMethod,
     dest = sourceServiceName,
     user = if(user!=null, user, 1=1, "unknown")
     ;

filter _raw_log contains "CEF:0|Imperva Inc|Attack Analytics|"
| alter
    logsubtype = "Analytics", 
    alert_name = arrayindex(split(_raw_log,"|"),5),
    log_type = arrayindex(split(_raw_log,"|"),4),
    cefVersion = arrayindex(regextract(_raw_log, "CEF:(\d)"),0),
    cefSeverity = arrayindex(split(_raw_log,"|"),6),
    vendorsubtype = arrayindex(split(_raw_log,"|"),1),
    productsubtype = arrayindex(split(_raw_log,"|"),2),
    deviceVersion = arrayindex(split(_raw_log,"|"),3),
    cefSignature = arrayindex(split(_raw_log,"|"),4),
    cefName = arrayindex(split(_raw_log,"|"),5),
    msg = arrayindex(regextract(_raw_log, "msg=([^=]+)"),0),
    fileId = arrayindex(regextract(_raw_log, "fileId=([^\s]+)"),0),
    dhost = arrayindex(regextract(_raw_log, "dhost=([^\=]+)\s"),0),
    request = arrayindex(regextract(_raw_log, "request=([^\=]+)\s"),0),
    requestClientApplication = arrayindex(regextract(_raw_log, "requestClientApplication=([^\=]+)\s"),0),
    deviceFacility = arrayindex(regextract(_raw_log, "deviceFacility=([^\s]+)"),0),
    ImpervaAANumberOfEvents = arrayindex(regextract(_raw_log, "cs1=([^\s]+)"),0),
    //cs1Label = arrayindex(regextract(_raw_log, "cs1Label=([^\=]+)\s"),0),
    ImpervaAAPercentBlocked = arrayindex(regextract(_raw_log, "cs2=([^\s]+)"),0),
    //cs2Label = arrayindex(regextract(_raw_log, "cs2Label=([^\=]+)\s"),0),
    ImpervaAACountry = arrayindex(regextract(_raw_log, "cs3=(.+?)\scs3Label"), 0),
    //cs3Label = arrayindex(regextract(_raw_log, "cs3Label=([^\=]+)\s"),0), 
    ImpervaAAPlatform = arrayindex(regextract(_raw_log, "cs4=([^\s]+)"),0),
    //cs4Label = arrayindex(regextract(_raw_log, "cs4Label=([^\=]+)\s"),0),
    ImpervaAADominantIps = arrayindex(regextract(_raw_log, "cs5=([^\s]+)"),0),
    //cs5Label = arrayindex(regextract(_raw_log, "cs5Label=([^\=]+)\s"),0),
    ImpervaAASampleEvents = arrayindex(regextract(_raw_log, "cs6=([^\s]+)"),0),
    //cs6Label = arrayindex(regextract(_raw_log, "cs6Label=([^\=]+)\s"),0),
    ImpervaAAAttackType = arrayindex(regextract(_raw_log, "cs7=(.+?)\scs7Label"), 0),
    //cs7Label = arrayindex(regextract(_raw_log, "cs7Label=([^\=]+)\s"),0),
    ImpervaAADominantSiteIds = arrayindex(regextract(_raw_log, "cs8=([^\s]+)"),0),
    //cs8Label = arrayindex(regextract(_raw_log, "cs8Label=([^\=]+)\s"),0),
    ImpervaAACves = arrayindex(regextract(_raw_log, "cs9=([^\s]+)"),0),
    //cs9Label = arrayindex(regextract(_raw_log, "cs9Label=([^\=]+)\s"),0),
    start = to_timestamp(to_integer(arrayindex(regextract(_raw_log, "start=([^\=]+)\s"),0)),"MILLIS"),
    dproc = arrayindex(regextract(_raw_log, "dproc=([^\=]+)\s"),0),
    requestMethod = arrayindex(regextract(_raw_log, "requestMethod=([^\=]+)\s"),0),
    cn1 = arrayindex(regextract(_raw_log, "cn1=([^\=]+)\s"),0),
    app = arrayindex(regextract(_raw_log, "app=([^\=]+)\s"),0),
    src = arrayindex(regextract(_raw_log, "src=([^\=]+)\s"),0),
    end = to_timestamp(to_integer(arrayindex(regextract(_raw_log, "end=([^\=]+)\s"),0)),"MILLIS"),
    _time = if(end != null, end, _insert_time),
    action = if(to_number(ImpervaAAPercentBlocked) = 100, "blocked", "not blocked")
    ;
filter _raw_log contains "AUDIT_TRAIL"
| alter
  logsubtype = "audit",
  account_id = json_extract(_raw_log, "$.imperva.ids.account_id"),
  account_name = json_extract(_raw_log, "$.imperva.ids.account_name"),
  site_id = json_extract(_raw_log, "$.imperva.ids.site_id"),
  event_message = json_extract(_raw_log, "$.message"),
  timestamp = json_extract(_raw_log, "$.@timestamp"),
  event_action = json_extract(_raw_log, "$.imperva.audit_trail.event_action"),
  event_details = json_extract(_raw_log, "$.imperva.audit_trail"),
  user_email = json_extract(_raw_log, "$.user.email"),
  _time = if(timestamp != null, timestamp, _insert_time)
  ;
//Salesforce Eventlog log type parsing
[INGEST:vendor="salesforce", product="eventlogfile", target_dataset="salesforce_eventlogfile_raw", no_hit = keep, content_id="Salesforce"]
filter to_string(TIMESTAMP_DERIVED) ~= "\d{4}\-\d{2}\-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}Z"
| alter tmp_time_string = arrayindex(regextract(to_string(TIMESTAMP_DERIVED) , "\d{4}\-\d{2}\-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}Z"),0)
| alter _time = parse_timestamp("%Y-%m-%dT%H:%M:%E3SZ", tmp_time_string )
| fields -tmp_time_string;


[INGEST:vendor="efficient_ip", product="ddi", target_dataset="efficient_ip_ddi_raw"]
alter event_year = format_timestamp("%Y", _insert_time)
| alter 
    event_time = parse_timestamp("%b %d %H:%M:%S %Y", concat(arrayindex(regextract(_raw_log,"(\w{3} [\s\d]\d \d{2}\:\d{2}\:\d{2})"),0), " ",event_year), "Australia/Sydney")
| alter
    _time = if(event_time != null, event_time, _insert_time),
    event_type = arrayindex(regextract(_raw_log,"(\w+)\[\d+\]"),0),
    event_message = arrayindex(regextract(_raw_log,"\]\: (.+)"),0),

// DHCP
    dhcp_message_type = arrayindex(regextract(_raw_log,"\[\d+\]\: (DHCP\w+)"),0),
// DHCP DISCOVER
    source_mac = arrayindex(regextract(_raw_log,"[om] ([0-9A-Fa-f]{2}:[0-9A-Fa-f]{2}:[0-9A-Fa-f]{2}:[0-9A-Fa-f]{2}:[0-9A-Fa-f]{2}:[0-9A-Fa-f]{2})"),0),
    source_ip_relay = arrayindex(regextract(_raw_log,"via (\d+\.\d+\.\d+\.\d+)"),0),
    dhcp_message = arrayindex(regextract(_raw_log,"via \d+\.\d+\.\d+\.\d+\: (.+)"),0),
// DHCP REQUEST
    source_ip_request = arrayindex(regextract(_raw_log,"[omn] (\d+\.\d+\.\d+\.\d+)"),0),
    source_device = arrayindex(regextract(_raw_log,"\((.+)\)"),0),
// DHCP ACK
    source_ip_ack = arrayindex(regextract(_raw_log,"on (\d+\.\d+\.\d+\.\d+)"),0),
// DNS
    dns_source_ip = arrayindex(regextract(_raw_log,"(\d+\.\d+\.\d+\.\d+)#"),0),
    dns_source_port = arrayindex(regextract(_raw_log,"#(\d+)"),0),
    dns_message = arrayindex(regextract(_raw_log,"#[^\:]+\: (.+)"),0)
| fields -event_year
;
/*
[COLLECT:vendor="versa", product="gateway", target_brokers=*, no_hit=drop]
alter mstatsType=arrayindex(regextract(_raw_log, "mstatsType=([^\=]+)\s"),0), 
alarmType = arrayindex(regextract(_raw_log, "alarmType=([^\=]+)\s"),0)
|filter (_raw_log contains "monStatsLog" and mstatsType in ("app-stats","dest-stats","fc-stats","service-stats","src-stats","urlc-stats","url-rep-stats","zone-stats"))
or (_raw_log contains "alarmLog" and alarmType = "config-change")
or (_raw_log contains "avLog")
or (_raw_log contains "authEventLog")
or (_raw_log contains "authPolicyLog")
or (_raw_log contains "dosThreatLog")
or (_raw_log contains "accessLog")
or (_raw_log contains "idpLog")
or (_raw_log contains "ipfLog")
or (_raw_log contains "ipguardLog")
or (_raw_log contains "dnsfTunnelLog")
or (_raw_log contains "dnsfLog" and ((_raw_log contains "dnsfEvType=url-filter" and _raw_log not contains "dnsfDomainReputation=trustworthy") or (_raw_log contains "dnsfEvType=ip-filter" and _raw_log not contains "dnsfIpReputation=,")))
or (_raw_log contains "fileFilterLog" and _raw_log contains "fileFilterAction=unknown-action") 
or (_raw_log contains "urlfLog" and _raw_log contains "urlfReputation=trustworthy") 
| fields _raw_log;
*/
[COLLECT:vendor="versa", product="gateway", target_brokers=*, no_hit=drop]
alter mstatsType=arrayindex(regextract(_raw_log, "mstatsType=([^\=]+)\s"),0), 
alarmType = arrayindex(regextract(_raw_log, "alarmType=([^\=]+)\s"),0)
|filter (_raw_log contains "monStatsLog" and mstatsType in ("app-stats","dest-stats","fc-stats","service-stats","src-stats","urlc-stats","url-rep-stats","zone-stats"))
or (_raw_log contains "alarmLog")
or (_raw_log contains "avLog")
or (_raw_log contains "authEventLog")
or (_raw_log contains "authPolicyLog")
or (_raw_log contains "dnsfLog")
or (_raw_log contains "dnspChildSessLog")
or (_raw_log contains "dnspParentSessLog")
or (_raw_log contains "dosThreatLog")
or (_raw_log contains "accessLog")
or (_raw_log contains "denyLog")
or (_raw_log contains "idpLog")
or (_raw_log contains "ipfLog")
or (_raw_log contains "ipguardLog")
or (_raw_log contains "secAccUserStatsLog")
or (_raw_log contains "entitlementLog")
or (_raw_log contains "id2NameLog")
or (_raw_log contains "dnsfTunnelLog")
or (_raw_log contains "fileFilterLog") 
or (_raw_log contains "urlfLog" and _raw_log not contains "urlReputation=trustworthy") 
| fields _raw_log;
[RULE:common_field_versa_gateway]
alter event_time = arrayindex(regextract(_raw_log, "\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}"),0)
| alter _time = if(parse_timestamp("%Y-%m-%dT%H:%M:%S", event_time)!=null, parse_timestamp("%Y-%m-%dT%H:%M:%S", event_time), _insert_time)
| alter event_type = arrayindex(regextract(_raw_log, "\+0000 (\w+)"),0)
| alter 
    applianceName = arrayindex(regextract(_raw_log, "applianceName=([^,]+)"),0),
    tenantName = arrayindex(regextract(_raw_log, "tenantName=([^,]+)"),0),
    flowId = arrayindex(regextract(_raw_log, "flowId=([^,]+)"),0),
    flowCookie = arrayindex(regextract(_raw_log, "flowCookie=([^,]+)"),0),
    vsnId = arrayindex(regextract(_raw_log, "vsnId=([^,]+)"),0),
    applianceId = arrayindex(regextract(_raw_log, "applianceId=([^,]+)"),0),
    tenantId = arrayindex(regextract(_raw_log, "tenantId=([^,]+)"),0),
// Connection info
    sourceIPv4Address = arrayindex(regextract(_raw_log, "sourceIPv4Address=([^,]+)"),0),
    destinationIPv4Address = arrayindex(regextract(_raw_log, "destinationIPv4Address=([^,]+)"),0),
    sourceTransportPort = arrayindex(regextract(_raw_log, "sourceTransportPort=([^,]+)"),0),
    destinationTransportPort = arrayindex(regextract(_raw_log, "destinationTransportPort=([^,]+)"),0),
    protocolIdentifier = arrayindex(regextract(_raw_log, "protocolIdentifier=([^,]+)"),0),
    fromUser = arrayindex(regextract(_raw_log, "fromUser=([^,]+)"),0),
    threatSeverity = arrayindex(regextract(_raw_log, "threatSeverity=([^,]+)"),0),
    threatType = arrayindex(regextract(_raw_log, "threatType=([^,]+)"),0);

[INGEST:vendor="versa", product="gateway", target_dataset="versa_gateway_raw", no_hit = drop]
// Parse accessLog log                
filter _raw_log contains "accessLog"
| call common_field_versa_gateway
| alter
  logsubtype = "accessLog",
  flowId = arrayindex(regextract(_raw_log,"flowId=([^,]+)"),0),
  flowCookie = arrayindex(regextract(_raw_log,"flowCookie=([^,]+)"),0),
  flowStartMilliseconds = arrayindex(regextract(_raw_log,"flowStartMilliseconds=([^,]+)"),0),
  flowEndMilliseconds = arrayindex(regextract(_raw_log,"flowEndMilliseconds=([^,]+)"),0),
  sentOctets = arrayindex(regextract(_raw_log,"sentOctets=([^,]+)"),0),
  sentPackets = arrayindex(regextract(_raw_log,"sentPackets=([^,]+)"),0),
  recvdOctets = arrayindex(regextract(_raw_log,"recvdOctets=([^,]+)"),0),
  recvdPackets = arrayindex(regextract(_raw_log,"recvdPackets=([^,]+)"),0),
  appId = arrayindex(regextract(_raw_log,"appId=([^,]+)"),0),
  eventType = arrayindex(regextract(_raw_log,"eventType=([^,]+)"),0),
  tenantId = arrayindex(regextract(_raw_log,"tenantId=([^,]+)"),0),
  urlCategory = arrayindex(regextract(_raw_log,"urlCategory=([^,]+)"),0),
  action = arrayindex(regextract(_raw_log,"action=([^,]+)"),0),
  vsnId = arrayindex(regextract(_raw_log,"vsnId=([^,]+)"),0),
  applianceId = arrayindex(regextract(_raw_log,"applianceId=([^,]+)"),0),
  appRisk = arrayindex(regextract(_raw_log,"appRisk=([^,]+)"),0),
  appProductivity = arrayindex(regextract(_raw_log,"appProductivity=([^,]+)"),0),
  appIdStr = arrayindex(regextract(_raw_log,"appIdStr=([^,]+)"),0),
  appFamily = arrayindex(regextract(_raw_log,"appFamily=([^,]+)"),0),
  appSubFamily = arrayindex(regextract(_raw_log,"appSubFamily=([^,]+)"),0),
  rule = arrayindex(regextract(_raw_log,"rule=([^,]+)"),0),
  forwardForwardingClass = arrayindex(regextract(_raw_log,"forwardForwardingClass=([^,]+)"),0),
  reverseForwardingClass = arrayindex(regextract(_raw_log,"reverseForwardingClass=([^,]+)"),0),
  host = arrayindex(regextract(_raw_log,"host=([^,]+)"),0),
  deviceKey = arrayindex(regextract(_raw_log,"deviceKey=([^,]+)"),0),
  deviceName = arrayindex(regextract(_raw_log,"deviceName=([^,]+)"),0),
  sourceIPv4Address = arrayindex(regextract(_raw_log,"sourceIPv4Address=([^,]+)"),0),
  destinationIPv4Address = arrayindex(regextract(_raw_log,"destinationIPv4Address=([^,]+)"),0),
  sourceTransportPort = arrayindex(regextract(_raw_log,"sourceTransportPort=([^,]+)"),0),
  destinationTransportPort = arrayindex(regextract(_raw_log,"destinationTransportPort=([^,]+)"),0),
  protocolIdentifier = arrayindex(regextract(_raw_log,"protocolIdentifier=([^,]+)"),0),
  fromUser = arrayindex(regextract(_raw_log,"fromUser=([^,]+)"),0),
  eipProfileName = arrayindex(regextract(_raw_log,"eipProfileName=([^,]+)"),0),
  traffScope = arrayindex(regextract(_raw_log,"traffScope=([^,]+)"),0),
  srcSGT = arrayindex(regextract(_raw_log,"srcSGT=([^,]+)"),0),
  destSGT = arrayindex(regextract(_raw_log,"destSGT=([^,]+)"),0);

// Parse dnsfLog log                
filter _raw_log contains "dnsfLog"
| call common_field_versa_gateway
| alter
  logsubtype = "dnsfLog",
  flowId = arrayindex(regextract(_raw_log,"flowId=([^,]+)"),0),
  flowCookie = arrayindex(regextract(_raw_log,"flowCookie=([^,]+)"),0),
  tenantId = arrayindex(regextract(_raw_log,"tenantId=([^,]+)"),0),
  vsnId = arrayindex(regextract(_raw_log,"vsnId=([^,]+)"),0),
  applianceId = arrayindex(regextract(_raw_log,"applianceId=([^,]+)"),0),
  dnsfProfileName = arrayindex(regextract(_raw_log,"dnsfProfileName=([^,]+)"),0),
  dnsfMsgType = arrayindex(regextract(_raw_log,"dnsfMsgType=([^,]+)"),0),
  dnsfEvType = arrayindex(regextract(_raw_log,"dnsfEvType=([^,]+)"),0),
  dnsfAction = arrayindex(regextract(_raw_log,"dnsfAction=([^,]+)"),0),
  dnsfDomain = arrayindex(regextract(_raw_log,"dnsfDomain=([^,]+)"),0),
  dnsfRuleName = arrayindex(regextract(_raw_log,"dnsfRuleName=([^,]+)"),0),
  dnsfBadResolvedV4Addr = arrayindex(regextract(_raw_log,"dnsfBadResolvedV4Addr=([^,]+)"),0),
  dnsfBadResolvedV6Addr = arrayindex(regextract(_raw_log,"dnsfBadResolvedV6Addr=([^,]+)"),0),
  dnsfBadCname = arrayindex(regextract(_raw_log,"dnsfBadCname=([^,]+)"),0),
  dnsfDomainReputation = arrayindex(regextract(_raw_log,"dnsfDomainReputation=([^,]+)"),0),
  dnsfDomainCategory = arrayindex(regextract(_raw_log,"dnsfDomainCategory=([^,]+)"),0),
  dnsfIpReputation = arrayindex(regextract(_raw_log,"dnsfIpReputation=([^,]+)"),0),
  dnsfIpGeoLocation = arrayindex(regextract(_raw_log,"dnsfIpGeoLocation=([^,]+)"),0),
  sourceIPv4Address = arrayindex(regextract(_raw_log,"sourceIPv4Address=([^,]+)"),0),
  destinationIPv4Address = arrayindex(regextract(_raw_log,"destinationIPv4Address=([^,]+)"),0),
  sourceTransportPort = arrayindex(regextract(_raw_log,"sourceTransportPort=([^,]+)"),0),
  destinationTransportPort = arrayindex(regextract(_raw_log,"destinationTransportPort=([^,]+)"),0),
  protocolIdentifier = arrayindex(regextract(_raw_log,"protocolIdentifier=([^,]+)"),0),
  fromUser = arrayindex(regextract(_raw_log,"fromUser=([^,]+)"),0),
  threatSeverity = arrayindex(regextract(_raw_log,"threatSeverity=([^,]+)"),0),
  threatType = arrayindex(regextract(_raw_log,"threatType=([^,]+)"),0),
  dnsfSinkHoleIp = arrayindex(regextract(_raw_log,"dnsfSinkHoleIp=([^,]+)"),0);

// Parse fileFilterLog log                
filter _raw_log contains "fileFilterLog"
| call common_field_versa_gateway
| alter
  logsubtype = "fileFilterLog",
  flowId = arrayindex(regextract(_raw_log,"flowId=([^,]+)"),0),
  flowCookie = arrayindex(regextract(_raw_log,"flowCookie=([^,]+)"),0),
  vsnId = arrayindex(regextract(_raw_log,"vsnId=([^,]+)"),0),
  applianceId = arrayindex(regextract(_raw_log,"applianceId=([^,]+)"),0),
  tenantId = arrayindex(regextract(_raw_log,"tenantId=([^,]+)"),0),
  profileName = arrayindex(regextract(_raw_log,"profileName=([^,]+)"),0),
  appIdStr = arrayindex(regextract(_raw_log,"appIdStr=([^,]+)"),0),
  fileName = arrayindex(regextract(_raw_log,"fileName=([^,]+)"),0),
  fileType = arrayindex(regextract(_raw_log,"fileType=([^,]+)"),0),
  fileSize = arrayindex(regextract(_raw_log,"fileSize=([^,]+)"),0),
  fileTransDir = arrayindex(regextract(_raw_log,"fileTransDir=([^,]+)"),0),
  fileFoundIn = arrayindex(regextract(_raw_log,"fileFoundIn=([^,]+)"),0),
  fileSizeExceed = arrayindex(regextract(_raw_log,"fileSizeExceed=([^,]+)"),0),
  fileFilterAction = arrayindex(regextract(_raw_log,"fileFilterAction=([^,]+)"),0),
  fileHashType = arrayindex(regextract(_raw_log,"fileHashType=([^,]+)"),0),
  fileHashValue = arrayindex(regextract(_raw_log,"fileHashValue=([^,]+)"),0),
  fileRuleName = arrayindex(regextract(_raw_log,"fileRuleName=([^,]+)"),0),
  sourceIPv4Address = arrayindex(regextract(_raw_log,"sourceIPv4Address=([^,]+)"),0),
  destinationIPv4Address = arrayindex(regextract(_raw_log,"destinationIPv4Address=([^,]+)"),0),
  sourceTransportPort = arrayindex(regextract(_raw_log,"sourceTransportPort=([^,]+)"),0),
  destinationTransportPort = arrayindex(regextract(_raw_log,"destinationTransportPort=([^,]+)"),0),
  protocolIdentifier = arrayindex(regextract(_raw_log,"protocolIdentifier=([^,]+)"),0),
  fromUser = arrayindex(regextract(_raw_log,"fromUser=([^,]+)"),0),
  threatType = arrayindex(regextract(_raw_log,"threatType=([^,]+)"),0),
  threatSeverity = arrayindex(regextract(_raw_log,"threatSeverity=([^,]+)"),0);

// Parse flowIdLog log                
filter _raw_log contains "flowIdLog"
| call common_field_versa_gateway
| alter
  logsubtype = "flowIdLog",
  flowId = arrayindex(regextract(_raw_log,"flowId=([^,]+)"),0),
  flowCookie = arrayindex(regextract(_raw_log,"flowCookie=([^,]+)"),0),
  sourceIPv4Address = arrayindex(regextract(_raw_log,"sourceIPv4Address=([^,]+)"),0),
  destinationIPv4Address = arrayindex(regextract(_raw_log,"destinationIPv4Address=([^,]+)"),0),
  sourcePort = arrayindex(regextract(_raw_log,"sourcePort=([^,]+)"),0),
  destinationPort = arrayindex(regextract(_raw_log,"destinationPort=([^,]+)"),0),
  tenantId = arrayindex(regextract(_raw_log,"tenantId=([^,]+)"),0),
  vsnId = arrayindex(regextract(_raw_log,"vsnId=([^,]+)"),0),
  applianceId = arrayindex(regextract(_raw_log,"applianceId=([^,]+)"),0),
  ingressInterfaceName = arrayindex(regextract(_raw_log,"ingressInterfaceName=([^,]+)"),0),
  egressInterfaceName = arrayindex(regextract(_raw_log,"egressInterfaceName=([^,]+)"),0),
  fromCountry = arrayindex(regextract(_raw_log,"fromCountry=([^,]+)"),0),
  toCountry = arrayindex(regextract(_raw_log,"toCountry=([^,]+)"),0),
  protocolIdentifier = arrayindex(regextract(_raw_log,"protocolIdentifier=([^,]+)"),0),
  fromZone = arrayindex(regextract(_raw_log,"fromZone=([^,]+)"),0),
  fromUser = arrayindex(regextract(_raw_log,"fromUser=([^,]+)"),0),
  toZone = arrayindex(regextract(_raw_log,"toZone=([^,]+)"),0),
  icmpTypeIPv4 = arrayindex(regextract(_raw_log,"icmpTypeIPv4=([^,]+)"),0);

// Parse secAccUserStatsLog log                
filter _raw_log contains "secAccUserStatsLog"
| call common_field_versa_gateway
| alter
  logsubtype = "secAccUserStatsLog",
  mstatsTimeBlock = arrayindex(regextract(_raw_log,"mstatsTimeBlock=([^,]+)"),0),
  tenantId = arrayindex(regextract(_raw_log,"tenantId=([^,]+)"),0),
  applianceId = arrayindex(regextract(_raw_log,"applianceId=([^,]+)"),0),
  mstatsTotSessDuration = arrayindex(regextract(_raw_log,"mstatsTotSessDuration=([^,]+)"),0),
  userName = arrayindex(regextract(_raw_log,"userName=([^,]+)"),0),
  racIP = arrayindex(regextract(_raw_log,"racIP=([^,]+)"),0),
  racRxBytes = arrayindex(regextract(_raw_log,"racRxBytes=([^,]+)"),0),
  racTxBytes = arrayindex(regextract(_raw_log,"racTxBytes=([^,]+)"),0),
  roundTripTime = arrayindex(regextract(_raw_log,"roundTripTime=([^,]+)"),0),
  latitude = arrayindex(regextract(_raw_log,"latitude=([^,]+)"),0),
  longitude = arrayindex(regextract(_raw_log,"longitude=([^,]+)"),0),
  isp = arrayindex(regextract(_raw_log,"isp=([^,]+)"),0),
  lossRatio = arrayindex(regextract(_raw_log,"lossRatio=([^,]+)"),0),
  delay = arrayindex(regextract(_raw_log,"delay=([^,]+)"),0),
  delayVar = arrayindex(regextract(_raw_log,"delayVar=([^,]+)"),0),
  racTunnelIP = arrayindex(regextract(_raw_log,"racTunnelIP=([^,]+)"),0),
  racAccessType = arrayindex(regextract(_raw_log,"racAccessType=([^,]+)"),0);

// Parse ipfLog log                
filter _raw_log contains "ipfLog"
| call common_field_versa_gateway
| alter
  logsubtype = "ipfLog",
  flowId = arrayindex(regextract(_raw_log,"flowId=([^,]+)"),0),
  flowCookie = arrayindex(regextract(_raw_log,"flowCookie=([^,]+)"),0),
  tenantId = arrayindex(regextract(_raw_log,"tenantId=([^,]+)"),0),
  vsnId = arrayindex(regextract(_raw_log,"vsnId=([^,]+)"),0),
  applianceId = arrayindex(regextract(_raw_log,"applianceId=([^,]+)"),0),
  profileName = arrayindex(regextract(_raw_log,"profileName=([^,]+)"),0),
  match = arrayindex(regextract(_raw_log,"match=([^,]+)"),0),
  ipfAction = arrayindex(regextract(_raw_log,"ipfAction=([^,]+)"),0),
  srcWhiteList = arrayindex(regextract(_raw_log,"srcWhiteList=([^,]+)"),0),
  dstWhiteList = arrayindex(regextract(_raw_log,"dstWhiteList=([^,]+)"),0),
  srcBlackList = arrayindex(regextract(_raw_log,"srcBlackList=([^,]+)"),0),
  dstBlackList = arrayindex(regextract(_raw_log,"dstBlackList=([^,]+)"),0),
  srcReputation = arrayindex(regextract(_raw_log,"srcReputation=([^,]+)"),0),
  dstReputation = arrayindex(regextract(_raw_log,"dstReputation=([^,]+)"),0),
  srcLocation = arrayindex(regextract(_raw_log,"srcLocation=([^,]+)"),0),
  dstLocation = arrayindex(regextract(_raw_log,"dstLocation=([^,]+)"),0),
  srcDomain = arrayindex(regextract(_raw_log,"srcDomain=([^,]+)"),0),
  dstDomain = arrayindex(regextract(_raw_log,"dstDomain=([^,]+)"),0),
  ipfActionMessage = arrayindex(regextract(_raw_log,"ipfActionMessage=([^,]+)"),0),
  sourceIPv4Address = arrayindex(regextract(_raw_log,"sourceIPv4Address=([^,]+)"),0),
  destinationIPv4Address = arrayindex(regextract(_raw_log,"destinationIPv4Address=([^,]+)"),0),
  sourceTransportPort = arrayindex(regextract(_raw_log,"sourceTransportPort=([^,]+)"),0),
  destinationTransportPort = arrayindex(regextract(_raw_log,"destinationTransportPort=([^,]+)"),0);

// Parse urlfLog log                
filter _raw_log contains "urlfLog"
| call common_field_versa_gateway
| alter
  logsubtype = "urlfLog",
  flowId = arrayindex(regextract(_raw_log,"flowId=([^,]+)"),0),
  flowCookie = arrayindex(regextract(_raw_log,"flowCookie=([^,]+)"),0),
  vsnId = arrayindex(regextract(_raw_log,"vsnId=([^,]+)"),0),
  applianceId = arrayindex(regextract(_raw_log,"applianceId=([^,]+)"),0),
  tenantId = arrayindex(regextract(_raw_log,"tenantId=([^,]+)"),0),
  urlReputation = arrayindex(regextract(_raw_log,"urlReputation=([^,]+)"),0),
  urlCategory = arrayindex(regextract(_raw_log,"urlCategory=([^,]+)"),0),
  httpUrl = arrayindex(regextract(_raw_log,"httpUrl=([^,]+)"),0),
  urlfProfile = arrayindex(regextract(_raw_log,"urlfProfile=([^,]+)"),0),
  urlfAction = arrayindex(regextract(_raw_log,"urlfAction=([^,]+)"),0),
  urlfActionMessage = arrayindex(regextract(_raw_log,"urlfActionMessage=([^,]+)"),0),
  sourceIPv4Address = arrayindex(regextract(_raw_log,"sourceIPv4Address=([^,]+)"),0),
  destinationIPv4Address = arrayindex(regextract(_raw_log,"destinationIPv4Address=([^,]+)"),0),
  sourceTransportPort = arrayindex(regextract(_raw_log,"sourceTransportPort=([^,]+)"),0),
  destinationTransportPort = arrayindex(regextract(_raw_log,"destinationTransportPort=([^,]+)"),0),
  protocolIdentifier = arrayindex(regextract(_raw_log,"protocolIdentifier=([^,]+)"),0),
  fromUser = arrayindex(regextract(_raw_log,"fromUser=([^,]+)"),0),
  threatSeverity = arrayindex(regextract(_raw_log,"threatSeverity=([^,]+)"),0),
  threatType = arrayindex(regextract(_raw_log,"threatType=([^,]+)"),0);

// Parse sdwanHealthLog log                
filter _raw_log contains "sdwanHealthLog"
| call common_field_versa_gateway
| alter
  logsubtype = "sdwanHealthLog",
  generateTime = arrayindex(regextract(_raw_log,"generateTime=([^,]+)"),0),
  tenantId = arrayindex(regextract(_raw_log,"tenantId=([^,]+)"),0),
  applianceId = arrayindex(regextract(_raw_log,"applianceId=([^,]+)"),0),
  vsnId = arrayindex(regextract(_raw_log,"vsnId=([^,]+)"),0),
  duration = arrayindex(regextract(_raw_log,"duration=([^,]+)"),0),
  pathsUp = arrayindex(regextract(_raw_log,"pathsUp=([^,]+)"),0),
  pathsDown = arrayindex(regextract(_raw_log,"pathsDown=([^,]+)"),0),
  pathsNoConf = arrayindex(regextract(_raw_log,"pathsNoConf=([^,]+)"),0),
  rmtSitesUp = arrayindex(regextract(_raw_log,"rmtSitesUp=([^,]+)"),0),
  rmtSitesDown = arrayindex(regextract(_raw_log,"rmtSitesDown=([^,]+)"),0),
  allRmtSitesDown = arrayindex(regextract(_raw_log,"allRmtSitesDown=([^,]+)"),0),
  allRmtSitesDownTime = arrayindex(regextract(_raw_log,"allRmtSitesDownTime=([^,]+)"),0),
  svcUptime = arrayindex(regextract(_raw_log,"svcUptime=([^,]+)"),0),
  allLclCktDown = arrayindex(regextract(_raw_log,"allLclCktDown=([^,]+)"),0);

// Parse eventLog log                
filter _raw_log contains "eventLog"
| call common_field_versa_gateway
| alter
  logsubtype = "eventLog",
  generateTime = arrayindex(regextract(_raw_log,"generateTime=([^,]+)"),0),
  eventType = arrayindex(regextract(_raw_log,"eventType=([^,]+)"),0),
  applianceId = arrayindex(regextract(_raw_log,"applianceId=([^,]+)"),0),
  vsnId = arrayindex(regextract(_raw_log,"vsnId=([^,]+)"),0),
  tenantId = arrayindex(regextract(_raw_log,"tenantId=([^,]+)"),0),
  eventSetCntr = arrayindex(regextract(_raw_log,"eventSetCntr=([^,]+)"),0),
  eventClrCntr = arrayindex(regextract(_raw_log,"eventClrCntr=([^,]+)"),0),
  localSiteName = arrayindex(regextract(_raw_log,"localSiteName=([^,]+)"),0),
  localAccCktName = arrayindex(regextract(_raw_log,"localAccCktName=([^,]+)"),0),
  remoteSiteName = arrayindex(regextract(_raw_log,"remoteSiteName=([^,]+)"),0),
  remoteAccCktName = arrayindex(regextract(_raw_log,"remoteAccCktName=([^,]+)"),0),
  fwdClass = arrayindex(regextract(_raw_log,"fwdClass=([^,]+)"),0),
  lastState = arrayindex(regextract(_raw_log,"lastState=([^,]+)"),0);

// Parse authEventLog log                
filter _raw_log contains "authEventLog"
| call common_field_versa_gateway
| alter
  logsubtype = "authEventLog",
  flowId = arrayindex(regextract(_raw_log,"flowId=([^,]+)"),0),
  flowCookie = arrayindex(regextract(_raw_log,"flowCookie=([^,]+)"),0),
  vsnId = arrayindex(regextract(_raw_log,"vsnId=([^,]+)"),0),
  applianceId = arrayindex(regextract(_raw_log,"applianceId=([^,]+)"),0),
  tenantId = arrayindex(regextract(_raw_log,"tenantId=([^,]+)"),0),
  authProfile = arrayindex(regextract(_raw_log,"authProfile=([^,]+)"),0),
  authMethod = arrayindex(regextract(_raw_log,"authMethod=([^,]+)"),0),
  userName = arrayindex(regextract(_raw_log,"userName=([^,]+)"),0),
  authStatus = arrayindex(regextract(_raw_log,"authStatus=([^,]+)"),0),
  authStatusMessage = arrayindex(regextract(_raw_log,"authStatusMessage=([^,]+)"),0),
  authTime = arrayindex(regextract(_raw_log,"authTime=([^,]+)"),0),
  sourceIPv4Address = arrayindex(regextract(_raw_log,"sourceIPv4Address=([^,]+)"),0),
  destinationIPv4Address = arrayindex(regextract(_raw_log,"destinationIPv4Address=([^,]+)"),0),
  sourceTransportPort = arrayindex(regextract(_raw_log,"sourceTransportPort=([^,]+)"),0),
  destinationTransportPort = arrayindex(regextract(_raw_log,"destinationTransportPort=([^,]+)"),0),
  protocolIdentifier = arrayindex(regextract(_raw_log,"protocolIdentifier=([^,]+)"),0),
  fromUser = arrayindex(regextract(_raw_log,"fromUser=([^,]+)"),0);

// Parse sdwanBranchInfoLog log                
filter _raw_log contains "sdwanBranchInfoLog"
| call common_field_versa_gateway
| alter
  logsubtype = "sdwanBranchInfoLog",
  localSiteId = arrayindex(regextract(_raw_log,"localSiteId=([^,]+)"),0),
  localSiteName = arrayindex(regextract(_raw_log,"localSiteName=([^,]+)"),0),
  location = arrayindex(regextract(_raw_log,"location=([^,]+)"),0),
  latitude = arrayindex(regextract(_raw_log,"latitude=([^,]+)"),0),
  longitude = arrayindex(regextract(_raw_log,"longitude=([^,]+)"),0),
  creationTime = arrayindex(regextract(_raw_log,"creationTime=([^,]+)"),0),
  applianceId = arrayindex(regextract(_raw_log,"applianceId=([^,]+)"),0),
  tenantId = arrayindex(regextract(_raw_log,"tenantId=([^,]+)"),0),
  siteType = arrayindex(regextract(_raw_log,"siteType=([^,]+)"),0);

// Parse avLog log                
filter _raw_log contains "avLog"
| call common_field_versa_gateway
| alter
  logsubtype = "avLog",
  flowId = arrayindex(regextract(_raw_log,"flowId=([^,]+)"),0),
  flowCookie = arrayindex(regextract(_raw_log,"flowCookie=([^,]+)"),0),
  vsnId = arrayindex(regextract(_raw_log,"vsnId=([^,]+)"),0),
  applianceId = arrayindex(regextract(_raw_log,"applianceId=([^,]+)"),0),
  tenantId = arrayindex(regextract(_raw_log,"tenantId=([^,]+)"),0),
  profileName = arrayindex(regextract(_raw_log,"profileName=([^,]+)"),0),
  appIdStr = arrayindex(regextract(_raw_log,"appIdStr=([^,]+)"),0),
  fileName = arrayindex(regextract(_raw_log,"fileName=([^,]+)"),0),
  fileType = arrayindex(regextract(_raw_log,"fileType=([^,]+)"),0),
  fileTransDir = arrayindex(regextract(_raw_log,"fileTransDir=([^,]+)"),0),
  avMalwareType = arrayindex(regextract(_raw_log,"avMalwareType=([^,]+)"),0),
  avMalwareName = arrayindex(regextract(_raw_log,"avMalwareName=([^,]+)"),0),
  avAccuracy = arrayindex(regextract(_raw_log,"avAccuracy=([^,]+)"),0),
  avAction = arrayindex(regextract(_raw_log,"avAction=([^,]+)"),0),
  sourceIPv4Address = arrayindex(regextract(_raw_log,"sourceIPv4Address=([^,]+)"),0),
  destinationIPv4Address = arrayindex(regextract(_raw_log,"destinationIPv4Address=([^,]+)"),0),
  sourceTransportPort = arrayindex(regextract(_raw_log,"sourceTransportPort=([^,]+)"),0),
  destinationTransportPort = arrayindex(regextract(_raw_log,"destinationTransportPort=([^,]+)"),0);

// Parse sdwanSiteListLog log                
filter _raw_log contains "sdwanSiteListLog"
| call common_field_versa_gateway
| alter
  logsubtype = "sdwanSiteListLog",
  applianceId = arrayindex(regextract(_raw_log,"applianceId=([^,]+)"),0),
  tenantId = arrayindex(regextract(_raw_log,"tenantId=([^,]+)"),0),
  transactionId = arrayindex(regextract(_raw_log,"transactionId=([^,]+)"),0),
  eventType = arrayindex(regextract(_raw_log,"eventType=([^,]+)"),0),
  siteCount = arrayindex(regextract(_raw_log,"siteCount=([^,]+)"),0),
  siteList = arrayindex(regextract(_raw_log,"siteList=([^,]+)"),0);

// Parse secAccUserConnEventLog log                
filter _raw_log contains "secAccUserConnEventLog"
| call common_field_versa_gateway
| alter
  logsubtype = "secAccUserConnEventLog",
  vsnId = arrayindex(regextract(_raw_log,"vsnId=([^,]+)"),0),
  applianceId = arrayindex(regextract(_raw_log,"applianceId=([^,]+)"),0),
  tenantId = arrayindex(regextract(_raw_log,"tenantId=([^,]+)"),0),
  userName = arrayindex(regextract(_raw_log,"userName=([^,]+)"),0),
  deviceName = arrayindex(regextract(_raw_log,"deviceName=([^,]+)"),0),
  racTunnelIP = arrayindex(regextract(_raw_log,"racTunnelIP=([^,]+)"),0),
  racIP = arrayindex(regextract(_raw_log,"racIP=([^,]+)"),0),
  racAccessType = arrayindex(regextract(_raw_log,"racAccessType=([^,]+)"),0),
  racEventType = arrayindex(regextract(_raw_log,"racEventType=([^,]+)"),0),
  secAccRuleName = arrayindex(regextract(_raw_log,"secAccRuleName=([^,]+)"),0),
  secAccRuleAction = arrayindex(regextract(_raw_log,"secAccRuleAction=([^,]+)"),0),
  authProfile = arrayindex(regextract(_raw_log,"authProfile=([^,]+)"),0),
  vpnProfile = arrayindex(regextract(_raw_log,"vpnProfile=([^,]+)"),0),
  rInst = arrayindex(regextract(_raw_log,"rInst=([^,]+)"),0),
  uptime = arrayindex(regextract(_raw_log,"uptime=([^,]+)"),0),
  failureReason = arrayindex(regextract(_raw_log,"failureReason=([^,]+)"),0);

// Parse activeUserLog log                
filter _raw_log contains "activeUserLog"
| call common_field_versa_gateway
| alter
  logsubtype = "activeUserLog",
  generateTime = arrayindex(regextract(_raw_log,"generateTime=([^,]+)"),0),
  applianceId = arrayindex(regextract(_raw_log,"applianceId=([^,]+)"),0),
  tenantId = arrayindex(regextract(_raw_log,"tenantId=([^,]+)"),0),
  vsnId = arrayindex(regextract(_raw_log,"vsnId=([^,]+)"),0),
  userName = arrayindex(regextract(_raw_log,"userName=([^,]+)"),0),
  subscriptionType = arrayindex(regextract(_raw_log,"subscriptionType=([^,]+)"),0),
  HitCount = arrayindex(regextract(_raw_log,"HitCount=([^,]+)"),0);

// Parse entitlementLog log                
filter _raw_log contains "entitlementLog"
| call common_field_versa_gateway
| alter
  logsubtype = "entitlementLog",
  generateTime = arrayindex(regextract(_raw_log,"generateTime=([^,]+)"),0),
  applianceId = arrayindex(regextract(_raw_log,"applianceId=([^,]+)"),0),
  vsnId = arrayindex(regextract(_raw_log,"vsnId=([^,]+)"),0),
  tenantId = arrayindex(regextract(_raw_log,"tenantId=([^,]+)"),0),
  recvdOctets = arrayindex(regextract(_raw_log,"recvdOctets=([^,]+)"),0),
  sentOctets = arrayindex(regextract(_raw_log,"sentOctets=([^,]+)"),0),
  duration = arrayindex(regextract(_raw_log,"duration=([^,]+)"),0);

// Parse sdwanSiteStatusLog log                
filter _raw_log contains "sdwanSiteStatusLog"
| call common_field_versa_gateway
| alter
  logsubtype = "sdwanSiteStatusLog",
  siteId = arrayindex(regextract(_raw_log,"siteId=([^,]+)"),0),
  siteName = arrayindex(regextract(_raw_log,"siteName=([^,]+)"),0),
  applianceId = arrayindex(regextract(_raw_log,"applianceId=([^,]+)"),0),
  tenantId = arrayindex(regextract(_raw_log,"tenantId=([^,]+)"),0),
  siteStatus = arrayindex(regextract(_raw_log,"siteStatus=([^,]+)"),0),
  duration = arrayindex(regextract(_raw_log,"duration=([^,]+)"),0);

// Parse sdwanAccCktInfoLog log                
filter _raw_log contains "sdwanAccCktInfoLog"
| call common_field_versa_gateway
| alter
  logsubtype = "sdwanAccCktInfoLog",
  localAccCktId = arrayindex(regextract(_raw_log,"localAccCktId=([^,]+)"),0),
  localAccCktName = arrayindex(regextract(_raw_log,"localAccCktName=([^,]+)"),0),
  accCktBW = arrayindex(regextract(_raw_log,"accCktBW=([^,]+)"),0),
  localAccCktIp = arrayindex(regextract(_raw_log,"localAccCktIp=([^,]+)"),0),
  localSiteId = arrayindex(regextract(_raw_log,"localSiteId=([^,]+)"),0),
  localSiteName = arrayindex(regextract(_raw_log,"localSiteName=([^,]+)"),0),
  applianceId = arrayindex(regextract(_raw_log,"applianceId=([^,]+)"),0),
  tenantId = arrayindex(regextract(_raw_log,"tenantId=([^,]+)"),0),
  uplinkBw = arrayindex(regextract(_raw_log,"uplinkBw=([^,]+)"),0),
  downlinkBw = arrayindex(regextract(_raw_log,"downlinkBw=([^,]+)"),0),
  cktProvider = arrayindex(regextract(_raw_log,"cktProvider=([^,]+)"),0),
  cktType = arrayindex(regextract(_raw_log,"cktType=([^,]+)"),0),
  cktMedia = arrayindex(regextract(_raw_log,"cktMedia=([^,]+)"),0);

// Parse dnsfTunnelLog log                
filter _raw_log contains "dnsfTunnelLog"
| call common_field_versa_gateway
| alter
  logsubtype = "dnsfTunnelLog",
  flowId = arrayindex(regextract(_raw_log,"flowId=([^,]+)"),0),
  flowCookie = arrayindex(regextract(_raw_log,"flowCookie=([^,]+)"),0),
  tenantId = arrayindex(regextract(_raw_log,"tenantId=([^,]+)"),0),
  vsnId = arrayindex(regextract(_raw_log,"vsnId=([^,]+)"),0),
  applianceId = arrayindex(regextract(_raw_log,"applianceId=([^,]+)"),0),
  dnsfProfileName = arrayindex(regextract(_raw_log,"dnsfProfileName=([^,]+)"),0),
  dnsfAction = arrayindex(regextract(_raw_log,"dnsfAction=([^,]+)"),0),
  dnsfDetectedDomain = arrayindex(regextract(_raw_log,"dnsfDetectedDomain=([^,]+)"),0),
  dnsfDetectionType = arrayindex(regextract(_raw_log,"dnsfDetectionType=([^,]+)"),0),
  dnsfDetectionReason = arrayindex(regextract(_raw_log,"dnsfDetectionReason=([^,]+)"),0),
  dnsfDetectionTime = arrayindex(regextract(_raw_log,"dnsfDetectionTime=([^,]+)"),0),
  dnsfTunnelClientIp = arrayindex(regextract(_raw_log,"dnsfTunnelClientIp=([^,]+)"),0),
  sourceIPv4Address = arrayindex(regextract(_raw_log,"sourceIPv4Address=([^,]+)"),0),
  destinationIPv4Address = arrayindex(regextract(_raw_log,"destinationIPv4Address=([^,]+)"),0),
  sourceTransportPort = arrayindex(regextract(_raw_log,"sourceTransportPort=([^,]+)"),0),
  destinationTransportPort = arrayindex(regextract(_raw_log,"destinationTransportPort=([^,]+)"),0),
  protocolIdentifier = arrayindex(regextract(_raw_log,"protocolIdentifier=([^,]+)"),0),
  fromUser = arrayindex(regextract(_raw_log,"fromUser=([^,]+)"),0),
  threatSeverity = arrayindex(regextract(_raw_log,"threatSeverity=([^,]+)"),0),
  threatType = arrayindex(regextract(_raw_log,"threatType=([^,]+)"),0),
  dnsfSinkHoleIp = arrayindex(regextract(_raw_log,"dnsfSinkHoleIp=([^,]+)"),0);

// Parse secAccUserRegEventLog log                
filter _raw_log contains "secAccUserRegEventLog"
| call common_field_versa_gateway
| alter
  logsubtype = "secAccUserRegEventLog",
  vsnId = arrayindex(regextract(_raw_log,"vsnId=([^,]+)"),0),
  applianceId = arrayindex(regextract(_raw_log,"applianceId=([^,]+)"),0),
  tenantId = arrayindex(regextract(_raw_log,"tenantId=([^,]+)"),0),
  userName = arrayindex(regextract(_raw_log,"userName=([^,]+)"),0),
  latitude = arrayindex(regextract(_raw_log,"latitude=([^,]+)"),0),
  longitude = arrayindex(regextract(_raw_log,"longitude=([^,]+)"),0),
  os = arrayindex(regextract(_raw_log,"os=([^,]+)"),0),
  osVersion = arrayindex(regextract(_raw_log,"osVersion=([^,]+)"),0),
  secAccClientVersion = arrayindex(regextract(_raw_log,"secAccClientVersion=([^,]+)"),0),
  secAccRuleName = arrayindex(regextract(_raw_log,"secAccRuleName=([^,]+)"),0),
  secAccRuleAction = arrayindex(regextract(_raw_log,"secAccRuleAction=([^,]+)"),0),
  secAccProfName = arrayindex(regextract(_raw_log,"secAccProfName=([^,]+)"),0);

// Parse idpLog log                
filter _raw_log contains "idpLog"
| call common_field_versa_gateway
| alter
  logsubtype = "idpLog",
  flowId = arrayindex(regextract(_raw_log,"flowId=([^,]+)"),0),
  flowCookie = arrayindex(regextract(_raw_log,"flowCookie=([^,]+)"),0),
  signatureId = arrayindex(regextract(_raw_log,"signatureId=([^,]+)"),0),
  groupId = arrayindex(regextract(_raw_log,"groupId=([^,]+)"),0),
  signatureRev = arrayindex(regextract(_raw_log,"signatureRev=([^,]+)"),0),
  vsnId = arrayindex(regextract(_raw_log,"vsnId=([^,]+)"),0),
  applianceId = arrayindex(regextract(_raw_log,"applianceId=([^,]+)"),0),
  tenantId = arrayindex(regextract(_raw_log,"tenantId=([^,]+)"),0),
  moduleId = arrayindex(regextract(_raw_log,"moduleId=([^,]+)"),0),
  signaturePriority = arrayindex(regextract(_raw_log,"signaturePriority=([^,]+)"),0),
  idpAction = arrayindex(regextract(_raw_log,"idpAction=([^,]+)"),0),
  signatureMsg = arrayindex(regextract(_raw_log,"signatureMsg=([^,]+)"),0),
  classMsg = arrayindex(regextract(_raw_log,"classMsg=([^,]+)"),0),
  threatType = arrayindex(regextract(_raw_log,"threatType=([^,]+)"),0),
  packetTime = arrayindex(regextract(_raw_log,"packetTime=([^,]+)"),0),
  HitCount = arrayindex(regextract(_raw_log,"HitCount=([^,]+)"),0),
  ipsProfile = arrayindex(regextract(_raw_log,"ipsProfile=([^,]+)"),0),
  ipsProfileRule = arrayindex(regextract(_raw_log,"ipsProfileRule=([^,]+)"),0),
  ipsDirection = arrayindex(regextract(_raw_log,"ipsDirection=([^,]+)"),0),
  ipsProtocol = arrayindex(regextract(_raw_log,"ipsProtocol=([^,]+)"),0),
  ipsApplication = arrayindex(regextract(_raw_log,"ipsApplication=([^,]+)"),0),
  sourceIPv4Address = arrayindex(regextract(_raw_log,"sourceIPv4Address=([^,]+)"),0),
  destinationIPv4Address = arrayindex(regextract(_raw_log,"destinationIPv4Address=([^,]+)"),0),
  sourceTransportPort = arrayindex(regextract(_raw_log,"sourceTransportPort=([^,]+)"),0),
  destinationTransportPort = arrayindex(regextract(_raw_log,"destinationTransportPort=([^,]+)"),0),
  protocolIdentifier = arrayindex(regextract(_raw_log,"protocolIdentifier=([^,]+)"),0),
  fromUser = arrayindex(regextract(_raw_log,"fromUser=([^,]+)"),0),
  traffScope = arrayindex(regextract(_raw_log,"traffScope=([^,]+)"),0);

// Parse monStatsLog log                
filter _raw_log contains "monStatsLog"
| call common_field_versa_gateway
| alter
  logsubtype = "monStatsLog",
  mstatsTimeBlock = arrayindex(regextract(_raw_log,"mstatsTimeBlock=([^,]+)"),0),
  tenantId = arrayindex(regextract(_raw_log,"tenantId=([^,]+)"),0),
  vsnId = arrayindex(regextract(_raw_log,"vsnId=([^,]+)"),0),
  mstatsTotSentOctets = arrayindex(regextract(_raw_log,"mstatsTotSentOctets=([^,]+)"),0),
  mstatsTotRecvdOctets = arrayindex(regextract(_raw_log,"mstatsTotRecvdOctets=([^,]+)"),0),
  mstatsTotSessDuration = arrayindex(regextract(_raw_log,"mstatsTotSessDuration=([^,]+)"),0),
  mstatsTotSessCount = arrayindex(regextract(_raw_log,"mstatsTotSessCount=([^,]+)"),0),
  mstatsType = arrayindex(regextract(_raw_log,"mstatsType=([^,]+)"),0),
  urlCategory = arrayindex(regextract(_raw_log,"urlCategory=([^,]+)"),0),
  mstatsAttribs = arrayindex(regextract(_raw_log,"mstatsAttribs=([^,]+)"),0);

// Parse bwMonLog log                
filter _raw_log contains "bwMonLog"
| call common_field_versa_gateway
| alter
  logsubtype = "bwMonLog",
  generateTime = arrayindex(regextract(_raw_log,"generateTime=([^,]+)"),0),
  tenantId = arrayindex(regextract(_raw_log,"tenantId=([^,]+)"),0),
  vsnId = arrayindex(regextract(_raw_log,"vsnId=([^,]+)"),0),
  sentOctets = arrayindex(regextract(_raw_log,"sentOctets=([^,]+)"),0),
  recvdOctets = arrayindex(regextract(_raw_log,"recvdOctets=([^,]+)"),0),
  sessCnt = arrayindex(regextract(_raw_log,"sessCnt=([^,]+)"),0),
  mstatsType = arrayindex(regextract(_raw_log,"mstatsType=([^,]+)"),0),
  duration = arrayindex(regextract(_raw_log,"duration=([^,]+)"),0),
  siteName = arrayindex(regextract(_raw_log,"siteName=([^,]+)"),0),
  accCktName = arrayindex(regextract(_raw_log,"accCktName=([^,]+)"),0),
  siteId = arrayindex(regextract(_raw_log,"siteId=([^,]+)"),0),
  accCktId = arrayindex(regextract(_raw_log,"accCktId=([^,]+)"),0);

// Parse sdwanB2BSlamLog log                
filter _raw_log contains "sdwanB2BSlamLog"
| call common_field_versa_gateway
| alter
  logsubtype = "sdwanB2BSlamLog",
  localAccCktName = arrayindex(regextract(_raw_log,"localAccCktName=([^,]+)"),0),
  remoteAccCktName = arrayindex(regextract(_raw_log,"remoteAccCktName=([^,]+)"),0),
  localSiteId = arrayindex(regextract(_raw_log,"localSiteId=([^,]+)"),0),
  localSiteName = arrayindex(regextract(_raw_log,"localSiteName=([^,]+)"),0),
  remoteSiteId = arrayindex(regextract(_raw_log,"remoteSiteId=([^,]+)"),0),
  remoteSiteName = arrayindex(regextract(_raw_log,"remoteSiteName=([^,]+)"),0),
  fwdClass = arrayindex(regextract(_raw_log,"fwdClass=([^,]+)"),0),
  tenantId = arrayindex(regextract(_raw_log,"tenantId=([^,]+)"),0),
  delay = arrayindex(regextract(_raw_log,"delay=([^,]+)"),0),
  fwdDelayVar = arrayindex(regextract(_raw_log,"fwdDelayVar=([^,]+)"),0),
  revDelayVar = arrayindex(regextract(_raw_log,"revDelayVar=([^,]+)"),0),
  fwdLoss = arrayindex(regextract(_raw_log,"fwdLoss=([^,]+)"),0),
  revLoss = arrayindex(regextract(_raw_log,"revLoss=([^,]+)"),0),
  fwdLossRatio = arrayindex(regextract(_raw_log,"fwdLossRatio=([^,]+)"),0),
  revLossRatio = arrayindex(regextract(_raw_log,"revLossRatio=([^,]+)"),0),
  pduLossRatio = arrayindex(regextract(_raw_log,"pduLossRatio=([^,]+)"),0),
  fwdSent = arrayindex(regextract(_raw_log,"fwdSent=([^,]+)"),0),
  revSent = arrayindex(regextract(_raw_log,"revSent=([^,]+)"),0),
  generateTime = arrayindex(regextract(_raw_log,"generateTime=([^,]+)"),0);

// Parse unknownUserStatsLog log                
filter _raw_log contains "unknownUserStatsLog"
| call common_field_versa_gateway
| alter
  logsubtype = "unknownUserStatsLog",
  generateTime = arrayindex(regextract(_raw_log,"generateTime=([^,]+)"),0),
  tenantId = arrayindex(regextract(_raw_log,"tenantId=([^,]+)"),0),
  applianceId = arrayindex(regextract(_raw_log,"applianceId=([^,]+)"),0),
  vsnId = arrayindex(regextract(_raw_log,"vsnId=([^,]+)"),0),
  dnsSessCnt = arrayindex(regextract(_raw_log,"dnsSessCnt=([^,]+)"),0),
  webSessCnt = arrayindex(regextract(_raw_log,"webSessCnt=([^,]+)"),0),
  longSessCnt = arrayindex(regextract(_raw_log,"longSessCnt=([^,]+)"),0),
  sessCnt = arrayindex(regextract(_raw_log,"sessCnt=([^,]+)"),0);

// Parse secAccGlobalStatsLog log                
filter _raw_log contains "secAccGlobalStatsLog"
| call common_field_versa_gateway
| alter
  logsubtype = "secAccGlobalStatsLog",
  mstatsTimeBlock = arrayindex(regextract(_raw_log,"mstatsTimeBlock=([^,]+)"),0),
  tenantId = arrayindex(regextract(_raw_log,"tenantId=([^,]+)"),0),
  applianceId = arrayindex(regextract(_raw_log,"applianceId=([^,]+)"),0),
  concurrentUsers = arrayindex(regextract(_raw_log,"concurrentUsers=([^,]+)"),0),
  failedAttempts = arrayindex(regextract(_raw_log,"failedAttempts=([^,]+)"),0),
  successfulAttempts = arrayindex(regextract(_raw_log,"successfulAttempts=([^,]+)"),0),
  racAccessType = arrayindex(regextract(_raw_log,"racAccessType=([^,]+)"),0);

// Parse alarmLog log                
filter _raw_log contains "alarmLog"
| call common_field_versa_gateway
| alter
  logsubtype = "alarmLog",
  alarmType = arrayindex(regextract(_raw_log,"alarmType=([^,]+)"),0),
  alarmKey = arrayindex(regextract(_raw_log,"alarmKey=([^,]+)"),0),
  generateTime = arrayindex(regextract(_raw_log,"generateTime=([^,]+)"),0),
  applianceId = arrayindex(regextract(_raw_log,"applianceId=([^,]+)"),0),
  vsnId = arrayindex(regextract(_raw_log,"vsnId=([^,]+)"),0),
  tenantId = arrayindex(regextract(_raw_log,"tenantId=([^,]+)"),0),
  alarmCause = arrayindex(regextract(_raw_log,"alarmCause=([^,]+)"),0),
  alarmClearable = arrayindex(regextract(_raw_log,"alarmClearable=([^,]+)"),0),
  alarmClass = arrayindex(regextract(_raw_log,"alarmClass=([^,]+)"),0),
  alarmKind = arrayindex(regextract(_raw_log,"alarmKind=([^,]+)"),0),
  alarmEventType = arrayindex(regextract(_raw_log,"alarmEventType=([^,]+)"),0),
  alarmSeverity = arrayindex(regextract(_raw_log,"alarmSeverity=([^,]+)"),0),
  alarmOwner = arrayindex(regextract(_raw_log,"alarmOwner=([^,]+)"),0),
  alarmSeqNo = arrayindex(regextract(_raw_log,"alarmSeqNo=([^,]+)"),0),
  alarmText = arrayindex(regextract(_raw_log,"alarmText=([^,]+)"),0),
  serialNum = arrayindex(regextract(_raw_log,"serialNum=([^,]+)"),0);



[INGEST:vendor="Amazon", product="AWS", target_dataset="amazon_aws_raw"]
drop eventName not in ("AssociateAddress", "AssumeRole", "Assumerolewithsaml", "Attach*", "CopyObject", "Create*", "DeleteGroup", "DeleteGroupPolicy", "DeleteNetworkAclEntry", "DeletePolicy", "DeletePolicyVersion", "DeleteRolePolicy", "DeleteRoute", "DeleteRouteTable", "DeleteTrail", "DeleteUserPolicy", "DetachGroupPolicy", "DetachRolePolicy", "DetachUserPolicy", "DisassociateRouteTable", "GetAccountStatus", "GetBucketAcl", "GetBucketPolicy", "GetBucketPolicyStatus", "GetBucketPublicAccessBlock", "GetBucketVersioning", "GetBucketWebsite", "GetHomeRegion", "GetResourceGroupsBetaOptInStatus", "HeadBucket", "ListObjectVersions", "ListObjects", "PutBucketAcl", "PutBucketEncryption", "PutGroupPolicy", "PutKeyPolicy", "PutRolePolicy", "PutUserPolicy", "ReplaceRoute", "ReplaceRouteTableAssociation", "Run*", "SearchProducts", "SetDefaultPolicyVersion", "StartInstances", "StartLogging", "StopInstances", "StopLogging", "TerminateInstances", "UpdateLoginProfile", "UpdateSAMLProvider", "UpdateService","ConsoleLogin")
or recipientAccountId in ("516227673228", "821146817103", "021653442870", "203042736972", "737747204625", "077206678937", "366149530137", "957446060462", "520448115692", "528920543746", "871150285868", "716749671218", "079708453896", "277009499931", "118054711003", "284015144019", "681013934657", "215528544127", "605112154508", "140225454948", "134952151256", "023448697843", "836535422226", "635386923555", "247829965850", "779842228116", "147908202524", "879522393306", "601421749912", "544138350401", "778257532796", "591041037789", "836759198595", "901065977831", "502837133763");
alter userIdentitytype = userIdentity -> type,
user_type = if((eventName="AssumeRole" OR eventName="AssumeRoleWithSAML" OR eventName="AssumeRoleWithWebIdentity" or eventName="ListAliases" OR eventName="ListRoles" OR eventName="CreateLoginProfile" OR eventName="ListSigningCertificates" OR eventName="CreateAccessKey" OR eventName="ListAccessKeys" OR eventName="CreateVirtualMFADevice" OR eventName="GetAccountSummary" OR eventName="ListAccountAliases" OR eventName="DeleteNetworkInterface") AND userIdentitytype !="AWSService",userIdentitytype,
                     (eventType="AwsConsoleSignIn" AND userIdentitytype="AssumedRole"),userIdentitytype),
userIdentitysessionContextsessionIssuertype = userIdentity -> sessionContext.sessionIssuer.type{} ;

// Remove , "ConsoleLogin" from aws parser

[INGEST:vendor="FireEye", product="HX", target_dataset="fireeye_hx_raw", no_hit = keep]

alter multiplefields = regexcapture(_raw_log,"AUDIT\:\s(?P<activity_type>[^\:]+)\:\susername \'(?P<src_user>[^\']+)\',\sfull\sname\s\'(?P<user_name>[^\']+)\',\srole\s\'(?P<user_role>[^']+)\',\sclient\s\'(?P<user_agent>[^\']+)\',\sline\s\'(?P<user_line>[^\']+)\'\,\sremote\saddress\s\'(?P<src_ip>[^\']+)\',\sauth\smethod\s\'(?P<authentication_service>[^\']+)\',\sauth\ssubmethod\s\'(?P<authentication_method>[^\']+)\',\ssession\sID\s(?P<session_id>[^\']+)"),
 
 multiplefields2  = regexcapture(_raw_log,"AUDIT:\s[\w\(\)]+\sConfig\schange\sID\s(?P<change_id>[^:]+):\srequested\sby:\suser\s(?P<src_user>[^\s]+)\s\((?P<user_name2>[^\)]+)\)\s\((?P<status>[^\)]+)\)\svia\s(?P<command>[^\s]+)\s\(session\sID\s(?P<session_ID>[^\)]+)\),\s(?P<result>[^\n]+)$"),
 activity_type = multipleFields -> activity_type,
src_user = multipleFields ->src_user,
user_name = multipleFields -> user_name,
user_role = multipleFields -> user_role,
user_line = multipleFields -> user_line,
src_ip = multipleFields -> src_ip,
authentication_service = multipleFields -> authentication_service,
authentication_method = multipleFields -> authentication_method,
session_id = multipleFields -> session_id,
change_id = multiplefields2 -> change_id,
src_user = multiplefields2 -> src_user,
user_name2 = multiplefields2 -> user_name,
status = multiplefields2 -> status,
command = multiplefields2 -> command,
session_ID = multiplefields2 -> session_ID,
result = multiplefields2 -> result,
event_type = arrayindex(regextract(_raw_log,"\s([\w-\.]+)\[\d+\]"),0)
| filter event_type = "cef"
| alter event_year = format_timestamp("%Y", _insert_time)
| alter event_time = concat(arrayindex(regextract(_raw_log, "\w{3}\s\d{2}\s\d{2}:\d{2}:\d{2}"),0)," ",event_year)
| alter
    _time = if(parse_timestamp("%b %d %H:%M:%S %Y", event_time)!=null,parse_timestamp("%b %d %H:%M:%S %Y", event_time),_insert_time)
| alter
    log_type = arrayindex(split(_raw_log,"|"),4),
    cefVersion = arrayindex(regextract(_raw_log, "CEF:(\d)"),0),
    cefSeverity = arrayindex(split(_raw_log,"|"),6),
    rt = arrayindex(regextract(_raw_log, "rt=([^=]+)\s\w+="),0),
    dvchost = arrayindex(regextract(_raw_log, "dvchost=([^=]+)\s\w+="),0),
    deviceExternalId = arrayindex(regextract(_raw_log, "deviceExternalId=([^=]+)\s\w+="),0),
    categoryDeviceGroup = arrayindex(regextract(_raw_log, "categoryDeviceGroup=([^=]+)\s\w+="),0),
    categoryDeviceType = arrayindex(regextract(_raw_log, "categoryDeviceType=([^=]+)\s\w+="),0),
    categoryObject = arrayindex(regextract(_raw_log, "categoryObject=([^=]+)\s\w+="),0),
    cs1Label = arrayindex(regextract(_raw_log, "cs1Label=([^=]+)\s\w+="),0),
    cs1 = arrayindex(regextract(_raw_log, "cs1=([^=]+)\s\w+="),0),
    dst = arrayindex(regextract(_raw_log, "dst=([^=]+)\s\w+="),0),
    dmac = arrayindex(regextract(_raw_log, "dmac=([^=]+)\s\w+="),0),
    dhost = arrayindex(regextract(_raw_log, "dhost=([^=]+)\s\w+="),0),
    dntdom = arrayindex(regextract(_raw_log, "dntdom=([^=]+)\s\w+="),0),
    deviceCustomDate1Label = arrayindex(regextract(_raw_log, "deviceCustomDate1Label=([^=]+)\s\w+="),0),
    deviceCustomDate1 = arrayindex(regextract(_raw_log, "deviceCustomDate1=([^=]+)\s\w+="),0),
    cs2Label = arrayindex(regextract(_raw_log, "cs2Label=([^=]+)\s\w+="),0),
    cs2 = arrayindex(regextract(_raw_log, "cs2=([^=]+)\s\w+="),0),
    cs5Label = arrayindex(regextract(_raw_log, "cs5Label=([^=]+)\s\w+="),0),
    cs5 = arrayindex(regextract(_raw_log, "cs5=([^=]+)\s\w+="),0),
    cs6Label = arrayindex(regextract(_raw_log, "cs6Label=([^=]+)\s\w+="),0),
    cs6 = arrayindex(regextract(_raw_log, "cs6=([^=]+)\s\w+="),0),
    cs4Label = arrayindex(regextract(_raw_log, "cs4Label=([^=]+)\s\w+="),0),
    cs4 = arrayindex(regextract(_raw_log, "cs4=([^=]+)\s\w+="),0),
    cs7Label = arrayindex(regextract(_raw_log, "cs7Label=([^=]+)\s\w+="),0),
    cs7 = arrayindex(regextract(_raw_log, "cs7=([^=]+)\s\w+="),0),
    cs8Label = arrayindex(regextract(_raw_log, "cs8Label=([^=]+)\s\w+="),0),
    cs8 = arrayindex(regextract(_raw_log, "cs8=([^=]+)\s\w+="),0),
    cs9Label = arrayindex(regextract(_raw_log, "cs9Label=([^=]+)\s\w+="),0),
    cs9 = arrayindex(regextract(_raw_log, "cs9=([^=]+)\s\w+="),0),
    cs10Label = arrayindex(regextract(_raw_log, "cs10Label=([^=]+)\s\w+="),0),
    cs10 = arrayindex(regextract(_raw_log, "cs10=([^=]+)\s\w+="),0),
    cs11Label = arrayindex(regextract(_raw_log, "cs11Label=([^=]+)\s\w+="),0),
    cs11 = arrayindex(regextract(_raw_log, "cs11=([^=]+)\s\w+="),0),
    act = arrayindex(regextract(_raw_log, "act=([^=]+)\s\w+="),0),
    externalId = arrayindex(regextract(_raw_log, "externalId=([^=]+)\s\w+="),0),
    start = arrayindex(regextract(_raw_log, "start=([^=]+)\s\w+="),0),
    categoryTechnique = arrayindex(regextract(_raw_log, "categoryTechnique=([^=]+)\s\w+="),0),
    categoryTupleDescription = arrayindex(regextract(_raw_log, "categoryTupleDescription=([^=]+)\s\w+="),0),
    categoryOutcome = arrayindex(regextract(_raw_log, "categoryOutcome=([^=]+)\s\w+="),0),
    categoryBehavior = arrayindex(regextract(_raw_log, "categoryBehavior=([^=]+)\s\w+="),0),
    categorySignificance = arrayindex(regextract(_raw_log, "categorySignificance=([^=]+)\s\w+="),0)
  | alter action = if(categoryOutcome="/Success", "blocked", categoryOutcome="/Failure", "allowed", 1=1, "deferred"),

app = "fireeye:hx",
change_type = if(change_id!=null, "configuration", 1=1,null),
signature = if(inbound_interface != null,"firewall",null);


//IBM TAM Eventlog log type parsing
[INGEST:vendor="was", product="ivr_service", target_dataset="was_ivr_service_raw", no_hit = keep]
filter _raw_log not contains "correlationID"
| alter
    log_timestamp = parse_timestamp("%Y-%m-%d %H:%M:%S",arrayindex(regextract(_raw_log,"(\d{4}-\d{2}-\d{2} \d{2}\:\d{2}\:\d{2}),\d{3}\s"),0))
| alter
    _time = if(log_timestamp != null, log_timestamp, _insert_time)
| alter
    log_level = arrayindex(regextract(_raw_log,"\d{4}-\d{2}-\d{2} \d{2}\:\d{2}\:\d{2},\d{3}\s(\w+)"),0),
    WebContainer = arrayindex(regextract(_raw_log,"WebContainer : (\d+)"),0),
    api_endpoint = arrayindex(regextract(_raw_log,"\[POST\]([^\n]+)"),0),
    remote_ip = arrayindex(regextract(_raw_log,"\[Remote IP\]\[(.+)\]"),0),
    x_request_id = arrayindex(regextract(_raw_log,"\[X-Request-Id\]\[(.+)\]"),0),
    auth_url = arrayindex(regextract(_raw_log,"https://urldefense.proofpoint.com/v2/url?u=https-3A__.-2B-2522-29-2C0&d=DwIGAg&c=V9IgWpI5PvzTw83UyHGVSoW3Uc1MFWe5J8PTfkrzVSo&r=UhkEJepeo4gkjuxeXj-uRNDJ4tRRjUU6MfmsxqM_PvM&m=HNA0rTekHtcJFfz7Gguu1W9n9a5Ltyd5mv8F4Ylltxz5qU3J7eRoZq2vHj9FLWA5&s=G7IA8fYXejU_6_3wbMjcwjQVSEIACmaG6U6sq5ZDMjE&e= ),
    message = arraystring(regextract(_raw_log,"\[WebContainer : \d+\] ([^\]\[\n\:]+)\n")," > ")
| alter
  signature = arrayindex(regextract(message,"(\w+.*?)\..*?status code received from Bank"),0),
  status_code = arrayindex(regextract(message,"status code received from Bank (\d{3}.*?)"),0),
  action = if(signature contains "Authentication success with Bank", "success", signature contains "Authentication with Bank not successful", "failure", message contains "change operation successful", "modified",  message contains "Error happened in change password", "modified",""),
  status = if(message contains "change operation successful", "success", message contains "Error happened in change password", "failure","")

;
filter _raw_log contains "correlationID"
| alter json_data = arrayindex(regextract(_raw_log,"({.+})"),0)
| alter message = json_data -> message,
  message_json_data = arrayindex(regextract(message,"({.+})"),0)
| alter
exception = json_data -> exception,
status = json_data -> status,
  c2app = json_data -> c2app,
  c2subapp = json_data -> c2subapp,
  c2env = json_data -> c2env,
  c2ttl = json_data -> c2ttl,
  c2sec = json_data -> c2sec,
  _time = if(parse_timestamp("%Y-%m-%dT%H:%M:%S",json_data-> ["@timestamp"],"Australia/Sydney")!= null,parse_timestamp("%Y-%m-%dT%H:%M:%S",json_data-> ["@timestamp"],"Australia/Sydney")!= null,_insert_time),
  client_addr = json_data -> client_addr,
  source_ip = arrayindex(split(json_data -> ["X-Forwarded-For"],","),0),
  iv_user = "iv-user",
  method = json_data -> method,
  host = json_data -> host,
  request = json_data -> request,
  junction = json_data -> junction,
  response_code = to_integer(json_data -> response_code),
  sent_byte = to_integer(json_data -> sent_bytes),
  response_time_s = to_integer(json_data -> response_time_s),
  response_time_m = to_integer(json_data -> response_time_m),
   x_request_id = arrayindex(regextract(_raw_log,"\[X-Request-Id\]\[(.+)\]"),0),
  message = arraystring(regextract(_raw_log,"\[WebContainer : \d+\] ([^\]\[\n\:]+)\n")," > "),
  threat_name = json_data -> threat_name,
  auth_url = arrayindex(regextract(_raw_log,"https://urldefense.proofpoint.com/v2/url?u=https-3A__.-2B-2522-29-2C0&d=DwIGAg&c=V9IgWpI5PvzTw83UyHGVSoW3Uc1MFWe5J8PTfkrzVSo&r=UhkEJepeo4gkjuxeXj-uRNDJ4tRRjUU6MfmsxqM_PvM&m=HNA0rTekHtcJFfz7Gguu1W9n9a5Ltyd5mv8F4Ylltxz5qU3J7eRoZq2vHj9FLWA5&s=G7IA8fYXejU_6_3wbMjcwjQVSEIACmaG6U6sq5ZDMjE&e= ),
  remote_ip = arrayindex(regextract(_raw_log,"\[Remote IP\]\[(.+)\]"),0)
| alter 
  message_json_data = arrayindex(regextract(message,"({.+})"),0),
  WebContainer = arrayindex(regextract(thread_name,"WebContainer :\s+(\d+.*?)"),0)
| alter
  signature = message_json_data -> status;


// WAS Mobile
[INGEST:vendor="was", product="mobility_services", target_dataset="was_mobility_services_raw", no_hit = keep]
alter
    log_timestamp = parse_timestamp("%d %b %Y %H:%M:%S",arrayindex(regextract(_raw_log,"(\d{2} \w{3} \d{4} \d{2}\:\d{2}\:\d{2}),\d{3}\s\|"),0))
| alter
    _time = if(log_timestamp != null, log_timestamp, _insert_time),
    dest = arrayindex(regextract(_raw_log,"https://urldefense.proofpoint.com/v2/url?u=https-3A__-28-5B-255E-3A-255C_-255D-2B-29-2522-29-2C0&d=DwIGAg&c=V9IgWpI5PvzTw83UyHGVSoW3Uc1MFWe5J8PTfkrzVSo&r=UhkEJepeo4gkjuxeXj-uRNDJ4tRRjUU6MfmsxqM_PvM&m=HNA0rTekHtcJFfz7Gguu1W9n9a5Ltyd5mv8F4Ylltxz5qU3J7eRoZq2vHj9FLWA5&s=5xldnNImuzLlehOdgUQs0qzurzjB9LMh3B39rkdvo8Y&e= ),
    log_level = arrayindex(regextract(trim(arrayindex(split(_raw_log,"||"),1)),"\[(.+)\]"),0),
    web_container = arrayindex(regextract(_raw_log,"WebContainer \: ([^|\s]+)"),0),
    source_ip = arrayindex(regextract(_raw_log,"SOURCE_IP=([^|\s]+)"),0),
    class = arrayindex(regextract(_raw_log,"Class=([^|\s]+)"),0),
    tam_id = arrayindex(regextract(_raw_log,"tam-id\: ([^|\s]+)"),0),
    session_id = arrayindex(regextract(_raw_log,"session-id\: ([^|\s]+)"),0),
    x_request_id = arrayindex(regextract(_raw_log,"X-Request-ID\: ([^|\s]+)"),0),
    message = trim(arrayindex(split(_raw_log,"||"),8)),              // splunk signature    
    user = arrayindex(regextract(_raw_log,"UserID \: ([^|\s]+)"),0), 
    user1 = arrayindex(regextract(_raw_log,"User\:\sOptional\[(.+?)\]"),0),
    description = arrayindex(regextract(_raw_log,"Description \: ([^|\s]+)"),0),
    device_id = arrayindex(regextract(_raw_log, "\\"DeviceId\\":\\"([a-zA-z0-9-]+)"),0),
    url = coalesce(arrayindex(regextract(_raw_log, "endPointUrl \:(.*?)\s"),0), arrayindex(regextract(_raw_log, "url: (.*?)\s"),0))
| alter
    response_code = arrayindex(regextract(message,"<(\d{3})"),0),
    uid = arrayindex(regextract(message,"uid=([^,]+)"),0),
    creationTime = arrayindex(regextract(message,"creationTime=([^,]+)"),0),
    source = arrayindex(regextract(message,"source=([^,]+)"),0),
    state = arrayindex(regextract(message,"state=([^,]+)"),0),
    consolidationRequired = arrayindex(regextract(message,"consolidationRequired=([^,]+)"),0),
    entityRef = arrayindex(regextract(message,"entityRef=([^,]+)"),0),
    primaryAccessToken = arrayindex(regextract(message,"primaryAccessToken=([^,]+)"),0),
    scvid = arrayindex(regextract(message,"scvid=([^,]+)"),0),
    termsAndConditionsAccepted = arrayindex(regextract(message,"termsAndConditionsAccepted=([^,]+)"),0),
    lastLoginTime = arrayindex(regextract(message,"lastLoginTime=([^,]+)"),0),
    partKeys = arrayindex(regextract(message,"partKeys=([^,]+)"),0),
    lockedDetail = arrayindex(regextract(message,"lockedDetail=([^,]+)"),0),
    accessTokens = arrayindex(regextract(message,"accessTokens=([^,]+)"),0),
    enrolementStatus = arrayindex(regextract(message,"enrolementStatus=([^,]+)"),0),
    banknetId = arrayindex(regextract(message,"banknetId=([^,]+)"),0),
    passwordReset = arrayindex(regextract(message,"passwordReset=([^,]+)"),0),
    cache_control = arrayindex(regextract(message,"Cache-Control=([^,]+)"),0),
    content_language = arrayindex(regextract(message,"Content-Language=([^,]+)"),0),
    content_type = arrayindex(regextract(message,"Content-Type=([^,]+)"),0),
    date = arrayindex(regextract(message,"Date=(\[.+\])"),0),
    Expires = arrayindex(regextract(message,"Expires=([^,]+)"),0),
    Pragma = arrayindex(regextract(message,"Pragma=([^,]+)"),0),
    strict_transport_security = arrayindex(regextract(message,"Strict-Transport-Security=([^,]+)"),0),
    x_content_type_options = arrayindex(regextract(message,"X-Content-Type-Options=([^,]+)"),0),
    x_frame_options = arrayindex(regextract(message,"X-Frame-Options=([^,]+)"),0),
    x_powered_by = arrayindex(regextract(message,"X-Powered-By=([^,]+)"),0),
    x_xss_protection = arrayindex(regextract(message,"X-XSS-Protection=([^,]+)"),0),
    content_length = arrayindex(regextract(message,"Content-Length=([^,]+)"),0),
    Connection = arrayindex(regextract(message,"Content-Length=([^,]+)"),0),
    action = if(message contains "Pin login successful", "successful", description="SUCCESSFUL_LOGIN", "successful", message contains "Pin login failed", "failure", description="FAILED_LOGIN", "failure", passwordReset="true", "modified",""),
    user = coalesce(user, user1)
    ;
[INGEST:vendor="was", product="mobility_device", target_dataset="was_mobility_device_raw", no_hit = keep]
alter
    log_timestamp = parse_timestamp("%d %b %Y %H:%M:%S",arrayindex(regextract(_raw_log,"(\d{2} \w{3} \d{4} \d{2}\:\d{2}\:\d{2}),\d{3}\s\|"),0))
| alter
    _time = if(log_timestamp != null, log_timestamp, _insert_time),
    log_level = arrayindex(regextract(trim(arrayindex(split(_raw_log,"||"),1)),"\[(.+)\]"),0),
    web_container = arrayindex(regextract(_raw_log,"WebContainer \: ([^|\s]+)"),0),
    source_ip = arrayindex(regextract(_raw_log,"SOURCE_IP=([^|\s]+)"),0),
    class = arrayindex(regextract(_raw_log,"Class=([^|\s]+)"),0),
    tam_id = arrayindex(regextract(_raw_log,"tam-id\: ([^|\s]+)"),0),
    session_id = arrayindex(regextract(_raw_log,"session-id\: ([^|\s]+)"),0),
    x_request_id = arrayindex(regextract(_raw_log,"X-Request-ID\: ([^|\s]+)"),0),
    signature = trim(arrayindex(split(_raw_log,"||"),8)),               
    user = arrayindex(regextract(_raw_log,"for\:\s(.+?)\s"),0), 
    user2 = arrayindex(regextract(_raw_log,"uid:\s(.*?)\s"),0), 
    description = arrayindex(regextract(_raw_log,"Description \: ([^|\s]+)"),0),
    device_id = arrayindex(regextract(_raw_log,"DeviceId \: ([^|\s]+)"),0)
| alter
     action = if(passwordReset="true", "modified"),
     status = if(passwordReset="true", "modified")
;
[INGEST:vendor="was", product="ddc_am", target_dataset="was_ddc_am_raw", no_hit = drop]
alter
    log_timestamp = parse_timestamp("%Y-%m-%d %H:%M:%S",arrayindex(regextract(_raw_log,"(\d{4}-\d{2}-\d{2} \d{2}\:\d{2}\:\d{2})"),0))
| alter
    _time = if(log_timestamp != null, log_timestamp, _insert_time),
    log_level = arrayindex(split(_raw_log," "),2),
    service = arrayindex(split(_raw_log," "),3),
    web_container = arrayindex(regextract(_raw_log,"WebContainer : (\d+)"),0),
    message = arrayindex(regextract(_raw_log,"WebContainer : \d+\] (.+)"),0)
| alter json_data = arrayindex(regextract(_raw_log,"({.+})"),0)
| alter
  ip_address = arrayindex(regextract(_raw_log,"(\d+\.\d+\.\d+\.\d+)\:\d+"),0),
  source_port = arrayindex(regextract(_raw_log,"\d+\.\d+\.\d+\.\d+\:(\d+)"),0),
  url = arrayindex(regextract(_raw_log,"(http\w\:[^<>]+)\\n"),0),
  host = arrayindex(regextract(_raw_log ,"Host: ([^<>]+)\\n"),0),
  accept_encoding = arrayindex(regextract(_raw_log,"Accept-Encoding: ([^<>]+)\\n"),0),
  accept_language = arrayindex(regextract(_raw_log,"Accept-Language: ([^<>]+)\\n"),0),
  authorization = arrayindex(regextract(_raw_log,"Authorization: ([^<>]+)\\n"),0),
  cache_control = arrayindex(regextract(_raw_log,"Cache-Control: ([^<>]+)\\n"),0),
  x_powered_by = arrayindex(regextract(_raw_log,"X-Powered-By: ([^<>]+)\\n"),0),
  location = arrayindex(regextract(_raw_log,"Location: ([^<>]+)\\n"),0),
  user_agent = arrayindex(regextract(_raw_log,"User-Agent: ([^<>]+)\\n"),0),
  x_forwarded_host = arrayindex(regextract(_raw_log,"x-forwarded-host: ([^<>]+)\\n"),0),
  x_forwarded_for = arrayindex(regextract(_raw_log,"X-Forwarded-For: ([^<>]+)\\n"),0),
  x_forwarded_port = arrayindex(regextract(_raw_log,"X-Forwarded-Port: ([^<>]+)\\n"),0),
  x_forwarded_protocol = arrayindex(regextract(_raw_log,"X-Forwarded-Proto: ([^<>]+)\\n"),0),
  http_method = arrayindex(regextract(_raw_log,"[><]{2} (GET|303) "),0)
;

// WAS Mobile
[INGEST:vendor="was", product="mobility_service", target_dataset="was_mobility_service_raw", no_hit = keep]
alter
    log_timestamp = parse_timestamp("%d %b %Y %H:%M:%S",arrayindex(regextract(_raw_log,"(\d{2} \w{3} \d{4} \d{2}\:\d{2}\:\d{2}),\d{3}\s\|"),0))
| alter
    _time = if(log_timestamp != null, log_timestamp, _insert_time),
    log_level = arrayindex(regextract(trim(arrayindex(split(_raw_log,"||"),1)),"\[(.+)\]"),0),
    web_container = arrayindex(regextract(_raw_log,"WebContainer \: ([^|\s]+)"),0),
    source_ip = arrayindex(regextract(_raw_log,"SOURCE_IP=([^|\s]+)"),0),
    class = arrayindex(regextract(_raw_log,"Class=([^|\s]+)"),0),
    tam_id = arrayindex(regextract(_raw_log,"tam-id\: ([^|\s]+)"),0),
    session_id = arrayindex(regextract(_raw_log,"session-id\: ([^|\s]+)"),0),
    x_request_id = arrayindex(regextract(_raw_log,"X-Request-ID\: ([^|\s]+)"),0),
    message = trim(arrayindex(split(_raw_log,"||"),8)),              // splunk signature    
    user = arrayindex(regextract(_raw_log,"UserID \: ([^|\s]+)"),0), 
    description = arrayindex(regextract(_raw_log,"Description \: ([^|\s]+)"),0),
    device_id = arrayindex(regextract(_raw_log,"DeviceId \: ([^|\s]+)"),0)
| alter
    url = arrayindex(regextract(message ,"url\: (https://urldefense.proofpoint.com/v2/url?u=https-3A__-5B-255E-255Cs-5D-2B-29-2522-29-2C0&d=DwIGAg&c=V9IgWpI5PvzTw83UyHGVSoW3Uc1MFWe5J8PTfkrzVSo&r=UhkEJepeo4gkjuxeXj-uRNDJ4tRRjUU6MfmsxqM_PvM&m=HNA0rTekHtcJFfz7Gguu1W9n9a5Ltyd5mv8F4Ylltxz5qU3J7eRoZq2vHj9FLWA5&s=eE3Kocx2pv0NuZBS_wdszEwNOdKxw6VdvOv3elHfgxc&e= ),
    response_code = arrayindex(regextract(message,"<(\d{3})"),0),
    uid = arrayindex(regextract(message,"uid=([^,]+)"),0),
    creationTime = arrayindex(regextract(message,"creationTime=([^,]+)"),0),
    source = arrayindex(regextract(message,"source=([^,]+)"),0),
    state = arrayindex(regextract(message,"state=([^,]+)"),0),
    consolidationRequired = arrayindex(regextract(message,"consolidationRequired=([^,]+)"),0),
    entityRef = arrayindex(regextract(message,"entityRef=([^,]+)"),0),
    primaryAccessToken = arrayindex(regextract(message,"primaryAccessToken=([^,]+)"),0),
    scvid = arrayindex(regextract(message,"scvid=([^,]+)"),0),
    termsAndConditionsAccepted = arrayindex(regextract(message,"termsAndConditionsAccepted=([^,]+)"),0),
    lastLoginTime = arrayindex(regextract(message,"lastLoginTime=([^,]+)"),0),
    partKeys = arrayindex(regextract(message,"partKeys=([^,]+)"),0),
    lockedDetail = arrayindex(regextract(message,"lockedDetail=([^,]+)"),0),
    accessTokens = arrayindex(regextract(message,"accessTokens=([^,]+)"),0),
    enrolementStatus = arrayindex(regextract(message,"enrolementStatus=([^,]+)"),0),
    banknetId = arrayindex(regextract(message,"banknetId=([^,]+)"),0),
    passwordReset = arrayindex(regextract(message,"passwordReset=([^,]+)"),0),
    cache_control = arrayindex(regextract(message,"Cache-Control=([^,]+)"),0),
    content_language = arrayindex(regextract(message,"Content-Language=([^,]+)"),0),
    content_type = arrayindex(regextract(message,"Content-Type=([^,]+)"),0),
    date = arrayindex(regextract(message,"Date=(\[.+\])"),0),
    Expires = arrayindex(regextract(message,"Expires=([^,]+)"),0),
    Pragma = arrayindex(regextract(message,"Pragma=([^,]+)"),0),
    strict_transport_security = arrayindex(regextract(message,"Strict-Transport-Security=([^,]+)"),0),
    x_content_type_options = arrayindex(regextract(message,"X-Content-Type-Options=([^,]+)"),0),
    x_frame_options = arrayindex(regextract(message,"X-Frame-Options=([^,]+)"),0),
    x_powered_by = arrayindex(regextract(message,"X-Powered-By=([^,]+)"),0),
    x_xss_protection = arrayindex(regextract(message,"X-XSS-Protection=([^,]+)"),0),
    content_length = arrayindex(regextract(message,"Content-Length=([^,]+)"),0),
    Connection = arrayindex(regextract(message,"Content-Length=([^,]+)"),0),
    action = if(message contains "Pin login successful", "successful", description="SUCCESSFUL_LOGIN", "successful", message contains "Pin login failed", "failure", description="FAILED_LOGIN", "failure", passwordReset="true", "modified","")
    ;
// WAS Mobile Audit
[INGEST:vendor="was", product="mobility_audit", target_dataset="was_mobility_audit_raw", no_hit = keep]
alter
    log_timestamp = parse_timestamp("%d %b %Y %H:%M:%S",arrayindex(regextract(_raw_log,"(\d{2} \w{3} \d{4} \d{2}\:\d{2}\:\d{2}),\d{3}\s\|"),0))
| alter
    _time = if(log_timestamp != null, log_timestamp, _insert_time),
    log_level = arrayindex(regextract(trim(arrayindex(split(_raw_log,"||"),1)),"\[(.+)\]"),0),
    web_container = arrayindex(regextract(_raw_log,"WebContainer \: ([^|\s]+)"),0),
    source_ip = arrayindex(regextract(_raw_log,"SOURCE_IP=([^|\s]+)"),0),   // no source_ip in data set
    class = arrayindex(regextract(_raw_log,"Class=([^|\s]+)\s\|"),0),
    tam_id = arrayindex(regextract(_raw_log,"Tam-Id\: ([^|\s]+)"),0),
    session_id = arrayindex(regextract(_raw_log,"session-id\: ([^|\s]+)"),0), // no session id in data set
    x_request_id = arrayindex(regextract(_raw_log,"X-Request-ID\: ([^|\s]+)"),0),
    message = trim(arrayindex(split(_raw_log,"||"),8)),              // splunk signature    
    user = arrayindex(regextract(_raw_log,"UserID\":\"(.+?)\""),0), 
    description = arrayindex(regextract(_raw_log,"Description \: ([^|\s]+)"),0), // no description in data set
    dvc_id = arrayindex(regextract(_raw_log,"DeviceId\":\"(.+?)\""),0), // no device id in data set
    // new field extractions added by RD - 02 AUG 24
    event = arrayindex(regextract(_raw_log,"Event\:\s?([^,]+),"),0),
    reason = arrayindex(regextract(_raw_log,"Reason\:\s?([^,]+),"),0)
|alter
     action=if(event="Logon", "success", event="TouchIdLogon", "success", event="FailedLogin", "failure", event="EnrolDevice", "success", event="TouchIdEnrolDevice", "success", event="TouchIdFailedLogin", "failure", event="ChangePin", "modified", event="TouchIdFailedEnrolDevice", "failure", passwordReset="'true'", "modified"),
     result=if(event="DeviceLocked", "lockout"),
     status=if(reason="Customer updates pin for AMP app on their device", "success")
/* None of these below field extractions will work because "message" field is either empty or just says "END OF MESSAGE"
| alter
    url = arrayindex(regextract(message ,"url\: (https://urldefense.proofpoint.com/v2/url?u=https-3A__-5B-255E-255Cs-5D-2B-29-2522-29-2C0&d=DwIGAg&c=V9IgWpI5PvzTw83UyHGVSoW3Uc1MFWe5J8PTfkrzVSo&r=UhkEJepeo4gkjuxeXj-uRNDJ4tRRjUU6MfmsxqM_PvM&m=HNA0rTekHtcJFfz7Gguu1W9n9a5Ltyd5mv8F4Ylltxz5qU3J7eRoZq2vHj9FLWA5&s=eE3Kocx2pv0NuZBS_wdszEwNOdKxw6VdvOv3elHfgxc&e= ), // no url in data set
    response_code = arrayindex(regextract(message,"<(\d{3})"),0), // no response code in data set
    uid = arrayindex(regextract(message,"uid=([^,]+)"),0), // no uid in data set
    creationTime = arrayindex(regextract(message,"creationTime=([^,]+)"),0), // not clear what this field is 
    source = arrayindex(regextract(message,"source=([^,]+)"),0), // no source in data set
    state = arrayindex(regextract(message,"state=([^,]+)"),0), //
    consolidationRequired = arrayindex(regextract(message,"consolidationRequired=([^,]+)"),0),
    entityRef = arrayindex(regextract(message,"entityRef=([^,]+)"),0),
    primaryAccessToken = arrayindex(regextract(message,"primaryAccessToken=([^,]+)"),0),
    scvid = arrayindex(regextract(message,"scvid=([^,]+)"),0),
    termsAndConditionsAccepted = arrayindex(regextract(message,"termsAndConditionsAccepted=([^,]+)"),0),
    lastLoginTime = arrayindex(regextract(message,"lastLoginTime=([^,]+)"),0),
    partKeys = arrayindex(regextract(message,"partKeys=([^,]+)"),0),
    lockedDetail = arrayindex(regextract(message,"lockedDetail=([^,]+)"),0),
    accessTokens = arrayindex(regextract(message,"accessTokens=([^,]+)"),0),
    enrolementStatus = arrayindex(regextract(message,"enrolementStatus=([^,]+)"),0),
    banknetId = arrayindex(regextract(message,"banknetId=([^,]+)"),0),
    passwordReset = arrayindex(regextract(message,"passwordReset=([^,]+)"),0),
    cache_control = arrayindex(regextract(message,"Cache-Control=([^,]+)"),0),
    content_language = arrayindex(regextract(message,"Content-Language=([^,]+)"),0),
    content_type = arrayindex(regextract(message,"Content-Type=([^,]+)"),0),
    date = arrayindex(regextract(message,"Date=(\[.+\])"),0),
    Expires = arrayindex(regextract(message,"Expires=([^,]+)"),0),
    Pragma = arrayindex(regextract(message,"Pragma=([^,]+)"),0),
    strict_transport_security = arrayindex(regextract(message,"Strict-Transport-Security=([^,]+)"),0),
    x_content_type_options = arrayindex(regextract(message,"X-Content-Type-Options=([^,]+)"),0),
    x_frame_options = arrayindex(regextract(message,"X-Frame-Options=([^,]+)"),0),
    x_powered_by = arrayindex(regextract(message,"X-Powered-By=([^,]+)"),0),
    x_xss_protection = arrayindex(regextract(message,"X-XSS-Protection=([^,]+)"),0),
    content_length = arrayindex(regextract(message,"Content-Length=([^,]+)"),0),
    Connection = arrayindex(regextract(message,"Content-Length=([^,]+)"),0),
    action = if(message contains "Pin login successful", "successful", description="SUCCESSFUL_LOGIN", "successful", message contains "Pin login failed", "failure", description="FAILED_LOGIN", "failure", passwordReset="true", "modified","") */
    ;
/* To be removed
[INGEST:vendor="was", product="mobility_services", target_dataset="was_mobility_services_raw", no_hit = keep]
alter 
   dvc_id = arrayindex(regextract(_raw_log,"DeviceId\":\"(.+?)\""),0),
   user = arrayindex(regextract(_raw_log,"UserID\":\"(.+?)\""),0),
   dest = arrayindex(regextract(_raw_log,"https://urldefense.proofpoint.com/v2/url?u=https-3A__-28-5B-255E-3A-255C_-255D-2B-29-2522-29-2C0&d=DwIGAg&c=V9IgWpI5PvzTw83UyHGVSoW3Uc1MFWe5J8PTfkrzVSo&r=UhkEJepeo4gkjuxeXj-uRNDJ4tRRjUU6MfmsxqM_PvM&m=HNA0rTekHtcJFfz7Gguu1W9n9a5Ltyd5mv8F4Ylltxz5qU3J7eRoZq2vHj9FLWA5&s=5xldnNImuzLlehOdgUQs0qzurzjB9LMh3B39rkdvo8Y&e= ),
   country = arrayindex(regextract(_raw_log,"Country\":\"(.+?)\""),0),
   channel_id  = arrayindex(regextract(_raw_log,"ChannelID\":\"(.+?)\""),0),
   correlation_id = arrayindex(regextract(_raw_log,"CorrelationID\":\"(.+?)\""),0),
   description = arrayindex(regextract(_raw_log,"Description\":\"(.+?)\""),0),
   source  = arrayindex(regextract(_raw_log,"Source\":\"(.+?)\""),0),
   type = arrayindex(regextract(_raw_log,"Type\":\"(.+?)\""),0),
   source_ip = arrayindex(regextract(_raw_log,"SOURCE_IP=([^|\s]+)"),0),
    class = arrayindex(regextract(_raw_log,"Class=([^|\s]+)"),0),
    tam_id = arrayindex(regextract(_raw_log,"tam-id\: ([^|\s]+)"),0),
    session_id = arrayindex(regextract(_raw_log,"session-id\: ([^|\s]+)"),0),
    x_request_id = arrayindex(regextract(_raw_log,"X-Request-ID\: ([^|\s]+)"),0),
   passwordReset = arrayindex(regextract(_raw_log,"passwordReset='(.+?)'"),0)
|alter action = if(description ="SUCCESSFUL_LOGIN","successful",description="FAILED_LOGIN", "failure",signature ="Pin login successful*", "successful",signature ="Pin login failed*", "failure",passwordReset="*true*","modified"),
      status=if(passwordReset="*true*","success")
  ;

[INGEST:vendor="was", product="myamp", target_dataset="was_myamp_raw"]
alter
    log_timestamp = parse_timestamp("%Y-%m-%d %H:%M:%S",arrayindex(regextract(_raw_log,"(\d{4}-\d{2}-\d{2} \d{2}\:\d{2}\:\d{2}),\d{3}\s\|"),0))
| alter
    _time = if(log_timestamp != null, log_timestamp, _insert_time),
    log_level = arrayindex(regextract(trim(arrayindex(split(_raw_log,"||"),1)),"\[(.+)\]"),0),
    log_type = trim(arrayindex(split(_raw_log,"||"),2)),
    web_container = arrayindex(regextract(_raw_log,"WebContainer \: ([^|\s]+)"),0),
    client_ip = split(arrayindex(regextract(_raw_log,"Client-IP\: ([^|]+)"),0),","),
    x_forwarded_host = arrayindex(regextract(_raw_log,"X-Forwarded-Host:\ ([^|\s]+)"),0),
    idam_server = trim(arrayindex(split(_raw_log,"||"),6)),
    user_id = arrayindex(regextract(_raw_log,"UserId\: \[(\w+)\]"),0),
    x_request_id = arrayindex(regextract(_raw_log,"X-Request-ID\: ([^|\s]+)"),0),
    message = trim(arrayindex(split(_raw_log,"||"),9))
| alter
    sn = arrayindex(regextract(message,"sn='([^']+)'"),0),
    secDomainId = arrayindex(regextract(message,"secDomainId='([^']+)'"),0),
    secPwdValid = arrayindex(regextract(message,"secPwdValid='([^']+)'"),0),
    principalName = arrayindex(regextract(message,"principalName='([^']+)'"),0),
    givenName = arrayindex(regextract(message,"givenName='([^']+)'"),0),
    secAcctValid = arrayindex(regextract(message,"secAcctValid='([^']+)'"),0),
    isGSOUser = arrayindex(regextract(message,"isGSOUser='([^']+)'"),0),
    secAuthority = arrayindex(regextract(message,"secAuthority='([^']+)'"),0),
    secLoginType = arrayindex(regextract(message,"secLoginType='([^']+)'"),0),
    isSecEntity = arrayindex(regextract(message,"isSecEntity='([^']+)'"),0),
    secUUID = arrayindex(regextract(message,"secUUID='([^']+)'"),0),
    secHasPolicy = arrayindex(regextract(message,"secHasPolicy='([^']+)'"),0),
    secPwdLastChanged = arrayindex(regextract(message,"secPwdLastChanged='([^']+)'"),0),
    objectClass = arrayindex(regextract(message,"objectClass='([^']+)'"),0),
    ampActivationFlag = arrayindex(regextract(message,"ampActivationFlag='([^']+)'"),0),
    ampAccountCreationTime = arrayindex(regextract(message,"ampAccountCreationTime='([^']+)'"),0),
    mail = arrayindex(regextract(message,"mail='([^']+)'"),0),
    ampLastLoginTime = arrayindex(regextract(message,"ampLastLoginTime='([^']+)'"),0),
    ampActivationRequired = arrayindex(regextract(message,"ampActivationRequired='([^']+)'"),0),
    mobile = arrayindex(regextract(message,"mobile='([^']+)'"),0),
    ampConsolidationRequired = arrayindex(regextract(message,"ampConsolidationRequired='([^']+)'"),0),
    newPassword = arrayindex(regextract(message,"newPassword='([^']+)'"),0),
    oldPassword = arrayindex(regextract(message,"oldPassword='([^']+)'"),0),
    secDN = arrayindex(regextract(message,"secDN='([^']+)'"),0),
    primaryAccessToken = arrayindex(regextract(message,"primaryAccessToken='([^']+)'"),0),
    IsAccessToThirdPartyAccounts = arrayindex(regextract(message,"IsAccessToThirdPartyAccounts='([^']+)'"),0),
    BanknetID = arrayindex(regextract(message,"BanknetID='([^']+)'"),0),
    RightHolderEntityReference = arrayindex(regextract(message,"RightHolderEntityReference='([^']+)'"),0),
    RightHolderEntityType = arrayindex(regextract(message,"RightHolderEntityType='([^']+)'"),0),
    RightHolderName = arrayindex(regextract(message,"RightHolderName='([^']+)'"),0),
    Status = arrayindex(regextract(message,"Status='([^']+)'"),0),
    TokenHolderName = arrayindex(regextract(message,"TokenHolderName='([^']+)'"),0),
    enrolementStatus = arrayindex(regextract(message,"enrolementStatus='([^']+)'"),0),
    accountLockedTime = arrayindex(regextract(message,"accountLockedTime='([^']+)'"),0),
    pwdAccountLocked = arrayindex(regextract(message,"pwdAccountLocked='([^']+)'"),0),
    ibmPwdAccountLocked = arrayindex(regextract(message,"ibmPwdAccountLocked='([^']+)'"),0),
    lockedByUser = arrayindex(regextract(message,"lockedByUser='([^']+)'"),0),
    passwordReset = arrayindex(regextract(message,"passwordReset='([^']+)'"),0),
    description = arrayindex(regextract(message,"description='([^']+)'"),0),
    ibmEntryuuid = arrayindex(regextract(message,"ibmEntryuuid='([^']+)'"),0);
*/

[INGEST:vendor="was", product="myamp_eam", target_dataset="was_myamp_eam_raw", no_hit = drop]
filter _raw_log contains "Client-IP"
| alter
    log_timestamp = parse_timestamp("%Y-%m-%d %H:%M:%S",arrayindex(regextract(_raw_log,"(\d{4}-\d{2}-\d{2} \d{2}\:\d{2}\:\d{2}),\d{3}\s\|"),0))
| alter
    _time = if(log_timestamp != null, log_timestamp, _insert_time),
    header_fields = regexcapture(_raw_log,"^(?:.*? \|\|) *\[(?P<log_level>\w+) *\] \|\| (?P<source_file>.*?) \|\| Client-IP: (?P<src>\d{1,3}.\d{1,3}\.\d{1,3}\.\d{1,3}).*? \|\| X-Forwarded-Host: (?P<dest>.*?) \|\| WebContainer : (?P<WebContainer>.*?) \|\| (?P<source_class>.*?) \|\| UserId: \[ ?(?:(?P<user>.*?)|) ?\] \|\| X-Request-ID: (?P<request_id>.*?) \|\|"),
    header3 = regexcapture(_raw_log,"Code\":\"(?P<event_code>.*?)\",\"Description\":\"(?P<description>.*?)\"\},\"Source\":\"(?P<src>.*?)\".*?Type\"\:\"(?P<type>.*?)\""),
    event = regexcapture(_raw_log,"X-Request-ID: .*? \|\| (?P<event_id>\d+.*?) \- (?P<signature>.*?) \|\|END_OF_MESSAGE\|\|"),
    c_ip = arrayindex(regextract(_raw_log,"^(?:[^ \n]* ){9}(?P<c_ip>[^,]+)"),0),
    SocketException = arrayindex(regextract(_raw_log,"SocketException: (.*?)\n"),0),
    ResourceAccessException = arrayindex(regextract(_raw_log,"ResourceAccessException: (.*?):\s"),0),
    CertPathValidatorException = arrayindex(regextract(_raw_log,"CertPathValidatorException: (.*?);"),0),
    
    status = arrayindex(regextract(_raw_log,"HttpStatus:\s(\d{3}.*?),"),0),
    status2 = arrayindex(regextract(_raw_log,"returned with response:\s+<(\d{3}.*?)\s"),0),
    url = arrayindex(regextract(_raw_log,"163 - Invoking get customer profile for endpoint : (.*?)\s"),0),
    response_time = arrayindex(regextract(_raw_log,"After\s(\d+)\smilliseconds"),0),
    user_id = arrayindex(regextract(_raw_log,"UserID\":\"([^\"]+)"),0),
    PartyKey = arrayindex(regextract(_raw_log,"PartyKey\":\"([^\"]+)"),0),
    dvc = arrayindex(regextract(_raw_log,"DeviceId\":\"([^\"]+)"),0),
    Country = arrayindex(regextract(_raw_log,"Country\":\"([^\"]+)"),0),
    channel = arrayindex(regextract(_raw_log,"ChannelID\":\"([^\"]+)"),0),
    message_correlation_id = arrayindex(regextract(_raw_log,"CorrelationID\":\"([^\"]+)"),0),
    EntityReference = arrayindex(regextract(_raw_log,"EntityReference\":\"([^\"]+)"),0),
    response_code = arrayindex(regextract(_raw_log,"Code\":\"([^\"]+)"),0),
    signature = arrayindex(regextract(_raw_log,"Description\":\"([^\"]+)"),0),
    app = arrayindex(regextract(_raw_log,"Source\":\"([^\"]+)"),0),
    was_server = arrayindex(regextract(_raw_log,"Server=\[([^\]]+)"),0),
    failedlogin = regexcapture(_raw_log,"(?P<signature_id>\d+) - (?P<signature>User not found|Invalid credentials supplied for user|The account is locked by user entering too many incorrect passwords|Blank or empty userid supplied): (?P<user>.*?) +\|\|"),
    source_file = header_fields -> source_file,
    dest = header_fields -> dest
;

[INGEST:vendor="was", product="myamp_audit", target_dataset="was_myamp_audit_raw", no_hit = drop]
filter _raw_log contains "Client"
| alter log_timestamp = parse_timestamp("%Y-%m-%d %H:%M:%S",arrayindex(regextract(_raw_log,"(\d{4}-\d{2}-\d{2} \d{2}\:\d{2}\:\d{2}),\d{3}\s\|"),0)) 
| alter 
    _time = if(log_timestamp != null, log_timestamp, _insert_time),
    client_ip = arrayindex(regextract(_raw_log,"Client-IP: ([^|]+)"),0),
    x_forwarded_host = arrayindex(regextract(_raw_log,"X-Forwarded-Host: ([^|]+)"),0),
    web_container = arrayindex(regextract(_raw_log,"WebContainer : (\d+)"),0),
    auditor = arrayindex(split(_raw_log,"||"),6),
    user_id = arrayindex(regextract(_raw_log,"UserId: \[(.*?)\]"),0),
    x_request_id = arrayindex(regextract(_raw_log,"X-Request-ID: ([^|]+)"),0),
    event_type = arrayindex(regextract(_raw_log,"Event: ([^,]+)"),0),
    reason = arrayindex(regextract(_raw_log,"Reason:([^,]+)"),0),
    scv_id = arrayindex(regextract(_raw_log,"Scvid: (\d+)"),0),
    ldap_object = arrayindex(regextract(_raw_log,"Ldap Object: (\w+{.+})"),0)
;


[INGEST:vendor="was", product="concept_services", target_dataset="was_concept_services_raw"]
alter
    log_timestamp = parse_timestamp("%Y-%m-%d %H:%M:%S",arrayindex(regextract(_raw_log,"(\d{4}-\d{2}-\d{2} \d{2}\:\d{2}\:\d{2}),\d{3}\s\|"),0))
| alter
    _time = if(log_timestamp != null, log_timestamp, _insert_time),
    log_level = arrayindex(split(_raw_log ,"||"),1),
    class = arrayindex(regextract(_raw_log,"Class=([^|]+)"),0),
    status = arrayindex(split(_raw_log ,"||"),3);


//North Eventlog log type parsing
[INGEST:vendor="amp", product="north", target_dataset="amp_north_raw", no_hit = keep]
alter array = split(_raw_log,"\",\"") 
| alter
 allfields = regexcapture(_raw_log,"\"(?P<UserAuditId>.*?)\"\,\"(?P<UserID>.*?)\"\,\"(?P<AuditType>.*?)\"\,\"(?P<IPAddress>.*?)\"\,\"(?P<Success>.*?)\"\,\"(?P<EffectiveDate>.*?)\"\,\"(?P<Message>.*?)\"\,\"(?P<ClientInformation>.*?)\"\,\"(?P<UserTokenId>.*?)\"\,\"(?P<SecurityTokenGUID>.*?)\"\,\"(?P<NorthDeviceToken>.*?)\"\,\"(?P<DeviceInformation>.*?)\""),
 AuditType = coalesce(arrayindex(array,2),allfields -> AuditType),
 ClientInformation = arrayindex(array,7),
 EffectiveDate = arrayindex(array,5),
 IPAddress = arrayindex(array,3),
 Message = arrayindex(array,6),
 NorthDeviceToken = arrayindex(array,10),
 Success = arrayindex(array,4),
 UserAuditId = arrayindex(array,0),
 UserAuditId = replace(UserAuditId,"\"",""),
 DeviceInformation = allfields -> DeviceInformation,
 DeviceInformation = replace(DeviceInformation,"\"",""),
 UserID = arrayindex(array,1),
 app = if(host contains "AMPWMPASP01V", "north", host contains "AMPWMPASPF01V", "north-nonprod", 1=1, "north"), 
 date = arrayindex(array,5),
 date_zone = "Local",
 reason = arrayindex(array,6),
 result = arrayindex(array,6),
 result_id = arrayindex(array,4),
 signature = arrayindex(array,2),
 src = IPAddress,
 src_ip = IPAddress,
 src_user = arrayindex(array,1),
 src_user_name = arrayindex(array,1),
 user = arrayindex(array,1),
 vendor_product = "north"
| alter
 date_round_to_second = arrayindex(split(date,"."),0)
|alter 
 date_hour = extract_time(parse_timestamp("%Y-%m-%d %H:%M:%S",date_round_to_second,"Australia/Sydney"),"HOUR"),
 date_mday = extract_time(parse_timestamp("%Y-%m-%d %H:%M:%S",date_round_to_second,"Australia/Sydney"),"DAY"),
 date_minute = extract_time(parse_timestamp("%Y-%m-%d %H:%M:%S",date_round_to_second,"Australia/Sydney"),"MINUTE"),
 date_month = extract_time(parse_timestamp("%Y-%m-%d %H:%M:%S",date_round_to_second,"Australia/Sydney"),"MONTH"),
 date_second = extract_time(parse_timestamp("%Y-%m-%d %H:%M:%S",date_round_to_second,"Australia/Sydney"),"SECOND"),
 date_wday = extract_time(parse_timestamp("%Y-%m-%d %H:%M:%S",date_round_to_second,"Australia/Sydney"),"DAYOFYEAR"),
 date_year = extract_time(parse_timestamp("%Y-%m-%d %H:%M:%S",date_round_to_second,"Australia/Sydney"),"YEAR")
 | alter 
  action = if(Success="Y" AND AuditType="XSS", "allowed", Success="N" AND AuditType="XSS", "blocked", AuditType="ADV2FACAM", "updated", AuditType="ADV2FACCP", "updated", AuditType="CUSTOM", "updated", AuditType="PASSRESET", "modified", Success="Y", "success", Success="N", "failure", 1=1, "error"), 
  reason = Message,
  dest = if(IPAddress contains "10.", "10.168.177.42", 1=1, "3.104.85.133"),
 status = if(Success = "Y","success","failure"), 
 tag_action = if(Success = "Y","success","failure"), 
 change_type = if(AuditType = "PASSRESET","Password",""), 
 command = if(AuditType = "PASSRESET","PASSRESET",""),
 cvcv = arrayindex(regextract(ClientInformation , "cvcv=(\d+)"),0),
 smf = arrayindex(regextract(ClientInformation , "smf=(\d+)"),0), 
 UserAgent = if(UserAgent!=null, UserAgent, ClientInformation),
 UserHostAddress = if(ClientInformation contains "UserHostAddress",arrayindex(regextract(ClientInformation , "UserHostAddress: (\d+.\d+.\d+.\d+)"),0),""),
 XForwardedFor = if(ClientInformation contains "X-Forwarded-For",arrayindex(regextract(ClientInformation , "X-Forwarded-For: (\d+.\d+.\d+.\d+)"),0),"")
;


[INGEST:vendor="msft", product="O365 Azure AD", target_dataset="msft_o365_azure_ad_raw"]
alter signature_id = if(PolicyId !=null and Operation IN ("AlertEntityGenerated", "AlertTriggered", "AlertUpdated") and Workload="SecurityComplianceCenter", PolicyId) ;

[INGEST:vendor="trust", product="one", target_dataset="trust_one_raw"]
alter
    log_timestamp = parse_timestamp("%d/%m/%Y %H:%M:%S",arrayindex(regextract(_raw_log,"(\d{2}\/\d{2}\/\d{4} \d{2}\:\d{2}\:\d{2})"),0))
| alter
    _time = if(log_timestamp != null, log_timestamp , _insert_time),
    server = arrayindex(split(_raw_log," "),0),
    message = arrayindex(regextract(_raw_log,"\w+\s(.+)\s\d{2}\/\d{2}\/"),0),
    user = arrayindex(regextract(_raw_log,"[^\s]+@[^\d\s]+"),0);



[INGEST:vendor="Aruba_Networks", product="ClearPass", target_dataset="aruba_networks_clearpass_raw", no_hit = keep]
alter
    event_time = parse_timestamp("%b %d %Y %H:%M:%S", arrayindex(regextract(_raw_log,"(\w{3} \d{2} \d{4} \d{2}\:\d{2}\:\d{2})"),0),"Australia/Sydney")
| alter 
   _time = if(event_time != null, event_time, _insert_time),
   cef_version = arrayindex(regextract(_raw_log,"CEF\:(\d)"),0),
   clearpass_device_ip = arrayindex(regextract(_raw_log,"\w{3} \d{2} \d{4} \d{2}\:\d{2}\:\d{2} (\d+\.\d+\.\d+\.\d+)"),0),
   audit_apt = arrayindex(regextract(_raw_log,"audit_apt=([^=]+)\s\w+="),0),
   type = arrayindex(regextract(_raw_log,"\stype=([^=]+)\s\w+="),0),
   fname = arrayindex(regextract(_raw_log,"fname=([^=]+)\s\w+="),0),
   acct_output_packets = arrayindex(regextract(_raw_log,"acct_output_packets=([^=]+)\s\w+="),0),
   nas_port_type = arrayindex(regextract(_raw_log,"nas_port_type=([^=]+)\s\w+="),0),
   nas_port = arrayindex(regextract(_raw_log,"nas_port=([^=]+)\s\w+="),0),
   act = arrayindex(regextract(_raw_log,"act=([^=]+)\s\w+="),0),
   monitor_mode = arrayindex(regextract(_raw_log,"monitor_mode=([^=]+)\s\w+="),0),
   write_timestamp = arrayindex(regextract(_raw_log,"write_timestamp=([^=]+)\s\w+="),0),
   action_key = arrayindex(regextract(_raw_log,"action_key=([^=]+)\s\w+="),0),
   rt = arrayindex(regextract(_raw_log,"rt=([^=]+)\s\w+="),0),
   error_code = arrayindex(regextract(_raw_log,"error_code=([^=]+)\s\w+="),0),
   auth_method = arrayindex(regextract(_raw_log,"auth_method=([^=]+)\s\w+="),0),
   req_source = arrayindex(regextract(_raw_log,"req_source=([^=]+)\s\w+="),0),
   device = arrayindex(regextract(_raw_log,"device=([^=]+)\s\w+="),0),
   attr_name = arrayindex(regextract(_raw_log,"attr_name=([^=]+)\s\w+="),0),
   `filter` = arrayindex(regextract(_raw_log,"filter=([^=]+)\s\w+="),0),
   service_type = arrayindex(regextract(_raw_log,"service_type=([^=]+)\s\w+="),0),
   acct_input_octets = arrayindex(regextract(_raw_log,"acct_input_octets=([^=]+)\s\w+="),0),
   roles = arrayindex(regextract(_raw_log,"roles=([^=]+)\s\w+="),0),
   session_id = arrayindex(regextract(_raw_log,"session_id=([^=]+)\s\w+="),0),
   cat = arrayindex(regextract(_raw_log,"cat=([^=]+)\s\w+="),0),
   seq_num = arrayindex(regextract(_raw_log,"seq_num=([^=]+)\s\w+="),0),
   acct_output_octets = arrayindex(regextract(_raw_log,"acct_output_octets=([^=]+)\s\w+="),0),
   user_name = arrayindex(regextract(_raw_log,"user_name=([^=]+)\s\w+="),0),
   login_status = arrayindex(regextract(_raw_log,"login_status=([^=]+)\s\w+="),0),
   service_name = arrayindex(regextract(_raw_log,"service_name=([^=]+)\s\w+="),0),
   timestamp = arrayindex(regextract(_raw_log,"timestamp=([^=]+)\s\w+="),0),
   mac_address = arrayindex(regextract(_raw_log,"mac_address=([^=]+)\s\w+="),0),
   id = arrayindex(regextract(_raw_log,"id=([^=]+)\s\w+="),0),
   category = arrayindex(regextract(_raw_log,"category=([^=]+)\s\w+="),0),
   request_status = arrayindex(regextract(_raw_log,"request_status=([^=]+)\s\w+="),0),
   acct_input_packets = arrayindex(regextract(_raw_log,"acct_input_packets=([^=]+)\s\w+="),0),
   acct_terminate_cause = arrayindex(regextract(_raw_log,"acct_terminate_cause=([^=]+)\s\w+="),0),
   alert = arrayindex(regextract(_raw_log,"alert=([^=]+)\s\w+="),0),
   ip_address = arrayindex(regextract(_raw_log,"ip_address=([^=]+)\s\w+="),0),
   calling_station_id = arrayindex(regextract(_raw_log,"calling_station_id=([^=]+)\s\w+="),0),
   end_host_id = arrayindex(regextract(_raw_log,"end_host_id=([^=]+)\s\w+="),0),
   acct_session_id = arrayindex(regextract(_raw_log,"acct_session_id=([^=]+)\s\w+="),0),
   called_station_id = arrayindex(regextract(_raw_log,"called_station_id=([^=]+)\s\w+="),0),
   CN = arrayindex(regextract(_raw_log,"CN=([^=]+)\s\w+="),0),
   alerts_present = arrayindex(regextract(_raw_log,"alerts_present=([^=]+)\s\w+="),0),
   auth_source = arrayindex(regextract(_raw_log,"auth_source=([^=]+)\s\w+="),0),
   event_source = arrayindex(regextract(_raw_log,"event_source=([^=]+)\s\w+="),0),
   ip = arrayindex(regextract(_raw_log,"ip=([^=]+)\s\w+="),0),
   auth_type = arrayindex(regextract(_raw_log,"auth_type=([^=]+)\s\w+="),0),
   conn_status = arrayindex(regextract(_raw_log,"conn_status=([^=]+)\s\w+="),0),
   acct_delay_time = arrayindex(regextract(_raw_log,"acct_delay_time=([^=]+)\s\w+="),0),
   nas_ip = arrayindex(regextract(_raw_log,"nas_ip=([^=]+)\s\w+="),0),
   duser = arrayindex(regextract(_raw_log,"duser=([^=]+)\s\w+="),0),
   level = arrayindex(regextract(_raw_log,"level=([^=]+)\s\w+="),0),
   spt = arrayindex(regextract(_raw_log,"spt=([^=]+)\s\w+="),0),
   attributes = arrayindex(regextract(_raw_log,"attributes=([^=]+)\s\w+="),0),
   description = arrayindex(regextract(_raw_log,"description=([^=]+)\s\w+="),0),
   enf_profiles = arrayindex(regextract(_raw_log,"enf_profiles=([^=]+)\s\w+="),0),
   acct_authentic = arrayindex(regextract(_raw_log,"acct_authentic=([^=]+)\s\w+="),0),
   emailAddress = arrayindex(regextract(_raw_log,"emailAddress=([^=]+)\s\w+="),0),
   dvc = arrayindex(regextract(_raw_log,"dvc=([^=]+)\s\w+="),0),
   NAD = arrayindex(regextract(_raw_log,"NAD=([^=]+)\s\w+="),0),
   attr_value = arrayindex(regextract(_raw_log,"attr_value=([^=]+)\s\w+="),0),
   acct_session_time = arrayindex(regextract(_raw_log,"acct_session_time=([^=]+)\s\w+="),0),
   acct_status_type = arrayindex(regextract(_raw_log,"acct_status_type=([^=]+)\s\w+="),0);


[INGEST:vendor="aws", product="guardduty", target_dataset="aws_guardduty_raw"]
alter 
  resource_accessKeyDetails_accessKeyId = json_extract(resource, "$.accessKeyDetails.accessKeyId"),
  resource_accessKeyDetails_principalId = json_extract(resource, "$.accessKeyDetails.principalId"),
  resource_accessKeyDetails_userName = json_extract(resource, "$.accessKeyDetails.userName"),
  resource_accessKeyDetails_userType = json_extract(resource, "$.accessKeyDetails.userType"),
  resource_containerDetails_containerRuntime = json_extract(resource, "$.containerDetails.containerRuntime"),
  resource_containerDetails_id = json_extract(resource, "$.containerDetails.id"),
  resource_containerDetails_image = json_extract(resource, "$.containerDetails.image"),
  resource_containerDetails_imagePrefix = json_extract(resource, "$.containerDetails.imagePrefix"),
  resource_containerDetails_imageUid = json_extract(resource, "$.containerDetails.imageUid"),
  resource_containerDetails_name = json_extract(resource, "$.containerDetails.name"),
  resource_containerDetails_securityContext_privileged = json_extract(resource, "$.containerDetails.securityContext.privileged"),
  resource_containerDetails_volumeMounts_mountPath = json_extract(resource, "$.containerDetails.volumeMounts.mountPath"),
  resource_containerDetails_volumeMounts_name = json_extract(resource, "$.containerDetails.volumeMounts.name"),
  resource_ebsVolumeDetails_scannedVolumeDetails_deviceName = json_extract(resource, "$.ebsVolumeDetails.scannedVolumeDetails.deviceName"),
  resource_ebsVolumeDetails_scannedVolumeDetails_encryptionType = json_extract(resource, "$.ebsVolumeDetails.scannedVolumeDetails.encryptionType"),
  resource_ebsVolumeDetails_scannedVolumeDetails_kmsKeyArn = json_extract(resource, "$.ebsVolumeDetails.scannedVolumeDetails.kmsKeyArn"),
  resource_ebsVolumeDetails_scannedVolumeDetails_snapshotArn = json_extract(resource, "$.ebsVolumeDetails.scannedVolumeDetails.snapshotArn"),
  resource_ebsVolumeDetails_scannedVolumeDetails_volumeArn = json_extract(resource, "$.ebsVolumeDetails.scannedVolumeDetails.volumeArn"),
  resource_ebsVolumeDetails_scannedVolumeDetails_volumeSizeInGB = json_extract(resource, "$.ebsVolumeDetails.scannedVolumeDetails.volumeSizeInGB"),
  resource_ebsVolumeDetails_scannedVolumeDetails_volumeType = json_extract(resource, "$.ebsVolumeDetails.scannedVolumeDetails.volumeType"),
  resource_ebsVolumeDetails_skippedVolumeDetails = json_extract(resource, "$.ebsVolumeDetails.skippedVolumeDetails"),
  resource_ebsVolumeDetails_skippedVolumeDetails_deviceName = json_extract(resource, "$.ebsVolumeDetails.skippedVolumeDetails.deviceName"),
  resource_ebsVolumeDetails_skippedVolumeDetails_encryptionType = json_extract(resource, "$.ebsVolumeDetails.skippedVolumeDetails.encryptionType"),
  resource_ebsVolumeDetails_skippedVolumeDetails_kmsKeyArn = json_extract(resource, "$.ebsVolumeDetails.skippedVolumeDetails.kmsKeyArn"),
  resource_ebsVolumeDetails_skippedVolumeDetails_snapshotArn = json_extract(resource, "$.ebsVolumeDetails.skippedVolumeDetails.snapshotArn"),
  resource_ebsVolumeDetails_skippedVolumeDetails_volumeArn = json_extract(resource, "$.ebsVolumeDetails.skippedVolumeDetails.volumeArn"),
  resource_ebsVolumeDetails_skippedVolumeDetails_volumeSizeInGB = json_extract(resource, "$.ebsVolumeDetails.skippedVolumeDetails.volumeSizeInGB"),
  resource_ebsVolumeDetails_skippedVolumeDetails_volumeType = json_extract(resource, "$.ebsVolumeDetails.skippedVolumeDetails.volumeType"),
  resource_ecsClusterDetails_activeServicesCount = json_extract(resource, "$.ecsClusterDetails.activeServicesCount"),
  resource_ecsClusterDetails_arn = json_extract(resource, "$.ecsClusterDetails.arn"),
  resource_ecsClusterDetails_name = json_extract(resource, "$.ecsClusterDetails.name"),
  resource_ecsClusterDetails_registeredContainerInstancesCount = json_extract(resource, "$.ecsClusterDetails.registeredContainerInstancesCount"),
  resource_ecsClusterDetails_runningTasksCount = json_extract(resource, "$.ecsClusterDetails.runningTasksCount"),
  resource_ecsClusterDetails_status = json_extract(resource, "$.ecsClusterDetails.status"),
  resource_ecsClusterDetails_tags_key = json_extract(resource, "$.ecsClusterDetails.tags.key"),
  resource_ecsClusterDetails_tags_value = json_extract(resource, "$.ecsClusterDetails.tags.value"),
  resource_ecsClusterDetails_taskDetails_arn = json_extract(resource, "$.ecsClusterDetails.taskDetails.arn"),
  resource_ecsClusterDetails_taskDetails_containers_containerRuntime = json_extract(resource, "$.ecsClusterDetails.taskDetails.containers.containerRuntime"),
  resource_ecsClusterDetails_taskDetails_containers_id = json_extract(resource, "$.ecsClusterDetails.taskDetails.containers.id"),
  resource_ecsClusterDetails_taskDetails_containers_image = json_extract(resource, "$.ecsClusterDetails.taskDetails.containers.image"),
  resource_ecsClusterDetails_taskDetails_containers_imagePrefix = json_extract(resource, "$.ecsClusterDetails.taskDetails.containers.imagePrefix"),
  resource_ecsClusterDetails_taskDetails_containers_imageUid = json_extract(resource, "$.ecsClusterDetails.taskDetails.containers.imageUid"),
  resource_ecsClusterDetails_taskDetails_containers_name = json_extract(resource, "$.ecsClusterDetails.taskDetails.containers.name"),
  resource_ecsClusterDetails_taskDetails_containers_securityContext_privileged = json_extract(resource, "$.ecsClusterDetails.taskDetails.containers.securityContext.privileged"),
  resource_ecsClusterDetails_taskDetails_containers_volumeMounts_mountPath = json_extract(resource, "$.ecsClusterDetails.taskDetails.containers.volumeMounts.mountPath"),
  resource_ecsClusterDetails_taskDetails_containers_volumeMounts_name = json_extract(resource, "$.ecsClusterDetails.taskDetails.containers.volumeMounts.name"),
  resource_ecsClusterDetails_taskDetails_createdAt = json_extract(resource, "$.ecsClusterDetails.taskDetails.createdAt"),
  resource_ecsClusterDetails_taskDetails_definitionArn = json_extract(resource, "$.ecsClusterDetails.taskDetails.definitionArn"),
  resource_ecsClusterDetails_taskDetails_group = json_extract(resource, "$.ecsClusterDetails.taskDetails.group"),
  resource_ecsClusterDetails_taskDetails_launchType = json_extract(resource, "$.ecsClusterDetails.taskDetails.launchType"),
  resource_ecsClusterDetails_taskDetails_startedAt = json_extract(resource, "$.ecsClusterDetails.taskDetails.startedAt"),
  resource_ecsClusterDetails_taskDetails_startedBy = json_extract(resource, "$.ecsClusterDetails.taskDetails.startedBy"),
  resource_ecsClusterDetails_taskDetails_version = json_extract(resource, "$.ecsClusterDetails.taskDetails.version"),
  resource_ecsClusterDetails_taskDetails_volumes_hostPath_path = json_extract(resource, "$.ecsClusterDetails.taskDetails.volumes.hostPath.path"),
  resource_ecsClusterDetails_taskDetails_volumes_name = json_extract(resource, "$.ecsClusterDetails.taskDetails.volumes.name"),
  resource_eksClusterDetails_arn = json_extract(resource, "$.eksClusterDetails.arn"),
  resource_eksClusterDetails_createdAt = json_extract(resource, "$.eksClusterDetails.createdAt"),
  resource_eksClusterDetails_name = json_extract(resource, "$.eksClusterDetails.name"),
  resource_eksClusterDetails_status = json_extract(resource, "$.eksClusterDetails.status"),
  resource_eksClusterDetails_tags_key = json_extract(resource, "$.eksClusterDetails.tags.key"),
  resource_eksClusterDetails_tags_value = json_extract(resource, "$.eksClusterDetails.tags.value"),
  resource_eksClusterDetails_vpcId = json_extract(resource, "$.eksClusterDetails.vpcId"),
  resource_instanceDetails_availabilityZone = json_extract(resource, "$.instanceDetails.availabilityZone"),
  resource_instanceDetails_iamInstanceProfile = json_extract(resource, "$.instanceDetails.iamInstanceProfile"),
  resource_instanceDetails_iamInstanceProfile_arn = json_extract(resource, "$.instanceDetails.iamInstanceProfile.arn"),
  resource_instanceDetails_iamInstanceProfile_id = json_extract(resource, "$.instanceDetails.iamInstanceProfile.id"),
  resource_instanceDetails_imageDescription = json_extract(resource, "$.instanceDetails.imageDescription"),
  resource_instanceDetails_imageId = json_extract(resource, "$.instanceDetails.imageId"),
  resource_instanceDetails_instanceId = json_extract(resource, "$.instanceDetails.instanceId"),
  resource_instanceDetails_instanceState = json_extract(resource, "$.instanceDetails.instanceState"),
  resource_instanceDetails_instanceType = json_extract(resource, "$.instanceDetails.instanceType"),
  resource_instanceDetails_launchTime = json_extract(resource, "$.instanceDetails.launchTime"),
  resource_instanceDetails_networkInterfaces_networkInterfaceId = json_extract(resource, "$.instanceDetails.networkInterfaces[0].networkInterfaceId"),
  resource_instanceDetails_networkInterfaces_ownerId = json_extract(resource, "$.instanceDetails.networkInterfaces[0].ownerId"),
  resource_instanceDetails_networkInterfaces_privateDnsName = json_extract(resource, "$.instanceDetails.networkInterfaces[0].privateDnsName"),
  resource_instanceDetails_networkInterfaces_privateIpAddress = json_extract(resource, "$.instanceDetails.networkInterfaces[0].privateIpAddress"),
  resource_instanceDetails_networkInterfaces_privateIpAddresses_privateDnsName = json_extract(resource, "$.instanceDetails.networkInterfaces[0].privateIpAddresses.privateDnsName"),
  resource_instanceDetails_networkInterfaces_privateIpAddresses_privateIpAddress = json_extract(resource, "$.instanceDetails.networkInterfaces[0].privateIpAddresses.privateIpAddress"),
  resource_instanceDetails_networkInterfaces_publicDnsName = json_extract(resource, "$.instanceDetails.networkInterfaces[0].publicDnsName"),
  resource_instanceDetails_networkInterfaces_publicIp = json_extract(resource, "$.instanceDetails.networkInterfaces[0].publicIp"),
  resource_instanceDetails_networkInterfaces_securityGroups_groupId = json_extract(resource, "$.instanceDetails.networkInterfaces[0].securityGroups.groupId"),
  resource_instanceDetails_networkInterfaces_securityGroups_groupName = json_extract(resource, "$.instanceDetails.networkInterfaces[0].securityGroups.groupName"),
  resource_instanceDetails_networkInterfaces_subnetId = json_extract(resource, "$.instanceDetails.networkInterfaces[0].subnetId"),
  resource_instanceDetails_networkInterfaces_vpcId = json_extract(resource, "$.instanceDetails.networkInterfaces[0].vpcId"),
  resource_instanceDetails_outpostArn = json_extract(resource, "$.instanceDetails.outpostArn"),
  resource_instanceDetails_platform = json_extract(resource, "$.instanceDetails.platform"),
  resource_instanceDetails_productCodes_productCodeId = json_extract(resource, "$.instanceDetails.productCodes.productCodeId"),
  resource_instanceDetails_productCodes_productCodeType = json_extract(resource, "$.instanceDetails.productCodes.productCodeType"),
  resource_instanceDetails_tags_key = arraymap(resource -> instanceDetails.tags[], json_extract_scalar("@element", "$.key")),
  resource_instanceDetails_tags_value = arraymap(resource -> instanceDetails.tags[], json_extract_scalar("@element", "$.value")),
  resource_kubernetesDetails_kubernetesUserDetails_groups = json_extract(resource, "$.kubernetesDetails.kubernetesUserDetails.groups"),
  resource_kubernetesDetails_kubernetesUserDetails_impersonatedUser_groups = json_extract(resource, "$.kubernetesDetails.kubernetesUserDetails.impersonatedUser.groups"),
  resource_kubernetesDetails_kubernetesUserDetails_impersonatedUser_username = json_extract(resource, "$.kubernetesDetails.kubernetesUserDetails.impersonatedUser.username"),
  resource_kubernetesDetails_kubernetesUserDetails_sessionName = json_extract(resource, "$.kubernetesDetails.kubernetesUserDetails.sessionName"),
  resource_kubernetesDetails_kubernetesUserDetails_uid = json_extract(resource, "$.kubernetesDetails.kubernetesUserDetails.uid"),
  resource_kubernetesDetails_kubernetesUserDetails_username = json_extract(resource, "$.kubernetesDetails.kubernetesUserDetails.username"),
  resource_kubernetesDetails_kubernetesWorkloadDetails = json_extract(resource, "$.kubernetesDetails.kubernetesWorkloadDetails"),
  resource_kubernetesDetails_kubernetesWorkloadDetails_containers_image = json_extract(resource, "$.kubernetesDetails.kubernetesWorkloadDetails.containers.image"),
  resource_kubernetesDetails_kubernetesWorkloadDetails_containers_imagePrefix = json_extract(resource, "$.kubernetesDetails.kubernetesWorkloadDetails.containers.imagePrefix"),
  resource_kubernetesDetails_kubernetesWorkloadDetails_containers_name = json_extract(resource, "$.kubernetesDetails.kubernetesWorkloadDetails.containers.name"),
  resource_kubernetesDetails_kubernetesWorkloadDetails_containers_securityContext_privileged = json_extract(resource, "$.kubernetesDetails.kubernetesWorkloadDetails.containers.securityContext.privileged"),
  resource_kubernetesDetails_kubernetesWorkloadDetails_containers_volumeMounts_mountPath = json_extract(resource, "$.kubernetesDetails.kubernetesWorkloadDetails.containers.volumeMounts.mountPath"),
  resource_kubernetesDetails_kubernetesWorkloadDetails_containers_volumeMounts_name = json_extract(resource, "$.kubernetesDetails.kubernetesWorkloadDetails.containers.volumeMounts.name"),
  resource_kubernetesDetails_kubernetesWorkloadDetails_creationTimestamp = json_extract(resource, "$.kubernetesDetails.kubernetesWorkloadDetails.creationTimestamp"),
  resource_kubernetesDetails_kubernetesWorkloadDetails_hostIPC = json_extract(resource, "$.kubernetesDetails.kubernetesWorkloadDetails.hostIPC"),
  resource_kubernetesDetails_kubernetesWorkloadDetails_hostNetwork = json_extract(resource, "$.kubernetesDetails.kubernetesWorkloadDetails.hostNetwork"),
  resource_kubernetesDetails_kubernetesWorkloadDetails_hostPID = json_extract(resource, "$.kubernetesDetails.kubernetesWorkloadDetails.hostPID"),
  resource_kubernetesDetails_kubernetesWorkloadDetails_labels = json_extract(resource, "$.kubernetesDetails.kubernetesWorkloadDetails.labels"),
  resource_kubernetesDetails_kubernetesWorkloadDetails_name = json_extract(resource, "$.kubernetesDetails.kubernetesWorkloadDetails.name"),
  resource_kubernetesDetails_kubernetesWorkloadDetails_namespace = json_extract(resource, "$.kubernetesDetails.kubernetesWorkloadDetails.namespace"),
  resource_kubernetesDetails_kubernetesWorkloadDetails_podSecurityContext = json_extract(resource, "$.kubernetesDetails.kubernetesWorkloadDetails.podSecurityContext"),
  resource_kubernetesDetails_kubernetesWorkloadDetails_selector = json_extract(resource, "$.kubernetesDetails.kubernetesWorkloadDetails.selector"),
  resource_kubernetesDetails_kubernetesWorkloadDetails_serviceAccountName = json_extract(resource, "$.kubernetesDetails.kubernetesWorkloadDetails.serviceAccountName"),
  resource_kubernetesDetails_kubernetesWorkloadDetails_type = json_extract(resource, "$.kubernetesDetails.kubernetesWorkloadDetails.type"),
  resource_kubernetesDetails_kubernetesWorkloadDetails_uid = json_extract(resource, "$.kubernetesDetails.kubernetesWorkloadDetails.uid"),
  resource_kubernetesDetails_kubernetesWorkloadDetails_volumes_hostPath_path = json_extract(resource, "$.kubernetesDetails.kubernetesWorkloadDetails.volumes.hostPath.path"),
  resource_kubernetesDetails_kubernetesWorkloadDetails_volumes_name = json_extract(resource, "$.kubernetesDetails.kubernetesWorkloadDetails.volumes.name"),
  resource_lambdaDetails_description = json_extract(resource, "$.lambdaDetails.description"),
  resource_lambdaDetails_functionArn = json_extract(resource, "$.lambdaDetails.functionArn"),
  resource_lambdaDetails_functionName = json_extract(resource, "$.lambdaDetails.functionName"),
  resource_lambdaDetails_functionVersion = json_extract(resource, "$.lambdaDetails.functionVersion"),
  resource_lambdaDetails_lastModifiedAt = json_extract(resource, "$.lambdaDetails.lastModifiedAt"),
  resource_lambdaDetails_revisionId = json_extract(resource, "$.lambdaDetails.revisionId"),
  resource_lambdaDetails_role = json_extract(resource, "$.lambdaDetails.role"),
  resource_lambdaDetails_tags_key = json_extract(resource, "$.lambdaDetails.tags.key"),
  resource_lambdaDetails_tags_value = json_extract(resource, "$.lambdaDetails.tags.value"),
  resource_lambdaDetails_vpcConfig_securityGroups_groupId = json_extract(resource, "$.lambdaDetails.vpcConfig.securityGroups.groupId"),
  resource_lambdaDetails_vpcConfig_securityGroups_groupName = json_extract(resource, "$.lambdaDetails.vpcConfig.securityGroups.groupName"),
  resource_lambdaDetails_vpcConfig_subnetIds = json_extract(resource, "$.lambdaDetails.vpcConfig.subnetIds"),
  resource_lambdaDetails_vpcConfig_vpcId = json_extract(resource, "$.lambdaDetails.vpcConfig.vpcId"),
  resource_rdsDbInstanceDetails_dbClusterIdentifier = json_extract(resource, "$.rdsDbInstanceDetails.dbClusterIdentifier"),
  resource_rdsDbInstanceDetails_dbInstanceArn = json_extract(resource, "$.rdsDbInstanceDetails.dbInstanceArn"),
  resource_rdsDbInstanceDetails_dbInstanceIdentifier = json_extract(resource, "$.rdsDbInstanceDetails.dbInstanceIdentifier"),
  resource_rdsDbInstanceDetails_engine = json_extract(resource, "$.rdsDbInstanceDetails.engine"),
  resource_rdsDbInstanceDetails_engineVersion = json_extract(resource, "$.rdsDbInstanceDetails.engineVersion"),
  resource_rdsDbInstanceDetails_tags_key = json_extract(resource, "$.rdsDbInstanceDetails.tags.key"),
  resource_rdsDbInstanceDetails_tags_value = json_extract(resource, "$.rdsDbInstanceDetails.tags.value"),
  resource_rdsDbUserDetails_application = json_extract(resource, "$.rdsDbUserDetails.application"),
  resource_rdsDbUserDetails_authMethod = json_extract(resource, "$.rdsDbUserDetails.authMethod"),
  resource_rdsDbUserDetails_database = json_extract(resource, "$.rdsDbUserDetails.database"),
  resource_rdsDbUserDetails_ssl = json_extract(resource, "$.rdsDbUserDetails.ssl"),
  resource_rdsDbUserDetails_user = json_extract(resource, "$.rdsDbUserDetails.user"),
  resource_resourceType = json_extract(resource, "$.$Type"),
  resource_s3BucketDetails_arn = json_extract(resource, "$.s3BucketDetails[0].arn"),
  resource_s3BucketDetails_createdAt = json_extract(resource, "$.s3BucketDetails[0].createdAt"),
  resource_s3BucketDetails_defaultServerSideEncryption = json_extract(resource, "$.s3BucketDetails[0].defaultServerSideEncryption"),
  resource_s3BucketDetails_defaultServerSideEncryption_encryptionType = json_extract(resource, "$.s3BucketDetails[0].defaultServerSideEncryption.encryptionType"),
  resource_s3BucketDetails_defaultServerSideEncryption_kmsMasterKeyArn = json_extract(resource, "$.s3BucketDetails[0].defaultServerSideEncryption.kmsMasterKeyArn"),
  resource_s3BucketDetails_name = json_extract(resource, "$.s3BucketDetails[0].name"),
  resource_s3BucketDetails_owner_id = json_extract(resource, "$.s3BucketDetails[0].owner.id"),
  resource_s3BucketDetails_publicAccess_effectivePermission = json_extract_scalar(resource, "$.s3BucketDetails[0].publicAccess.effectivePermission"),
  resource_s3BucketDetails_publicAccess_permissionConfiguration_accountLevelPermissions_blockPublicAccess_blockPublicAcls = json_extract(resource, "$.s3BucketDetails[0].publicAccess.permissionConfiguration.accountLevelPermissions.blockPublicAccess.blockPublicAcls"),
  resource_s3BucketDetails_publicAccess_permissionConfiguration_accountLevelPermissions_blockPublicAccess_blockPublicPolicy = json_extract(resource, "$.s3BucketDetails[0].publicAccess.permissionConfiguration.accountLevelPermissions.blockPublicAccess.blockPublicPolicy"),
  resource_s3BucketDetails_publicAccess_permissionConfiguration_accountLevelPermissions_blockPublicAccess_ignorePublicAcls = json_extract(resource, "$.s3BucketDetails[0].publicAccess.permissionConfiguration.accountLevelPermissions.blockPublicAccess.ignorePublicAcls"),
  resource_s3BucketDetails_publicAccess_permissionConfiguration_accountLevelPermissions_blockPublicAccess_restrictPublicBuckets = json_extract(resource, "$.s3BucketDetails[0].publicAccess.permissionConfiguration.accountLevelPermissions.blockPublicAccess.restrictPublicBuckets"),
  resource_s3BucketDetails_publicAccess_permissionConfiguration_bucketLevelPermissions_accessControlList = json_extract(resource, "$.s3BucketDetails[0].publicAccess.permissionConfiguration.bucketLevelPermissions.accessControlList"),
  resource_s3BucketDetails_publicAccess_permissionConfiguration_bucketLevelPermissions_accessControlList_allowsPublicfcloudtraReadAccess = json_extract(resource, "$.s3BucketDetails[0].publicAccess.permissionConfiguration.bucketLevelPermissions.accessControlList.allowsPublicReadAccess"),
  resource_s3BucketDetails_publicAccess_permissionConfiguration_bucketLevelPermissions_accessControlList_allowsPublicWriteAccess = json_extract(resource, "$.s3BucketDetails[0].publicAccess.permissionConfiguration.bucketLevelPermissions.accessControlList.allowsPublicWriteAccess"),
  resource_s3BucketDetails_publicAccess_permissionConfiguration_bucketLevelPermissions_blockPublicAccess = json_extract(resource, "$.s3BucketDetails[0].publicAccess.permissionConfiguration.bucketLevelPermissions.blockPublicAccess"),
  resource_s3BucketDetails_publicAccess_permissionConfiguration_bucketLevelPermissions_blockPublicAccess_blockPublicAcls = json_extract(resource, "$.s3BucketDetails[0].publicAccess.permissionConfiguration.bucketLevelPermissions.blockPublicAccess.blockPublicAcls"),
  resource_s3BucketDetails_publicAccess_permissionConfiguration_bucketLevelPermissions_blockPublicAccess_blockPublicPolicy = json_extract(resource, "$.s3BucketDetails[0].publicAccess.permissionConfiguration.bucketLevelPermissions.blockPublicAccess.blockPublicPolicy"),
  resource_s3BucketDetails_publicAccess_permissionConfiguration_bucketLevelPermissions_blockPublicAccess_ignorePublicAcls = json_extract(resource, "$.s3BucketDetails[0].publicAccess.permissionConfiguration.bucketLevelPermissions.blockPublicAccess.ignorePublicAcls"),
  resource_s3BucketDetails_publicAccess_permissionConfiguration_bucketLevelPermissions_blockPublicAccess_restrictPublicBuckets = json_extract(resource, "$.s3BucketDetails[0].publicAccess.permissionConfiguration.bucketLevelPermissions.blockPublicAccess.restrictPublicBuckets"),
  resource_s3BucketDetails_publicAccess_permissionConfiguration_bucketLevelPermissions_bucketPolicy = json_extract(resource, "$.s3BucketDetails[0].publicAccess.permissionConfiguration.bucketLevelPermissions.bucketPolicy"),
  resource_s3BucketDetails_publicAccess_permissionConfiguration_bucketLevelPermissions_bucketPolicy_allowsPublicReadAccess = json_extract(resource, "$.s3BucketDetails[0].publicAccess.permissionConfiguration.bucketLevelPermissions.bucketPolicy.allowsPublicReadAccess"),
  resource_s3BucketDetails_publicAccess_permissionConfiguration_bucketLevelPermissions_bucketPolicy_allowsPublicWriteAccess = json_extract(resource, "$.s3BucketDetails[0].publicAccess.permissionConfiguration.bucketLevelPermissions.bucketPolicy.allowsPublicWriteAccess"),
  resource_s3BucketDetails_tags = json_extract(resource, "$.s3BucketDetails[0].tags"),
  resource_s3BucketDetails_tags_key = json_extract(resource, "$.s3BucketDetails[0].tags.key"),
  resource_s3BucketDetails_tags_value = json_extract(resource, "$.s3BucketDetails[0].tags.value"),
  resource_s3BucketDetails_type = json_extract(resource, "$.s3BucketDetails[0].type"),
  resource_s3BucketDetails_objectdetails_etag = json_extract_scalar(resource, "$.s3BucketDetails[0].s3ObjectDetails[0].eTag"), resource_s3BucketDetails_objectdetails_hash = json_extract_scalar(resource, "$.s3BucketDetails[0].s3ObjectDetails[0].hash"), resource_s3BucketDetails_objectdetails_key = json_extract_scalar(resource, "$.s3BucketDetails[0].s3ObjectDetails[0].key"), resource_s3BucketDetails_objectdetails_objectArn = json_extract_scalar(resource, "$.s3BucketDetails[0].s3ObjectDetails[0].objectArn"), resource_s3BucketDetails_objectdetails_versionId = json_extract_scalar(resource, "$.s3BucketDetails[0].s3ObjectDetails[0].versionId"),
  service_action_actionType = json_extract(service, "$.action.actionType"),
  service_action_awsApiCallAction_affectedResources_AWS__CloudTrail__Trail = replace(json_extract(service, "$.action.awsApiCallAction.affectedResources.AWS::EC2::Instance"), "\"", ""),
  service_action_awsApiCallAction_affectedResources_AWS__EC2__Instance = replace(json_extract(service, "$.action.awsApiCallAction.affectedResources.AWS::EC2::Instance"), "\"", ""),
  service_action_awsApiCallAction_affectedResources_AWS__S3__Bucket = replace(json_extract(service, "$.action.awsApiCallAction.affectedResources.AWS::S3::Bucket"), "\"", ""),
  service_action_awsApiCallAction_api = json_extract(service, "$.action.awsApiCallAction.api"),
  service_action_awsApiCallAction_callerType = json_extract(service, "$.action.awsApiCallAction.callerType"),
  service_action_awsApiCallAction_domainDetails_domain = json_extract(service, "$.action.awsApiCallAction.domainDetails.domain"),
  service_action_awsApiCallAction_errorCode = json_extract(service, "$.action.awsApiCallAction.errorCode"),
  service_action_awsApiCallAction_remoteAccountDetails_accountId = json_extract(service, "$.action.awsApiCallAction.remoteAccountDetails.accountId"),
  service_action_awsApiCallAction_remoteAccountDetails_affiliated = json_extract(service, "$.action.awsApiCallAction.remoteAccountDetails.affiliated"),
  service_action_awsApiCallAction_remoteIpDetails_city_cityName = json_extract(service, "$.action.awsApiCallAction.remoteIpDetails.city.cityName"),
  service_action_awsApiCallAction_remoteIpDetails_country_countryName = json_extract(service, "$.action.awsApiCallAction.remoteIpDetails.country.countryName"),
  service_action_awsApiCallAction_remoteIpDetails_geoLocation_lat = json_extract(service, "$.action.awsApiCallAction.remoteIpDetails.geoLocation.lat"),
  service_action_awsApiCallAction_remoteIpDetails_geoLocation_lon = json_extract(service, "$.action.awsApiCallAction.remoteIpDetails.geoLocation.lon"),
  service_action_awsApiCallAction_remoteIpDetails_ipAddressV4 = json_extract(service, "$.action.awsApiCallAction.remoteIpDetails.ipAddressV4"),
  service_action_awsApiCallAction_remoteIpDetails_ipAddressV6 = json_extract(service, "$.action.awsApiCallAction.remoteIpDetails.ipAddressV6"),
  service_action_awsApiCallAction_remoteIpDetails_organization_asn = json_extract(service, "$.action.awsApiCallAction.remoteIpDetails.organization.asn"),
  service_action_awsApiCallAction_remoteIpDetails_organization_asnOrg = json_extract(service, "$.action.awsApiCallAction.remoteIpDetails.organization.asnOrg"),
  service_action_awsApiCallAction_remoteIpDetails_organization_isp = json_extract(service, "$.action.awsApiCallAction.remoteIpDetails.organization.isp"),
  service_action_awsApiCallAction_remoteIpDetails_organization_org = json_extract(service, "$.action.awsApiCallAction.remoteIpDetails.organization.org"),
  service_action_awsApiCallAction_serviceName = json_extract(service, "$.action.awsApiCallAction.$Name"),
  service_action_dnsRequestAction_blocked = json_extract(service, "$.action.dnsRequestAction.blocked"),
  service_action_dnsRequestAction_domain = json_extract(service, "$.action.dnsRequestAction.domain"),
  service_action_dnsRequestAction_domainWithSuffix = json_extract(service, "$.action.dnsRequestAction.domainWithSuffix"),
  service_action_dnsRequestAction_protocol = json_extract(service, "$.action.dnsRequestAction.protocol"),
  service_action_kubernetesApiCallAction_namespace = json_extract(service, "$.action.kubernetesApiCallAction.namespace"),
  service_action_kubernetesApiCallAction_parameters = json_extract(service, "$.action.kubernetesApiCallAction.parameters"),
  service_action_kubernetesApiCallAction_remoteIpDetails_city_cityName = json_extract(service, "$.action.kubernetesApiCallAction.remoteIpDetails.city.cityName"),
  service_action_kubernetesApiCallAction_remoteIpDetails_country_countryName = json_extract(service, "$.action.kubernetesApiCallAction.remoteIpDetails.country.countryName"),
  service_action_kubernetesApiCallAction_remoteIpDetails_geoLocation_lat = json_extract(service, "$.action.kubernetesApiCallAction.remoteIpDetails.geoLocation.lat"),
  service_action_kubernetesApiCallAction_remoteIpDetails_geoLocation_lon = json_extract(service, "$.action.kubernetesApiCallAction.remoteIpDetails.geoLocation.lon"),
  service_action_kubernetesApiCallAction_remoteIpDetails_ipAddressV4 = json_extract(service, "$.action.kubernetesApiCallAction.remoteIpDetails.ipAddressV4"),
  service_action_kubernetesApiCallAction_remoteIpDetails_ipAddressV6 = json_extract(service, "$.action.kubernetesApiCallAction.remoteIpDetails.ipAddressV6"),
  service_action_kubernetesApiCallAction_remoteIpDetails_organization_asn = json_extract(service, "$.action.kubernetesApiCallAction.remoteIpDetails.organization.asn"),
  service_action_kubernetesApiCallAction_remoteIpDetails_organization_asnOrg = json_extract(service, "$.action.kubernetesApiCallAction.remoteIpDetails.organization.asnOrg"),
  service_action_kubernetesApiCallAction_remoteIpDetails_organization_isp = json_extract(service, "$.action.kubernetesApiCallAction.remoteIpDetails.organization.isp"),
  service_action_kubernetesApiCallAction_remoteIpDetails_organization_org = json_extract(service, "$.action.kubernetesApiCallAction.remoteIpDetails.organization.org"),
  service_action_kubernetesApiCallAction_requestUri = json_extract(service, "$.action.kubernetesApiCallAction.requestUri"),
  service_action_kubernetesApiCallAction_resource = json_extract(service, "$.action.kubernetesApiCallAction.resource"),
  service_action_kubernetesApiCallAction_resourceName = json_extract(service, "$.action.kubernetesApiCallAction.resourceName"),
  service_action_kubernetesApiCallAction_sourceIPs = json_extract(service, "$.action.kubernetesApiCallAction.sourceIPs"),
  service_action_kubernetesApiCallAction_statusCode = json_extract(service, "$.action.kubernetesApiCallAction.statusCode"),
  service_action_kubernetesApiCallAction_subresource = json_extract(service, "$.action.kubernetesApiCallAction.subresource"),
  service_action_kubernetesApiCallAction_userAgent = json_extract(service, "$.action.kubernetesApiCallAction.userAgent"),
  service_action_kubernetesApiCallAction_verb = json_extract(service, "$.action.kubernetesApiCallAction.verb"),
  service_action_kubernetesPermissionCheckedDetails = json_extract(service, "$.action.kubernetesPermissionCheckedDetails"),
  service_action_kubernetesPermissionCheckedDetails_allowed = json_extract(service, "$.action.kubernetesPermissionCheckedDetails.allowed"),
  service_action_kubernetesPermissionCheckedDetails_namespace = json_extract(service, "$.action.kubernetesPermissionCheckedDetails.namespace"),
  service_action_kubernetesPermissionCheckedDetails_resource = json_extract(service, "$.action.kubernetesPermissionCheckedDetails.resource"),
  service_action_kubernetesPermissionCheckedDetails_verb = json_extract(service, "$.action.kubernetesPermissionCheckedDetails.verb"),
  service_action_kubernetesRoleBindingDetails = json_extract(service, "$.action.kubernetesRoleBindingDetails"),
  service_action_kubernetesRoleBindingDetails_kind = json_extract(service, "$.action.kubernetesRoleBindingDetails.kind"),
  service_action_kubernetesRoleBindingDetails_name = json_extract(service, "$.action.kubernetesRoleBindingDetails.name"),
  service_action_kubernetesRoleBindingDetails_roleRefKind = json_extract(service, "$.action.kubernetesRoleBindingDetails.roleRefKind"),
  service_action_kubernetesRoleBindingDetails_roleRefName = json_extract(service, "$.action.kubernetesRoleBindingDetails.roleRefName"),
  service_action_kubernetesRoleBindingDetails_uid = json_extract(service, "$.action.kubernetesRoleBindingDetails.uid"),
  service_action_kubernetesRoleDetails = json_extract(service, "$.action.kubernetesRoleDetails"),
  service_action_kubernetesRoleDetails_kind = json_extract(service, "$.action.kubernetesRoleDetails.kind"),
  service_action_kubernetesRoleDetails_name = json_extract(service, "$.action.kubernetesRoleDetails.name"),
  service_action_kubernetesRoleDetails_uid = json_extract(service, "$.action.kubernetesRoleDetails.uid"),
  service_action_networkConnectionAction_blocked = json_extract(service, "$.action.networkConnectionAction.blocked"),
  service_action_networkConnectionAction_connectionDirection = json_extract(service, "$.action.networkConnectionAction.connectionDirection"),
  service_action_networkConnectionAction_localIpDetails_ipAddressV4 = json_extract(service, "$.action.networkConnectionAction.localIpDetails.ipAddressV4"),
  service_action_networkConnectionAction_localIpDetails_ipAddressV6 = json_extract(service, "$.action.networkConnectionAction.localIpDetails.ipAddressV6"),
  service_action_networkConnectionAction_localPortDetails_port = json_extract(service, "$.action.networkConnectionAction.localPortDetails.port"),
  service_action_networkConnectionAction_localPortDetails_portName = json_extract(service, "$.action.networkConnectionAction.localPortDetails.portName"),
  service_action_networkConnectionAction_protocol = json_extract(service, "$.action.networkConnectionAction.protocol"),
  service_action_networkConnectionAction_remoteIpDetails_city_cityName = json_extract(service, "$.action.networkConnectionAction.remoteIpDetails.city.cityName"),
  service_action_networkConnectionAction_remoteIpDetails_country_countryName = json_extract(service, "$.action.networkConnectionAction.remoteIpDetails.country.countryName"),
  service_action_networkConnectionAction_remoteIpDetails_geoLocation_lat = json_extract(service, "$.action.networkConnectionAction.remoteIpDetails.geoLocation.lat"),
  service_action_networkConnectionAction_remoteIpDetails_geoLocation_lon = json_extract(service, "$.action.networkConnectionAction.remoteIpDetails.geoLocation.lon"),
  service_action_networkConnectionAction_remoteIpDetails_ipAddressV4 = json_extract(service, "$.action.networkConnectionAction.remoteIpDetails.ipAddressV4"),
  service_action_networkConnectionAction_remoteIpDetails_ipAddressV6 = json_extract(service, "$.action.networkConnectionAction.remoteIpDetails.ipAddressV6"),
  service_action_networkConnectionAction_remoteIpDetails_organization_asn = json_extract(service, "$.action.networkConnectionAction.remoteIpDetails.organization.asn"),
  service_action_networkConnectionAction_remoteIpDetails_organization_asnOrg = json_extract(service, "$.action.networkConnectionAction.remoteIpDetails.organization.asnOrg"),
  service_action_networkConnectionAction_remoteIpDetails_organization_isp = json_extract(service, "$.action.networkConnectionAction.remoteIpDetails.organization.isp"),
  service_action_networkConnectionAction_remoteIpDetails_organization_org = json_extract(service, "$.action.networkConnectionAction.remoteIpDetails.organization.org"),
  service_action_networkConnectionAction_remotePortDetails_port = json_extract(service, "$.action.networkConnectionAction.remotePortDetails.port"),
  service_action_networkConnectionAction_remotePortDetails_portName = json_extract(service, "$.action.networkConnectionAction.remotePortDetails.portName"),
  service_action_portProbeAction_blocked = json_extract(service, "$.action.portProbeAction.blocked"),
  service_action_portProbeAction_portProbeDetails_localIpDetails_ipAddressV4 = json_extract(service, "$.action.portProbeAction.portProbeDetails[0].localIpDetails.ipAddressV4"),
  service_action_portProbeAction_portProbeDetails_localPortDetails_port = json_extract(service, "$.action.portProbeAction.portProbeDetails[0].localPortDetails.port"),
  service_action_portProbeAction_portProbeDetails_localPortDetails_portName = json_extract(service, "$.action.portProbeAction.portProbeDetails[0].localPortDetails.portName"),
  service_action_portProbeAction_portProbeDetails_remoteIpDetails_city_cityName = json_extract(service, "$.action.portProbeAction.portProbeDetails[0].remoteIpDetails.city.cityName"),
  service_action_portProbeAction_portProbeDetails_remoteIpDetails_country_countryName = json_extract(service, "$.action.portProbeAction.portProbeDetails[0].remoteIpDetails.country.countryName"),
  service_action_portProbeAction_portProbeDetails_remoteIpDetails_geoLocation_lat = json_extract(service, "$.action.portProbeAction.portProbeDetails[0].remoteIpDetails.geoLocation.lat"),
  service_action_portProbeAction_portProbeDetails_remoteIpDetails_geoLocation_lon = json_extract(service, "$.action.portProbeAction.portProbeDetails[0].remoteIpDetails.geoLocation.lon"),
  service_action_portProbeAction_portProbeDetails_remoteIpDetails_ipAddressV4 = json_extract(service, "$.action.portProbeAction.portProbeDetails[0].remoteIpDetails.ipAddressV4"),
  service_action_portProbeAction_portProbeDetails_remoteIpDetails_ipAddressV6 = json_extract(service, "$.action.portProbeAction.portProbeDetails[0].remoteIpDetails.ipAddressV6"),
  service_action_portProbeAction_portProbeDetails_remoteIpDetails_organization_asn = json_extract(service, "$.action.portProbeAction.portProbeDetails[0].remoteIpDetails.organization.asn"),
  service_action_portProbeAction_portProbeDetails_remoteIpDetails_organization_asnOrg = json_extract(service, "$.action.portProbeAction.portProbeDetails[0].remoteIpDetails.organization.asnOrg"),
  service_action_portProbeAction_portProbeDetails_remoteIpDetails_organization_isp = json_extract(service, "$.action.portProbeAction.portProbeDetails[0].remoteIpDetails.organization.isp"),
  service_action_portProbeAction_portProbeDetails_remoteIpDetails_organization_org = json_extract(service, "$.action.portProbeAction.portProbeDetails[0].remoteIpDetails.organization.org"),
  service_action_rdsLoginAttemptAction_remoteIpDetails_city_cityName = json_extract(service, "$.action.rdsLoginAttemptAction.remoteIpDetails.city.cityName"),
  service_action_rdsLoginAttemptAction_remoteIpDetails_country_countryName = json_extract(service, "$.action.rdsLoginAttemptAction.remoteIpDetails.country.countryName"),
  service_action_rdsLoginAttemptAction_remoteIpDetails_geoLocation_lat = json_extract(service, "$.action.rdsLoginAttemptAction.remoteIpDetails.geoLocation.lat"),
  service_action_rdsLoginAttemptAction_remoteIpDetails_geoLocation_lon = json_extract(service, "$.action.rdsLoginAttemptAction.remoteIpDetails.geoLocation.lon"),
  service_action_rdsLoginAttemptAction_remoteIpDetails_ipAddressV4 = json_extract(service, "$.action.rdsLoginAttemptAction.remoteIpDetails.ipAddressV4"),
  service_action_rdsLoginAttemptAction_remoteIpDetails_ipAddressV6 = json_extract(service, "$.action.rdsLoginAttemptAction.remoteIpDetails.ipAddressV6"),
  service_action_rdsLoginAttemptAction_remoteIpDetails_organization_asn = json_extract(service, "$.action.rdsLoginAttemptAction.remoteIpDetails.organization.asn"),
  service_action_rdsLoginAttemptAction_remoteIpDetails_organization_asnOrg = json_extract(service, "$.action.rdsLoginAttemptAction.remoteIpDetails.organization.asnOrg"),
  service_action_rdsLoginAttemptAction_remoteIpDetails_organization_isp = json_extract(service, "$.action.rdsLoginAttemptAction.remoteIpDetails.organization.isp"),
  service_action_rdsLoginAttemptAction_remoteIpDetails_organization_org = json_extract(service, "$.action.rdsLoginAttemptAction.remoteIpDetails.organization.org"),
  service_additionalInfo_agentDetails_agentId = json_extract(service, "$.additionalInfo.agentDetails.agentId"),
  service_additionalInfo_agentDetails_agentVersion = json_extract(service, "$.additionalInfo.agentDetails.agentVersion"),
  service_additionalInfo_anomalies_anomalousAPIs = json_extract(service, "$.additionalInfo.anomalies.anomalousAPIs"),
  service_additionalInfo_apiCalls_count = json_extract(service, "$.additionalInfo.apiCalls.count"),
  service_additionalInfo_apiCalls_firstSeen = json_extract(service, "$.additionalInfo.apiCalls.firstSeen"),
  service_additionalInfo_apiCalls_lastSeen = json_extract(service, "$.additionalInfo.apiCalls.lastSeen"),
  service_additionalInfo_apiCalls_name = json_extract(service, "$.additionalInfo.apiCalls.name"),
  service_additionalInfo_authenticationMethod = json_extract(service, "$.additionalInfo.authenticationMethod"),
  service_additionalInfo_context = json_extract(service, "$.additionalInfo.context"),
  service_additionalInfo_domain = json_extract(service, "$.additionalInfo.domain"),
  service_additionalInfo_inBytes = json_extract(service, "$.additionalInfo.inBytes"),
  service_additionalInfo_localPort = json_extract(service, "$.additionalInfo.localPort"),
  service_additionalInfo_newPolicy_allowUsersToChangePassword = json_extract(service, "$.additionalInfo.newPolicy.allowUsersToChangePassword"),
  service_additionalInfo_newPolicy_hardExpiry = json_extract(service, "$.additionalInfo.newPolicy.hardExpiry"),
  service_additionalInfo_newPolicy_maxPasswordAge = json_extract(service, "$.additionalInfo.newPolicy.maxPasswordAge"),
  service_additionalInfo_newPolicy_minimumPasswordLength = json_extract(service, "$.additionalInfo.newPolicy.minimumPasswordLength"),
  service_additionalInfo_newPolicy_passwordReusePrevention = json_extract(service, "$.additionalInfo.newPolicy.passwordReusePrevention"),
  service_additionalInfo_newPolicy_requireLowercaseCharacters = json_extract(service, "$.additionalInfo.newPolicy.requireLowercaseCharacters"),
  service_additionalInfo_newPolicy_requireNumbers = json_extract(service, "$.additionalInfo.newPolicy.requireNumbers"),
  service_additionalInfo_newPolicy_requireSymbols = json_extract(service, "$.additionalInfo.newPolicy.requireSymbols"),
  service_additionalInfo_newPolicy_requireUppercaseCharacters = json_extract(service, "$.additionalInfo.newPolicy.requireUppercaseCharacters"),
  service_additionalInfo_oldPolicy_allowUsersToChangePassword = json_extract(service, "$.additionalInfo.oldPolicy.allowUsersToChangePassword"),
  service_additionalInfo_oldPolicy_hardExpiry = json_extract(service, "$.additionalInfo.oldPolicy.hardExpiry"),
  service_additionalInfo_oldPolicy_maxPasswordAge = json_extract(service, "$.additionalInfo.oldPolicy.maxPasswordAge"),
  service_additionalInfo_oldPolicy_minimumPasswordLength = json_extract(service, "$.additionalInfo.oldPolicy.minimumPasswordLength"),
  service_additionalInfo_oldPolicy_passwordReusePrevention = json_extract(service, "$.additionalInfo.oldPolicy.passwordReusePrevention"),
  service_additionalInfo_oldPolicy_requireLowercaseCharacters = json_extract(service, "$.additionalInfo.oldPolicy.requireLowercaseCharacters"),
  service_additionalInfo_oldPolicy_requireNumbers = json_extract(service, "$.additionalInfo.oldPolicy.requireNumbers"),
  service_additionalInfo_oldPolicy_requireSymbols = json_extract(service, "$.additionalInfo.oldPolicy.requireSymbols"),
  service_additionalInfo_oldPolicy_requireUppercaseCharacters = json_extract(service, "$.additionalInfo.oldPolicy.requireUppercaseCharacters"),
  service_additionalInfo_outBytes = json_extract(service, "$.additionalInfo.outBytes"),
  service_additionalInfo_portsScannedSample = json_extract(service, "$.additionalInfo.portsScannedSample"),
  service_additionalInfo_profiledBehavior_frequentProfiledAPIsAccountProfiling = json_extract(service, "$.additionalInfo.profiledBehavior.frequentProfiledAPIsAccountProfiling"),
  service_additionalInfo_profiledBehavior_frequentProfiledAPIsUserIdentityProfiling = json_extract(service, "$.additionalInfo.profiledBehavior.frequentProfiledAPIsUserIdentityProfiling"),
  service_additionalInfo_profiledBehavior_frequentProfiledASNsAccountProfiling = json_extract(service, "$.additionalInfo.profiledBehavior.frequentProfiledASNsAccountProfiling"),
  service_additionalInfo_profiledBehavior_frequentProfiledASNsBucketProfiling = json_extract(service, "$.additionalInfo.profiledBehavior.frequentProfiledASNsBucketProfiling"),
  service_additionalInfo_profiledBehavior_frequentProfiledASNsUserIdentityProfiling = json_extract(service, "$.additionalInfo.profiledBehavior.frequentProfiledASNsUserIdentityProfiling"),
  service_additionalInfo_profiledBehavior_frequentProfiledBucketsAccountProfiling = json_extract(service, "$.additionalInfo.profiledBehavior.frequentProfiledBucketsAccountProfiling"),
  service_additionalInfo_profiledBehavior_frequentProfiledBucketsUserIdentityProfiling = json_extract(service, "$.additionalInfo.profiledBehavior.frequentProfiledBucketsUserIdentityProfiling"),
  service_additionalInfo_profiledBehavior_frequentProfiledUserAgentsAccountProfiling = json_extract(service, "$.additionalInfo.profiledBehavior.frequentProfiledUserAgentsAccountProfiling"),
  service_additionalInfo_profiledBehavior_frequentProfiledUserAgentsUserIdentityProfiling = json_extract(service, "$.additionalInfo.profiledBehavior.frequentProfiledUserAgentsUserIdentityProfiling"),
  service_additionalInfo_profiledBehavior_frequentProfiledUserNamesAccountProfiling = json_extract(service, "$.additionalInfo.profiledBehavior.frequentProfiledUserNamesAccountProfiling"),
  service_additionalInfo_profiledBehavior_frequentProfiledUserNamesBucketProfiling = json_extract(service, "$.additionalInfo.profiledBehavior.frequentProfiledUserNamesBucketProfiling"),
  service_additionalInfo_profiledBehavior_frequentProfiledUserTypesAccountProfiling = json_extract(service, "$.additionalInfo.profiledBehavior.frequentProfiledUserTypesAccountProfiling"),
  service_additionalInfo_profiledBehavior_infrequentProfiledAPIsAccountProfiling = json_extract(service, "$.additionalInfo.profiledBehavior.infrequentProfiledAPIsAccountProfiling"),
  service_additionalInfo_profiledBehavior_infrequentProfiledAPIsUserIdentityProfiling = json_extract(service, "$.additionalInfo.profiledBehavior.infrequentProfiledAPIsUserIdentityProfiling"),
  service_additionalInfo_profiledBehavior_infrequentProfiledASNsAccountProfiling = json_extract(service, "$.additionalInfo.profiledBehavior.infrequentProfiledASNsAccountProfiling"),
  service_additionalInfo_profiledBehavior_infrequentProfiledASNsBucketProfiling = json_extract(service, "$.additionalInfo.profiledBehavior.infrequentProfiledASNsBucketProfiling"),
  service_additionalInfo_profiledBehavior_infrequentProfiledASNsUserIdentityProfiling = json_extract(service, "$.additionalInfo.profiledBehavior.infrequentProfiledASNsUserIdentityProfiling"),
  service_additionalInfo_profiledBehavior_infrequentProfiledBucketsAccountProfiling = json_extract(service, "$.additionalInfo.profiledBehavior.infrequentProfiledBucketsAccountProfiling"),
  service_additionalInfo_profiledBehavior_infrequentProfiledBucketsUserIdentityProfiling = json_extract(service, "$.additionalInfo.profiledBehavior.infrequentProfiledBucketsUserIdentityProfiling"),
  service_additionalInfo_profiledBehavior_infrequentProfiledUserAgentsAccountProfiling = json_extract(service, "$.additionalInfo.profiledBehavior.infrequentProfiledUserAgentsAccountProfiling"),
  service_additionalInfo_profiledBehavior_infrequentProfiledUserAgentsUserIdentityProfiling = json_extract(service, "$.additionalInfo.profiledBehavior.infrequentProfiledUserAgentsUserIdentityProfiling"),
  service_additionalInfo_profiledBehavior_infrequentProfiledUserNamesAccountProfiling = json_extract(service, "$.additionalInfo.profiledBehavior.infrequentProfiledUserNamesAccountProfiling"),
  service_additionalInfo_profiledBehavior_infrequentProfiledUserNamesBucketProfiling = json_extract(service, "$.additionalInfo.profiledBehavior.infrequentProfiledUserNamesBucketProfiling"),
  service_additionalInfo_profiledBehavior_infrequentProfiledUserTypesAccountProfiling = json_extract(service, "$.additionalInfo.profiledBehavior.infrequentProfiledUserTypesAccountProfiling"),
  service_additionalInfo_profiledBehavior_numberOfHistoricalDailyAvgAPIsBucketProfiling = json_extract(service, "$.additionalInfo.profiledBehavior.numberOfHistoricalDailyAvgAPIsBucketProfiling"),
  service_additionalInfo_profiledBehavior_numberOfHistoricalDailyAvgAPIsBucketUserIdentityProfiling = json_extract(service, "$.additionalInfo.profiledBehavior.numberOfHistoricalDailyAvgAPIsBucketUserIdentityProfiling"),
  service_additionalInfo_profiledBehavior_numberOfHistoricalDailyAvgAPIsUserIdentityProfiling = json_extract(service, "$.additionalInfo.profiledBehavior.numberOfHistoricalDailyAvgAPIsUserIdentityProfiling"),
  service_additionalInfo_profiledBehavior_numberOfHistoricalDailyMaxAPIsBucketProfiling = json_extract(service, "$.additionalInfo.profiledBehavior.numberOfHistoricalDailyMaxAPIsBucketProfiling"),
  service_additionalInfo_profiledBehavior_numberOfHistoricalDailyMaxAPIsBucketUserIdentityProfiling = json_extract(service, "$.additionalInfo.profiledBehavior.numberOfHistoricalDailyMaxAPIsBucketUserIdentityProfiling"),
  service_additionalInfo_profiledBehavior_numberOfHistoricalDailyMaxAPIsUserIdentityProfiling = json_extract(service, "$.additionalInfo.profiledBehavior.numberOfHistoricalDailyMaxAPIsUserIdentityProfiling"),
  service_additionalInfo_profiledBehavior_profiledSuccessfulApplicationNamesClusterProfiling_applicationName = json_extract(service, "$.additionalInfo.profiledBehavior.profiledSuccessfulApplicationNamesClusterProfiling.applicationName"),
  service_additionalInfo_profiledBehavior_profiledSuccessfulApplicationNamesClusterProfiling_count = json_extract(service, "$.additionalInfo.profiledBehavior.profiledSuccessfulApplicationNamesClusterProfiling.count"),
  service_additionalInfo_profiledBehavior_profiledSuccessfulAsnOrgsClusterProfiling_asnOrg = json_extract(service, "$.additionalInfo.profiledBehavior.profiledSuccessfulAsnOrgsClusterProfiling.asnOrg"),
  service_additionalInfo_profiledBehavior_profiledSuccessfulAsnOrgsClusterProfiling_count = json_extract(service, "$.additionalInfo.profiledBehavior.profiledSuccessfulAsnOrgsClusterProfiling.count"),
  service_additionalInfo_profiledBehavior_profiledSuccessfulDatabaseNamesClusterProfiling_count = json_extract(service, "$.additionalInfo.profiledBehavior.profiledSuccessfulDatabaseNamesClusterProfiling.count"),
  service_additionalInfo_profiledBehavior_profiledSuccessfulDatabaseNamesClusterProfiling_databaseName = json_extract(service, "$.additionalInfo.profiledBehavior.profiledSuccessfulDatabaseNamesClusterProfiling.databaseName"),
  service_additionalInfo_profiledBehavior_profiledSuccessfulUserNamesClusterProfiling_count = json_extract(service, "$.additionalInfo.profiledBehavior.profiledSuccessfulUserNamesClusterProfiling.count"),
  service_additionalInfo_profiledBehavior_profiledSuccessfulUserNamesClusterProfiling_userName = json_extract(service, "$.additionalInfo.profiledBehavior.profiledSuccessfulUserNamesClusterProfiling.userName"),
  service_additionalInfo_profiledBehavior_rareProfiledAPIsAccountProfiling = json_extract(service, "$.additionalInfo.profiledBehavior.rareProfiledAPIsAccountProfiling"),
  service_additionalInfo_profiledBehavior_rareProfiledAPIsUserIdentityProfiling = json_extract(service, "$.additionalInfo.profiledBehavior.rareProfiledAPIsUserIdentityProfiling"),
  service_additionalInfo_profiledBehavior_rareProfiledASNsAccountProfiling = json_extract(service, "$.additionalInfo.profiledBehavior.rareProfiledASNsAccountProfiling"),
  service_additionalInfo_profiledBehavior_rareProfiledASNsBucketProfiling = json_extract(service, "$.additionalInfo.profiledBehavior.rareProfiledASNsBucketProfiling"),
  service_additionalInfo_profiledBehavior_rareProfiledASNsUserIdentityProfiling = json_extract(service, "$.additionalInfo.profiledBehavior.rareProfiledASNsUserIdentityProfiling"),
  service_additionalInfo_profiledBehavior_rareProfiledBucketsAccountProfiling = json_extract(service, "$.additionalInfo.profiledBehavior.rareProfiledBucketsAccountProfiling"),
  service_additionalInfo_profiledBehavior_rareProfiledBucketsUserIdentityProfiling = json_extract(service, "$.additionalInfo.profiledBehavior.rareProfiledBucketsUserIdentityProfiling"),
  service_additionalInfo_profiledBehavior_rareProfiledUserAgentsAccountProfiling = json_extract(service, "$.additionalInfo.profiledBehavior.rareProfiledUserAgentsAccountProfiling"),
  service_additionalInfo_profiledBehavior_rareProfiledUserAgentsUserIdentityProfiling = json_extract(service, "$.additionalInfo.profiledBehavior.rareProfiledUserAgentsUserIdentityProfiling"),
  service_additionalInfo_profiledBehavior_rareProfiledUserNamesAccountProfiling = json_extract(service, "$.additionalInfo.profiledBehavior.rareProfiledUserNamesAccountProfiling"),
  service_additionalInfo_profiledBehavior_rareProfiledUserNamesBucketProfiling = json_extract(service, "$.additionalInfo.profiledBehavior.rareProfiledUserNamesBucketProfiling"),
  service_additionalInfo_profiledBehavior_rareProfiledUserTypesAccountProfiling = json_extract(service, "$.additionalInfo.profiledBehavior.rareProfiledUserTypesAccountProfiling"),
  service_additionalInfo_recentCredentials_accessKeyId = json_extract(service, "$.additionalInfo.recentCredentials.accessKeyId"),
  service_additionalInfo_recentCredentials_ipAddressV4 = json_extract(service, "$.additionalInfo.recentCredentials.ipAddressV4"),
  service_additionalInfo_recentCredentials_principalId = json_extract(service, "$.additionalInfo.recentCredentials.principalId"),
  service_additionalInfo_remotePort = json_extract(service, "$.additionalInfo.remotePort"),
  service_additionalInfo_sample = json_extract(service, "$.additionalInfo.sample"),
  service_additionalInfo_scannedPort = json_extract(service, "$.additionalInfo.scannedPort"),
  service_additionalInfo_threatListName = json_extract(service, "$.additionalInfo.threatListName"),
  service_additionalInfo_threatName = json_extract(service, "$.additionalInfo.threatName"),
  service_additionalInfo_type = json_extract(service, "$.additionalInfo.type"),
  service_additionalInfo_unusual = json_extract(service, "$.additionalInfo.unusual"),
  service_additionalInfo_unusual_countries = json_extract(service, "$.additionalInfo.unusual.countries"),
  service_additionalInfo_unusual_hoursOfDay = json_extract(service, "$.additionalInfo.unusual.hoursOfDay"),
  service_additionalInfo_unusual_isps = json_extract(service, "$.additionalInfo.unusual.isps"),
  service_additionalInfo_unusual_userNames = json_extract(service, "$.additionalInfo.unusual.userNames"),
  service_additionalInfo_unusualBehavior_isUnusualUserIdentity = json_extract(service, "$.additionalInfo.unusualBehavior.isUnusualUserIdentity"),
  service_additionalInfo_unusualBehavior_numberOfPast24HoursAPIsBucketProfiling = json_extract(service, "$.additionalInfo.unusualBehavior.numberOfPast24HoursAPIsBucketProfiling"),
  service_additionalInfo_unusualBehavior_numberOfPast24HoursAPIsBucketUserIdentityProfiling = json_extract(service, "$.additionalInfo.unusualBehavior.numberOfPast24HoursAPIsBucketUserIdentityProfiling"),
  service_additionalInfo_unusualBehavior_numberOfPast24HoursAPIsUserIdentityProfiling = json_extract(service, "$.additionalInfo.unusualBehavior.numberOfPast24HoursAPIsUserIdentityProfiling"),
  service_additionalInfo_unusualBehavior_unusualAPIsAccountProfiling = json_extract(service, "$.additionalInfo.unusualBehavior.unusualAPIsAccountProfiling"),
  service_additionalInfo_unusualBehavior_unusualAPIsUserIdentityProfiling = json_extract(service, "$.additionalInfo.unusualBehavior.unusualAPIsUserIdentityProfiling"),
  service_additionalInfo_unusualBehavior_unusualASNClusterProfiling_asnOrg = json_extract(service, "$.additionalInfo.unusualBehavior.unusualASNClusterProfiling.asnOrg"),
  service_additionalInfo_unusualBehavior_unusualASNClusterProfiling_failedLoginCount = json_extract(service, "$.additionalInfo.unusualBehavior.unusualASNClusterProfiling.failedLoginCount"),
  service_additionalInfo_unusualBehavior_unusualASNClusterProfiling_incompleteConnectionCount = json_extract(service, "$.additionalInfo.unusualBehavior.unusualASNClusterProfiling.incompleteConnectionCount"),
  service_additionalInfo_unusualBehavior_unusualASNClusterProfiling_successfulLoginCount = json_extract(service, "$.additionalInfo.unusualBehavior.unusualASNClusterProfiling.successfulLoginCount"),
  service_additionalInfo_unusualBehavior_unusualASNsAccountProfiling = json_extract(service, "$.additionalInfo.unusualBehavior.unusualASNsAccountProfiling"),
  service_additionalInfo_unusualBehavior_unusualASNsBucketProfiling = json_extract(service, "$.additionalInfo.unusualBehavior.unusualASNsBucketProfiling"),
  service_additionalInfo_unusualBehavior_unusualASNsUserIdentityProfiling = json_extract(service, "$.additionalInfo.unusualBehavior.unusualASNsUserIdentityProfiling"),
  service_additionalInfo_unusualBehavior_unusualApplicationNameClusterProfiling_applicationName = json_extract(service, "$.additionalInfo.unusualBehavior.unusualApplicationNameClusterProfiling.applicationName"),
  service_additionalInfo_unusualBehavior_unusualApplicationNameClusterProfiling_failedLoginCount = json_extract(service, "$.additionalInfo.unusualBehavior.unusualApplicationNameClusterProfiling.failedLoginCount"),
  service_additionalInfo_unusualBehavior_unusualApplicationNameClusterProfiling_incompleteConnectionCount = json_extract(service, "$.additionalInfo.unusualBehavior.unusualApplicationNameClusterProfiling.incompleteConnectionCount"),
  service_additionalInfo_unusualBehavior_unusualApplicationNameClusterProfiling_successfulLoginCount = json_extract(service, "$.additionalInfo.unusualBehavior.unusualApplicationNameClusterProfiling.successfulLoginCount"),
  service_additionalInfo_unusualBehavior_unusualBucketsAccountProfiling = json_extract(service, "$.additionalInfo.unusualBehavior.unusualBucketsAccountProfiling"),
  service_additionalInfo_unusualBehavior_unusualBucketsUserIdentityProfiling = json_extract(service, "$.additionalInfo.unusualBehavior.unusualBucketsUserIdentityProfiling"),
  service_additionalInfo_unusualBehavior_unusualDatabaseNameClusterProfiling_databaseName = json_extract(service, "$.additionalInfo.unusualBehavior.unusualDatabaseNameClusterProfiling.databaseName"),
  service_additionalInfo_unusualBehavior_unusualDatabaseNameClusterProfiling_failedLoginCount = json_extract(service, "$.additionalInfo.unusualBehavior.unusualDatabaseNameClusterProfiling.failedLoginCount"),
  service_additionalInfo_unusualBehavior_unusualDatabaseNameClusterProfiling_incompleteConnectionCount = json_extract(service, "$.additionalInfo.unusualBehavior.unusualDatabaseNameClusterProfiling.incompleteConnectionCount"),
  service_additionalInfo_unusualBehavior_unusualDatabaseNameClusterProfiling_successfulLoginCount = json_extract(service, "$.additionalInfo.unusualBehavior.unusualDatabaseNameClusterProfiling.successfulLoginCount"),
  service_additionalInfo_unusualBehavior_unusualUserAgentsAccountProfiling = json_extract(service, "$.additionalInfo.unusualBehavior.unusualUserAgentsAccountProfiling"),
  service_additionalInfo_unusualBehavior_unusualUserAgentsUserIdentityProfiling = json_extract(service, "$.additionalInfo.unusualBehavior.unusualUserAgentsUserIdentityProfiling"),
  service_additionalInfo_unusualBehavior_unusualUserNameClusterProfiling_failedLoginCount = json_extract(service, "$.additionalInfo.unusualBehavior.unusualUserNameClusterProfiling.failedLoginCount"),
  service_additionalInfo_unusualBehavior_unusualUserNameClusterProfiling_incompleteConnectionCount = json_extract(service, "$.additionalInfo.unusualBehavior.unusualUserNameClusterProfiling.incompleteConnectionCount"),
  service_additionalInfo_unusualBehavior_unusualUserNameClusterProfiling_successfulLoginCount = json_extract(service, "$.additionalInfo.unusualBehavior.unusualUserNameClusterProfiling.successfulLoginCount"),
  service_additionalInfo_unusualBehavior_unusualUserNameClusterProfiling_userName = json_extract(service, "$.additionalInfo.unusualBehavior.unusualUserNameClusterProfiling.userName"),
  service_additionalInfo_unusualBehavior_unusualUserNamesAccountProfiling = json_extract(service, "$.additionalInfo.unusualBehavior.unusualUserNamesAccountProfiling"),
  service_additionalInfo_unusualBehavior_unusualUserNamesBucketProfiling = json_extract(service, "$.additionalInfo.unusualBehavior.unusualUserNamesBucketProfiling"),
  service_additionalInfo_unusualBehavior_unusualUserTypesAccountProfiling = json_extract(service, "$.additionalInfo.unusualBehavior.unusualUserTypesAccountProfiling"),
  service_additionalInfo_unusualProtocol = json_extract(service, "$.additionalInfo.unusualProtocol"),
  service_additionalInfo_userAgent_fullUserAgent = json_extract(service, "$.additionalInfo.userAgent.fullUserAgent"),
  service_additionalInfo_userAgent_userAgentCategory = json_extract(service, "$.additionalInfo.userAgent.userAgentCategory"),
  service_additionalInfo_value = json_extract(service, "$.additionalInfo.value"),
  service_archived = json_extract(service, "$.archived"),
  service_count = json_extract(service, "$.count"),
  service_detection_anomaly_profiles_GeneratedFindingScope1_GeneratedFindingFeature1_observations_text = json_extract(service, "$.detection.anomaly.profiles.GeneratedFindingScope1.GeneratedFindingFeature1.observations.text"),
  service_detection_anomaly_profiles_GeneratedFindingScope1_GeneratedFindingFeature1_profileSubtype = json_extract(service, "$.detection.anomaly.profiles.GeneratedFindingScope1.GeneratedFindingFeature1.profileSubtype"),
  service_detection_anomaly_profiles_GeneratedFindingScope1_GeneratedFindingFeature1_profileType = json_extract(service, "$.detection.anomaly.profiles.GeneratedFindingScope1.GeneratedFindingFeature1.profileType"),
  service_detection_anomaly_profiles_GeneratedFindingScope2_GeneratedFindingFeature1_observations_text = json_extract(service, "$.detection.anomaly.profiles.GeneratedFindingScope2.GeneratedFindingFeature1.observations.text"),
  service_detection_anomaly_profiles_GeneratedFindingScope2_GeneratedFindingFeature1_profileSubtype = json_extract(service, "$.detection.anomaly.profiles.GeneratedFindingScope2.GeneratedFindingFeature1.profileSubtype"),
  service_detection_anomaly_profiles_GeneratedFindingScope2_GeneratedFindingFeature1_profileType = json_extract(service, "$.detection.anomaly.profiles.GeneratedFindingScope2.GeneratedFindingFeature1.profileType"),
  service_detection_anomaly_unusual_behavior_GeneratedFindingScope1_GeneratedFindingFeature1_observations_text = json_extract(service, "$.detection.anomaly.unusual.behavior.GeneratedFindingScope1.GeneratedFindingFeature1.observations.text"),
  service_detection_anomaly_unusual_behavior_GeneratedFindingScope1_GeneratedFindingFeature1_profileSubtype = json_extract(service, "$.detection.anomaly.unusual.behavior.GeneratedFindingScope1.GeneratedFindingFeature1.profileSubtype"),
  service_detection_anomaly_unusual_behavior_GeneratedFindingScope1_GeneratedFindingFeature1_profileType = json_extract(service, "$.detection.anomaly.unusual.behavior.GeneratedFindingScope1.GeneratedFindingFeature1.profileType"),
  service_detection_anomaly_unusual_behavior_GeneratedFindingScope2_GeneratedFindingFeature1_observations_text = json_extract(service, "$.detection.anomaly.unusual.behavior.GeneratedFindingScope2.GeneratedFindingFeature1.observations.text"),
  service_detection_anomaly_unusual_behavior_GeneratedFindingScope2_GeneratedFindingFeature1_profileSubtype = json_extract(service, "$.detection.anomaly.unusual.behavior.GeneratedFindingScope2.GeneratedFindingFeature1.profileSubtype"),
  service_detection_anomaly_unusual_behavior_GeneratedFindingScope2_GeneratedFindingFeature1_profileType = json_extract(service, "$.detection.anomaly.unusual.behavior.GeneratedFindingScope2.GeneratedFindingFeature1.profileType"),
  service_detection_anomaly_unusual_volume = json_extract(service, "$.detection.anomaly.unusual.volume"),
  service_detectorId = json_extract(service, "$.detectorId"),
  service_ebsVolumeScanDetails_scanCompletedAt = json_extract(service, "$.ebsVolumeScanDetails.scanCompletedAt"),
  service_ebsVolumeScanDetails_scanDetections_highestSeverityThreatDetails_count = json_extract(service, "$.ebsVolumeScanDetails.scanDetections.highestSeverityThreatDetails.count"),
  service_ebsVolumeScanDetails_scanDetections_highestSeverityThreatDetails_severity = json_extract(service, "$.ebsVolumeScanDetails.scanDetections.highestSeverityThreatDetails.severity"),
  service_ebsVolumeScanDetails_scanDetections_highestSeverityThreatDetails_threatName = json_extract(service, "$.ebsVolumeScanDetails.scanDetections.highestSeverityThreatDetails.threatName"),
  service_ebsVolumeScanDetails_scanDetections_scannedItemCount_files = json_extract(service, "$.ebsVolumeScanDetails.scanDetections.scannedItemCount.files"),
  service_ebsVolumeScanDetails_scanDetections_scannedItemCount_totalGb = json_extract(service, "$.ebsVolumeScanDetails.scanDetections.scannedItemCount.totalGb"),
  service_ebsVolumeScanDetails_scanDetections_scannedItemCount_volumes = json_extract(service, "$.ebsVolumeScanDetails.scanDetections.scannedItemCount.volumes"),
  service_ebsVolumeScanDetails_scanDetections_threatDetectedByName_itemCount = json_extract(service, "$.ebsVolumeScanDetails.scanDetections.threatDetectedByName.itemCount"),
  service_ebsVolumeScanDetails_scanDetections_threatDetectedByName_shortened = json_extract(service, "$.ebsVolumeScanDetails.scanDetections.threatDetectedByName.shortened"),
  service_ebsVolumeScanDetails_scanDetections_threatDetectedByName_threatNames_filePaths_fileName = json_extract(service, "$.ebsVolumeScanDetails.scanDetections.threatDetectedByName.threatNames.filePaths.fileName"),
  service_ebsVolumeScanDetails_scanDetections_threatDetectedByName_threatNames_filePaths_filePath = json_extract(service, "$.ebsVolumeScanDetails.scanDetections.threatDetectedByName.threatNames.filePaths.filePath"),
  service_ebsVolumeScanDetails_scanDetections_threatDetectedByName_threatNames_filePaths_hash = json_extract(service, "$.ebsVolumeScanDetails.scanDetections.threatDetectedByName.threatNames.filePaths.hash"),
  service_ebsVolumeScanDetails_scanDetections_threatDetectedByName_threatNames_filePaths_volumeArn = json_extract(service, "$.ebsVolumeScanDetails.scanDetections.threatDetectedByName.threatNames.filePaths.volumeArn"),
  service_ebsVolumeScanDetails_scanDetections_threatDetectedByName_threatNames_itemCount = json_extract(service, "$.ebsVolumeScanDetails.scanDetections.threatDetectedByName.threatNames.itemCount"),
  service_ebsVolumeScanDetails_scanDetections_threatDetectedByName_threatNames_name = json_extract(service, "$.ebsVolumeScanDetails.scanDetections.threatDetectedByName.threatNames.name"),
  service_ebsVolumeScanDetails_scanDetections_threatDetectedByName_threatNames_severity = json_extract(service, "$.ebsVolumeScanDetails.scanDetections.threatDetectedByName.threatNames.severity"),
  service_ebsVolumeScanDetails_scanDetections_threatDetectedByName_uniqueThreatNameCount = json_extract(service, "$.ebsVolumeScanDetails.scanDetections.threatDetectedByName.uniqueThreatNameCount"),
  service_ebsVolumeScanDetails_scanDetections_threatsDetectedItemCount_files = json_extract(service, "$.ebsVolumeScanDetails.scanDetections.threatsDetectedItemCount.files"),
  service_ebsVolumeScanDetails_scanId = json_extract(service, "$.ebsVolumeScanDetails.scanId"),
  service_ebsVolumeScanDetails_scanStartedAt = json_extract(service, "$.ebsVolumeScanDetails.scanStartedAt"),
  service_ebsVolumeScanDetails_scanType = json_extract(service, "$.ebsVolumeScanDetails.scanType"),
  service_ebsVolumeScanDetails_sources = json_extract(service, "$.ebsVolumeScanDetails.sources"),
  service_ebsVolumeScanDetails_triggerFindingId = json_extract(service, "$.ebsVolumeScanDetails.triggerFindingId"),
  service_eventFirstSeen = json_extract(service, "$.eventFirstSeen"),
  service_eventLastSeen = json_extract(service, "$.eventLastSeen"),
  service_evidence = json_extract(service, "$.evidence"),
  service_evidence_threatIntelligenceDetails_threatListName = json_extract(service, "$.evidence.threatIntelligenceDetails.threatListName"),
  service_evidence_threatIntelligenceDetails_threatNames = json_extract(service, "$.evidence.threatIntelligenceDetails.threatNames"),
  service_featureName = json_extract(service, "$.featureName"),
  service_resourceRole = json_extract(service, "$.resourceRole"),
  service_runtimeDetails_context_commandLineExample = json_extract(service, "$.runtimeDetails.context.commandLineExample"),
  service_runtimeDetails_context_libraryPath = json_extract(service, "$.runtimeDetails.context.libraryPath"),
  service_runtimeDetails_context_modifyingProcess_cmdLine = json_extract(service, "$.runtimeDetails.context.modifyingProcess.cmdLine"),
  service_runtimeDetails_context_modifyingProcess_euid = json_extract(service, "$.runtimeDetails.context.modifyingProcess.euid"),
  service_runtimeDetails_context_modifyingProcess_executablePath = json_extract(service, "$.runtimeDetails.context.modifyingProcess.executablePath"),
  service_runtimeDetails_context_modifyingProcess_executableSha256 = json_extract(service, "$.runtimeDetails.context.modifyingProcess.executableSha256"),
  service_runtimeDetails_context_modifyingProcess_name = json_extract(service, "$.runtimeDetails.context.modifyingProcess.name"),
  service_runtimeDetails_context_modifyingProcess_parentUuid = json_extract(service, "$.runtimeDetails.context.modifyingProcess.parentUuid"),
  service_runtimeDetails_context_modifyingProcess_pid = json_extract(service, "$.runtimeDetails.context.modifyingProcess.pid"),
  service_runtimeDetails_context_modifyingProcess_pwd = json_extract(service, "$.runtimeDetails.context.modifyingProcess.pwd"),
  service_runtimeDetails_context_modifyingProcess_startTime = json_extract(service, "$.runtimeDetails.context.modifyingProcess.startTime"),
  service_runtimeDetails_context_modifyingProcess_user = json_extract(service, "$.runtimeDetails.context.modifyingProcess.user"),
  service_runtimeDetails_context_modifyingProcess_userId = json_extract(service, "$.runtimeDetails.context.modifyingProcess.userId"),
  service_runtimeDetails_context_modifyingProcess_uuid = json_extract(service, "$.runtimeDetails.context.modifyingProcess.uuid"),
  service_runtimeDetails_context_mountSource = json_extract(service, "$.runtimeDetails.context.mountSource"),
  service_runtimeDetails_context_mountTarget = json_extract(service, "$.runtimeDetails.context.mountTarget"),
  service_runtimeDetails_context_releaseAgentPath = json_extract(service, "$.runtimeDetails.context.releaseAgentPath"),
  service_runtimeDetails_context_runcBinaryPath = json_extract(service, "$.runtimeDetails.context.runcBinaryPath"),
  service_runtimeDetails_context_scriptPath = json_extract(service, "$.runtimeDetails.context.scriptPath"),
  service_runtimeDetails_context_serviceName = json_extract(service, "$.runtimeDetails.context.$Name"),
  service_runtimeDetails_context_socketPath = json_extract(service, "$.runtimeDetails.context.socketPath"),
  service_runtimeDetails_context_targetProcess_cmdLine = json_extract(service, "$.runtimeDetails.context.targetProcess.cmdLine"),
  service_runtimeDetails_context_targetProcess_euid = json_extract(service, "$.runtimeDetails.context.targetProcess.euid"),
  service_runtimeDetails_context_targetProcess_executablePath = json_extract(service, "$.runtimeDetails.context.targetProcess.executablePath"),
  service_runtimeDetails_context_targetProcess_executableSha256 = json_extract(service, "$.runtimeDetails.context.targetProcess.executableSha256"),
  service_runtimeDetails_context_targetProcess_lineage_euid = json_extract(service, "$.runtimeDetails.context.targetProcess.lineage.euid"),
  service_runtimeDetails_context_targetProcess_lineage_executablePath = json_extract(service, "$.runtimeDetails.context.targetProcess.lineage.executablePath"),
  service_runtimeDetails_context_targetProcess_lineage_parentUuid = json_extract(service, "$.runtimeDetails.context.targetProcess.lineage.parentUuid"),
  service_runtimeDetails_context_targetProcess_lineage_pid = json_extract(service, "$.runtimeDetails.context.targetProcess.lineage.pid"),
  service_runtimeDetails_context_targetProcess_lineage_uuid = json_extract(service, "$.runtimeDetails.context.targetProcess.lineage.uuid"),
  service_runtimeDetails_context_targetProcess_name = json_extract(service, "$.runtimeDetails.context.targetProcess.name"),
  service_runtimeDetails_context_targetProcess_parentUuid = json_extract(service, "$.runtimeDetails.context.targetProcess.parentUuid"),
  service_runtimeDetails_context_targetProcess_pid = json_extract(service, "$.runtimeDetails.context.targetProcess.pid"),
  service_runtimeDetails_context_targetProcess_pwd = json_extract(service, "$.runtimeDetails.context.targetProcess.pwd"),
  service_runtimeDetails_context_targetProcess_startTime = json_extract(service, "$.runtimeDetails.context.targetProcess.startTime"),
  service_runtimeDetails_context_targetProcess_user = json_extract(service, "$.runtimeDetails.context.targetProcess.user"),
  service_runtimeDetails_context_targetProcess_userId = json_extract(service, "$.runtimeDetails.context.targetProcess.userId"),
  service_runtimeDetails_context_targetProcess_uuid = json_extract(service, "$.runtimeDetails.context.targetProcess.uuid"),
  service_runtimeDetails_context_threatFilePath = json_extract(service, "$.runtimeDetails.context.threatFilePath"),
  service_runtimeDetails_context_toolCategory = json_extract(service, "$.runtimeDetails.context.toolCategory"),
  service_runtimeDetails_context_toolName = json_extract(service, "$.runtimeDetails.context.toolName"),
  service_runtimeDetails_process_cmdLine = json_extract(service, "$.runtimeDetails.process.cmdLine"),
  service_runtimeDetails_process_euid = json_extract(service, "$.runtimeDetails.process.euid"),
  service_runtimeDetails_process_executablePath = json_extract(service, "$.runtimeDetails.process.executablePath"),
  service_runtimeDetails_process_executableSha256 = json_extract(service, "$.runtimeDetails.process.executableSha256"),
  service_runtimeDetails_process_lineage_euid = json_extract(service, "$.runtimeDetails.process.lineage.euid"),
  service_runtimeDetails_process_lineage_executablePath = json_extract(service, "$.runtimeDetails.process.lineage.executablePath"),
  service_runtimeDetails_process_lineage_name = json_extract(service, "$.runtimeDetails.process.lineage.name"),
  service_runtimeDetails_process_lineage_namespacePid = json_extract(service, "$.runtimeDetails.process.lineage.namespacePid"),
  service_runtimeDetails_process_lineage_parentUuid = json_extract(service, "$.runtimeDetails.process.lineage.parentUuid"),
  service_runtimeDetails_process_lineage_pid = json_extract(service, "$.runtimeDetails.process.lineage.pid"),
  service_runtimeDetails_process_lineage_startTime = json_extract(service, "$.runtimeDetails.process.lineage.startTime"),
  service_runtimeDetails_process_lineage_userId = json_extract(service, "$.runtimeDetails.process.lineage.userId"),
  service_runtimeDetails_process_lineage_uuid = json_extract(service, "$.runtimeDetails.process.lineage.uuid"),
  service_runtimeDetails_process_name = json_extract(service, "$.runtimeDetails.process.name"),
  service_runtimeDetails_process_parentUuid = json_extract(service, "$.runtimeDetails.process.parentUuid"),
  service_runtimeDetails_process_pid = json_extract(service, "$.runtimeDetails.process.pid"),
  service_runtimeDetails_process_pwd = json_extract(service, "$.runtimeDetails.process.pwd"),
  service_runtimeDetails_process_startTime = json_extract(service, "$.runtimeDetails.process.startTime"),
  service_runtimeDetails_process_user = json_extract(service, "$.runtimeDetails.process.user"),
  service_runtimeDetails_process_userId = json_extract(service, "$.runtimeDetails.process.userId"),
  service_runtimeDetails_process_uuid = json_extract(service, "$.runtimeDetails.process.uuid"),
  service_serviceName = json_extract(service, "$.Name"),
  service_malwarescandetails_threats_itemPaths_name = json_extract_scalar(service, "$.malwareScanDetails.threats[0].name"),
  service_malwarescandetails_threats_itemPaths_source= json_extract_scalar(service, "$.malwareScanDetails.threats[0].source"),
  service_malwarescandetails_threats_itemPaths_hash = json_extract_scalar(service, "$.malwareScanDetails.threats[0].itemPaths[0].hash"),
  service_malwarescandetails_threats_itemPaths_nestedItemPath= json_extract_scalar(service, "$.malwareScanDetails.threats[0].itemPaths[0].nestedItemPath"),
  service_runtimedetails_context_neweuid = json_extract_scalar(service, "$.runtimeDetails.context.newEuid"),
  service_runtimedetails_context_oldeuid = json_extract_scalar(service, "$.runtimeDetails.context.oldEuid"),
  resource_accessKeyDetails_Server = json_extract(resource, "$.accessKeyDetails.userName"),
  resource_instanceDetails_tags_value_owner = arrayindex(arrayfilter(json_extract_array(resource, "$.instanceDetails.tags"),"@element" contains "Owner"),0) -> value
| alter 
    Effective_Permission=resource_s3BucketDetails_publicAccess_effectivePermission,
    Acct_Block_Public_ACLs=resource_s3BucketDetails_publicAccess_permissionConfiguration_accountLevelPermissions_blockPublicAccess_blockPublicAcls,
    Acct_Block_Public_Policy=resource_s3BucketDetails_publicAccess_permissionConfiguration_accountLevelPermissions_blockPublicAccess_blockPublicPolicy,
    Acct_Ignore_Public_ACLs=resource_s3BucketDetails_publicAccess_permissionConfiguration_accountLevelPermissions_blockPublicAccess_ignorePublicAcls,
    Acct_Restrict_Public_Buckets=resource_s3BucketDetails_publicAccess_permissionConfiguration_accountLevelPermissions_blockPublicAccess_restrictPublicBuckets,
    Buck_Block_Public_ACLs=resource_s3BucketDetails_publicAccess_permissionConfiguration_bucketLevelPermissions_blockPublicAccess_blockPublicAcls,
    Buck_Block_Public_Policy=resource_s3BucketDetails_publicAccess_permissionConfiguration_bucketLevelPermissions_blockPublicAccess_blockPublicPolicy,
    Buck_Ignore_Public_ACLs=resource_s3BucketDetails_publicAccess_permissionConfiguration_bucketLevelPermissions_blockPublicAccess_ignorePublicAcls,
    Buck_Restrict_Public_Buckets=resource_s3BucketDetails_publicAccess_permissionConfiguration_bucketLevelPermissions_blockPublicAccess_restrictPublicBuckets,
    DNS_Action_Blocked=service_action_dnsRequestAction_blocked,
    Request_Domain=service_action_dnsRequestAction_domain,
    Instance_Details_Key=resource_instanceDetails_tags_key,
    Instance_Details_Value=resource_instanceDetails_tags_value,
    Port_Probe_Remote_ISP=service_action_portProbeAction_portProbeDetails_remoteIpDetails_organization_isp,
    Port_Probe_Remote_Ip=service_action_portProbeAction_portProbeDetails_remoteIpDetails_ipAddressV4,
    Network_Connect_Remote_Ip=service_action_networkConnectionAction_remoteIpDetails_ipAddressV4,
    Scanning_Ports=service_action_portProbeAction_portProbeDetails_localPortDetails_port,
    InstanceID=resource_instanceDetails_instanceId,
    subnet_id=resource_instanceDetails_networkInterfaces_subnetId,
    eks_vpc_id=resource_eksClusterDetails_vpcId,
    vpc_id=resource_instanceDetails_networkInterfaces_vpcId,
    network_interface_id=resource_instanceDetails_networkInterfaces_networkInterfaceId,
    eks_api_requestUri=service_action_kubernetesApiCallAction_requestUri,
    instance_type=resource_instanceDetails_instanceType,
    image_id=resource_instanceDetails_imageId,
    eks_username=resource_kubernetesDetails_kubernetesUserDetails_username,
    eks_uid=resource_kubernetesDetails_kubernetesUserDetails_uid,
    eks_cluster_name=resource_eksClusterDetails_name,
    eks_cluster_status=resource_eksClusterDetails_status,
    eks_api_call_remote_ip=service_action_kubernetesApiCallAction_remoteIpDetails_ipAddressV4,
    eks_api_call_source_ip=service_action_kubernetesApiCallAction_sourceIPs,
    access_key_principalId=resource_accessKeyDetails_principalId,
    ImageDescription=resource_instanceDetails_imageDescription,
    Traffic=service_action_networkConnectionAction_connectionDirection,
    ProbeLocalPort=service_action_portProbeAction_portProbeDetails_localPortDetails_port,
    ScannedPort=service_additionalInfo_scannedPort,
    Network_Local_IP=service_action_networkConnectionAction_localIpDetails_ipAddressV4,
    RDS_Remote_Ip=service_action_rdsLoginAttemptAction_remoteIpDetails_ipAddressV4,
    Resource_Name = coalesce(resource_instanceDetails_iamInstanceProfile_arn, resource_s3BucketDetails_arn, resource_lambdaDetails_functionArn, resource_containerDetails_name, resource_ecsClusterDetails_arn, resource_ecsClusterDetails_taskDetails_arn, resource_rdsDbInstanceDetails_dbInstanceArn, service_action_awsApiCallAction_affectedResources_AWS__CloudTrail__Trail, service_action_awsApiCallAction_affectedResources_AWS__EC2__Instance, service_action_awsApiCallAction_affectedResources_AWS__S3__Bucket, resource_ebsVolumeDetails_scannedVolumeDetails_volumeArn, resource_ebsVolumeDetails_skippedVolumeDetails_volumeArn, resource_instanceDetails_outpostArn, service_runtimeDetails_process_name, Instance_Details_Value, service_action_kubernetesapicallaction_resourcename, eks_cluster_name, access_key_principalid, resource_instancedetails_instanceid),
    Username=resource_accessKeyDetails_userName,
    Private_DNS_Name=resource_instanceDetails_networkInterfaces_privateDnsName,
    Bucket_Name=resource_s3BucketDetails_arn,
    API_Call=service_action_awsApiCallAction_api,
    Owner=resource_instanceDetails_tags_value_owner,
    DetectorID=service_detectorId,
    API_Call_Remote_Ip=service_action_awsApiCallAction_remoteIpDetails_ipAddressV4,
    PrivateIpAddress=resource_instanceDetails_networkInterfaces_privateIpAddress,
    AssumeRole=service_additionalInfo_profiledBehavior_frequentProfiledUserNamesAccountProfiling,
	  Network_Remote_IP = service_action_rdsLoginAttemptAction_remoteIpDetails_ipAddressV4,
	  userIdentity_principalId = resource_accessKeyDetails_principalId,
    Server = resource_accessKeyDetails_Server,
    Request_Domain=coalesce(service_action_dnsRequestAction_domain, service_action_awsapicallaction_domaindetails_domain, service_action_awsApiCallAction_serviceName, api_call_remote_ip, service_action_networkConnectionAction_remoteIpDetails_ipAddressV4, eks_api_requesturi, RDS_Remote_Ip, service_ebsvolumescandetails_scandetections_highestseveritythreatdetails_threatname)
| alter
    src_ip = coalesce(if(Traffic="OUTBOUND", Network_Local_IP, src_ip), API_Call_Remote_Ip, eks_api_call_remote_ip, RDS_Remote_Ip, Network_Connect_Remote_Ip, Port_Probe_Remote_Ip, PrivateIpAddress),
    src_host = coalesce(if(Traffic="OUTBOUND", InstanceID, src_host), Private_DNS_Name, API_Call_Remote_Ip, Network_Connect_Remote_Ip, Port_Probe_Remote_Ip, Server, eks_api_call_remote_ip, eks_vpc_id, resource_ecsclusterdetails_name, resource_rdsdbinstancedetails_dbclusteridentifier, resource_instanceDetails_instanceId ),
    dest_ip = coalesce(if(Traffic="OUTBOUND", Network_Connect_Remote_Ip, dest_ip), Network_Remote_IP, Network_Local_IP, eks_api_call_source_ip, Request_Domain, PrivateIpAddress), 
    dest_host = coalesce(if(Traffic="OUTBOUND", Network_Connect_Remote_Ip, dest_host), Request_Domain, Server, InstanceID, eks_cluster_name),
    src_user = coalesce(userIdentity_principalId, Username, userName, eks_username, Owner)
 ;

[INGEST:vendor="amp", product="u2_ultimaas", target_dataset="amp_u2_ultimaas_raw", no_hit=drop]
filter _raw_log contains "CEF:0|"
| alter 
  multiplefields = regexcapture(_raw_log,"\<(?P<pid>\d+)\>(?P<timestamp>[A-z]{3}\s\d{1,2}\s\d{2}\:\d{2}\:\d{2})\s(?P<dest_host>\w+[^\s])\sCEF\:\d\|(?P<vendor_product>\w+[^\|])\|(?P<dvc_type>\w+[^\|])\|(?P<product_version>[^\|]+)\|(?P<AUDIT_ID>[^\|]+)\|(?P<ActivityType>[^\|]+)\|(?P<ActivityID>[^\|]+)\|")
| alter
    pid = multiplefields -> pid,
    timestamp = multiplefields -> timestamp,
    dest_host = multiplefields -> dest_host,
    vendor_product = multiplefields -> vendor_product,
    dvc_type = multiplefields -> dvc_type,
    product_version = multiplefields -> product_version,
    AUDIT_ID = multiplefields -> AUDIT_ID,
    ActivityType = multiplefields -> ActivityType,
    ActivityID = multiplefields -> ActivityID,
    app = "U2",
    authentication_method = "Password",
    fileId = arrayindex(regextract(_raw_log, "fileId=([^\s]+)"),0),
    log_type = arrayindex(split(_raw_log,"|"),4),
    cefVersion = arrayindex(regextract(_raw_log, "CEF:(\d)"),0),
    cefSeverity = arrayindex(split(_raw_log,"|"),6),
    vendorsubtype = arrayindex(split(_raw_log,"|"),1),
    productsubtype = arrayindex(split(_raw_log,"|"),2),
    deviceVersion = arrayindex(split(_raw_log,"|"),3),
    cefSignature = arrayindex(split(_raw_log,"|"),4),
    cefName = arrayindex(split(_raw_log,"|"),5),
    outcome=arrayindex(regextract(_raw_log, "outcome=([^\=]+)\s"),0),
    sproc=arrayindex(regextract(_raw_log, "sproc=([^\=]+)\s"),0),
    PGM=arrayindex(regextract(_raw_log, "PGM=([^\=]+)\s"),0),
    reason=arrayindex(regextract(_raw_log, "reason=([^\=]+)\s"),0),
    signature_id = arrayindex(regextract(reason,"(^[^\s]+)"), 0),
    File_Server=arrayindex(regextract(_raw_log, "File_Server=([^\=]+)\s"),0),
    src=arrayindex(regextract(_raw_log, "src=([^\=]+)\s"),0),
    dest=dest_host,
    host=dest_host,
    src=coalesce(src, host),
    suser=arrayindex(regextract(_raw_log,"suser=([^\s]+)"),0),
    duser=arrayindex(regextract(_raw_log,"duser=([^\s]+)"),0),
    RazLeeSecurityAudit_Port=arrayindex(regextract(_raw_log, "RazLeeSecurityAudit_Port=([^\=]+)\s"),0),
    RazLeeSecurityAudit_User_profile_name=arrayindex(regextract(_raw_log, "RazLeeSecurityAudit_User_profile_name=([^\=]+)\s"),0),
    RazLeeSecurityAudit_Device_name=arrayindex(regextract(_raw_log, "RazLeeSecurityAudit_Device_name=([^\=]+)\s"),0),
    signature = ActivityType,
    authentication_service = if(suser contains "U2$", "Local", 1=1, "LDAP"),
    RazLeeSecurityFirewall_Object_type=arrayindex(regextract(_raw_log, "RazLeeSecurityFirewall_Object_type=([^\=]+)\s"),0),
    RazLeeSecurityFirewall_Requested_function=arrayindex(regextract(_raw_log, "RazLeeSecurityFirewall_Requested_function=([^\=]+)\s"),0),
    RazLeeSecurityFirewall_Allow=arrayindex(regextract(_raw_log, "RazLeeSecurityFirewall_Allow_\(1=Yes\)=([^\=]+)\s"),0),
    RazLeeSecurityFirewall_Decision_level=arrayindex(regextract(_raw_log, "RazLeeSecurityFirewall_Decision_level=([^\=]+)\s"),0),
    RazLeeSecurityFirewall_Auth_grnt_to_user=arrayindex(regextract(_raw_log, "RazLeeSecurityFirewall_Auth_grnt_to_user=([^\=]+)\s"),0),
    RazLeeSecurityFirewall_Auth_grnt_for_obj=arrayindex(regextract(_raw_log, "RazLeeSecurityFirewall_Auth_grnt_for_obj=([^\=]+)\s"),0),
    RazLeeSecurityFirewall_IFS_File_name=arrayindex(regextract(_raw_log, "RazLeeSecurityFirewall_IFS_File_name=([^\=]+)\s"),0),
    RazLeeSecurityFirewall_Secured_with_SSL=arrayindex(regextract(_raw_log, "RazLeeSecurityFirewall_Secured_with_SSL=([^\=]+)\s"),0),
    RazLeeSecurityFirewall_Server_Id=arrayindex(regextract(_raw_log, "RazLeeSecurityFirewall_Server_Id=([^\=]+)\s"),0),
    RazLeeSecurityAudit_Status = arrayindex(regextract(_raw_log, "RazLeeSecurityAudit_Status=([^\s]+)\s"),0),
    action = if(RazLeeSecurityAudit_Status="*DISABLED(*ENABLED)", "lockout", RazLeeSecurityAudit_Status="*ENABLED(*DISABLED)", "unlocked", RazLeeSecurityAudit_Password_expired="N(Y)", "unlocked", RazLeeSecurityAudit_Password_expired="Y(N)", "lockout", RazLeeSecurityAudit_Password_expired="Y", "lockout", RazLeeSecurityAudit_Password_changed="Y", "modified", ActivityType="*SIGNON_Sign-On_completed" AND outcome="success", "success", ActivityType="Invalid_password" AND outcome="failure", "failure", 1=1, "error")
| alter src_ip = src,
    user=coalesce(duser, suser);


[INGEST:vendor="peoplesoft", product="financials", target_dataset="peoplesoft_financials_raw", no_hit=keep]
 config case_sensitive=false 
| alter
 user =  coalesce(arrayindex(regextract(_raw_log, "user ([^\@\]]+)\@"),0),arrayindex(regextract(_raw_log, "succeeded\: ([^\@\]]+)\@\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}"),0)),
 src = coalesce(arrayindex(regextract(_raw_log, "user (?:[^\@\]]+)\@(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})"),0), arrayindex(regextract(_raw_log, "succeeded\: (?:[^\@\]]+)\@(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})"),0)),
 signature = if(_raw_log contains "authentication", "authentication", "unknown"),
 action = if(_raw_log contains "succeeded", "success", _raw_log contains "fail", "failure", 1=1, "error"),
 OperatorID = arrayindex(regextract(_raw_log, "^[^\.]+\.[^ ]+\s\(\d+\)\s*\[[^\]]+\]\s[^\s]+\s[^\s]+\s([^\s]+)"),0),
 multipleFields = regexcapture(_raw_log, "^(?P<ServerProcess>[^\.]+)\.(?P<PID>[^ ]+)[^ \n]* (\((?P<ServiceRequest>\d+)[^\[\n]*)?\[(?P<Timestamp>[^\] ]+)(\s+(?P<AdditionalInformation>[^\]]+))?(\])?[^ \n]* (?P<SRID>[\/\w-]+)[^ \n]* (?P<TOPInstanceID>[\d-]+)[^ \n]* (?P<OperatorID>[^ ]+)\s+\((?P<LogLevel>[^\)]+)\)\s+(?P<Message>.+)"),
 SRID = multipleFields -> SRID,
 Message = multipleFields -> Message,
 reason = Message,
 authentication_method = if(Message contains "Token", "Token", Message contains "Password", "Password", Message contains "PeopleCode", "Password", 1=1, "Password"),
user_agent = coalesce(arrayindex(regextract(_raw_log, "[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3} \(([^\)]+)"),0),"-"),
authentication_service = if(user="PSBATCH", "Local", 1=1, "LDAP"),
 src_user = coalesce(user, OperatorID),
 host = _collector_hostname,
 dest = _collector_hostname,
 dest_ip = if(host="ampfinasd2vn.amp.com.au", "10.34.165.180", host="ampfinasd1vn.amp.com.au", "10.34.165.181", host="ampfinasp1v.amp.com.au", "10.34.32.58", host="ampfinasp2v.amp.com.au", "10.34.32.59"),
 app = "peoplesoft-financials";

 [INGEST:vendor="amp", product="trustone", target_dataset="amp_trustone_raw", no_hit=keep]
 config case_sensitive=false 
| alter 
        src_user = arrayindex(regextract(_raw_log, "^([\w]+)\s"),0),
        vendor_status = arrayindex(regextract(_raw_log, "(Successful|Failed)\slogin"),0),
        vendor_action = arrayindex(regextract(_raw_log, "\s(login)\s"),0),
        user_id = arrayindex(regextract(_raw_log, "[Successful|Failed]\slogin\s([^\s]+)"),0),
        logon_time = arrayindex(regextract(_raw_log, "(\d\d\/\d\d\/\d\d\d\d\s\d\d:\d\d:\d\d)$"),0),
        authentication_method = "password",
        authentication_service = "LDAP",
        action = "",
        app = "",
        status = "",
        host = _collector_hostname
| alter        
        action = if(vendor_status = "Successful", "success", action),
        app = if(host contains "amptruasp", "Trust1-Prod", app),
        status = if(vendor_status = "Successful", "200", status),
		    logon_time_object = parse_timestamp("%d/%m/%Y %H:%M:%S", format_string("%s", logon_time))

| alter
        action = if(vendor_status = "Failed", "failure", action),
        app = if(host contains "amptruasd", "Trust1-NonProd", app),
        status = if(vendor_status = "Failed", "400", status),
		    logon_time_epoch = to_epoch(logon_time_object)
| alter
		    action = if(action = "", "error", action),
        app = if(app = "", "Trust1", app),
        status = if(status = "", "401", status),
        user = src_user;

[INGEST:vendor="Trellix", product="ETP", target_dataset="trellix_etp_raw", no_hit=keep]
alter
multipleFields = regexcapture(_raw_log,"CEF\:\d\|(?P<cef_dvendor>[^\|]+)\|(?P<cef_dproduct>[^\|]+)\|(?P<cef_dversion>[^\|]+)\|(?P<cef_sid>[^\|]+)\|(?P<cef_name>[^\|]+)\|(?P<cef_severity>[^\|]+)\|")
| alter
cef_dvendor = multipleFields -> cef_dvendor,
cef_dproduct = multipleFields -> cef_dproduct,
cef_dversion = multipleFields -> cef_dversion,
cef_sid = multipleFields -> cef_sid,
cef_name = multipleFields -> cef_name,
cef_severity = multipleFields -> cef_severity 
| alter
category = cef_name,
vendor_product = if(cef_dproduct="MPS","Web MPS",cef_dproduct="eMPS","Email MPS",cef_dproduct="MPS","fMPS",cef_dproduct="MAS","MAS",cef_dproduct="CMS","CMS",cef_dproduct="mso","HX",cef_dproduct="hx","HX",cef_dproduct="ETP","ETP"),
sig_name = msg,
signature = malfename,
subject = emailsubj,
malware_url = request,
host = dvc,
dest = dvc,
severity = if(cef_severity=1 or cef_severity=2 or cef_severity=3,"minr",cef_severity=4 or cef_severity=5 or cef_severity=6,"majr",cef_severity=7 or cef_severity=8 or cef_severity=9 or cef_severity=10,"critical") ;

[INGEST:vendor="ntbs", product="ntbs", target_dataset="ntbs_ntbs_raw", no_hit=keep] 
alter 
Level = to_json_string(_raw_log) -> Level,
dd_service = to_json_string(_raw_log) -> Properties.dd_service,
dd_version = to_json_string(_raw_log) -> Properties.dd_version,
dd_env = to_json_string(_raw_log) -> Properties.dd_env,
Method = to_json_string(_raw_log) -> Properties.Method,
HttpMethod = to_json_string(_raw_log) ->Properties.HttpMethod,
Duration = to_json_string(_raw_log) -> Properties.Duration,
HttpPath = to_json_string(_raw_log) ->Properties.HttpPath,
HttpStatusCode =to_json_string(_raw_log) -> Properties.HttpStatusCode,
MessageBody = to_json_string(_raw_log) ->Properties.MessageBody,
MessageBodyType = to_json_string(_raw_log) ->Properties.MessageBodyType,
Uri = to_json_string(_raw_log) ->Properties.Uri,
LogEntryCorrelationId = to_json_string(_raw_log) ->Properties.LogEntryCorrelationId
| alter
message_json = to_json_string(replace(MessageBody,"\\"","\""))
| alter
expiry_date = arrayindex(regextract(_raw_log ,"ExpiryDate\\\\\\\":\\\\\\\"(.*?)\\\\\\\""),0),
login_date = arrayindex(regextract(_raw_log ,"LoginDate\\\\\\\":\\\\\\\"(.*?)\\\\\\\""),0),
login_entity_ref = arrayindex(regextract(_raw_log ,"LoginEntityRef\\\\\\\":(.*?),"),0),
c = arrayindex(regextract(_raw_log ,"SessionKey\\\\\\\":(.*?),"),0),
session_ref = arrayindex(regextract(_raw_log ,"SessionRef\\\\\\\":(.*?),"),0),
team_ref = arrayindex(regextract(_raw_log ,"TeamRef\\\\\\\":(.*?),"),0),
user_id = arrayindex(regextract(_raw_log ,"UserId\\\\\\\":\\\\\\\"(.*?)\\\\\\\""),0),
user = arrayindex(regextract(_raw_log ,"UserName\\\\\\\":\\\\\\\"(.*?)\\\\\\\""),0),
dvc = arrayindex(regextract(_raw_log ,"WorkstationId\\\\\\\":\\\\\\\"(.*?)\\\\\\\""),0)
//other = arrayindex(regexcapture(_raw_log,"The login failed.\\r\\n(?<auth_message>.*?) \'AU\\\\(?<user>.*?)\'.*?\: (?<db_message>.*?) \\\"(?<instance_name>.*?)\\\""))
;

[INGEST:vendor="msft", product="Graph Security Alerts", target_dataset="msft_graph_security_alerts_raw"]
alter evidence_microsoft_graph_security_deviceEvidence = arrayindex(arrayfilter(json_extract_array(to_json_string(evidence),"$"),"@element" contains "#microsoft.graph.security.deviceEvidence"),0)
| alter device_evidence_createdDateTime = evidence_microsoft_graph_security_deviceEvidence -> ["createdDateTime"]
| alter device_evidence_verdict = evidence_microsoft_graph_security_deviceEvidence -> ["verdict"]
| alter device_evidence_remediationStatus = evidence_microsoft_graph_security_deviceEvidence -> ["remediationStatus"]
| alter device_evidence_roles = evidence_microsoft_graph_security_deviceEvidence -> roles[]
| alter device_evidence_detailedRoles = evidence_microsoft_graph_security_deviceEvidence -> detailedRoles[]
| alter device_evidence_tags = evidence_microsoft_graph_security_deviceEvidence -> tags[]
| alter device_evidence_firstSeenDateTime = evidence_microsoft_graph_security_deviceEvidence -> ["firstSeenDateTime"]
| alter device_evidence_mdeDeviceId = evidence_microsoft_graph_security_deviceEvidence -> ["mdeDeviceId"]
| alter device_evidence_azureAdDeviceId = evidence_microsoft_graph_security_deviceEvidence -> ["azureAdDeviceId"]
| alter device_evidence_deviceDnsName = evidence_microsoft_graph_security_deviceEvidence -> ["deviceDnsName"]
| alter device_evidence_osPlatform = evidence_microsoft_graph_security_deviceEvidence -> ["osPlatform"]
| alter device_evidence_osBuild = evidence_microsoft_graph_security_deviceEvidence -> osBuild
| alter device_evidence_version = evidence_microsoft_graph_security_deviceEvidence -> ["version"]
| alter device_evidence_healthStatus = evidence_microsoft_graph_security_deviceEvidence -> ["healthStatus"]
| alter device_evidence_riskScore = evidence_microsoft_graph_security_deviceEvidence -> ["riskScore"]
| alter device_evidence_rbacGroupId = evidence_microsoft_graph_security_deviceEvidence -> rbacGroupId
| alter device_evidence_rbacGroupName = evidence_microsoft_graph_security_deviceEvidence -> ["rbacGroupName"]
| alter device_evidence_onboardingStatus = evidence_microsoft_graph_security_deviceEvidence -> ["onboardingStatus"]
| alter device_evidence_defenderAvStatus = evidence_microsoft_graph_security_deviceEvidence -> ["defenderAvStatus"]
| alter device_evidence_lastIpAddress = evidence_microsoft_graph_security_deviceEvidence -> ["lastIpAddress"]
| alter device_evidence_lastExternalIpAddress = evidence_microsoft_graph_security_deviceEvidence -> ["lastExternalIpAddress"]
| alter device_evidence_ipInterfaces = evidence_microsoft_graph_security_deviceEvidence -> ipInterfaces[]
| alter device_evidence_loggedOnUsers = evidence_microsoft_graph_security_deviceEvidence -> loggedOnUsers[]
| alter evidence_microsoft_graph_security_userEvidence = arrayindex(arrayfilter(json_extract_array(to_json_string(evidence),"$"),"@element" contains "#microsoft.graph.security.userEvidence"),0)
| alter user_evidence_createdDateTime = evidence_microsoft_graph_security_userEvidence -> ["createdDateTime"]
| alter user_evidence_verdict = evidence_microsoft_graph_security_userEvidence -> ["verdict"]
| alter user_evidence_remediationStatus = evidence_microsoft_graph_security_userEvidence -> ["remediationStatus"]
| alter user_evidence_roles = evidence_microsoft_graph_security_userEvidence -> roles[]
| alter user_evidence_detailedRoles = evidence_microsoft_graph_security_userEvidence -> detailedRoles[]
| alter user_evidence_tags = evidence_microsoft_graph_security_userEvidence -> tags[]
| alter user_evidence_userAccount = evidence_microsoft_graph_security_userEvidence -> userAccount{}
| alter user_evidence_userAccount_accountName = evidence_userAccount -> accountName
| alter user_evidence_userAccount_domainName = evidence_userAccount -> domainName
| alter user_evidence_userAccount_userSid = evidence_userAccount -> userSid
| alter user_evidence_userAccount_azureAdUserId = evidence_userAccount -> azureAdUserId
| alter user_evidence_userAccount_userPrincipalName = evidence_userAccount -> userPrincipalName
| alter file_evidence_microsoft_graph_security_fileEvidence = arrayindex(arrayfilter(json_extract_array(to_json_string(evidence),"$"),"@element" contains "#microsoft.graph.security.fileEvidence"),0)
| alter file_evidence_createdDateTime = evidence_microsoft_graph_security_fileEvidence -> ["createdDateTime"]
| alter file_evidence_verdict = evidence_microsoft_graph_security_fileEvidence -> ["verdict"]
| alter file_evidence_remediationStatus = evidence_microsoft_graph_security_fileEvidence -> ["remediationStatus"]
| alter file_evidence_roles = evidence_microsoft_graph_security_fileEvidence -> roles[]
| alter file_evidence_detailedRoles = evidence_microsoft_graph_security_fileEvidence -> detailedRoles[]
| alter file_evidence_tags = evidence_microsoft_graph_security_fileEvidence -> tags[]
| alter file_evidence_detectionStatus = evidence_microsoft_graph_security_fileEvidence -> ["detectionStatus"]
| alter file_evidence_mdeDeviceId = evidence_microsoft_graph_security_fileEvidence -> ["mdeDeviceId"]
| alter file_evidence_fileDetails = evidence_microsoft_graph_security_fileEvidence -> fileDetails{}
| alter file_evidence_fileDetails_sha1 = evidence_fileDetails -> sha1
| alter file_evidence_fileDetails_sha256 = evidence_fileDetails -> sha256
| alter file_evidence_fileDetails_fileName = evidence_fileDetails -> fileName
| alter file_evidence_fileDetails_filePath = evidence_fileDetails -> filePath
| alter file_evidence_fileDetails_fileSize = evidence_fileDetails -> fileSize
| alter url_evidence_microsoft_graph_security_urlEvidence = arrayindex(arrayfilter(json_extract_array(to_json_string(evidence),"$"),"@element" contains "#microsoft.graph.security.urlEvidence"),0)
| alter url_evidence_createdDateTime = evidence_microsoft_graph_security_urlEvidence -> ["createdDateTime"]
| alter url_evidence_verdict = evidence_microsoft_graph_security_urlEvidence -> ["verdict"]
| alter url_evidence_remediationStatus = evidence_microsoft_graph_security_urlEvidence -> ["remediationStatus"]
| alter url_evidence_roles = evidence_microsoft_graph_security_urlEvidence -> roles[]
| alter url_evidence_detailedRoles = evidence_microsoft_graph_security_urlEvidence -> detailedRoles[]
| alter url_evidence_tags = evidence_microsoft_graph_security_urlEvidence -> tags[]
| alter url_evidence_url = evidence_microsoft_graph_security_urlEvidence -> ["url"]
| alter evidence_microsoft_graph_security_processEvidence = arrayindex(arrayfilter(json_extract_array(to_json_string(evidence),"$"),"@element" contains "#microsoft.graph.security.processEvidence"),0)
| alter process_evidence_createdDateTime = evidence_microsoft_graph_security_processEvidence -> ["createdDateTime"]
| alter process_evidence_verdict = evidence_microsoft_graph_security_processEvidence -> ["verdict"]
| alter process_evidence_remediationStatus = evidence_microsoft_graph_security_processEvidence -> ["remediationStatus"]
| alter process_evidence_roles = evidence_microsoft_graph_security_processEvidence -> roles[]
| alter process_evidence_detailedRoles = evidence_microsoft_graph_security_processEvidence -> detailedRoles[]
| alter process_evidence_tags = evidence_microsoft_graph_security_processEvidence -> tags[]
| alter process_evidence_processId = evidence_microsoft_graph_security_processEvidence -> processId
| alter process_evidence_parentProcessId = evidence_microsoft_graph_security_processEvidence -> parentProcessId
| alter process_evidence_processCommandLine = evidence_microsoft_graph_security_processEvidence -> ["processCommandLine"]
| alter process_evidence_processCreationDateTime = evidence_microsoft_graph_security_processEvidence -> ["processCreationDateTime"]
| alter process_evidence_parentProcessCreationDateTime = evidence_microsoft_graph_security_processEvidence -> ["parentProcessCreationDateTime"]
| alter process_evidence_detectionStatus = evidence_microsoft_graph_security_processEvidence -> ["detectionStatus"]
| alter process_evidence_mdeDeviceId = evidence_microsoft_graph_security_processEvidence -> ["mdeDeviceId"]
| alter process_evidence_imageFile = evidence_microsoft_graph_security_processEvidence -> imageFile{}
| alter process_evidence_imageFile_sha1 = evidence_imageFile -> sha1
| alter process_evidence_imageFile_sha256 = evidence_imageFile -> sha256
| alter process_evidence_imageFile_fileName = evidence_imageFile -> fileName
| alter process_evidence_imageFile_filePath = evidence_imageFile -> filePath
| alter process_evidence_imageFile_fileSize = evidence_imageFile -> fileSize
| alter process_evidence_imageFile_filePublisher = evidence_imageFile -> filePublisher
| alter process_evidence_parentProcessImageFile = evidence_microsoft_graph_security_processEvidence -> parentProcessImageFile{}
| alter process_evidence_parentProcessImageFile_fileName = evidence_parentProcessImageFile -> fileName
| alter process_evidence_parentProcessImageFile_filePath = evidence_parentProcessImageFile -> filePath
| alter process_evidence_parentProcessImageFile_fileSize = evidence_parentProcessImageFile -> fileSize
| alter process_evidence_parentProcessImageFile_filePublisher = evidence_parentProcessImageFile -> filePublisher
| alter process_evidence_userAccount = evidence_microsoft_graph_security_processEvidence -> userAccount{}
| alter user_evidence_userAccount_accountName = evidence_userAccount -> accountName
| alter user_evidence_userAccount_domainName = evidence_userAccount -> domainName
| alter user_evidence_userAccount_userSid = evidence_userAccount -> userSid
| alter user_evidence_userAccount_azureAdUserId = evidence_userAccount -> azureAdUserId
| alter user_evidence_userAccount_userPrincipalName = evidence_userAccount -> userPrincipalName
;

[INGEST:vendor="ibm", product="security_verify", target_dataset="ibm_security_verify_raw", no_hit=drop]
filter event_type = "authentication"
| alter 
    action = json_extract_scalar(data, "$.action"),
    authdevice = json_extract_scalar(data, "$.authdevice"),
    authenticatorattachment = json_extract_scalar(data, "$.authenticatorattachment"),
    authmethod = json_extract_scalar(data, "$.authmethod"),
    cause = json_extract_scalar(data, "$.cause"),
    devicetype = json_extract_scalar(data, "$.devicetype"),
    fido2_authenticatordata = json_extract_scalar(data, "$.fido2_authenticatordata"),
    fido2_clientdatajson = json_extract_scalar(data, "$.fido2_clientdatajson"),
    fido2_credentialid = json_extract_scalar(data, "$.fido2_credentialid"),
    fido2_publickey = json_extract_scalar(data, "$.fido2_publickey"),
    fido2_relyingparty = json_extract_scalar(data, "$.fido2_relyingparty"),
    fido2_signature = json_extract_scalar(data, "$.fido2_signature"),
    origin = json_extract_scalar(data, "$.origin"),
    realm = json_extract_scalar(data, "$.realm"),
    result = json_extract_scalar(data, "$.result"),
    sourcetype = json_extract_scalar(data, "$.sourcetype"),
    subject = json_extract_scalar(data, "$.subject"),
    subtype = json_extract_scalar(data, "$.subtype"),
    targetid = json_extract_scalar(data, "$.targetid"),
    username = json_extract_scalar(data, "$.username");

filter event_type = "sso"
| alter 
    applicationid = json_extract_scalar(data, "$.applicationid"),
    applicationname = json_extract_scalar(data, "$.applicationname"),
    applicationtype = json_extract_scalar(data, "$.applicationtype"),
    at_hash = json_extract_scalar(data, "$.at_hash"),
    cause = json_extract_scalar(data, "$.cause"),
    client_id = json_extract_scalar(data, "$.client_id"),
    client_name = json_extract_scalar(data, "$.client_name"),
    client_type = json_extract_scalar(data, "$.client_type"),
    devicetype = json_extract_scalar(data, "$.devicetype"),
    grant_id = json_extract_scalar(data, "$.grant_id"),
    grant_type = json_extract_scalar(data, "$.grant_type"),
    id_token = json_extract_scalar(data, "$.id_token"),
    origin = json_extract_scalar(data, "$.origin"),
    realm = json_extract_scalar(data, "$.realm"),
    redirecturl = json_extract_scalar(data, "$.redirecturl"),
    result = json_extract_scalar(data, "$.result"),
    scope = json_extract_scalar(data, "$.scope"),
    sessionid = json_extract_scalar(data, "$.sessionid"),
    subtype = json_extract_scalar(data, "$.subtype"),
    uasessionid = json_extract_scalar(data, "$.uasessionid"),
    userid = json_extract_scalar(data, "$.userid"),
    username = json_extract_scalar(data, "$.username");

filter event_type = "token"
| alter
    access_token_type = json_extract_scalar(data, "$.access_token_type"),
    action = json_extract_scalar(data, "$.action"),
    applicationid = json_extract_scalar(data, "$.applicationid"),
    applicationname = json_extract_scalar(data, "$.applicationname"),
    applicationtype = json_extract_scalar(data, "$.applicationtype"),
    at_hash = json_extract_scalar(data, "$.at_hash"),
    client_id = json_extract_scalar(data, "$.client_id"),
    client_name = json_extract_scalar(data, "$.client_name"),
    client_category = json_extract_scalar(data, "$.client_category"),
    devicetype = json_extract_scalar(data, "$.devicetype"),
    grant_id = json_extract_scalar(data, "$.grant_id"),
    grant_type = json_extract_scalar(data, "$.grant_type"),
    origin = json_extract_scalar(data, "$.origin"),
    result = json_extract_scalar(data, "$.result"),
    scope = json_extract_scalar(data, "$.scope"),
    token_lifetime = json_extract_scalar(data, "$.token_lifetime"),
    token_type = json_extract_scalar(data, "$.token_type");

filter event_type = "management"
| alter
    action = json_extract_scalar(data, "$.action"),
    api_grant_type = json_extract_scalar(data, "$.api_grant_type"),
    cause = json_extract_scalar(data, "$.cause"),
    devicetype = json_extract_scalar(data, "$.devicetype"),
    json = json_extract_scalar(data, "$.json"),
    location = json_extract_scalar(data, "$.location"),
    messageid = json_extract_scalar(data, "$.messageid"),
    modified = json_extract_scalar(data, "$.modified"),
    performedby = json_extract_scalar(data, "$.performedby"),
    performedby_type = json_extract_scalar(data, "$.performedby_type"),
    realm = json_extract_scalar(data, "$.realm"),
    resource = json_extract_scalar(data, "$.resource"),
    result = json_extract_scalar(data, "$.result"),
    self = json_extract_scalar(data, "$.self"),
    targetname = json_extract_scalar(data, "$.target"),
    targetid = json_extract_scalar(data, "$.targetid"),
    targetid_realm = json_extract_scalar(data, "$.targetid_realm"),
    targetid_username = json_extract_scalar(data, "$.targetid_username"),
    userinfo_lookup = json_extract_scalar(data, "$.userinfo_lookup");

[INGEST:vendor="cloudflare", product="dns", target_dataset="cloudflare_dns_raw"]
alter _time = When ;

[INGEST:vendor="ibm", product="security_verify_np", target_dataset="ibm_security_verify_np_raw", no_hit=drop]
filter event_type = "authentication"
| alter 
    action = json_extract_scalar(data, "$.action"),
    authdevice = json_extract_scalar(data, "$.authdevice"),
    authenticatorattachment = json_extract_scalar(data, "$.authenticatorattachment"),
    authmethod = json_extract_scalar(data, "$.authmethod"),
    cause = json_extract_scalar(data, "$.cause"),
    devicetype = json_extract_scalar(data, "$.devicetype"),
    fido2_authenticatordata = json_extract_scalar(data, "$.fido2_authenticatordata"),
    fido2_clientdatajson = json_extract_scalar(data, "$.fido2_clientdatajson"),
    fido2_credentialid = json_extract_scalar(data, "$.fido2_credentialid"),
    fido2_publickey = json_extract_scalar(data, "$.fido2_publickey"),
    fido2_relyingparty = json_extract_scalar(data, "$.fido2_relyingparty"),
    fido2_signature = json_extract_scalar(data, "$.fido2_signature"),
    origin = json_extract_scalar(data, "$.origin"),
    realm = json_extract_scalar(data, "$.realm"),
    result = json_extract_scalar(data, "$.result"),
    sourcetype = json_extract_scalar(data, "$.sourcetype"),
    subject = json_extract_scalar(data, "$.subject"),
    subtype = json_extract_scalar(data, "$.subtype"),
    targetid = json_extract_scalar(data, "$.targetid"),
    username = json_extract_scalar(data, "$.username");

filter event_type = "sso"
| alter 
    applicationid = json_extract_scalar(data, "$.applicationid"),
    applicationname = json_extract_scalar(data, "$.applicationname"),
    applicationtype = json_extract_scalar(data, "$.applicationtype"),
    at_hash = json_extract_scalar(data, "$.at_hash"),
    cause = json_extract_scalar(data, "$.cause"),
    client_id = json_extract_scalar(data, "$.client_id"),
    client_name = json_extract_scalar(data, "$.client_name"),
    client_type = json_extract_scalar(data, "$.client_type"),
    devicetype = json_extract_scalar(data, "$.devicetype"),
    grant_id = json_extract_scalar(data, "$.grant_id"),
    grant_type = json_extract_scalar(data, "$.grant_type"),
    id_token = json_extract_scalar(data, "$.id_token"),
    origin = json_extract_scalar(data, "$.origin"),
    realm = json_extract_scalar(data, "$.realm"),
    redirecturl = json_extract_scalar(data, "$.redirecturl"),
    result = json_extract_scalar(data, "$.result"),
    scope = json_extract_scalar(data, "$.scope"),
    sessionid = json_extract_scalar(data, "$.sessionid"),
    subtype = json_extract_scalar(data, "$.subtype"),
    uasessionid = json_extract_scalar(data, "$.uasessionid"),
    userid = json_extract_scalar(data, "$.userid"),
    username = json_extract_scalar(data, "$.username");

filter event_type = "token"
| alter
    access_token_type = json_extract_scalar(data, "$.access_token_type"),
    action = json_extract_scalar(data, "$.action"),
    applicationid = json_extract_scalar(data, "$.applicationid"),
    applicationname = json_extract_scalar(data, "$.applicationname"),
    applicationtype = json_extract_scalar(data, "$.applicationtype"),
    at_hash = json_extract_scalar(data, "$.at_hash"),
    client_id = json_extract_scalar(data, "$.client_id"),
    client_name = json_extract_scalar(data, "$.client_name"),
    client_category = json_extract_scalar(data, "$.client_category"),
    devicetype = json_extract_scalar(data, "$.devicetype"),
    grant_id = json_extract_scalar(data, "$.grant_id"),
    grant_type = json_extract_scalar(data, "$.grant_type"),
    origin = json_extract_scalar(data, "$.origin"),
    result = json_extract_scalar(data, "$.result"),
    scope = json_extract_scalar(data, "$.scope"),
    token_lifetime = json_extract_scalar(data, "$.token_lifetime"),
    token_type = json_extract_scalar(data, "$.token_type");

filter event_type = "management"
| alter
    action = json_extract_scalar(data, "$.action"),
    api_grant_type = json_extract_scalar(data, "$.api_grant_type"),
    cause = json_extract_scalar(data, "$.cause"),
    devicetype = json_extract_scalar(data, "$.devicetype"),
    json = json_extract_scalar(data, "$.json"),
    location = json_extract_scalar(data, "$.location"),
    messageid = json_extract_scalar(data, "$.messageid"),
    modified = json_extract_scalar(data, "$.modified"),
    performedby = json_extract_scalar(data, "$.performedby"),
    performedby_type = json_extract_scalar(data, "$.performedby_type"),
    realm = json_extract_scalar(data, "$.realm"),
    resource = json_extract_scalar(data, "$.resource"),
    result = json_extract_scalar(data, "$.result"),
    self = json_extract_scalar(data, "$.self"),
    targetname = json_extract_scalar(data, "$.target"),
    targetid = json_extract_scalar(data, "$.targetid"),
    targetid_realm = json_extract_scalar(data, "$.targetid_realm"),
    targetid_username = json_extract_scalar(data, "$.targetid_username"),
    userinfo_lookup = json_extract_scalar(data, "$.userinfo_lookup");