Field Name	Parse statement	Description	Sample value from Log
logsubtype	"WAF",	
fileId	arrayindex(regextract(_raw_log, "fileId=([^\s]+)"),0)	
log_type	arrayindex(split(_raw_log,"|"),4)	
cefVersion	arrayindex(regextract(_raw_log, "CEF:(\d)"),0)	
cefSeverity	arrayindex(split(_raw_log,"|"),6)	
vendorsubtype	arrayindex(split(_raw_log,"|"),1)	
productsubtype	arrayindex(split(_raw_log,"|"),2)	
deviceVersion	arrayindex(split(_raw_log,"|"),3)	
cefSignature	arrayindex(split(_raw_log,"|"),4)	
cefName	arrayindex(split(_raw_log,"|"),5)	
sourceServiceName	arrayindex(regextract(_raw_log, "sourceServiceName=([^\s]+)"),0)	
siteid	arrayindex(regextract(_raw_log, "siteid=([^\s]+)"),0)	
suid	arrayindex(regextract(_raw_log, "suid=([^\s]+)"),0)	
requestClientApplication	arrayindex(regextract(_raw_log, "requestClientApplication=([^\=]+)\s"),0)	
deviceFacility	arrayindex(regextract(_raw_log, "deviceFacility=([^\s]+)"),0)	
CapSupport	arrayindex(regextract(_raw_log, "cs1=([^\s]+)"),0)	
JavascriptSupport	arrayindex(regextract(_raw_log, "cs2=([^\s]+)"),0)	
COSupport	arrayindex(regextract(_raw_log, "cs3=([^\s]+)"),0)	
VID	arrayindex(regextract(_raw_log, "cs4=([^\s]+)"),0)	
clappsig	arrayindex(regextract(_raw_log, "cs5=([^\s]+)"),0)	
clapp	arrayindex(regextract(_raw_log, "cs6=([^\s]+)"),0)	
ccode	arrayindex(regextract(_raw_log, "ccode=([^\=]+)\s"),0)	
cicode	arrayindex(regextract(_raw_log, "cicode=([^\=]+)\s"),0)	
latitude	arrayindex(regextract(_raw_log, "cs7=([^\s]+)"),0)	
longitude	arrayindex(regextract(_raw_log, "cs8=([^\s]+)"),0)	
cs9	arrayindex(regextract(_raw_log, "cs9=([^\s]+)"),0)	
cs9Label	arrayindex(regextract(_raw_log, "cs9Label=([^\=]+)\s"),0)	
RuleInfo	arrayindex(regextract(_raw_log, "cs10=([^\s]+)"),0)	
Customer	arrayindex(regextract(_raw_log, "Customer=([^\=]+)\s"),0)	
start	to_timestamp(to_integer(arrayindex(regextract(_raw_log, "start=([^\=]+)\s"),0)),"MILLIS")	
ref	arrayindex(regextract(_raw_log, "ref=([^\=]+)\s"),0)	
dproc	arrayindex(regextract(_raw_log, "dproc=([^\=]+)\s"),0)	
ver	arrayindex(regextract(_raw_log, "ver=([^\=]+)\s"),0)	
request	arrayindex(regextract(_raw_log, "request=([^\=]+)\s"),0)	
requestMethod	arrayindex(regextract(_raw_log, "requestMethod=([^\=]+)\s"),0)	
cn1	arrayindex(regextract(_raw_log, "cn1=([^\=]+)\s"),0)	
app	arrayindex(regextract(_raw_log, "app=([^\=]+)\s"),0)	
act	arrayindex(regextract(_raw_log, "act=([^\=]+)\s"),0)	
deviceExternalId	arrayindex(regextract(_raw_log, "deviceExternalId=([^\=]+)\s"),0)	
sip	arrayindex(regextract(_raw_log, "sip=([^\=]+)\s"),0)	
spt	arrayindex(regextract(_raw_log, "spt=([^\=]+)\s"),0)	
bytes_in	arrayindex(regextract(_raw_log, "in=([^\=]+)\s"),0)	
xff	arrayindex(regextract(_raw_log, "xff=([^\=]+)\s"),0)	
cpt	arrayindex(regextract(_raw_log, "cpt=([^\=]+)\s"),0)	
src	arrayindex(regextract(_raw_log, "src=([^\=]+)\s"),0)	
end	to_timestamp(to_integer(arrayindex(regextract(_raw_log, "end=([^\=]+)\s"),0)),"MILLIS")	
user	if(user!=null, user, 1=1, "unknown")	
_time	if(end != null, end, _insert_time	
action	if (act in ("REQ_CACHED_FRESH","REQ_CACHED_VALIDATED","REQ_CHALLENGE_CAPTCHA","REQ_CHALLENGE_COOKIE_RETRY","REQ_CHALLENGE_JAVASCRIPT","REQ_PASSED"),"allowed", act in ("REQ_BAD_SERVER_CLOSED_CONNECTION","REQ_BLOCKED_ACL","REQ_BLOCKED_COOKIELESS_SESSION","REQ_BLOCKED_SECURITY","REQ_BLOCKED_SESSION","REQ_BLOCKED_VISITOR"),"blocked",act in ("REQ_BAD_CLIENT_CLOSED_CONNECTION","REQ_BAD_PARSE_ERROR"),"dropped", act in ("REQ_BAD_RESP_CLIENT_STALLED","REQ_BAD_RESP_SERVER_STALLED","REQ_BAD_TIMEOUT_CONNECTION_TO_SERVER"),"timeout","")	
status	cn1	
http_method	requestMethod	
dest	sourceServiceName	
user	if(user!=null, user, 1=1, "unknown"	
logsubtype	"Analytics",	
alert_name	arrayindex(split(_raw_log,"|"),5)	
log_type	arrayindex(split(_raw_log,"|"),4)	
cefVersion	arrayindex(regextract(_raw_log, "CEF:(\d)"),0)	
cefSeverity	arrayindex(split(_raw_log,"|"),6)	
vendorsubtype	arrayindex(split(_raw_log,"|"),1)	
productsubtype	arrayindex(split(_raw_log,"|"),2)	
deviceVersion	arrayindex(split(_raw_log,"|"),3)	
cefSignature	arrayindex(split(_raw_log,"|"),4)	
cefName	arrayindex(split(_raw_log,"|"),5)	
msg	arrayindex(regextract(_raw_log, "msg=([^=]+)"),0)	
fileId	arrayindex(regextract(_raw_log, "fileId=([^\s]+)"),0)	
dhost	arrayindex(regextract(_raw_log, "dhost=([^\=]+)\s"),0)	
request	arrayindex(regextract(_raw_log, "request=([^\=]+)\s"),0)	
requestClientApplication	arrayindex(regextract(_raw_log, "requestClientApplication=([^\=]+)\s"),0)	
deviceFacility	arrayindex(regextract(_raw_log, "deviceFacility=([^\s]+)"),0)	
ImpervaAANumberOfEvents	arrayindex(regextract(_raw_log, "cs1=([^\s]+)"),0)	
ImpervaAAPercentBlocked	arrayindex(regextract(_raw_log, "cs2=([^\s]+)"),0)	
ImpervaAACountry	arrayindex(regextract(_raw_log, "cs3=(.+?)\scs3Label"), 0)	
ImpervaAAPlatform	arrayindex(regextract(_raw_log, "cs4=([^\s]+)"),0)	
ImpervaAADominantIps	arrayindex(regextract(_raw_log, "cs5=([^\s]+)"),0)	
ImpervaAASampleEvents	arrayindex(regextract(_raw_log, "cs6=([^\s]+)"),0)	
ImpervaAAAttackType	arrayindex(regextract(_raw_log, "cs7=(.+?)\scs7Label"), 0)	
ImpervaAADominantSiteIds	arrayindex(regextract(_raw_log, "cs8=([^\s]+)"),0)	
ImpervaAACves	arrayindex(regextract(_raw_log, "cs9=([^\s]+)"),0)	
start	to_timestamp(to_integer(arrayindex(regextract(_raw_log, "start=([^\=]+)\s"),0)),"MILLIS")	
dproc	arrayindex(regextract(_raw_log, "dproc=([^\=]+)\s"),0)	
requestMethod	arrayindex(regextract(_raw_log, "requestMethod=([^\=]+)\s"),0)	
cn1	arrayindex(regextract(_raw_log, "cn1=([^\=]+)\s"),0)	
app	arrayindex(regextract(_raw_log, "app=([^\=]+)\s"),0)	
src	arrayindex(regextract(_raw_log, "src=([^\=]+)\s"),0)	
end	to_timestamp(to_integer(arrayindex(regextract(_raw_log, "end=([^\=]+)\s"),0)),"MILLIS")	
_time	if(end != null, end, _insert_time)	
action	if(to_number(ImpervaAAPercentBlocked) = 100, "blocked", "not blocked"	
logsubtype	"audit"	
account_id	json_extract(_raw_log, "$.imperva.ids.account_id")	
account_name	json_extract(_raw_log, "$.imperva.ids.account_name")	
site_id	json_extract(_raw_log, "$.imperva.ids.site_id")	
event_message	json_extract(_raw_log, "$.message")	
timestamp	json_extract(_raw_log, "$.@timestamp")	
event_action	json_extract(_raw_log, "$.imperva.audit_trail.event_action")	
event_details	json_extract(_raw_log, "$.imperva.audit_trail")	
user_email	json_extract(_raw_log, "$.user.email")	
